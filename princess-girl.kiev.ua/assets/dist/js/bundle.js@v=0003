/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _inputmask = __webpack_require__(1);
	
	var _inputmask2 = _interopRequireDefault(_inputmask);
	
	var _reviewsSlider = __webpack_require__(10);
	
	var _reviewsSlider2 = _interopRequireDefault(_reviewsSlider);
	
	var _anketForm = __webpack_require__(12);
	
	var _anketForm2 = _interopRequireDefault(_anketForm);
	
	var _attachPhotos = __webpack_require__(16);
	
	var _attachPhotos2 = _interopRequireDefault(_attachPhotos);
	
	var _modelsCards = __webpack_require__(17);
	
	var _modelsCards2 = _interopRequireDefault(_modelsCards);
	
	var _modelsCardsAdmin = __webpack_require__(18);
	
	var _modelsCardsAdmin2 = _interopRequireDefault(_modelsCardsAdmin);
	
	var _photoGallery = __webpack_require__(22);
	
	var _photoGallery2 = _interopRequireDefault(_photoGallery);
	
	var _orderForm = __webpack_require__(23);
	
	var _orderForm2 = _interopRequireDefault(_orderForm);
	
	var _flashMsgs = __webpack_require__(30);
	
	var _flashMsgs2 = _interopRequireDefault(_flashMsgs);
	
	var _callOrder = __webpack_require__(31);
	
	var _callOrder2 = _interopRequireDefault(_callOrder);
	
	var _servicesAdmin = __webpack_require__(32);
	
	var _servicesAdmin2 = _interopRequireDefault(_servicesAdmin);
	
	var _mainScreen = __webpack_require__(33);
	
	var _mainScreen2 = _interopRequireDefault(_mainScreen);
	
	var _animations = __webpack_require__(34);
	
	var _animations2 = _interopRequireDefault(_animations);
	
	var _subscription = __webpack_require__(36);
	
	var _subscription2 = _interopRequireDefault(_subscription);
	
	var _reviewsForm = __webpack_require__(40);
	
	var _reviewsForm2 = _interopRequireDefault(_reviewsForm);
	
	var _helpers = __webpack_require__(14);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	window.onload = function () {
	
		(0, _inputmask2.default)({ mask: "+7 999 999-99-99" }).mask(document.querySelectorAll('input[name=phone]'));
	
		(0, _mainScreen2.default)();
		(0, _reviewsSlider2.default)();
		(0, _anketForm2.default)();
		(0, _attachPhotos2.default)();
		(0, _modelsCards2.default)();
		(0, _photoGallery2.default)();
		(0, _flashMsgs2.default)();
		var OrderForm = (0, _orderForm2.default)();
		var CallOrder = (0, _callOrder2.default)();
		var ReviewsForm = (0, _reviewsForm2.default)();
		(0, _modelsCardsAdmin2.default)();
		(0, _servicesAdmin2.default)();
		(0, _animations2.default)();
		(0, _subscription2.default)();
	
		// Escape key trigger
		document.onkeydown = function (evt) {
			evt = evt || window.event;
			var isEscape = false;
			if ("key" in evt) {
				isEscape = evt.key == "Escape" || evt.key == "Esc";
			} else {
				isEscape = evt.keyCode == 27;
			}
	
			if (isEscape) {
				OrderForm.hidOrderModal();
				CallOrder.hideModal();
			}
		};
	};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	__webpack_require__(7);
	__webpack_require__(8);
	__webpack_require__(9);
	
	// require("./dist/inputmask/phone-codes/phone-be");
	// require("./dist/inputmask/phone-codes/phone-nl");
	// require("./dist/inputmask/phone-codes/phone-ru");
	// require("./dist/inputmask/phone-codes/phone-uk");
	// require("./dist/inputmask/phone-codes/phone");
	
	module.exports = __webpack_require__(6);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	* inputmask.date.extensions.js
	* https://github.com/RobinHerbots/Inputmask
	* Copyright (c) 2010 - 2017 Robin Herbots
	* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
	* Version: 3.3.7
	*/
	
	!function(factory) {
	     true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(3), __webpack_require__(6) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == typeof exports ? module.exports = factory(require("./dependencyLibs/inputmask.dependencyLib"), require("./inputmask")) : factory(window.dependencyLib || jQuery, window.Inputmask);
	}(function($, Inputmask) {
	    function isLeapYear(year) {
	        return isNaN(year) || 29 === new Date(year, 2, 0).getDate();
	    }
	    return Inputmask.extendAliases({
	        "dd/mm/yyyy": {
	            mask: "1/2/y",
	            placeholder: "dd/mm/yyyy",
	            regex: {
	                val1pre: new RegExp("[0-3]"),
	                val1: new RegExp("0[1-9]|[12][0-9]|3[01]"),
	                val2pre: function(separator) {
	                    var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
	                    return new RegExp("((0[1-9]|[12][0-9]|3[01])" + escapedSeparator + "[01])");
	                },
	                val2: function(separator) {
	                    var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
	                    return new RegExp("((0[1-9]|[12][0-9])" + escapedSeparator + "(0[1-9]|1[012]))|(30" + escapedSeparator + "(0[13-9]|1[012]))|(31" + escapedSeparator + "(0[13578]|1[02]))");
	                }
	            },
	            leapday: "29/02/",
	            separator: "/",
	            yearrange: {
	                minyear: 1900,
	                maxyear: 2099
	            },
	            isInYearRange: function(chrs, minyear, maxyear) {
	                if (isNaN(chrs)) return !1;
	                var enteredyear = parseInt(chrs.concat(minyear.toString().slice(chrs.length))), enteredyear2 = parseInt(chrs.concat(maxyear.toString().slice(chrs.length)));
	                return !isNaN(enteredyear) && (minyear <= enteredyear && enteredyear <= maxyear) || !isNaN(enteredyear2) && (minyear <= enteredyear2 && enteredyear2 <= maxyear);
	            },
	            determinebaseyear: function(minyear, maxyear, hint) {
	                var currentyear = new Date().getFullYear();
	                if (minyear > currentyear) return minyear;
	                if (maxyear < currentyear) {
	                    for (var maxYearPrefix = maxyear.toString().slice(0, 2), maxYearPostfix = maxyear.toString().slice(2, 4); maxyear < maxYearPrefix + hint; ) maxYearPrefix--;
	                    var maxxYear = maxYearPrefix + maxYearPostfix;
	                    return minyear > maxxYear ? minyear : maxxYear;
	                }
	                if (minyear <= currentyear && currentyear <= maxyear) {
	                    for (var currentYearPrefix = currentyear.toString().slice(0, 2); maxyear < currentYearPrefix + hint; ) currentYearPrefix--;
	                    var currentYearAndHint = currentYearPrefix + hint;
	                    return currentYearAndHint < minyear ? minyear : currentYearAndHint;
	                }
	                return currentyear;
	            },
	            onKeyDown: function(e, buffer, caretPos, opts) {
	                var $input = $(this);
	                if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {
	                    var today = new Date();
	                    $input.val(today.getDate().toString() + (today.getMonth() + 1).toString() + today.getFullYear().toString()), 
	                    $input.trigger("setvalue");
	                }
	            },
	            getFrontValue: function(mask, buffer, opts) {
	                for (var start = 0, length = 0, i = 0; i < mask.length && "2" !== mask.charAt(i); i++) {
	                    var definition = opts.definitions[mask.charAt(i)];
	                    definition ? (start += length, length = definition.cardinality) : length++;
	                }
	                return buffer.join("").substr(start, length);
	            },
	            postValidation: function(buffer, currentResult, opts) {
	                var dayMonthValue, year, bufferStr = buffer.join("");
	                return 0 === opts.mask.indexOf("y") ? (year = bufferStr.substr(0, 4), dayMonthValue = bufferStr.substring(4, 10)) : (year = bufferStr.substring(6, 10), 
	                dayMonthValue = bufferStr.substr(0, 6)), currentResult && (dayMonthValue !== opts.leapday || isLeapYear(year));
	            },
	            definitions: {
	                "1": {
	                    validator: function(chrs, maskset, pos, strict, opts) {
	                        var isValid = opts.regex.val1.test(chrs);
	                        return strict || isValid || chrs.charAt(1) !== opts.separator && -1 === "-./".indexOf(chrs.charAt(1)) || !(isValid = opts.regex.val1.test("0" + chrs.charAt(0))) ? isValid : (maskset.buffer[pos - 1] = "0", 
	                        {
	                            refreshFromBuffer: {
	                                start: pos - 1,
	                                end: pos
	                            },
	                            pos: pos,
	                            c: chrs.charAt(0)
	                        });
	                    },
	                    cardinality: 2,
	                    prevalidator: [ {
	                        validator: function(chrs, maskset, pos, strict, opts) {
	                            var pchrs = chrs;
	                            isNaN(maskset.buffer[pos + 1]) || (pchrs += maskset.buffer[pos + 1]);
	                            var isValid = 1 === pchrs.length ? opts.regex.val1pre.test(pchrs) : opts.regex.val1.test(pchrs);
	                            if (!strict && !isValid) {
	                                if (isValid = opts.regex.val1.test(chrs + "0")) return maskset.buffer[pos] = chrs, 
	                                maskset.buffer[++pos] = "0", {
	                                    pos: pos,
	                                    c: "0"
	                                };
	                                if (isValid = opts.regex.val1.test("0" + chrs)) return maskset.buffer[pos] = "0", 
	                                pos++, {
	                                    pos: pos
	                                };
	                            }
	                            return isValid;
	                        },
	                        cardinality: 1
	                    } ]
	                },
	                "2": {
	                    validator: function(chrs, maskset, pos, strict, opts) {
	                        var frontValue = opts.getFrontValue(maskset.mask, maskset.buffer, opts);
	                        -1 !== frontValue.indexOf(opts.placeholder[0]) && (frontValue = "01" + opts.separator);
	                        var isValid = opts.regex.val2(opts.separator).test(frontValue + chrs);
	                        return strict || isValid || chrs.charAt(1) !== opts.separator && -1 === "-./".indexOf(chrs.charAt(1)) || !(isValid = opts.regex.val2(opts.separator).test(frontValue + "0" + chrs.charAt(0))) ? isValid : (maskset.buffer[pos - 1] = "0", 
	                        {
	                            refreshFromBuffer: {
	                                start: pos - 1,
	                                end: pos
	                            },
	                            pos: pos,
	                            c: chrs.charAt(0)
	                        });
	                    },
	                    cardinality: 2,
	                    prevalidator: [ {
	                        validator: function(chrs, maskset, pos, strict, opts) {
	                            isNaN(maskset.buffer[pos + 1]) || (chrs += maskset.buffer[pos + 1]);
	                            var frontValue = opts.getFrontValue(maskset.mask, maskset.buffer, opts);
	                            -1 !== frontValue.indexOf(opts.placeholder[0]) && (frontValue = "01" + opts.separator);
	                            var isValid = 1 === chrs.length ? opts.regex.val2pre(opts.separator).test(frontValue + chrs) : opts.regex.val2(opts.separator).test(frontValue + chrs);
	                            return strict || isValid || !(isValid = opts.regex.val2(opts.separator).test(frontValue + "0" + chrs)) ? isValid : (maskset.buffer[pos] = "0", 
	                            pos++, {
	                                pos: pos
	                            });
	                        },
	                        cardinality: 1
	                    } ]
	                },
	                y: {
	                    validator: function(chrs, maskset, pos, strict, opts) {
	                        return opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);
	                    },
	                    cardinality: 4,
	                    prevalidator: [ {
	                        validator: function(chrs, maskset, pos, strict, opts) {
	                            var isValid = opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);
	                            if (!strict && !isValid) {
	                                var yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs + "0").toString().slice(0, 1);
	                                if (isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos++] = yearPrefix.charAt(0), 
	                                {
	                                    pos: pos
	                                };
	                                if (yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs + "0").toString().slice(0, 2), 
	                                isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos++] = yearPrefix.charAt(0), 
	                                maskset.buffer[pos++] = yearPrefix.charAt(1), {
	                                    pos: pos
	                                };
	                            }
	                            return isValid;
	                        },
	                        cardinality: 1
	                    }, {
	                        validator: function(chrs, maskset, pos, strict, opts) {
	                            var isValid = opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);
	                            if (!strict && !isValid) {
	                                var yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs).toString().slice(0, 2);
	                                if (isValid = opts.isInYearRange(chrs[0] + yearPrefix[1] + chrs[1], opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos++] = yearPrefix.charAt(1), 
	                                {
	                                    pos: pos
	                                };
	                                if (yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs).toString().slice(0, 2), 
	                                isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos - 1] = yearPrefix.charAt(0), 
	                                maskset.buffer[pos++] = yearPrefix.charAt(1), maskset.buffer[pos++] = chrs.charAt(0), 
	                                {
	                                    refreshFromBuffer: {
	                                        start: pos - 3,
	                                        end: pos
	                                    },
	                                    pos: pos
	                                };
	                            }
	                            return isValid;
	                        },
	                        cardinality: 2
	                    }, {
	                        validator: function(chrs, maskset, pos, strict, opts) {
	                            return opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);
	                        },
	                        cardinality: 3
	                    } ]
	                }
	            },
	            insertMode: !1,
	            autoUnmask: !1
	        },
	        "mm/dd/yyyy": {
	            placeholder: "mm/dd/yyyy",
	            alias: "dd/mm/yyyy",
	            regex: {
	                val2pre: function(separator) {
	                    var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
	                    return new RegExp("((0[13-9]|1[012])" + escapedSeparator + "[0-3])|(02" + escapedSeparator + "[0-2])");
	                },
	                val2: function(separator) {
	                    var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
	                    return new RegExp("((0[1-9]|1[012])" + escapedSeparator + "(0[1-9]|[12][0-9]))|((0[13-9]|1[012])" + escapedSeparator + "30)|((0[13578]|1[02])" + escapedSeparator + "31)");
	                },
	                val1pre: new RegExp("[01]"),
	                val1: new RegExp("0[1-9]|1[012]")
	            },
	            leapday: "02/29/",
	            onKeyDown: function(e, buffer, caretPos, opts) {
	                var $input = $(this);
	                if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {
	                    var today = new Date();
	                    $input.val((today.getMonth() + 1).toString() + today.getDate().toString() + today.getFullYear().toString()), 
	                    $input.trigger("setvalue");
	                }
	            }
	        },
	        "yyyy/mm/dd": {
	            mask: "y/1/2",
	            placeholder: "yyyy/mm/dd",
	            alias: "mm/dd/yyyy",
	            leapday: "/02/29",
	            onKeyDown: function(e, buffer, caretPos, opts) {
	                var $input = $(this);
	                if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {
	                    var today = new Date();
	                    $input.val(today.getFullYear().toString() + (today.getMonth() + 1).toString() + today.getDate().toString()), 
	                    $input.trigger("setvalue");
	                }
	            }
	        },
	        "dd.mm.yyyy": {
	            mask: "1.2.y",
	            placeholder: "dd.mm.yyyy",
	            leapday: "29.02.",
	            separator: ".",
	            alias: "dd/mm/yyyy"
	        },
	        "dd-mm-yyyy": {
	            mask: "1-2-y",
	            placeholder: "dd-mm-yyyy",
	            leapday: "29-02-",
	            separator: "-",
	            alias: "dd/mm/yyyy"
	        },
	        "mm.dd.yyyy": {
	            mask: "1.2.y",
	            placeholder: "mm.dd.yyyy",
	            leapday: "02.29.",
	            separator: ".",
	            alias: "mm/dd/yyyy"
	        },
	        "mm-dd-yyyy": {
	            mask: "1-2-y",
	            placeholder: "mm-dd-yyyy",
	            leapday: "02-29-",
	            separator: "-",
	            alias: "mm/dd/yyyy"
	        },
	        "yyyy.mm.dd": {
	            mask: "y.1.2",
	            placeholder: "yyyy.mm.dd",
	            leapday: ".02.29",
	            separator: ".",
	            alias: "yyyy/mm/dd"
	        },
	        "yyyy-mm-dd": {
	            mask: "y-1-2",
	            placeholder: "yyyy-mm-dd",
	            leapday: "-02-29",
	            separator: "-",
	            alias: "yyyy/mm/dd"
	        },
	        datetime: {
	            mask: "1/2/y h:s",
	            placeholder: "dd/mm/yyyy hh:mm",
	            alias: "dd/mm/yyyy",
	            regex: {
	                hrspre: new RegExp("[012]"),
	                hrs24: new RegExp("2[0-4]|1[3-9]"),
	                hrs: new RegExp("[01][0-9]|2[0-4]"),
	                ampm: new RegExp("^[a|p|A|P][m|M]"),
	                mspre: new RegExp("[0-5]"),
	                ms: new RegExp("[0-5][0-9]")
	            },
	            timeseparator: ":",
	            hourFormat: "24",
	            definitions: {
	                h: {
	                    validator: function(chrs, maskset, pos, strict, opts) {
	                        if ("24" === opts.hourFormat && 24 === parseInt(chrs, 10)) return maskset.buffer[pos - 1] = "0", 
	                        maskset.buffer[pos] = "0", {
	                            refreshFromBuffer: {
	                                start: pos - 1,
	                                end: pos
	                            },
	                            c: "0"
	                        };
	                        var isValid = opts.regex.hrs.test(chrs);
	                        if (!strict && !isValid && (chrs.charAt(1) === opts.timeseparator || -1 !== "-.:".indexOf(chrs.charAt(1))) && (isValid = opts.regex.hrs.test("0" + chrs.charAt(0)))) return maskset.buffer[pos - 1] = "0", 
	                        maskset.buffer[pos] = chrs.charAt(0), pos++, {
	                            refreshFromBuffer: {
	                                start: pos - 2,
	                                end: pos
	                            },
	                            pos: pos,
	                            c: opts.timeseparator
	                        };
	                        if (isValid && "24" !== opts.hourFormat && opts.regex.hrs24.test(chrs)) {
	                            var tmp = parseInt(chrs, 10);
	                            return 24 === tmp ? (maskset.buffer[pos + 5] = "a", maskset.buffer[pos + 6] = "m") : (maskset.buffer[pos + 5] = "p", 
	                            maskset.buffer[pos + 6] = "m"), tmp -= 12, tmp < 10 ? (maskset.buffer[pos] = tmp.toString(), 
	                            maskset.buffer[pos - 1] = "0") : (maskset.buffer[pos] = tmp.toString().charAt(1), 
	                            maskset.buffer[pos - 1] = tmp.toString().charAt(0)), {
	                                refreshFromBuffer: {
	                                    start: pos - 1,
	                                    end: pos + 6
	                                },
	                                c: maskset.buffer[pos]
	                            };
	                        }
	                        return isValid;
	                    },
	                    cardinality: 2,
	                    prevalidator: [ {
	                        validator: function(chrs, maskset, pos, strict, opts) {
	                            var isValid = opts.regex.hrspre.test(chrs);
	                            return strict || isValid || !(isValid = opts.regex.hrs.test("0" + chrs)) ? isValid : (maskset.buffer[pos] = "0", 
	                            pos++, {
	                                pos: pos
	                            });
	                        },
	                        cardinality: 1
	                    } ]
	                },
	                s: {
	                    validator: "[0-5][0-9]",
	                    cardinality: 2,
	                    prevalidator: [ {
	                        validator: function(chrs, maskset, pos, strict, opts) {
	                            var isValid = opts.regex.mspre.test(chrs);
	                            return strict || isValid || !(isValid = opts.regex.ms.test("0" + chrs)) ? isValid : (maskset.buffer[pos] = "0", 
	                            pos++, {
	                                pos: pos
	                            });
	                        },
	                        cardinality: 1
	                    } ]
	                },
	                t: {
	                    validator: function(chrs, maskset, pos, strict, opts) {
	                        return opts.regex.ampm.test(chrs + "m");
	                    },
	                    casing: "lower",
	                    cardinality: 1
	                }
	            },
	            insertMode: !1,
	            autoUnmask: !1
	        },
	        datetime12: {
	            mask: "1/2/y h:s t\\m",
	            placeholder: "dd/mm/yyyy hh:mm xm",
	            alias: "datetime",
	            hourFormat: "12"
	        },
	        "mm/dd/yyyy hh:mm xm": {
	            mask: "1/2/y h:s t\\m",
	            placeholder: "mm/dd/yyyy hh:mm xm",
	            alias: "datetime12",
	            regex: {
	                val2pre: function(separator) {
	                    var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
	                    return new RegExp("((0[13-9]|1[012])" + escapedSeparator + "[0-3])|(02" + escapedSeparator + "[0-2])");
	                },
	                val2: function(separator) {
	                    var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
	                    return new RegExp("((0[1-9]|1[012])" + escapedSeparator + "(0[1-9]|[12][0-9]))|((0[13-9]|1[012])" + escapedSeparator + "30)|((0[13578]|1[02])" + escapedSeparator + "31)");
	                },
	                val1pre: new RegExp("[01]"),
	                val1: new RegExp("0[1-9]|1[012]")
	            },
	            leapday: "02/29/",
	            onKeyDown: function(e, buffer, caretPos, opts) {
	                var $input = $(this);
	                if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {
	                    var today = new Date();
	                    $input.val((today.getMonth() + 1).toString() + today.getDate().toString() + today.getFullYear().toString()), 
	                    $input.trigger("setvalue");
	                }
	            }
	        },
	        "hh:mm t": {
	            mask: "h:s t\\m",
	            placeholder: "hh:mm xm",
	            alias: "datetime",
	            hourFormat: "12"
	        },
	        "h:s t": {
	            mask: "h:s t\\m",
	            placeholder: "hh:mm xm",
	            alias: "datetime",
	            hourFormat: "12"
	        },
	        "hh:mm:ss": {
	            mask: "h:s:s",
	            placeholder: "hh:mm:ss",
	            alias: "datetime",
	            autoUnmask: !1
	        },
	        "hh:mm": {
	            mask: "h:s",
	            placeholder: "hh:mm",
	            alias: "datetime",
	            autoUnmask: !1
	        },
	        date: {
	            alias: "dd/mm/yyyy"
	        },
	        "mm/yyyy": {
	            mask: "1/y",
	            placeholder: "mm/yyyy",
	            leapday: "donotuse",
	            separator: "/",
	            alias: "mm/dd/yyyy"
	        },
	        shamsi: {
	            regex: {
	                val2pre: function(separator) {
	                    var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
	                    return new RegExp("((0[1-9]|1[012])" + escapedSeparator + "[0-3])");
	                },
	                val2: function(separator) {
	                    var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
	                    return new RegExp("((0[1-9]|1[012])" + escapedSeparator + "(0[1-9]|[12][0-9]))|((0[1-9]|1[012])" + escapedSeparator + "30)|((0[1-6])" + escapedSeparator + "31)");
	                },
	                val1pre: new RegExp("[01]"),
	                val1: new RegExp("0[1-9]|1[012]")
	            },
	            yearrange: {
	                minyear: 1300,
	                maxyear: 1499
	            },
	            mask: "y/1/2",
	            leapday: "/12/30",
	            placeholder: "yyyy/mm/dd",
	            alias: "mm/dd/yyyy",
	            clearIncomplete: !0
	        },
	        "yyyy-mm-dd hh:mm:ss": {
	            mask: "y-1-2 h:s:s",
	            placeholder: "yyyy-mm-dd hh:mm:ss",
	            alias: "datetime",
	            separator: "-",
	            leapday: "-02-29",
	            regex: {
	                val2pre: function(separator) {
	                    var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
	                    return new RegExp("((0[13-9]|1[012])" + escapedSeparator + "[0-3])|(02" + escapedSeparator + "[0-2])");
	                },
	                val2: function(separator) {
	                    var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
	                    return new RegExp("((0[1-9]|1[012])" + escapedSeparator + "(0[1-9]|[12][0-9]))|((0[13-9]|1[012])" + escapedSeparator + "30)|((0[13578]|1[02])" + escapedSeparator + "31)");
	                },
	                val1pre: new RegExp("[01]"),
	                val1: new RegExp("0[1-9]|1[012]")
	            },
	            onKeyDown: function(e, buffer, caretPos, opts) {}
	        }
	    }), Inputmask;
	});

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	* dependencyLibs/inputmask.dependencyLib.js
	* https://github.com/RobinHerbots/Inputmask
	* Copyright (c) 2010 - 2017 Robin Herbots
	* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
	* Version: 3.3.7
	*/
	
	!function(factory) {
	     true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(4), __webpack_require__(5) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == typeof exports ? module.exports = factory(require("../global/window"), require("../global/document")) : window.dependencyLib = factory(window, document);
	}(function(window, document) {
	    function indexOf(list, elem) {
	        for (var i = 0, len = list.length; i < len; i++) if (list[i] === elem) return i;
	        return -1;
	    }
	    function type(obj) {
	        return null == obj ? obj + "" : "object" == typeof obj || "function" == typeof obj ? class2type[class2type.toString.call(obj)] || "object" : typeof obj;
	    }
	    function isWindow(obj) {
	        return null != obj && obj === obj.window;
	    }
	    function isArraylike(obj) {
	        var length = "length" in obj && obj.length, ltype = type(obj);
	        return "function" !== ltype && !isWindow(obj) && (!(1 !== obj.nodeType || !length) || ("array" === ltype || 0 === length || "number" == typeof length && length > 0 && length - 1 in obj));
	    }
	    function isValidElement(elem) {
	        return elem instanceof Element;
	    }
	    function DependencyLib(elem) {
	        return elem instanceof DependencyLib ? elem : this instanceof DependencyLib ? void (void 0 !== elem && null !== elem && elem !== window && (this[0] = elem.nodeName ? elem : void 0 !== elem[0] && elem[0].nodeName ? elem[0] : document.querySelector(elem), 
	        void 0 !== this[0] && null !== this[0] && (this[0].eventRegistry = this[0].eventRegistry || {}))) : new DependencyLib(elem);
	    }
	    for (var class2type = {}, classTypes = "Boolean Number String Function Array Date RegExp Object Error".split(" "), nameNdx = 0; nameNdx < classTypes.length; nameNdx++) class2type["[object " + classTypes[nameNdx] + "]"] = classTypes[nameNdx].toLowerCase();
	    return DependencyLib.prototype = {
	        on: function(events, handler) {
	            if (isValidElement(this[0])) for (var eventRegistry = this[0].eventRegistry, elem = this[0], _events = events.split(" "), endx = 0; endx < _events.length; endx++) {
	                var nsEvent = _events[endx].split("."), ev = nsEvent[0], namespace = nsEvent[1] || "global";
	                !function(ev, namespace) {
	                    elem.addEventListener ? elem.addEventListener(ev, handler, !1) : elem.attachEvent && elem.attachEvent("on" + ev, handler), 
	                    eventRegistry[ev] = eventRegistry[ev] || {}, eventRegistry[ev][namespace] = eventRegistry[ev][namespace] || [], 
	                    eventRegistry[ev][namespace].push(handler);
	                }(ev, namespace);
	            }
	            return this;
	        },
	        off: function(events, handler) {
	            if (isValidElement(this[0])) for (var eventRegistry = this[0].eventRegistry, elem = this[0], _events = events.split(" "), endx = 0; endx < _events.length; endx++) for (var nsEvent = _events[endx].split("."), offEvents = function(ev, namespace) {
	                var hndx, hndL, evts = [];
	                if (ev.length > 0) if (void 0 === handler) for (hndx = 0, hndL = eventRegistry[ev][namespace].length; hndx < hndL; hndx++) evts.push({
	                    ev: ev,
	                    namespace: namespace && namespace.length > 0 ? namespace : "global",
	                    handler: eventRegistry[ev][namespace][hndx]
	                }); else evts.push({
	                    ev: ev,
	                    namespace: namespace && namespace.length > 0 ? namespace : "global",
	                    handler: handler
	                }); else if (namespace.length > 0) for (var evNdx in eventRegistry) for (var nmsp in eventRegistry[evNdx]) if (nmsp === namespace) if (void 0 === handler) for (hndx = 0, 
	                hndL = eventRegistry[evNdx][nmsp].length; hndx < hndL; hndx++) evts.push({
	                    ev: evNdx,
	                    namespace: nmsp,
	                    handler: eventRegistry[evNdx][nmsp][hndx]
	                }); else evts.push({
	                    ev: evNdx,
	                    namespace: nmsp,
	                    handler: handler
	                });
	                return evts;
	            }(nsEvent[0], nsEvent[1]), i = 0, offEventsL = offEvents.length; i < offEventsL; i++) !function(ev, namespace, handler) {
	                if (ev in eventRegistry == 1) if (elem.removeEventListener ? elem.removeEventListener(ev, handler, !1) : elem.detachEvent && elem.detachEvent("on" + ev, handler), 
	                "global" === namespace) for (var nmsp in eventRegistry[ev]) eventRegistry[ev][nmsp].splice(eventRegistry[ev][nmsp].indexOf(handler), 1); else eventRegistry[ev][namespace].splice(eventRegistry[ev][namespace].indexOf(handler), 1);
	            }(offEvents[i].ev, offEvents[i].namespace, offEvents[i].handler);
	            return this;
	        },
	        trigger: function(events) {
	            if (isValidElement(this[0])) for (var eventRegistry = this[0].eventRegistry, elem = this[0], _events = "string" == typeof events ? events.split(" ") : [ events.type ], endx = 0; endx < _events.length; endx++) {
	                var nsEvent = _events[endx].split("."), ev = nsEvent[0], namespace = nsEvent[1] || "global";
	                if (void 0 !== document && "global" === namespace) {
	                    var evnt, i, params = {
	                        bubbles: !0,
	                        cancelable: !0,
	                        detail: Array.prototype.slice.call(arguments, 1)
	                    };
	                    if (document.createEvent) {
	                        try {
	                            evnt = new CustomEvent(ev, params);
	                        } catch (e) {
	                            evnt = document.createEvent("CustomEvent"), evnt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);
	                        }
	                        events.type && DependencyLib.extend(evnt, events), elem.dispatchEvent(evnt);
	                    } else evnt = document.createEventObject(), evnt.eventType = ev, events.type && DependencyLib.extend(evnt, events), 
	                    elem.fireEvent("on" + evnt.eventType, evnt);
	                } else if (void 0 !== eventRegistry[ev]) if (arguments[0] = arguments[0].type ? arguments[0] : DependencyLib.Event(arguments[0]), 
	                "global" === namespace) for (var nmsp in eventRegistry[ev]) for (i = 0; i < eventRegistry[ev][nmsp].length; i++) eventRegistry[ev][nmsp][i].apply(elem, arguments); else for (i = 0; i < eventRegistry[ev][namespace].length; i++) eventRegistry[ev][namespace][i].apply(elem, arguments);
	            }
	            return this;
	        },
	        position: function() {
	            if (isValidElement(this[0])) return {
	                top: this[0].offsetTop,
	                left: this[0].offsetLeft
	            };
	        }
	    }, DependencyLib.isFunction = function(obj) {
	        return "function" === type(obj);
	    }, DependencyLib.noop = function() {}, DependencyLib.isArray = Array.isArray, DependencyLib.inArray = function(elem, arr, i) {
	        return null == arr ? -1 : indexOf(arr, elem);
	    }, DependencyLib.valHooks = void 0, DependencyLib.isPlainObject = function(obj) {
	        return "object" === type(obj) && !obj.nodeType && !isWindow(obj) && !(obj.constructor && !class2type.hasOwnProperty.call(obj.constructor.prototype, "isPrototypeOf"));
	    }, DependencyLib.extend = function() {
	        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = !1;
	        for ("boolean" == typeof target && (deep = target, target = arguments[i] || {}, 
	        i++), "object" == typeof target || DependencyLib.isFunction(target) || (target = {}), 
	        i === length && (target = this, i--); i < length; i++) if (null != (options = arguments[i])) for (name in options) src = target[name], 
	        copy = options[name], target !== copy && (deep && copy && (DependencyLib.isPlainObject(copy) || (copyIsArray = DependencyLib.isArray(copy))) ? (copyIsArray ? (copyIsArray = !1, 
	        clone = src && DependencyLib.isArray(src) ? src : []) : clone = src && DependencyLib.isPlainObject(src) ? src : {}, 
	        target[name] = DependencyLib.extend(deep, clone, copy)) : void 0 !== copy && (target[name] = copy));
	        return target;
	    }, DependencyLib.each = function(obj, callback) {
	        var i = 0;
	        if (isArraylike(obj)) for (var length = obj.length; i < length && !1 !== callback.call(obj[i], i, obj[i]); i++) ; else for (i in obj) if (!1 === callback.call(obj[i], i, obj[i])) break;
	        return obj;
	    }, DependencyLib.map = function(elems, callback) {
	        var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
	        if (isArray) for (;i < length; i++) null != (value = callback(elems[i], i)) && ret.push(value); else for (i in elems) null != (value = callback(elems[i], i)) && ret.push(value);
	        return [].concat(ret);
	    }, DependencyLib.data = function(owner, key, value) {
	        if (void 0 === value) return owner.__data ? owner.__data[key] : null;
	        owner.__data = owner.__data || {}, owner.__data[key] = value;
	    }, DependencyLib.Event = function CustomEvent(event, params) {
	        params = params || {
	            bubbles: !1,
	            cancelable: !1,
	            detail: void 0
	        };
	        var evnt;
	        if (document.createEvent) try {
	            evnt = new CustomEvent(event, params);
	        } catch (e) {
	            evnt = document.createEvent("CustomEvent"), evnt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
	        } else evnt = document.createEventObject(), evnt.eventType = event;
	        return evnt;
	    }, DependencyLib.Event.prototype = window.Event.prototype, DependencyLib;
	});

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	* global/window.js
	* https://github.com/RobinHerbots/Inputmask
	* Copyright (c) 2010 - 2017 Robin Herbots
	* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
	* Version: 3.3.7
	*/
	
	 true ? !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    return window;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == typeof exports && (module.exports = window);

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	* global/document.js
	* https://github.com/RobinHerbots/Inputmask
	* Copyright (c) 2010 - 2017 Robin Herbots
	* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
	* Version: 3.3.7
	*/
	
	 true ? !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    return document;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == typeof exports && (module.exports = document);

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	* inputmask.js
	* https://github.com/RobinHerbots/Inputmask
	* Copyright (c) 2010 - 2017 Robin Herbots
	* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
	* Version: 3.3.7
	*/
	
	!function(factory) {
	     true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(3), __webpack_require__(4), __webpack_require__(5) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == typeof exports ? module.exports = factory(require("./dependencyLibs/inputmask.dependencyLib"), require("./global/window"), require("./global/document")) : window.Inputmask = factory(window.dependencyLib || jQuery, window, document);
	}(function($, window, document, undefined) {
	    function Inputmask(alias, options, internal) {
	        if (!(this instanceof Inputmask)) return new Inputmask(alias, options, internal);
	        this.el = undefined, this.events = {}, this.maskset = undefined, this.refreshValue = !1, 
	        !0 !== internal && ($.isPlainObject(alias) ? options = alias : (options = options || {}, 
	        options.alias = alias), this.opts = $.extend(!0, {}, this.defaults, options), this.noMasksCache = options && options.definitions !== undefined, 
	        this.userOptions = options || {}, this.isRTL = this.opts.numericInput, resolveAlias(this.opts.alias, options, this.opts));
	    }
	    function resolveAlias(aliasStr, options, opts) {
	        var aliasDefinition = Inputmask.prototype.aliases[aliasStr];
	        return aliasDefinition ? (aliasDefinition.alias && resolveAlias(aliasDefinition.alias, undefined, opts), 
	        $.extend(!0, opts, aliasDefinition), $.extend(!0, opts, options), !0) : (null === opts.mask && (opts.mask = aliasStr), 
	        !1);
	    }
	    function generateMaskSet(opts, nocache) {
	        function generateMask(mask, metadata, opts) {
	            var regexMask = !1;
	            if (null !== mask && "" !== mask || (regexMask = null !== opts.regex, regexMask ? (mask = opts.regex, 
	            mask = mask.replace(/^(\^)(.*)(\$)$/, "$2")) : (regexMask = !0, mask = ".*")), 1 === mask.length && !1 === opts.greedy && 0 !== opts.repeat && (opts.placeholder = ""), 
	            opts.repeat > 0 || "*" === opts.repeat || "+" === opts.repeat) {
	                var repeatStart = "*" === opts.repeat ? 0 : "+" === opts.repeat ? 1 : opts.repeat;
	                mask = opts.groupmarker.start + mask + opts.groupmarker.end + opts.quantifiermarker.start + repeatStart + "," + opts.repeat + opts.quantifiermarker.end;
	            }
	            var masksetDefinition, maskdefKey = regexMask ? "regex_" + opts.regex : opts.numericInput ? mask.split("").reverse().join("") : mask;
	            return Inputmask.prototype.masksCache[maskdefKey] === undefined || !0 === nocache ? (masksetDefinition = {
	                mask: mask,
	                maskToken: Inputmask.prototype.analyseMask(mask, regexMask, opts),
	                validPositions: {},
	                _buffer: undefined,
	                buffer: undefined,
	                tests: {},
	                metadata: metadata,
	                maskLength: undefined
	            }, !0 !== nocache && (Inputmask.prototype.masksCache[maskdefKey] = masksetDefinition, 
	            masksetDefinition = $.extend(!0, {}, Inputmask.prototype.masksCache[maskdefKey]))) : masksetDefinition = $.extend(!0, {}, Inputmask.prototype.masksCache[maskdefKey]), 
	            masksetDefinition;
	        }
	        if ($.isFunction(opts.mask) && (opts.mask = opts.mask(opts)), $.isArray(opts.mask)) {
	            if (opts.mask.length > 1) {
	                opts.keepStatic = null === opts.keepStatic || opts.keepStatic;
	                var altMask = opts.groupmarker.start;
	                return $.each(opts.numericInput ? opts.mask.reverse() : opts.mask, function(ndx, msk) {
	                    altMask.length > 1 && (altMask += opts.groupmarker.end + opts.alternatormarker + opts.groupmarker.start), 
	                    msk.mask === undefined || $.isFunction(msk.mask) ? altMask += msk : altMask += msk.mask;
	                }), altMask += opts.groupmarker.end, generateMask(altMask, opts.mask, opts);
	            }
	            opts.mask = opts.mask.pop();
	        }
	        return opts.mask && opts.mask.mask !== undefined && !$.isFunction(opts.mask.mask) ? generateMask(opts.mask.mask, opts.mask, opts) : generateMask(opts.mask, opts.mask, opts);
	    }
	    function maskScope(actionObj, maskset, opts) {
	        function getMaskTemplate(baseOnInput, minimalPos, includeMode) {
	            minimalPos = minimalPos || 0;
	            var ndxIntlzr, test, testPos, maskTemplate = [], pos = 0, lvp = getLastValidPosition();
	            -1 === (maxLength = el !== undefined ? el.maxLength : undefined) && (maxLength = undefined);
	            do {
	                !0 === baseOnInput && getMaskSet().validPositions[pos] ? (testPos = getMaskSet().validPositions[pos], 
	                test = testPos.match, ndxIntlzr = testPos.locator.slice(), maskTemplate.push(!0 === includeMode ? testPos.input : !1 === includeMode ? test.nativeDef : getPlaceholder(pos, test))) : (testPos = getTestTemplate(pos, ndxIntlzr, pos - 1), 
	                test = testPos.match, ndxIntlzr = testPos.locator.slice(), (!1 === opts.jitMasking || pos < lvp || "number" == typeof opts.jitMasking && isFinite(opts.jitMasking) && opts.jitMasking > pos) && maskTemplate.push(!1 === includeMode ? test.nativeDef : getPlaceholder(pos, test))), 
	                pos++;
	            } while ((maxLength === undefined || pos < maxLength) && (null !== test.fn || "" !== test.def) || minimalPos > pos);
	            return "" === maskTemplate[maskTemplate.length - 1] && maskTemplate.pop(), getMaskSet().maskLength = pos + 1, 
	            maskTemplate;
	        }
	        function getMaskSet() {
	            return maskset;
	        }
	        function resetMaskSet(soft) {
	            var maskset = getMaskSet();
	            maskset.buffer = undefined, !0 !== soft && (maskset.validPositions = {}, maskset.p = 0);
	        }
	        function getLastValidPosition(closestTo, strict, validPositions) {
	            var before = -1, after = -1, valids = validPositions || getMaskSet().validPositions;
	            closestTo === undefined && (closestTo = -1);
	            for (var posNdx in valids) {
	                var psNdx = parseInt(posNdx);
	                valids[psNdx] && (strict || !0 !== valids[psNdx].generatedInput) && (psNdx <= closestTo && (before = psNdx), 
	                psNdx >= closestTo && (after = psNdx));
	            }
	            return -1 !== before && closestTo - before > 1 || after < closestTo ? before : after;
	        }
	        function stripValidPositions(start, end, nocheck, strict) {
	            var i, startPos = start, positionsClone = $.extend(!0, {}, getMaskSet().validPositions), needsValidation = !1;
	            for (getMaskSet().p = start, i = end - 1; i >= startPos; i--) getMaskSet().validPositions[i] !== undefined && (!0 !== nocheck && (!getMaskSet().validPositions[i].match.optionality && function(pos) {
	                var posMatch = getMaskSet().validPositions[pos];
	                if (posMatch !== undefined && null === posMatch.match.fn) {
	                    var prevMatch = getMaskSet().validPositions[pos - 1], nextMatch = getMaskSet().validPositions[pos + 1];
	                    return prevMatch !== undefined && nextMatch !== undefined;
	                }
	                return !1;
	            }(i) || !1 === opts.canClearPosition(getMaskSet(), i, getLastValidPosition(), strict, opts)) || delete getMaskSet().validPositions[i]);
	            for (resetMaskSet(!0), i = startPos + 1; i <= getLastValidPosition(); ) {
	                for (;getMaskSet().validPositions[startPos] !== undefined; ) startPos++;
	                if (i < startPos && (i = startPos + 1), getMaskSet().validPositions[i] === undefined && isMask(i)) i++; else {
	                    var t = getTestTemplate(i);
	                    !1 === needsValidation && positionsClone[startPos] && positionsClone[startPos].match.def === t.match.def ? (getMaskSet().validPositions[startPos] = $.extend(!0, {}, positionsClone[startPos]), 
	                    getMaskSet().validPositions[startPos].input = t.input, delete getMaskSet().validPositions[i], 
	                    i++) : positionCanMatchDefinition(startPos, t.match.def) ? !1 !== isValid(startPos, t.input || getPlaceholder(i), !0) && (delete getMaskSet().validPositions[i], 
	                    i++, needsValidation = !0) : isMask(i) || (i++, startPos--), startPos++;
	                }
	            }
	            resetMaskSet(!0);
	        }
	        function determineTestTemplate(tests, guessNextBest) {
	            for (var testPos, testPositions = tests, lvp = getLastValidPosition(), lvTest = getMaskSet().validPositions[lvp] || getTests(0)[0], lvTestAltArr = lvTest.alternation !== undefined ? lvTest.locator[lvTest.alternation].toString().split(",") : [], ndx = 0; ndx < testPositions.length && (testPos = testPositions[ndx], 
	            !(testPos.match && (opts.greedy && !0 !== testPos.match.optionalQuantifier || (!1 === testPos.match.optionality || !1 === testPos.match.newBlockMarker) && !0 !== testPos.match.optionalQuantifier) && (lvTest.alternation === undefined || lvTest.alternation !== testPos.alternation || testPos.locator[lvTest.alternation] !== undefined && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","), lvTestAltArr))) || !0 === guessNextBest && (null !== testPos.match.fn || /[0-9a-bA-Z]/.test(testPos.match.def))); ndx++) ;
	            return testPos;
	        }
	        function getTestTemplate(pos, ndxIntlzr, tstPs) {
	            return getMaskSet().validPositions[pos] || determineTestTemplate(getTests(pos, ndxIntlzr ? ndxIntlzr.slice() : ndxIntlzr, tstPs));
	        }
	        function getTest(pos) {
	            return getMaskSet().validPositions[pos] ? getMaskSet().validPositions[pos] : getTests(pos)[0];
	        }
	        function positionCanMatchDefinition(pos, def) {
	            for (var valid = !1, tests = getTests(pos), tndx = 0; tndx < tests.length; tndx++) if (tests[tndx].match && tests[tndx].match.def === def) {
	                valid = !0;
	                break;
	            }
	            return valid;
	        }
	        function getTests(pos, ndxIntlzr, tstPs) {
	            function resolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) {
	                function handleMatch(match, loopNdx, quantifierRecurse) {
	                    function isFirstMatch(latestMatch, tokenGroup) {
	                        var firstMatch = 0 === $.inArray(latestMatch, tokenGroup.matches);
	                        return firstMatch || $.each(tokenGroup.matches, function(ndx, match) {
	                            if (!0 === match.isQuantifier && (firstMatch = isFirstMatch(latestMatch, tokenGroup.matches[ndx - 1]))) return !1;
	                        }), firstMatch;
	                    }
	                    function resolveNdxInitializer(pos, alternateNdx, targetAlternation) {
	                        var bestMatch, indexPos;
	                        if (getMaskSet().validPositions[pos - 1] && targetAlternation && getMaskSet().tests[pos]) for (var vpAlternation = getMaskSet().validPositions[pos - 1].locator, tpAlternation = getMaskSet().tests[pos][0].locator, i = 0; i < targetAlternation; i++) if (vpAlternation[i] !== tpAlternation[i]) return vpAlternation.slice(targetAlternation + 1);
	                        return (getMaskSet().tests[pos] || getMaskSet().validPositions[pos]) && $.each(getMaskSet().tests[pos] || [ getMaskSet().validPositions[pos] ], function(ndx, lmnt) {
	                            var alternation = targetAlternation !== undefined ? targetAlternation : lmnt.alternation, ndxPos = lmnt.locator[alternation] !== undefined ? lmnt.locator[alternation].toString().indexOf(alternateNdx) : -1;
	                            (indexPos === undefined || ndxPos < indexPos) && -1 !== ndxPos && (bestMatch = lmnt, 
	                            indexPos = ndxPos);
	                        }), bestMatch ? bestMatch.locator.slice((targetAlternation !== undefined ? targetAlternation : bestMatch.alternation) + 1) : targetAlternation !== undefined ? resolveNdxInitializer(pos, alternateNdx) : undefined;
	                    }
	                    if (testPos > 1e4) throw "Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. " + getMaskSet().mask;
	                    if (testPos === pos && match.matches === undefined) return matches.push({
	                        match: match,
	                        locator: loopNdx.reverse(),
	                        cd: cacheDependency
	                    }), !0;
	                    if (match.matches !== undefined) {
	                        if (match.isGroup && quantifierRecurse !== match) {
	                            if (match = handleMatch(maskToken.matches[$.inArray(match, maskToken.matches) + 1], loopNdx)) return !0;
	                        } else if (match.isOptional) {
	                            var optionalToken = match;
	                            if (match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse)) {
	                                if (latestMatch = matches[matches.length - 1].match, !isFirstMatch(latestMatch, optionalToken)) return !0;
	                                insertStop = !0, testPos = pos;
	                            }
	                        } else if (match.isAlternator) {
	                            var maltMatches, alternateToken = match, malternateMatches = [], currentMatches = matches.slice(), loopNdxCnt = loopNdx.length, altIndex = ndxInitializer.length > 0 ? ndxInitializer.shift() : -1;
	                            if (-1 === altIndex || "string" == typeof altIndex) {
	                                var amndx, currentPos = testPos, ndxInitializerClone = ndxInitializer.slice(), altIndexArr = [];
	                                if ("string" == typeof altIndex) altIndexArr = altIndex.split(","); else for (amndx = 0; amndx < alternateToken.matches.length; amndx++) altIndexArr.push(amndx);
	                                for (var ndx = 0; ndx < altIndexArr.length; ndx++) {
	                                    if (amndx = parseInt(altIndexArr[ndx]), matches = [], ndxInitializer = resolveNdxInitializer(testPos, amndx, loopNdxCnt) || ndxInitializerClone.slice(), 
	                                    !0 !== (match = handleMatch(alternateToken.matches[amndx] || maskToken.matches[amndx], [ amndx ].concat(loopNdx), quantifierRecurse) || match) && match !== undefined && altIndexArr[altIndexArr.length - 1] < alternateToken.matches.length) {
	                                        var ntndx = $.inArray(match, maskToken.matches) + 1;
	                                        maskToken.matches.length > ntndx && (match = handleMatch(maskToken.matches[ntndx], [ ntndx ].concat(loopNdx.slice(1, loopNdx.length)), quantifierRecurse)) && (altIndexArr.push(ntndx.toString()), 
	                                        $.each(matches, function(ndx, lmnt) {
	                                            lmnt.alternation = loopNdx.length - 1;
	                                        }));
	                                    }
	                                    maltMatches = matches.slice(), testPos = currentPos, matches = [];
	                                    for (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) {
	                                        var altMatch = maltMatches[ndx1], dropMatch = !1;
	                                        altMatch.alternation = altMatch.alternation || loopNdxCnt;
	                                        for (var ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {
	                                            var altMatch2 = malternateMatches[ndx2];
	                                            if ("string" != typeof altIndex || -1 !== $.inArray(altMatch.locator[altMatch.alternation].toString(), altIndexArr)) {
	                                                if (function(source, target) {
	                                                    return source.match.nativeDef === target.match.nativeDef || source.match.def === target.match.nativeDef || source.match.nativeDef === target.match.def;
	                                                }(altMatch, altMatch2)) {
	                                                    dropMatch = !0, altMatch.alternation === altMatch2.alternation && -1 === altMatch2.locator[altMatch2.alternation].toString().indexOf(altMatch.locator[altMatch.alternation]) && (altMatch2.locator[altMatch2.alternation] = altMatch2.locator[altMatch2.alternation] + "," + altMatch.locator[altMatch.alternation], 
	                                                    altMatch2.alternation = altMatch.alternation), altMatch.match.nativeDef === altMatch2.match.def && (altMatch.locator[altMatch.alternation] = altMatch2.locator[altMatch2.alternation], 
	                                                    malternateMatches.splice(malternateMatches.indexOf(altMatch2), 1, altMatch));
	                                                    break;
	                                                }
	                                                if (altMatch.match.def === altMatch2.match.def) {
	                                                    dropMatch = !1;
	                                                    break;
	                                                }
	                                                if (function(source, target) {
	                                                    return null === source.match.fn && null !== target.match.fn && target.match.fn.test(source.match.def, getMaskSet(), pos, !1, opts, !1);
	                                                }(altMatch, altMatch2) || function(source, target) {
	                                                    return null !== source.match.fn && null !== target.match.fn && target.match.fn.test(source.match.def.replace(/[\[\]]/g, ""), getMaskSet(), pos, !1, opts, !1);
	                                                }(altMatch, altMatch2)) {
	                                                    altMatch.alternation == altMatch2.alternation && -1 === altMatch.locator[altMatch.alternation].toString().indexOf(altMatch2.locator[altMatch2.alternation].toString().split("")[0]) && (altMatch.na = altMatch.na || altMatch.locator[altMatch.alternation].toString(), 
	                                                    -1 === altMatch.na.indexOf(altMatch.locator[altMatch.alternation].toString().split("")[0]) && (altMatch.na = altMatch.na + "," + altMatch.locator[altMatch2.alternation].toString().split("")[0]), 
	                                                    dropMatch = !0, altMatch.locator[altMatch.alternation] = altMatch2.locator[altMatch2.alternation].toString().split("")[0] + "," + altMatch.locator[altMatch.alternation], 
	                                                    malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch));
	                                                    break;
	                                                }
	                                            }
	                                        }
	                                        dropMatch || malternateMatches.push(altMatch);
	                                    }
	                                }
	                                "string" == typeof altIndex && (malternateMatches = $.map(malternateMatches, function(lmnt, ndx) {
	                                    if (isFinite(ndx)) {
	                                        var alternation = lmnt.alternation, altLocArr = lmnt.locator[alternation].toString().split(",");
	                                        lmnt.locator[alternation] = undefined, lmnt.alternation = undefined;
	                                        for (var alndx = 0; alndx < altLocArr.length; alndx++) -1 !== $.inArray(altLocArr[alndx], altIndexArr) && (lmnt.locator[alternation] !== undefined ? (lmnt.locator[alternation] += ",", 
	                                        lmnt.locator[alternation] += altLocArr[alndx]) : lmnt.locator[alternation] = parseInt(altLocArr[alndx]), 
	                                        lmnt.alternation = alternation);
	                                        if (lmnt.locator[alternation] !== undefined) return lmnt;
	                                    }
	                                })), matches = currentMatches.concat(malternateMatches), testPos = pos, insertStop = matches.length > 0, 
	                                match = malternateMatches.length > 0, ndxInitializer = ndxInitializerClone.slice();
	                            } else match = handleMatch(alternateToken.matches[altIndex] || maskToken.matches[altIndex], [ altIndex ].concat(loopNdx), quantifierRecurse);
	                            if (match) return !0;
	                        } else if (match.isQuantifier && quantifierRecurse !== maskToken.matches[$.inArray(match, maskToken.matches) - 1]) for (var qt = match, qndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max) && testPos <= pos; qndx++) {
	                            var tokenGroup = maskToken.matches[$.inArray(qt, maskToken.matches) - 1];
	                            if (match = handleMatch(tokenGroup, [ qndx ].concat(loopNdx), tokenGroup)) {
	                                if (latestMatch = matches[matches.length - 1].match, latestMatch.optionalQuantifier = qndx > qt.quantifier.min - 1, 
	                                isFirstMatch(latestMatch, tokenGroup)) {
	                                    if (qndx > qt.quantifier.min - 1) {
	                                        insertStop = !0, testPos = pos;
	                                        break;
	                                    }
	                                    return !0;
	                                }
	                                return !0;
	                            }
	                        } else if (match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse)) return !0;
	                    } else testPos++;
	                }
	                for (var tndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; tndx < maskToken.matches.length; tndx++) if (!0 !== maskToken.matches[tndx].isQuantifier) {
	                    var match = handleMatch(maskToken.matches[tndx], [ tndx ].concat(loopNdx), quantifierRecurse);
	                    if (match && testPos === pos) return match;
	                    if (testPos > pos) break;
	                }
	            }
	            function filterTests(tests) {
	                if (opts.keepStatic && pos > 0 && tests.length > 1 + ("" === tests[tests.length - 1].match.def ? 1 : 0) && !0 !== tests[0].match.optionality && !0 !== tests[0].match.optionalQuantifier && null === tests[0].match.fn && !/[0-9a-bA-Z]/.test(tests[0].match.def)) {
	                    if (getMaskSet().validPositions[pos - 1] === undefined) return [ determineTestTemplate(tests) ];
	                    if (getMaskSet().validPositions[pos - 1].alternation === tests[0].alternation) return [ determineTestTemplate(tests) ];
	                    if (getMaskSet().validPositions[pos - 1]) return [ determineTestTemplate(tests) ];
	                }
	                return tests;
	            }
	            var latestMatch, maskTokens = getMaskSet().maskToken, testPos = ndxIntlzr ? tstPs : 0, ndxInitializer = ndxIntlzr ? ndxIntlzr.slice() : [ 0 ], matches = [], insertStop = !1, cacheDependency = ndxIntlzr ? ndxIntlzr.join("") : "";
	            if (pos > -1) {
	                if (ndxIntlzr === undefined) {
	                    for (var test, previousPos = pos - 1; (test = getMaskSet().validPositions[previousPos] || getMaskSet().tests[previousPos]) === undefined && previousPos > -1; ) previousPos--;
	                    test !== undefined && previousPos > -1 && (ndxInitializer = function(tests) {
	                        var locator = [];
	                        return $.isArray(tests) || (tests = [ tests ]), tests.length > 0 && (tests[0].alternation === undefined ? (locator = determineTestTemplate(tests.slice()).locator.slice(), 
	                        0 === locator.length && (locator = tests[0].locator.slice())) : $.each(tests, function(ndx, tst) {
	                            if ("" !== tst.def) if (0 === locator.length) locator = tst.locator.slice(); else for (var i = 0; i < locator.length; i++) tst.locator[i] && -1 === locator[i].toString().indexOf(tst.locator[i]) && (locator[i] += "," + tst.locator[i]);
	                        })), locator;
	                    }(test), cacheDependency = ndxInitializer.join(""), testPos = previousPos);
	                }
	                if (getMaskSet().tests[pos] && getMaskSet().tests[pos][0].cd === cacheDependency) return filterTests(getMaskSet().tests[pos]);
	                for (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length; mtndx++) {
	                    if (resolveTestFromToken(maskTokens[mtndx], ndxInitializer, [ mtndx ]) && testPos === pos || testPos > pos) break;
	                }
	            }
	            return (0 === matches.length || insertStop) && matches.push({
	                match: {
	                    fn: null,
	                    cardinality: 0,
	                    optionality: !0,
	                    casing: null,
	                    def: "",
	                    placeholder: ""
	                },
	                locator: [],
	                cd: cacheDependency
	            }), ndxIntlzr !== undefined && getMaskSet().tests[pos] ? filterTests($.extend(!0, [], matches)) : (getMaskSet().tests[pos] = $.extend(!0, [], matches), 
	            filterTests(getMaskSet().tests[pos]));
	        }
	        function getBufferTemplate() {
	            return getMaskSet()._buffer === undefined && (getMaskSet()._buffer = getMaskTemplate(!1, 1), 
	            getMaskSet().buffer === undefined && (getMaskSet().buffer = getMaskSet()._buffer.slice())), 
	            getMaskSet()._buffer;
	        }
	        function getBuffer(noCache) {
	            return getMaskSet().buffer !== undefined && !0 !== noCache || (getMaskSet().buffer = getMaskTemplate(!0, getLastValidPosition(), !0)), 
	            getMaskSet().buffer;
	        }
	        function refreshFromBuffer(start, end, buffer) {
	            var i, p;
	            if (!0 === start) resetMaskSet(), start = 0, end = buffer.length; else for (i = start; i < end; i++) delete getMaskSet().validPositions[i];
	            for (p = start, i = start; i < end; i++) if (resetMaskSet(!0), buffer[i] !== opts.skipOptionalPartCharacter) {
	                var valResult = isValid(p, buffer[i], !0, !0);
	                !1 !== valResult && (resetMaskSet(!0), p = valResult.caret !== undefined ? valResult.caret : valResult.pos + 1);
	            }
	        }
	        function casing(elem, test, pos) {
	            switch (opts.casing || test.casing) {
	              case "upper":
	                elem = elem.toUpperCase();
	                break;
	
	              case "lower":
	                elem = elem.toLowerCase();
	                break;
	
	              case "title":
	                var posBefore = getMaskSet().validPositions[pos - 1];
	                elem = 0 === pos || posBefore && posBefore.input === String.fromCharCode(Inputmask.keyCode.SPACE) ? elem.toUpperCase() : elem.toLowerCase();
	                break;
	
	              default:
	                if ($.isFunction(opts.casing)) {
	                    var args = Array.prototype.slice.call(arguments);
	                    args.push(getMaskSet().validPositions), elem = opts.casing.apply(this, args);
	                }
	            }
	            return elem;
	        }
	        function checkAlternationMatch(altArr1, altArr2, na) {
	            for (var naNdx, altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1), isMatch = !1, naArr = na !== undefined ? na.split(",") : [], i = 0; i < naArr.length; i++) -1 !== (naNdx = altArr1.indexOf(naArr[i])) && altArr1.splice(naNdx, 1);
	            for (var alndx = 0; alndx < altArr1.length; alndx++) if (-1 !== $.inArray(altArr1[alndx], altArrC)) {
	                isMatch = !0;
	                break;
	            }
	            return isMatch;
	        }
	        function isValid(pos, c, strict, fromSetValid, fromAlternate) {
	            function isSelection(posObj) {
	                var selection = isRTL ? posObj.begin - posObj.end > 1 || posObj.begin - posObj.end == 1 : posObj.end - posObj.begin > 1 || posObj.end - posObj.begin == 1;
	                return selection && 0 === posObj.begin && posObj.end === getMaskSet().maskLength ? "full" : selection;
	            }
	            function _isValid(position, c, strict) {
	                var rslt = !1;
	                return $.each(getTests(position), function(ndx, tst) {
	                    for (var test = tst.match, loopend = c ? 1 : 0, chrs = "", i = test.cardinality; i > loopend; i--) chrs += getBufferElement(position - (i - 1));
	                    if (c && (chrs += c), getBuffer(!0), !1 !== (rslt = null != test.fn ? test.fn.test(chrs, getMaskSet(), position, strict, opts, isSelection(pos)) : (c === test.def || c === opts.skipOptionalPartCharacter) && "" !== test.def && {
	                        c: getPlaceholder(position, test, !0) || test.def,
	                        pos: position
	                    })) {
	                        var elem = rslt.c !== undefined ? rslt.c : c;
	                        elem = elem === opts.skipOptionalPartCharacter && null === test.fn ? getPlaceholder(position, test, !0) || test.def : elem;
	                        var validatedPos = position, possibleModifiedBuffer = getBuffer();
	                        if (rslt.remove !== undefined && ($.isArray(rslt.remove) || (rslt.remove = [ rslt.remove ]), 
	                        $.each(rslt.remove.sort(function(a, b) {
	                            return b - a;
	                        }), function(ndx, lmnt) {
	                            stripValidPositions(lmnt, lmnt + 1, !0);
	                        })), rslt.insert !== undefined && ($.isArray(rslt.insert) || (rslt.insert = [ rslt.insert ]), 
	                        $.each(rslt.insert.sort(function(a, b) {
	                            return a - b;
	                        }), function(ndx, lmnt) {
	                            isValid(lmnt.pos, lmnt.c, !0, fromSetValid);
	                        })), rslt.refreshFromBuffer) {
	                            var refresh = rslt.refreshFromBuffer;
	                            if (refreshFromBuffer(!0 === refresh ? refresh : refresh.start, refresh.end, possibleModifiedBuffer), 
	                            rslt.pos === undefined && rslt.c === undefined) return rslt.pos = getLastValidPosition(), 
	                            !1;
	                            if ((validatedPos = rslt.pos !== undefined ? rslt.pos : position) !== position) return rslt = $.extend(rslt, isValid(validatedPos, elem, !0, fromSetValid)), 
	                            !1;
	                        } else if (!0 !== rslt && rslt.pos !== undefined && rslt.pos !== position && (validatedPos = rslt.pos, 
	                        refreshFromBuffer(position, validatedPos, getBuffer().slice()), validatedPos !== position)) return rslt = $.extend(rslt, isValid(validatedPos, elem, !0)), 
	                        !1;
	                        return (!0 === rslt || rslt.pos !== undefined || rslt.c !== undefined) && (ndx > 0 && resetMaskSet(!0), 
	                        setValidPosition(validatedPos, $.extend({}, tst, {
	                            input: casing(elem, test, validatedPos)
	                        }), fromSetValid, isSelection(pos)) || (rslt = !1), !1);
	                    }
	                }), rslt;
	            }
	            function setValidPosition(pos, validTest, fromSetValid, isSelection) {
	                if (isSelection || opts.insertMode && getMaskSet().validPositions[pos] !== undefined && fromSetValid === undefined) {
	                    var i, positionsClone = $.extend(!0, {}, getMaskSet().validPositions), lvp = getLastValidPosition(undefined, !0);
	                    for (i = pos; i <= lvp; i++) delete getMaskSet().validPositions[i];
	                    getMaskSet().validPositions[pos] = $.extend(!0, {}, validTest);
	                    var j, valid = !0, vps = getMaskSet().validPositions, needsValidation = !1, initialLength = getMaskSet().maskLength;
	                    for (i = j = pos; i <= lvp; i++) {
	                        var t = positionsClone[i];
	                        if (t !== undefined) for (var posMatch = j; posMatch < getMaskSet().maskLength && (null === t.match.fn && vps[i] && (!0 === vps[i].match.optionalQuantifier || !0 === vps[i].match.optionality) || null != t.match.fn); ) {
	                            if (posMatch++, !1 === needsValidation && positionsClone[posMatch] && positionsClone[posMatch].match.def === t.match.def) getMaskSet().validPositions[posMatch] = $.extend(!0, {}, positionsClone[posMatch]), 
	                            getMaskSet().validPositions[posMatch].input = t.input, fillMissingNonMask(posMatch), 
	                            j = posMatch, valid = !0; else if (positionCanMatchDefinition(posMatch, t.match.def)) {
	                                var result = isValid(posMatch, t.input, !0, !0);
	                                valid = !1 !== result, j = result.caret || result.insert ? getLastValidPosition() : posMatch, 
	                                needsValidation = !0;
	                            } else if (!(valid = !0 === t.generatedInput) && posMatch >= getMaskSet().maskLength - 1) break;
	                            if (getMaskSet().maskLength < initialLength && (getMaskSet().maskLength = initialLength), 
	                            valid) break;
	                        }
	                        if (!valid) break;
	                    }
	                    if (!valid) return getMaskSet().validPositions = $.extend(!0, {}, positionsClone), 
	                    resetMaskSet(!0), !1;
	                } else getMaskSet().validPositions[pos] = $.extend(!0, {}, validTest);
	                return resetMaskSet(!0), !0;
	            }
	            function fillMissingNonMask(maskPos) {
	                for (var pndx = maskPos - 1; pndx > -1 && !getMaskSet().validPositions[pndx]; pndx--) ;
	                var testTemplate, testsFromPos;
	                for (pndx++; pndx < maskPos; pndx++) getMaskSet().validPositions[pndx] === undefined && (!1 === opts.jitMasking || opts.jitMasking > pndx) && (testsFromPos = getTests(pndx, getTestTemplate(pndx - 1).locator, pndx - 1).slice(), 
	                "" === testsFromPos[testsFromPos.length - 1].match.def && testsFromPos.pop(), (testTemplate = determineTestTemplate(testsFromPos)) && (testTemplate.match.def === opts.radixPointDefinitionSymbol || !isMask(pndx, !0) || $.inArray(opts.radixPoint, getBuffer()) < pndx && testTemplate.match.fn && testTemplate.match.fn.test(getPlaceholder(pndx), getMaskSet(), pndx, !1, opts)) && !1 !== (result = _isValid(pndx, getPlaceholder(pndx, testTemplate.match, !0) || (null == testTemplate.match.fn ? testTemplate.match.def : "" !== getPlaceholder(pndx) ? getPlaceholder(pndx) : getBuffer()[pndx]), !0)) && (getMaskSet().validPositions[result.pos || pndx].generatedInput = !0));
	            }
	            strict = !0 === strict;
	            var maskPos = pos;
	            pos.begin !== undefined && (maskPos = isRTL && !isSelection(pos) ? pos.end : pos.begin);
	            var result = !0, positionsClone = $.extend(!0, {}, getMaskSet().validPositions);
	            if ($.isFunction(opts.preValidation) && !strict && !0 !== fromSetValid && (result = opts.preValidation(getBuffer(), maskPos, c, isSelection(pos), opts)), 
	            !0 === result) {
	                if (fillMissingNonMask(maskPos), isSelection(pos) && (handleRemove(undefined, Inputmask.keyCode.DELETE, pos, !0), 
	                maskPos = getMaskSet().p), maskPos < getMaskSet().maskLength && (maxLength === undefined || maskPos < maxLength) && (result = _isValid(maskPos, c, strict), 
	                (!strict || !0 === fromSetValid) && !1 === result)) {
	                    var currentPosValid = getMaskSet().validPositions[maskPos];
	                    if (!currentPosValid || null !== currentPosValid.match.fn || currentPosValid.match.def !== c && c !== opts.skipOptionalPartCharacter) {
	                        if ((opts.insertMode || getMaskSet().validPositions[seekNext(maskPos)] === undefined) && !isMask(maskPos, !0)) for (var nPos = maskPos + 1, snPos = seekNext(maskPos); nPos <= snPos; nPos++) if (!1 !== (result = _isValid(nPos, c, strict))) {
	                            !function(originalPos, newPos) {
	                                var vp = getMaskSet().validPositions[newPos];
	                                if (vp) for (var targetLocator = vp.locator, tll = targetLocator.length, ps = originalPos; ps < newPos; ps++) if (getMaskSet().validPositions[ps] === undefined && !isMask(ps, !0)) {
	                                    var tests = getTests(ps).slice(), bestMatch = determineTestTemplate(tests, !0), equality = -1;
	                                    "" === tests[tests.length - 1].match.def && tests.pop(), $.each(tests, function(ndx, tst) {
	                                        for (var i = 0; i < tll; i++) {
	                                            if (tst.locator[i] === undefined || !checkAlternationMatch(tst.locator[i].toString().split(","), targetLocator[i].toString().split(","), tst.na)) {
	                                                var targetAI = targetLocator[i], bestMatchAI = bestMatch.locator[i], tstAI = tst.locator[i];
	                                                targetAI - bestMatchAI > Math.abs(targetAI - tstAI) && (bestMatch = tst);
	                                                break;
	                                            }
	                                            equality < i && (equality = i, bestMatch = tst);
	                                        }
	                                    }), bestMatch = $.extend({}, bestMatch, {
	                                        input: getPlaceholder(ps, bestMatch.match, !0) || bestMatch.match.def
	                                    }), bestMatch.generatedInput = !0, setValidPosition(ps, bestMatch, !0), getMaskSet().validPositions[newPos] = undefined, 
	                                    _isValid(newPos, vp.input, !0);
	                                }
	                            }(maskPos, result.pos !== undefined ? result.pos : nPos), maskPos = nPos;
	                            break;
	                        }
	                    } else result = {
	                        caret: seekNext(maskPos)
	                    };
	                }
	                !1 === result && opts.keepStatic && !strict && !0 !== fromAlternate && (result = function(pos, c, strict) {
	                    var lastAlt, alternation, altPos, prevAltPos, i, validPos, altNdxs, decisionPos, validPsClone = $.extend(!0, {}, getMaskSet().validPositions), isValidRslt = !1, lAltPos = getLastValidPosition();
	                    for (prevAltPos = getMaskSet().validPositions[lAltPos]; lAltPos >= 0; lAltPos--) if ((altPos = getMaskSet().validPositions[lAltPos]) && altPos.alternation !== undefined) {
	                        if (lastAlt = lAltPos, alternation = getMaskSet().validPositions[lastAlt].alternation, 
	                        prevAltPos.locator[altPos.alternation] !== altPos.locator[altPos.alternation]) break;
	                        prevAltPos = altPos;
	                    }
	                    if (alternation !== undefined) {
	                        decisionPos = parseInt(lastAlt);
	                        var decisionTaker = prevAltPos.locator[prevAltPos.alternation || alternation] !== undefined ? prevAltPos.locator[prevAltPos.alternation || alternation] : altNdxs[0];
	                        decisionTaker.length > 0 && (decisionTaker = decisionTaker.split(",")[0]);
	                        var possibilityPos = getMaskSet().validPositions[decisionPos], prevPos = getMaskSet().validPositions[decisionPos - 1];
	                        $.each(getTests(decisionPos, prevPos ? prevPos.locator : undefined, decisionPos - 1), function(ndx, test) {
	                            altNdxs = test.locator[alternation] ? test.locator[alternation].toString().split(",") : [];
	                            for (var mndx = 0; mndx < altNdxs.length; mndx++) {
	                                var validInputs = [], staticInputsBeforePos = 0, staticInputsBeforePosAlternate = 0, verifyValidInput = !1;
	                                if (decisionTaker < altNdxs[mndx] && (test.na === undefined || -1 === $.inArray(altNdxs[mndx], test.na.split(",")) || -1 === $.inArray(decisionTaker.toString(), altNdxs))) {
	                                    getMaskSet().validPositions[decisionPos] = $.extend(!0, {}, test);
	                                    var possibilities = getMaskSet().validPositions[decisionPos].locator;
	                                    for (getMaskSet().validPositions[decisionPos].locator[alternation] = parseInt(altNdxs[mndx]), 
	                                    null == test.match.fn ? (possibilityPos.input !== test.match.def && (verifyValidInput = !0, 
	                                    !0 !== possibilityPos.generatedInput && validInputs.push(possibilityPos.input)), 
	                                    staticInputsBeforePosAlternate++, getMaskSet().validPositions[decisionPos].generatedInput = !/[0-9a-bA-Z]/.test(test.match.def), 
	                                    getMaskSet().validPositions[decisionPos].input = test.match.def) : getMaskSet().validPositions[decisionPos].input = possibilityPos.input, 
	                                    i = decisionPos + 1; i < getLastValidPosition(undefined, !0) + 1; i++) validPos = getMaskSet().validPositions[i], 
	                                    validPos && !0 !== validPos.generatedInput && /[0-9a-bA-Z]/.test(validPos.input) ? validInputs.push(validPos.input) : i < pos && staticInputsBeforePos++, 
	                                    delete getMaskSet().validPositions[i];
	                                    for (verifyValidInput && validInputs[0] === test.match.def && validInputs.shift(), 
	                                    resetMaskSet(!0), isValidRslt = !0; validInputs.length > 0; ) {
	                                        var input = validInputs.shift();
	                                        if (input !== opts.skipOptionalPartCharacter && !(isValidRslt = isValid(getLastValidPosition(undefined, !0) + 1, input, !1, fromSetValid, !0))) break;
	                                    }
	                                    if (isValidRslt) {
	                                        getMaskSet().validPositions[decisionPos].locator = possibilities;
	                                        var targetLvp = getLastValidPosition(pos) + 1;
	                                        for (i = decisionPos + 1; i < getLastValidPosition() + 1; i++) ((validPos = getMaskSet().validPositions[i]) === undefined || null == validPos.match.fn) && i < pos + (staticInputsBeforePosAlternate - staticInputsBeforePos) && staticInputsBeforePosAlternate++;
	                                        pos += staticInputsBeforePosAlternate - staticInputsBeforePos, isValidRslt = isValid(pos > targetLvp ? targetLvp : pos, c, strict, fromSetValid, !0);
	                                    }
	                                    if (isValidRslt) return !1;
	                                    resetMaskSet(), getMaskSet().validPositions = $.extend(!0, {}, validPsClone);
	                                }
	                            }
	                        });
	                    }
	                    return isValidRslt;
	                }(maskPos, c, strict)), !0 === result && (result = {
	                    pos: maskPos
	                });
	            }
	            if ($.isFunction(opts.postValidation) && !1 !== result && !strict && !0 !== fromSetValid) {
	                var postResult = opts.postValidation(getBuffer(!0), result, opts);
	                if (postResult.refreshFromBuffer && postResult.buffer) {
	                    var refresh = postResult.refreshFromBuffer;
	                    refreshFromBuffer(!0 === refresh ? refresh : refresh.start, refresh.end, postResult.buffer);
	                }
	                result = !0 === postResult ? result : postResult;
	            }
	            return result && result.pos === undefined && (result.pos = maskPos), !1 === result && (resetMaskSet(!0), 
	            getMaskSet().validPositions = $.extend(!0, {}, positionsClone)), result;
	        }
	        function isMask(pos, strict) {
	            var test = getTestTemplate(pos).match;
	            if ("" === test.def && (test = getTest(pos).match), null != test.fn) return test.fn;
	            if (!0 !== strict && pos > -1) {
	                var tests = getTests(pos);
	                return tests.length > 1 + ("" === tests[tests.length - 1].match.def ? 1 : 0);
	            }
	            return !1;
	        }
	        function seekNext(pos, newBlock) {
	            var maskL = getMaskSet().maskLength;
	            if (pos >= maskL) return maskL;
	            var position = pos;
	            for (getTests(maskL + 1).length > 1 && (getMaskTemplate(!0, maskL + 1, !0), maskL = getMaskSet().maskLength); ++position < maskL && (!0 === newBlock && (!0 !== getTest(position).match.newBlockMarker || !isMask(position)) || !0 !== newBlock && !isMask(position)); ) ;
	            return position;
	        }
	        function seekPrevious(pos, newBlock) {
	            var tests, position = pos;
	            if (position <= 0) return 0;
	            for (;--position > 0 && (!0 === newBlock && !0 !== getTest(position).match.newBlockMarker || !0 !== newBlock && !isMask(position) && (tests = getTests(position), 
	            tests.length < 2 || 2 === tests.length && "" === tests[1].match.def)); ) ;
	            return position;
	        }
	        function getBufferElement(position) {
	            return getMaskSet().validPositions[position] === undefined ? getPlaceholder(position) : getMaskSet().validPositions[position].input;
	        }
	        function writeBuffer(input, buffer, caretPos, event, triggerInputEvent) {
	            if (event && $.isFunction(opts.onBeforeWrite)) {
	                var result = opts.onBeforeWrite(event, buffer, caretPos, opts);
	                if (result) {
	                    if (result.refreshFromBuffer) {
	                        var refresh = result.refreshFromBuffer;
	                        refreshFromBuffer(!0 === refresh ? refresh : refresh.start, refresh.end, result.buffer || buffer), 
	                        buffer = getBuffer(!0);
	                    }
	                    caretPos !== undefined && (caretPos = result.caret !== undefined ? result.caret : caretPos);
	                }
	            }
	            input !== undefined && (input.inputmask._valueSet(buffer.join("")), caretPos === undefined || event !== undefined && "blur" === event.type ? renderColorMask(input, buffer, caretPos) : android && "input" === event.type ? setTimeout(function() {
	                caret(input, caretPos);
	            }, 0) : caret(input, caretPos), !0 === triggerInputEvent && (skipInputEvent = !0, 
	            $(input).trigger("input")));
	        }
	        function getPlaceholder(pos, test, returnPL) {
	            if (test = test || getTest(pos).match, test.placeholder !== undefined || !0 === returnPL) return $.isFunction(test.placeholder) ? test.placeholder(opts) : test.placeholder;
	            if (null === test.fn) {
	                if (pos > -1 && getMaskSet().validPositions[pos] === undefined) {
	                    var prevTest, tests = getTests(pos), staticAlternations = [];
	                    if (tests.length > 1 + ("" === tests[tests.length - 1].match.def ? 1 : 0)) for (var i = 0; i < tests.length; i++) if (!0 !== tests[i].match.optionality && !0 !== tests[i].match.optionalQuantifier && (null === tests[i].match.fn || prevTest === undefined || !1 !== tests[i].match.fn.test(prevTest.match.def, getMaskSet(), pos, !0, opts)) && (staticAlternations.push(tests[i]), 
	                    null === tests[i].match.fn && (prevTest = tests[i]), staticAlternations.length > 1 && /[0-9a-bA-Z]/.test(staticAlternations[0].match.def))) return opts.placeholder.charAt(pos % opts.placeholder.length);
	                }
	                return test.def;
	            }
	            return opts.placeholder.charAt(pos % opts.placeholder.length);
	        }
	        function checkVal(input, writeOut, strict, nptvl, initiatingEvent) {
	            function isTemplateMatch(ndx, charCodes) {
	                return -1 !== getBufferTemplate().slice(ndx, seekNext(ndx)).join("").indexOf(charCodes) && !isMask(ndx) && getTest(ndx).match.nativeDef === charCodes.charAt(charCodes.length - 1);
	            }
	            var inputValue = nptvl.slice(), charCodes = "", initialNdx = 0, result = undefined;
	            if (resetMaskSet(), getMaskSet().p = seekNext(-1), !strict) if (!0 !== opts.autoUnmask) {
	                var staticInput = getBufferTemplate().slice(0, seekNext(-1)).join(""), matches = inputValue.join("").match(new RegExp("^" + Inputmask.escapeRegex(staticInput), "g"));
	                matches && matches.length > 0 && (inputValue.splice(0, matches.length * staticInput.length), 
	                initialNdx = seekNext(initialNdx));
	            } else initialNdx = seekNext(initialNdx);
	            if ($.each(inputValue, function(ndx, charCode) {
	                if (charCode !== undefined) {
	                    var keypress = new $.Event("_checkval");
	                    keypress.which = charCode.charCodeAt(0), charCodes += charCode;
	                    var lvp = getLastValidPosition(undefined, !0), lvTest = getMaskSet().validPositions[lvp], nextTest = getTestTemplate(lvp + 1, lvTest ? lvTest.locator.slice() : undefined, lvp);
	                    if (!isTemplateMatch(initialNdx, charCodes) || strict || opts.autoUnmask) {
	                        var pos = strict ? ndx : null == nextTest.match.fn && nextTest.match.optionality && lvp + 1 < getMaskSet().p ? lvp + 1 : getMaskSet().p;
	                        result = EventHandlers.keypressEvent.call(input, keypress, !0, !1, strict, pos), 
	                        initialNdx = pos + 1, charCodes = "";
	                    } else result = EventHandlers.keypressEvent.call(input, keypress, !0, !1, !0, lvp + 1);
	                    if (!1 !== result && !strict && $.isFunction(opts.onBeforeWrite)) {
	                        var fp = result.forwardPosition;
	                        if (result = opts.onBeforeWrite(keypress, getBuffer(), result.forwardPosition, opts), 
	                        result.forwardPosition = fp, result && result.refreshFromBuffer) {
	                            var refresh = result.refreshFromBuffer;
	                            refreshFromBuffer(!0 === refresh ? refresh : refresh.start, refresh.end, result.buffer), 
	                            resetMaskSet(!0), result.caret && (getMaskSet().p = result.caret, result.forwardPosition = result.caret);
	                        }
	                    }
	                }
	            }), writeOut) {
	                var caretPos = undefined;
	                document.activeElement === input && result && (caretPos = opts.numericInput ? seekPrevious(result.forwardPosition) : result.forwardPosition), 
	                writeBuffer(input, getBuffer(), caretPos, initiatingEvent || new $.Event("checkval"), initiatingEvent && "input" === initiatingEvent.type);
	            }
	        }
	        function unmaskedvalue(input) {
	            if (input) {
	                if (input.inputmask === undefined) return input.value;
	                input.inputmask && input.inputmask.refreshValue && EventHandlers.setValueEvent.call(input);
	            }
	            var umValue = [], vps = getMaskSet().validPositions;
	            for (var pndx in vps) vps[pndx].match && null != vps[pndx].match.fn && umValue.push(vps[pndx].input);
	            var unmaskedValue = 0 === umValue.length ? "" : (isRTL ? umValue.reverse() : umValue).join("");
	            if ($.isFunction(opts.onUnMask)) {
	                var bufferValue = (isRTL ? getBuffer().slice().reverse() : getBuffer()).join("");
	                unmaskedValue = opts.onUnMask(bufferValue, unmaskedValue, opts);
	            }
	            return unmaskedValue;
	        }
	        function caret(input, begin, end, notranslate) {
	            function translatePosition(pos) {
	                if (!0 !== notranslate && isRTL && "number" == typeof pos && (!opts.greedy || "" !== opts.placeholder)) {
	                    pos = getBuffer().join("").length - pos;
	                }
	                return pos;
	            }
	            var range;
	            if (begin === undefined) return input.setSelectionRange ? (begin = input.selectionStart, 
	            end = input.selectionEnd) : window.getSelection ? (range = window.getSelection().getRangeAt(0), 
	            range.commonAncestorContainer.parentNode !== input && range.commonAncestorContainer !== input || (begin = range.startOffset, 
	            end = range.endOffset)) : document.selection && document.selection.createRange && (range = document.selection.createRange(), 
	            begin = 0 - range.duplicate().moveStart("character", -input.inputmask._valueGet().length), 
	            end = begin + range.text.length), {
	                begin: translatePosition(begin),
	                end: translatePosition(end)
	            };
	            if (begin.begin !== undefined && (end = begin.end, begin = begin.begin), "number" == typeof begin) {
	                begin = translatePosition(begin), end = translatePosition(end), end = "number" == typeof end ? end : begin;
	                var scrollCalc = parseInt(((input.ownerDocument.defaultView || window).getComputedStyle ? (input.ownerDocument.defaultView || window).getComputedStyle(input, null) : input.currentStyle).fontSize) * end;
	                if (input.scrollLeft = scrollCalc > input.scrollWidth ? scrollCalc : 0, mobile || !1 !== opts.insertMode || begin !== end || end++, 
	                input.setSelectionRange) input.selectionStart = begin, input.selectionEnd = end; else if (window.getSelection) {
	                    if (range = document.createRange(), input.firstChild === undefined || null === input.firstChild) {
	                        var textNode = document.createTextNode("");
	                        input.appendChild(textNode);
	                    }
	                    range.setStart(input.firstChild, begin < input.inputmask._valueGet().length ? begin : input.inputmask._valueGet().length), 
	                    range.setEnd(input.firstChild, end < input.inputmask._valueGet().length ? end : input.inputmask._valueGet().length), 
	                    range.collapse(!0);
	                    var sel = window.getSelection();
	                    sel.removeAllRanges(), sel.addRange(range);
	                } else input.createTextRange && (range = input.createTextRange(), range.collapse(!0), 
	                range.moveEnd("character", end), range.moveStart("character", begin), range.select());
	                renderColorMask(input, undefined, {
	                    begin: begin,
	                    end: end
	                });
	            }
	        }
	        function determineLastRequiredPosition(returnDefinition) {
	            var pos, testPos, buffer = getBuffer(), bl = buffer.length, lvp = getLastValidPosition(), positions = {}, lvTest = getMaskSet().validPositions[lvp], ndxIntlzr = lvTest !== undefined ? lvTest.locator.slice() : undefined;
	            for (pos = lvp + 1; pos < buffer.length; pos++) testPos = getTestTemplate(pos, ndxIntlzr, pos - 1), 
	            ndxIntlzr = testPos.locator.slice(), positions[pos] = $.extend(!0, {}, testPos);
	            var lvTestAlt = lvTest && lvTest.alternation !== undefined ? lvTest.locator[lvTest.alternation] : undefined;
	            for (pos = bl - 1; pos > lvp && (testPos = positions[pos], (testPos.match.optionality || testPos.match.optionalQuantifier && testPos.match.newBlockMarker || lvTestAlt && (lvTestAlt !== positions[pos].locator[lvTest.alternation] && null != testPos.match.fn || null === testPos.match.fn && testPos.locator[lvTest.alternation] && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","), lvTestAlt.toString().split(",")) && "" !== getTests(pos)[0].def)) && buffer[pos] === getPlaceholder(pos, testPos.match)); pos--) bl--;
	            return returnDefinition ? {
	                l: bl,
	                def: positions[bl] ? positions[bl].match : undefined
	            } : bl;
	        }
	        function clearOptionalTail(buffer) {
	            for (var validPos, rl = determineLastRequiredPosition(), bl = buffer.length, lv = getMaskSet().validPositions[getLastValidPosition()]; rl < bl && !isMask(rl, !0) && (validPos = lv !== undefined ? getTestTemplate(rl, lv.locator.slice(""), lv) : getTest(rl)) && !0 !== validPos.match.optionality && (!0 !== validPos.match.optionalQuantifier && !0 !== validPos.match.newBlockMarker || rl + 1 === bl && "" === (lv !== undefined ? getTestTemplate(rl + 1, lv.locator.slice(""), lv) : getTest(rl + 1)).match.def); ) rl++;
	            for (;(validPos = getMaskSet().validPositions[rl - 1]) && validPos && validPos.match.optionality && validPos.input === opts.skipOptionalPartCharacter; ) rl--;
	            return buffer.splice(rl), buffer;
	        }
	        function isComplete(buffer) {
	            if ($.isFunction(opts.isComplete)) return opts.isComplete(buffer, opts);
	            if ("*" === opts.repeat) return undefined;
	            var complete = !1, lrp = determineLastRequiredPosition(!0), aml = seekPrevious(lrp.l);
	            if (lrp.def === undefined || lrp.def.newBlockMarker || lrp.def.optionality || lrp.def.optionalQuantifier) {
	                complete = !0;
	                for (var i = 0; i <= aml; i++) {
	                    var test = getTestTemplate(i).match;
	                    if (null !== test.fn && getMaskSet().validPositions[i] === undefined && !0 !== test.optionality && !0 !== test.optionalQuantifier || null === test.fn && buffer[i] !== getPlaceholder(i, test)) {
	                        complete = !1;
	                        break;
	                    }
	                }
	            }
	            return complete;
	        }
	        function handleRemove(input, k, pos, strict, fromIsValid) {
	            if ((opts.numericInput || isRTL) && (k === Inputmask.keyCode.BACKSPACE ? k = Inputmask.keyCode.DELETE : k === Inputmask.keyCode.DELETE && (k = Inputmask.keyCode.BACKSPACE), 
	            isRTL)) {
	                var pend = pos.end;
	                pos.end = pos.begin, pos.begin = pend;
	            }
	            k === Inputmask.keyCode.BACKSPACE && (pos.end - pos.begin < 1 || !1 === opts.insertMode) ? (pos.begin = seekPrevious(pos.begin), 
	            getMaskSet().validPositions[pos.begin] !== undefined && getMaskSet().validPositions[pos.begin].input === opts.groupSeparator && pos.begin--) : k === Inputmask.keyCode.DELETE && pos.begin === pos.end && (pos.end = isMask(pos.end, !0) && getMaskSet().validPositions[pos.end] && getMaskSet().validPositions[pos.end].input !== opts.radixPoint ? pos.end + 1 : seekNext(pos.end) + 1, 
	            getMaskSet().validPositions[pos.begin] !== undefined && getMaskSet().validPositions[pos.begin].input === opts.groupSeparator && pos.end++), 
	            stripValidPositions(pos.begin, pos.end, !1, strict), !0 !== strict && function() {
	                if (opts.keepStatic) {
	                    for (var validInputs = [], lastAlt = getLastValidPosition(-1, !0), positionsClone = $.extend(!0, {}, getMaskSet().validPositions), prevAltPos = getMaskSet().validPositions[lastAlt]; lastAlt >= 0; lastAlt--) {
	                        var altPos = getMaskSet().validPositions[lastAlt];
	                        if (altPos) {
	                            if (!0 !== altPos.generatedInput && /[0-9a-bA-Z]/.test(altPos.input) && validInputs.push(altPos.input), 
	                            delete getMaskSet().validPositions[lastAlt], altPos.alternation !== undefined && altPos.locator[altPos.alternation] !== prevAltPos.locator[altPos.alternation]) break;
	                            prevAltPos = altPos;
	                        }
	                    }
	                    if (lastAlt > -1) for (getMaskSet().p = seekNext(getLastValidPosition(-1, !0)); validInputs.length > 0; ) {
	                        var keypress = new $.Event("keypress");
	                        keypress.which = validInputs.pop().charCodeAt(0), EventHandlers.keypressEvent.call(input, keypress, !0, !1, !1, getMaskSet().p);
	                    } else getMaskSet().validPositions = $.extend(!0, {}, positionsClone);
	                }
	            }();
	            var lvp = getLastValidPosition(pos.begin, !0);
	            if (lvp < pos.begin) getMaskSet().p = seekNext(lvp); else if (!0 !== strict && (getMaskSet().p = pos.begin, 
	            !0 !== fromIsValid)) for (;getMaskSet().p < lvp && getMaskSet().validPositions[getMaskSet().p] === undefined; ) getMaskSet().p++;
	        }
	        function initializeColorMask(input) {
	            function findCaretPos(clientx) {
	                var caretPos, e = document.createElement("span");
	                for (var style in computedStyle) isNaN(style) && -1 !== style.indexOf("font") && (e.style[style] = computedStyle[style]);
	                e.style.textTransform = computedStyle.textTransform, e.style.letterSpacing = computedStyle.letterSpacing, 
	                e.style.position = "absolute", e.style.height = "auto", e.style.width = "auto", 
	                e.style.visibility = "hidden", e.style.whiteSpace = "nowrap", document.body.appendChild(e);
	                var itl, inputText = input.inputmask._valueGet(), previousWidth = 0;
	                for (caretPos = 0, itl = inputText.length; caretPos <= itl; caretPos++) {
	                    if (e.innerHTML += inputText.charAt(caretPos) || "_", e.offsetWidth >= clientx) {
	                        var offset1 = clientx - previousWidth, offset2 = e.offsetWidth - clientx;
	                        e.innerHTML = inputText.charAt(caretPos), offset1 -= e.offsetWidth / 3, caretPos = offset1 < offset2 ? caretPos - 1 : caretPos;
	                        break;
	                    }
	                    previousWidth = e.offsetWidth;
	                }
	                return document.body.removeChild(e), caretPos;
	            }
	            function position() {
	                colorMask.style.position = "absolute", colorMask.style.top = offset.top + "px", 
	                colorMask.style.left = offset.left + "px", colorMask.style.width = parseInt(input.offsetWidth) - parseInt(computedStyle.paddingLeft) - parseInt(computedStyle.paddingRight) - parseInt(computedStyle.borderLeftWidth) - parseInt(computedStyle.borderRightWidth) + "px", 
	                colorMask.style.height = parseInt(input.offsetHeight) - parseInt(computedStyle.paddingTop) - parseInt(computedStyle.paddingBottom) - parseInt(computedStyle.borderTopWidth) - parseInt(computedStyle.borderBottomWidth) + "px", 
	                colorMask.style.lineHeight = colorMask.style.height, colorMask.style.zIndex = isNaN(computedStyle.zIndex) ? -1 : computedStyle.zIndex - 1, 
	                colorMask.style.webkitAppearance = "textfield", colorMask.style.mozAppearance = "textfield", 
	                colorMask.style.Appearance = "textfield";
	            }
	            var offset = $(input).position(), computedStyle = (input.ownerDocument.defaultView || window).getComputedStyle(input, null);
	            colorMask = document.createElement("div"), document.body.appendChild(colorMask);
	            for (var style in computedStyle) computedStyle.hasOwnProperty(style) && isNaN(style) && "cssText" !== style && -1 == style.indexOf("webkit") && (colorMask.style[style] = computedStyle[style]);
	            input.style.backgroundColor = "transparent", input.style.color = "transparent", 
	            input.style.webkitAppearance = "caret", input.style.mozAppearance = "caret", input.style.Appearance = "caret", 
	            position(), $(window).on("resize", function(e) {
	                offset = $(input).position(), computedStyle = (input.ownerDocument.defaultView || window).getComputedStyle(input, null), 
	                position();
	            }), $(input).on("click", function(e) {
	                return caret(input, findCaretPos(e.clientX)), EventHandlers.clickEvent.call(this, [ e ]);
	            }), $(input).on("keydown", function(e) {
	                e.shiftKey || !1 === opts.insertMode || setTimeout(function() {
	                    renderColorMask(input);
	                }, 0);
	            });
	        }
	        function renderColorMask(input, buffer, caretPos) {
	            function handleStatic() {
	                isStatic || null !== test.fn && testPos.input !== undefined ? isStatic && null !== test.fn && testPos.input !== undefined && (isStatic = !1, 
	                maskTemplate += "</span>") : (isStatic = !0, maskTemplate += "<span class='im-static''>");
	            }
	            if (colorMask !== undefined) {
	                buffer = buffer || getBuffer(), caretPos === undefined ? caretPos = caret(input) : caretPos.begin === undefined && (caretPos = {
	                    begin: caretPos,
	                    end: caretPos
	                });
	                var maskTemplate = "", isStatic = !1;
	                if ("" != buffer) {
	                    var ndxIntlzr, test, testPos, pos = 0, lvp = getLastValidPosition();
	                    do {
	                        pos === caretPos.begin && document.activeElement === input && (maskTemplate += "<span class='im-caret' style='border-right-width: 1px;border-right-style: solid;'></span>"), 
	                        getMaskSet().validPositions[pos] ? (testPos = getMaskSet().validPositions[pos], 
	                        test = testPos.match, ndxIntlzr = testPos.locator.slice(), handleStatic(), maskTemplate += testPos.input) : (testPos = getTestTemplate(pos, ndxIntlzr, pos - 1), 
	                        test = testPos.match, ndxIntlzr = testPos.locator.slice(), (!1 === opts.jitMasking || pos < lvp || "number" == typeof opts.jitMasking && isFinite(opts.jitMasking) && opts.jitMasking > pos) && (handleStatic(), 
	                        maskTemplate += getPlaceholder(pos, test))), pos++;
	                    } while ((maxLength === undefined || pos < maxLength) && (null !== test.fn || "" !== test.def) || lvp > pos);
	                }
	                colorMask.innerHTML = maskTemplate;
	            }
	        }
	        maskset = maskset || this.maskset, opts = opts || this.opts;
	        var undoValue, $el, maxLength, colorMask, valueBuffer, el = this.el, isRTL = this.isRTL, skipKeyPressEvent = !1, skipInputEvent = !1, ignorable = !1, mouseEnter = !1, EventRuler = {
	            on: function(input, eventName, eventHandler) {
	                var ev = function(e) {
	                    if (this.inputmask === undefined && "FORM" !== this.nodeName) {
	                        var imOpts = $.data(this, "_inputmask_opts");
	                        imOpts ? new Inputmask(imOpts).mask(this) : EventRuler.off(this);
	                    } else {
	                        if ("setvalue" === e.type || "FORM" === this.nodeName || !(this.disabled || this.readOnly && !("keydown" === e.type && e.ctrlKey && 67 === e.keyCode || !1 === opts.tabThrough && e.keyCode === Inputmask.keyCode.TAB))) {
	                            switch (e.type) {
	                              case "input":
	                                if (!0 === skipInputEvent) return skipInputEvent = !1, e.preventDefault();
	                                break;
	
	                              case "keydown":
	                                skipKeyPressEvent = !1, skipInputEvent = !1;
	                                break;
	
	                              case "keypress":
	                                if (!0 === skipKeyPressEvent) return e.preventDefault();
	                                skipKeyPressEvent = !0;
	                                break;
	
	                              case "click":
	                                if (iemobile || iphone) {
	                                    var that = this, args = arguments;
	                                    return setTimeout(function() {
	                                        eventHandler.apply(that, args);
	                                    }, 0), !1;
	                                }
	                            }
	                            var returnVal = eventHandler.apply(this, arguments);
	                            return !1 === returnVal && (e.preventDefault(), e.stopPropagation()), returnVal;
	                        }
	                        e.preventDefault();
	                    }
	                };
	                input.inputmask.events[eventName] = input.inputmask.events[eventName] || [], input.inputmask.events[eventName].push(ev), 
	                -1 !== $.inArray(eventName, [ "submit", "reset" ]) ? null != input.form && $(input.form).on(eventName, ev) : $(input).on(eventName, ev);
	            },
	            off: function(input, event) {
	                if (input.inputmask && input.inputmask.events) {
	                    var events;
	                    event ? (events = [], events[event] = input.inputmask.events[event]) : events = input.inputmask.events, 
	                    $.each(events, function(eventName, evArr) {
	                        for (;evArr.length > 0; ) {
	                            var ev = evArr.pop();
	                            -1 !== $.inArray(eventName, [ "submit", "reset" ]) ? null != input.form && $(input.form).off(eventName, ev) : $(input).off(eventName, ev);
	                        }
	                        delete input.inputmask.events[eventName];
	                    });
	                }
	            }
	        }, EventHandlers = {
	            keydownEvent: function(e) {
	                var input = this, $input = $(input), k = e.keyCode, pos = caret(input);
	                if (k === Inputmask.keyCode.BACKSPACE || k === Inputmask.keyCode.DELETE || iphone && k === Inputmask.keyCode.BACKSPACE_SAFARI || e.ctrlKey && k === Inputmask.keyCode.X && !function(eventName) {
	                    var el = document.createElement("input"), evName = "on" + eventName, isSupported = evName in el;
	                    return isSupported || (el.setAttribute(evName, "return;"), isSupported = "function" == typeof el[evName]), 
	                    el = null, isSupported;
	                }("cut")) e.preventDefault(), handleRemove(input, k, pos), writeBuffer(input, getBuffer(!0), getMaskSet().p, e, input.inputmask._valueGet() !== getBuffer().join("")), 
	                input.inputmask._valueGet() === getBufferTemplate().join("") ? $input.trigger("cleared") : !0 === isComplete(getBuffer()) && $input.trigger("complete"); else if (k === Inputmask.keyCode.END || k === Inputmask.keyCode.PAGE_DOWN) {
	                    e.preventDefault();
	                    var caretPos = seekNext(getLastValidPosition());
	                    opts.insertMode || caretPos !== getMaskSet().maskLength || e.shiftKey || caretPos--, 
	                    caret(input, e.shiftKey ? pos.begin : caretPos, caretPos, !0);
	                } else k === Inputmask.keyCode.HOME && !e.shiftKey || k === Inputmask.keyCode.PAGE_UP ? (e.preventDefault(), 
	                caret(input, 0, e.shiftKey ? pos.begin : 0, !0)) : (opts.undoOnEscape && k === Inputmask.keyCode.ESCAPE || 90 === k && e.ctrlKey) && !0 !== e.altKey ? (checkVal(input, !0, !1, undoValue.split("")), 
	                $input.trigger("click")) : k !== Inputmask.keyCode.INSERT || e.shiftKey || e.ctrlKey ? !0 === opts.tabThrough && k === Inputmask.keyCode.TAB ? (!0 === e.shiftKey ? (null === getTest(pos.begin).match.fn && (pos.begin = seekNext(pos.begin)), 
	                pos.end = seekPrevious(pos.begin, !0), pos.begin = seekPrevious(pos.end, !0)) : (pos.begin = seekNext(pos.begin, !0), 
	                pos.end = seekNext(pos.begin, !0), pos.end < getMaskSet().maskLength && pos.end--), 
	                pos.begin < getMaskSet().maskLength && (e.preventDefault(), caret(input, pos.begin, pos.end))) : e.shiftKey || !1 === opts.insertMode && (k === Inputmask.keyCode.RIGHT ? setTimeout(function() {
	                    var caretPos = caret(input);
	                    caret(input, caretPos.begin);
	                }, 0) : k === Inputmask.keyCode.LEFT && setTimeout(function() {
	                    var caretPos = caret(input);
	                    caret(input, isRTL ? caretPos.begin + 1 : caretPos.begin - 1);
	                }, 0)) : (opts.insertMode = !opts.insertMode, caret(input, opts.insertMode || pos.begin !== getMaskSet().maskLength ? pos.begin : pos.begin - 1));
	                opts.onKeyDown.call(this, e, getBuffer(), caret(input).begin, opts), ignorable = -1 !== $.inArray(k, opts.ignorables);
	            },
	            keypressEvent: function(e, checkval, writeOut, strict, ndx) {
	                var input = this, $input = $(input), k = e.which || e.charCode || e.keyCode;
	                if (!(!0 === checkval || e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || ignorable)) return k === Inputmask.keyCode.ENTER && undoValue !== getBuffer().join("") && (undoValue = getBuffer().join(""), 
	                setTimeout(function() {
	                    $input.trigger("change");
	                }, 0)), !0;
	                if (k) {
	                    46 === k && !1 === e.shiftKey && "" !== opts.radixPoint && (k = opts.radixPoint.charCodeAt(0));
	                    var forwardPosition, pos = checkval ? {
	                        begin: ndx,
	                        end: ndx
	                    } : caret(input), c = String.fromCharCode(k);
	                    getMaskSet().writeOutBuffer = !0;
	                    var valResult = isValid(pos, c, strict);
	                    if (!1 !== valResult && (resetMaskSet(!0), forwardPosition = valResult.caret !== undefined ? valResult.caret : checkval ? valResult.pos + 1 : seekNext(valResult.pos), 
	                    getMaskSet().p = forwardPosition), !1 !== writeOut && (setTimeout(function() {
	                        opts.onKeyValidation.call(input, k, valResult, opts);
	                    }, 0), getMaskSet().writeOutBuffer && !1 !== valResult)) {
	                        var buffer = getBuffer();
	                        writeBuffer(input, buffer, opts.numericInput && valResult.caret === undefined ? seekPrevious(forwardPosition) : forwardPosition, e, !0 !== checkval), 
	                        !0 !== checkval && setTimeout(function() {
	                            !0 === isComplete(buffer) && $input.trigger("complete");
	                        }, 0);
	                    }
	                    if (e.preventDefault(), checkval) return !1 !== valResult && (valResult.forwardPosition = forwardPosition), 
	                    valResult;
	                }
	            },
	            pasteEvent: function(e) {
	                var tempValue, input = this, ev = e.originalEvent || e, $input = $(input), inputValue = input.inputmask._valueGet(!0), caretPos = caret(input);
	                isRTL && (tempValue = caretPos.end, caretPos.end = caretPos.begin, caretPos.begin = tempValue);
	                var valueBeforeCaret = inputValue.substr(0, caretPos.begin), valueAfterCaret = inputValue.substr(caretPos.end, inputValue.length);
	                if (valueBeforeCaret === (isRTL ? getBufferTemplate().reverse() : getBufferTemplate()).slice(0, caretPos.begin).join("") && (valueBeforeCaret = ""), 
	                valueAfterCaret === (isRTL ? getBufferTemplate().reverse() : getBufferTemplate()).slice(caretPos.end).join("") && (valueAfterCaret = ""), 
	                isRTL && (tempValue = valueBeforeCaret, valueBeforeCaret = valueAfterCaret, valueAfterCaret = tempValue), 
	                window.clipboardData && window.clipboardData.getData) inputValue = valueBeforeCaret + window.clipboardData.getData("Text") + valueAfterCaret; else {
	                    if (!ev.clipboardData || !ev.clipboardData.getData) return !0;
	                    inputValue = valueBeforeCaret + ev.clipboardData.getData("text/plain") + valueAfterCaret;
	                }
	                var pasteValue = inputValue;
	                if ($.isFunction(opts.onBeforePaste)) {
	                    if (!1 === (pasteValue = opts.onBeforePaste(inputValue, opts))) return e.preventDefault();
	                    pasteValue || (pasteValue = inputValue);
	                }
	                return checkVal(input, !1, !1, isRTL ? pasteValue.split("").reverse() : pasteValue.toString().split("")), 
	                writeBuffer(input, getBuffer(), seekNext(getLastValidPosition()), e, undoValue !== getBuffer().join("")), 
	                !0 === isComplete(getBuffer()) && $input.trigger("complete"), e.preventDefault();
	            },
	            inputFallBackEvent: function(e) {
	                var input = this, inputValue = input.inputmask._valueGet();
	                if (getBuffer().join("") !== inputValue) {
	                    var caretPos = caret(input);
	                    if ("." === inputValue.charAt(caretPos.begin - 1) && "" !== opts.radixPoint && (inputValue = inputValue.split(""), 
	                    inputValue[caretPos.begin - 1] = opts.radixPoint.charAt(0), inputValue = inputValue.join("")), 
	                    inputValue.charAt(caretPos.begin - 1) === opts.radixPoint && inputValue.length > getBuffer().length) {
	                        var keypress = new $.Event("keypress");
	                        return keypress.which = opts.radixPoint.charCodeAt(0), EventHandlers.keypressEvent.call(input, keypress, !0, !0, !1, caretPos.begin), 
	                        !1;
	                    }
	                    if (inputValue = inputValue.replace(new RegExp("(" + Inputmask.escapeRegex(getBufferTemplate().join("")) + ")*"), ""), 
	                    iemobile) {
	                        var inputChar = inputValue.replace(getBuffer().join(""), "");
	                        if (1 === inputChar.length) {
	                            var keypress = new $.Event("keypress");
	                            return keypress.which = inputChar.charCodeAt(0), EventHandlers.keypressEvent.call(input, keypress, !0, !0, !1, getMaskSet().validPositions[caretPos.begin - 1] ? caretPos.begin : caretPos.begin - 1), 
	                            !1;
	                        }
	                    }
	                    if (caretPos.begin > inputValue.length && (caret(input, inputValue.length), caretPos = caret(input)), 
	                    getBuffer().length - inputValue.length != 1 || inputValue.charAt(caretPos.begin) === getBuffer()[caretPos.begin] || inputValue.charAt(caretPos.begin + 1) === getBuffer()[caretPos.begin] || isMask(caretPos.begin)) {
	                        var stickyParts = [], bufferTemplate = getBufferTemplate().join("");
	                        for (stickyParts.push(inputValue.substr(0, caretPos.begin)), stickyParts.push(inputValue.substr(caretPos.begin)); null === inputValue.match(Inputmask.escapeRegex(bufferTemplate) + "$"); ) bufferTemplate = bufferTemplate.slice(1);
	                        inputValue = inputValue.replace(bufferTemplate, ""), $.isFunction(opts.onBeforeMask) && (inputValue = opts.onBeforeMask(inputValue, opts) || inputValue), 
	                        checkVal(input, !0, !1, inputValue.split(""), e), function(input, frontPart, backPart) {
	                            var targetPos = caret(input).begin, currentValue = input.inputmask._valueGet(), pos = currentValue.indexOf(frontPart), currentPos = targetPos;
	                            if (0 === pos && targetPos !== frontPart.length) targetPos = frontPart.length; else {
	                                for (;null === currentValue.match(Inputmask.escapeRegex(backPart) + "$"); ) backPart = backPart.substr(1);
	                                var pos2 = currentValue.indexOf(backPart);
	                                -1 !== pos2 && "" !== backPart && targetPos > pos2 && pos2 > pos && (targetPos = pos2);
	                            }
	                            isMask(targetPos) || (targetPos = seekNext(targetPos)), currentPos !== targetPos && (caret(input, targetPos), 
	                            android && setTimeout(function() {
	                                caret(input, targetPos);
	                            }, 0));
	                        }(input, stickyParts[0], stickyParts[1]), !0 === isComplete(getBuffer()) && $(input).trigger("complete");
	                    } else e.keyCode = Inputmask.keyCode.BACKSPACE, EventHandlers.keydownEvent.call(input, e);
	                    e.preventDefault();
	                }
	            },
	            setValueEvent: function(e) {
	                this.inputmask.refreshValue = !1;
	                var input = this, value = input.inputmask._valueGet(!0);
	                $.isFunction(opts.onBeforeMask) && (value = opts.onBeforeMask(value, opts) || value), 
	                value = value.split(""), checkVal(input, !0, !1, isRTL ? value.reverse() : value), 
	                undoValue = getBuffer().join(""), (opts.clearMaskOnLostFocus || opts.clearIncomplete) && input.inputmask._valueGet() === getBufferTemplate().join("") && input.inputmask._valueSet("");
	            },
	            focusEvent: function(e) {
	                var input = this, nptValue = input.inputmask._valueGet();
	                opts.showMaskOnFocus && (!opts.showMaskOnHover || opts.showMaskOnHover && "" === nptValue) && (input.inputmask._valueGet() !== getBuffer().join("") ? writeBuffer(input, getBuffer(), seekNext(getLastValidPosition())) : !1 === mouseEnter && caret(input, seekNext(getLastValidPosition()))), 
	                !0 === opts.positionCaretOnTab && !1 === mouseEnter && (writeBuffer(input, getBuffer(), caret(input)), 
	                EventHandlers.clickEvent.apply(input, [ e, !0 ])), undoValue = getBuffer().join("");
	            },
	            mouseleaveEvent: function(e) {
	                var input = this;
	                if (mouseEnter = !1, opts.clearMaskOnLostFocus && document.activeElement !== input) {
	                    var buffer = getBuffer().slice(), nptValue = input.inputmask._valueGet();
	                    nptValue !== input.getAttribute("placeholder") && "" !== nptValue && (-1 === getLastValidPosition() && nptValue === getBufferTemplate().join("") ? buffer = [] : clearOptionalTail(buffer), 
	                    writeBuffer(input, buffer));
	                }
	            },
	            clickEvent: function(e, tabbed) {
	                function doRadixFocus(clickPos) {
	                    if ("" !== opts.radixPoint) {
	                        var vps = getMaskSet().validPositions;
	                        if (vps[clickPos] === undefined || vps[clickPos].input === getPlaceholder(clickPos)) {
	                            if (clickPos < seekNext(-1)) return !0;
	                            var radixPos = $.inArray(opts.radixPoint, getBuffer());
	                            if (-1 !== radixPos) {
	                                for (var vp in vps) if (radixPos < vp && vps[vp].input !== getPlaceholder(vp)) return !1;
	                                return !0;
	                            }
	                        }
	                    }
	                    return !1;
	                }
	                var input = this;
	                setTimeout(function() {
	                    if (document.activeElement === input) {
	                        var selectedCaret = caret(input);
	                        if (tabbed && (isRTL ? selectedCaret.end = selectedCaret.begin : selectedCaret.begin = selectedCaret.end), 
	                        selectedCaret.begin === selectedCaret.end) switch (opts.positionCaretOnClick) {
	                          case "none":
	                            break;
	
	                          case "radixFocus":
	                            if (doRadixFocus(selectedCaret.begin)) {
	                                var radixPos = getBuffer().join("").indexOf(opts.radixPoint);
	                                caret(input, opts.numericInput ? seekNext(radixPos) : radixPos);
	                                break;
	                            }
	
	                          default:
	                            var clickPosition = selectedCaret.begin, lvclickPosition = getLastValidPosition(clickPosition, !0), lastPosition = seekNext(lvclickPosition);
	                            if (clickPosition < lastPosition) caret(input, isMask(clickPosition) || isMask(clickPosition - 1) ? clickPosition : seekNext(clickPosition)); else {
	                                var placeholder = getPlaceholder(lastPosition), lvp = getMaskSet().validPositions[lvclickPosition], tt = getTestTemplate(lastPosition, lvp ? lvp.match.locator : undefined, lvp);
	                                if ("" !== placeholder && getBuffer()[lastPosition] !== placeholder && !0 !== tt.match.optionalQuantifier || !isMask(lastPosition) && tt.match.def === placeholder) {
	                                    var newPos = seekNext(lastPosition);
	                                    clickPosition >= newPos && (lastPosition = newPos);
	                                }
	                                caret(input, lastPosition);
	                            }
	                        }
	                    }
	                }, 0);
	            },
	            dblclickEvent: function(e) {
	                var input = this;
	                setTimeout(function() {
	                    caret(input, 0, seekNext(getLastValidPosition()));
	                }, 0);
	            },
	            cutEvent: function(e) {
	                var input = this, $input = $(input), pos = caret(input), ev = e.originalEvent || e, clipboardData = window.clipboardData || ev.clipboardData, clipData = isRTL ? getBuffer().slice(pos.end, pos.begin) : getBuffer().slice(pos.begin, pos.end);
	                clipboardData.setData("text", isRTL ? clipData.reverse().join("") : clipData.join("")), 
	                document.execCommand && document.execCommand("copy"), handleRemove(input, Inputmask.keyCode.DELETE, pos), 
	                writeBuffer(input, getBuffer(), getMaskSet().p, e, undoValue !== getBuffer().join("")), 
	                input.inputmask._valueGet() === getBufferTemplate().join("") && $input.trigger("cleared");
	            },
	            blurEvent: function(e) {
	                var $input = $(this), input = this;
	                if (input.inputmask) {
	                    var nptValue = input.inputmask._valueGet(), buffer = getBuffer().slice();
	                    "" !== nptValue && (opts.clearMaskOnLostFocus && (-1 === getLastValidPosition() && nptValue === getBufferTemplate().join("") ? buffer = [] : clearOptionalTail(buffer)), 
	                    !1 === isComplete(buffer) && (setTimeout(function() {
	                        $input.trigger("incomplete");
	                    }, 0), opts.clearIncomplete && (resetMaskSet(), buffer = opts.clearMaskOnLostFocus ? [] : getBufferTemplate().slice())), 
	                    writeBuffer(input, buffer, undefined, e)), undoValue !== getBuffer().join("") && (undoValue = buffer.join(""), 
	                    $input.trigger("change"));
	                }
	            },
	            mouseenterEvent: function(e) {
	                var input = this;
	                mouseEnter = !0, document.activeElement !== input && opts.showMaskOnHover && input.inputmask._valueGet() !== getBuffer().join("") && writeBuffer(input, getBuffer());
	            },
	            submitEvent: function(e) {
	                undoValue !== getBuffer().join("") && $el.trigger("change"), opts.clearMaskOnLostFocus && -1 === getLastValidPosition() && el.inputmask._valueGet && el.inputmask._valueGet() === getBufferTemplate().join("") && el.inputmask._valueSet(""), 
	                opts.removeMaskOnSubmit && (el.inputmask._valueSet(el.inputmask.unmaskedvalue(), !0), 
	                setTimeout(function() {
	                    writeBuffer(el, getBuffer());
	                }, 0));
	            },
	            resetEvent: function(e) {
	                el.inputmask.refreshValue = !0, setTimeout(function() {
	                    $el.trigger("setvalue");
	                }, 0);
	            }
	        };
	        if (actionObj !== undefined) switch (actionObj.action) {
	          case "isComplete":
	            return el = actionObj.el, isComplete(getBuffer());
	
	          case "unmaskedvalue":
	            return el !== undefined && actionObj.value === undefined || (valueBuffer = actionObj.value, 
	            valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask(valueBuffer, opts) || valueBuffer : valueBuffer).split(""), 
	            checkVal(undefined, !1, !1, isRTL ? valueBuffer.reverse() : valueBuffer), $.isFunction(opts.onBeforeWrite) && opts.onBeforeWrite(undefined, getBuffer(), 0, opts)), 
	            unmaskedvalue(el);
	
	          case "mask":
	            !function(elem) {
	                EventRuler.off(elem);
	                var isSupported = function(input, opts) {
	                    var elementType = input.getAttribute("type"), isSupported = "INPUT" === input.tagName && -1 !== $.inArray(elementType, opts.supportsInputType) || input.isContentEditable || "TEXTAREA" === input.tagName;
	                    if (!isSupported) if ("INPUT" === input.tagName) {
	                        var el = document.createElement("input");
	                        el.setAttribute("type", elementType), isSupported = "text" === el.type, el = null;
	                    } else isSupported = "partial";
	                    return !1 !== isSupported && function(npt) {
	                        function getter() {
	                            return this.inputmask ? this.inputmask.opts.autoUnmask ? this.inputmask.unmaskedvalue() : -1 !== getLastValidPosition() || !0 !== opts.nullable ? document.activeElement === this && opts.clearMaskOnLostFocus ? (isRTL ? clearOptionalTail(getBuffer().slice()).reverse() : clearOptionalTail(getBuffer().slice())).join("") : valueGet.call(this) : "" : valueGet.call(this);
	                        }
	                        function setter(value) {
	                            valueSet.call(this, value), this.inputmask && $(this).trigger("setvalue");
	                        }
	                        var valueGet, valueSet;
	                        if (!npt.inputmask.__valueGet) {
	                            if (!0 !== opts.noValuePatching) {
	                                if (Object.getOwnPropertyDescriptor) {
	                                    "function" != typeof Object.getPrototypeOf && (Object.getPrototypeOf = "object" == typeof "test".__proto__ ? function(object) {
	                                        return object.__proto__;
	                                    } : function(object) {
	                                        return object.constructor.prototype;
	                                    });
	                                    var valueProperty = Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(npt), "value") : undefined;
	                                    valueProperty && valueProperty.get && valueProperty.set ? (valueGet = valueProperty.get, 
	                                    valueSet = valueProperty.set, Object.defineProperty(npt, "value", {
	                                        get: getter,
	                                        set: setter,
	                                        configurable: !0
	                                    })) : "INPUT" !== npt.tagName && (valueGet = function() {
	                                        return this.textContent;
	                                    }, valueSet = function(value) {
	                                        this.textContent = value;
	                                    }, Object.defineProperty(npt, "value", {
	                                        get: getter,
	                                        set: setter,
	                                        configurable: !0
	                                    }));
	                                } else document.__lookupGetter__ && npt.__lookupGetter__("value") && (valueGet = npt.__lookupGetter__("value"), 
	                                valueSet = npt.__lookupSetter__("value"), npt.__defineGetter__("value", getter), 
	                                npt.__defineSetter__("value", setter));
	                                npt.inputmask.__valueGet = valueGet, npt.inputmask.__valueSet = valueSet;
	                            }
	                            npt.inputmask._valueGet = function(overruleRTL) {
	                                return isRTL && !0 !== overruleRTL ? valueGet.call(this.el).split("").reverse().join("") : valueGet.call(this.el);
	                            }, npt.inputmask._valueSet = function(value, overruleRTL) {
	                                valueSet.call(this.el, null === value || value === undefined ? "" : !0 !== overruleRTL && isRTL ? value.split("").reverse().join("") : value);
	                            }, valueGet === undefined && (valueGet = function() {
	                                return this.value;
	                            }, valueSet = function(value) {
	                                this.value = value;
	                            }, function(type) {
	                                if ($.valHooks && ($.valHooks[type] === undefined || !0 !== $.valHooks[type].inputmaskpatch)) {
	                                    var valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function(elem) {
	                                        return elem.value;
	                                    }, valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function(elem, value) {
	                                        return elem.value = value, elem;
	                                    };
	                                    $.valHooks[type] = {
	                                        get: function(elem) {
	                                            if (elem.inputmask) {
	                                                if (elem.inputmask.opts.autoUnmask) return elem.inputmask.unmaskedvalue();
	                                                var result = valhookGet(elem);
	                                                return -1 !== getLastValidPosition(undefined, undefined, elem.inputmask.maskset.validPositions) || !0 !== opts.nullable ? result : "";
	                                            }
	                                            return valhookGet(elem);
	                                        },
	                                        set: function(elem, value) {
	                                            var result, $elem = $(elem);
	                                            return result = valhookSet(elem, value), elem.inputmask && $elem.trigger("setvalue"), 
	                                            result;
	                                        },
	                                        inputmaskpatch: !0
	                                    };
	                                }
	                            }(npt.type), function(npt) {
	                                EventRuler.on(npt, "mouseenter", function(event) {
	                                    var $input = $(this);
	                                    this.inputmask._valueGet() !== getBuffer().join("") && $input.trigger("setvalue");
	                                });
	                            }(npt));
	                        }
	                    }(input), isSupported;
	                }(elem, opts);
	                if (!1 !== isSupported && (el = elem, $el = $(el), !0 === opts.colorMask && initializeColorMask(el), 
	                android && (el.hasOwnProperty("inputmode") && (el.inputmode = opts.inputmode, el.setAttribute("inputmode", opts.inputmode)), 
	                "rtfm" === opts.androidHack && (!0 !== opts.colorMask && initializeColorMask(el), 
	                el.type = "password")), !0 === isSupported && (EventRuler.on(el, "submit", EventHandlers.submitEvent), 
	                EventRuler.on(el, "reset", EventHandlers.resetEvent), EventRuler.on(el, "mouseenter", EventHandlers.mouseenterEvent), 
	                EventRuler.on(el, "blur", EventHandlers.blurEvent), EventRuler.on(el, "focus", EventHandlers.focusEvent), 
	                EventRuler.on(el, "mouseleave", EventHandlers.mouseleaveEvent), !0 !== opts.colorMask && EventRuler.on(el, "click", EventHandlers.clickEvent), 
	                EventRuler.on(el, "dblclick", EventHandlers.dblclickEvent), EventRuler.on(el, "paste", EventHandlers.pasteEvent), 
	                EventRuler.on(el, "dragdrop", EventHandlers.pasteEvent), EventRuler.on(el, "drop", EventHandlers.pasteEvent), 
	                EventRuler.on(el, "cut", EventHandlers.cutEvent), EventRuler.on(el, "complete", opts.oncomplete), 
	                EventRuler.on(el, "incomplete", opts.onincomplete), EventRuler.on(el, "cleared", opts.oncleared), 
	                android || !0 === opts.inputEventOnly || (EventRuler.on(el, "keydown", EventHandlers.keydownEvent), 
	                EventRuler.on(el, "keypress", EventHandlers.keypressEvent)), EventRuler.on(el, "compositionstart", $.noop), 
	                EventRuler.on(el, "compositionupdate", $.noop), EventRuler.on(el, "compositionend", $.noop), 
	                EventRuler.on(el, "keyup", $.noop), EventRuler.on(el, "input", EventHandlers.inputFallBackEvent), 
	                EventRuler.on(el, "beforeinput", $.noop)), EventRuler.on(el, "setvalue", EventHandlers.setValueEvent), 
	                undoValue = getBufferTemplate().join(""), "" !== el.inputmask._valueGet(!0) || !1 === opts.clearMaskOnLostFocus || document.activeElement === el)) {
	                    var initialValue = $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask(el.inputmask._valueGet(!0), opts) || el.inputmask._valueGet(!0) : el.inputmask._valueGet(!0);
	                    "" !== initialValue && checkVal(el, !0, !1, isRTL ? initialValue.split("").reverse() : initialValue.split(""));
	                    var buffer = getBuffer().slice();
	                    undoValue = buffer.join(""), !1 === isComplete(buffer) && opts.clearIncomplete && resetMaskSet(), 
	                    opts.clearMaskOnLostFocus && document.activeElement !== el && (-1 === getLastValidPosition() ? buffer = [] : clearOptionalTail(buffer)), 
	                    writeBuffer(el, buffer), document.activeElement === el && caret(el, seekNext(getLastValidPosition()));
	                }
	            }(el);
	            break;
	
	          case "format":
	            return valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask(actionObj.value, opts) || actionObj.value : actionObj.value).split(""), 
	            checkVal(undefined, !0, !1, isRTL ? valueBuffer.reverse() : valueBuffer), actionObj.metadata ? {
	                value: isRTL ? getBuffer().slice().reverse().join("") : getBuffer().join(""),
	                metadata: maskScope.call(this, {
	                    action: "getmetadata"
	                }, maskset, opts)
	            } : isRTL ? getBuffer().slice().reverse().join("") : getBuffer().join("");
	
	          case "isValid":
	            actionObj.value ? (valueBuffer = actionObj.value.split(""), checkVal(undefined, !0, !0, isRTL ? valueBuffer.reverse() : valueBuffer)) : actionObj.value = getBuffer().join("");
	            for (var buffer = getBuffer(), rl = determineLastRequiredPosition(), lmib = buffer.length - 1; lmib > rl && !isMask(lmib); lmib--) ;
	            return buffer.splice(rl, lmib + 1 - rl), isComplete(buffer) && actionObj.value === getBuffer().join("");
	
	          case "getemptymask":
	            return getBufferTemplate().join("");
	
	          case "remove":
	            if (el && el.inputmask) {
	                $el = $(el), el.inputmask._valueSet(opts.autoUnmask ? unmaskedvalue(el) : el.inputmask._valueGet(!0)), 
	                EventRuler.off(el);
	                Object.getOwnPropertyDescriptor && Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(el), "value") && el.inputmask.__valueGet && Object.defineProperty(el, "value", {
	                    get: el.inputmask.__valueGet,
	                    set: el.inputmask.__valueSet,
	                    configurable: !0
	                }) : document.__lookupGetter__ && el.__lookupGetter__("value") && el.inputmask.__valueGet && (el.__defineGetter__("value", el.inputmask.__valueGet), 
	                el.__defineSetter__("value", el.inputmask.__valueSet)), el.inputmask = undefined;
	            }
	            return el;
	
	          case "getmetadata":
	            if ($.isArray(maskset.metadata)) {
	                var maskTarget = getMaskTemplate(!0, 0, !1).join("");
	                return $.each(maskset.metadata, function(ndx, mtdt) {
	                    if (mtdt.mask === maskTarget) return maskTarget = mtdt, !1;
	                }), maskTarget;
	            }
	            return maskset.metadata;
	        }
	    }
	    var ua = navigator.userAgent, mobile = /mobile/i.test(ua), iemobile = /iemobile/i.test(ua), iphone = /iphone/i.test(ua) && !iemobile, android = /android/i.test(ua) && !iemobile;
	    return Inputmask.prototype = {
	        dataAttribute: "data-inputmask",
	        defaults: {
	            placeholder: "_",
	            optionalmarker: {
	                start: "[",
	                end: "]"
	            },
	            quantifiermarker: {
	                start: "{",
	                end: "}"
	            },
	            groupmarker: {
	                start: "(",
	                end: ")"
	            },
	            alternatormarker: "|",
	            escapeChar: "\\",
	            mask: null,
	            regex: null,
	            oncomplete: $.noop,
	            onincomplete: $.noop,
	            oncleared: $.noop,
	            repeat: 0,
	            greedy: !0,
	            autoUnmask: !1,
	            removeMaskOnSubmit: !1,
	            clearMaskOnLostFocus: !0,
	            insertMode: !0,
	            clearIncomplete: !1,
	            alias: null,
	            onKeyDown: $.noop,
	            onBeforeMask: null,
	            onBeforePaste: function(pastedValue, opts) {
	                return $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask(pastedValue, opts) : pastedValue;
	            },
	            onBeforeWrite: null,
	            onUnMask: null,
	            showMaskOnFocus: !0,
	            showMaskOnHover: !0,
	            onKeyValidation: $.noop,
	            skipOptionalPartCharacter: " ",
	            numericInput: !1,
	            rightAlign: !1,
	            undoOnEscape: !0,
	            radixPoint: "",
	            radixPointDefinitionSymbol: undefined,
	            groupSeparator: "",
	            keepStatic: null,
	            positionCaretOnTab: !0,
	            tabThrough: !1,
	            supportsInputType: [ "text", "tel", "password" ],
	            ignorables: [ 8, 9, 13, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 0, 229 ],
	            isComplete: null,
	            canClearPosition: $.noop,
	            preValidation: null,
	            postValidation: null,
	            staticDefinitionSymbol: undefined,
	            jitMasking: !1,
	            nullable: !0,
	            inputEventOnly: !1,
	            noValuePatching: !1,
	            positionCaretOnClick: "lvp",
	            casing: null,
	            inputmode: "verbatim",
	            colorMask: !1,
	            androidHack: !1
	        },
	        definitions: {
	            "9": {
	                validator: "[0-9]",
	                cardinality: 1,
	                definitionSymbol: "*"
	            },
	            a: {
	                validator: "[A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",
	                cardinality: 1,
	                definitionSymbol: "*"
	            },
	            "*": {
	                validator: "[0-9A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",
	                cardinality: 1
	            }
	        },
	        aliases: {},
	        masksCache: {},
	        mask: function(elems) {
	            function importAttributeOptions(npt, opts, userOptions, dataAttribute) {
	                function importOption(option, optionData) {
	                    null !== (optionData = optionData !== undefined ? optionData : npt.getAttribute(dataAttribute + "-" + option)) && ("string" == typeof optionData && (0 === option.indexOf("on") ? optionData = window[optionData] : "false" === optionData ? optionData = !1 : "true" === optionData && (optionData = !0)), 
	                    userOptions[option] = optionData);
	                }
	                ("rtl" === npt.dir || opts.rightAlign) && (npt.style.textAlign = "right"), ("rtl" === npt.dir || opts.numericInput) && (npt.dir = "ltr", 
	                npt.removeAttribute("dir"), opts.isRTL = !0);
	                var option, dataoptions, optionData, p, attrOptions = npt.getAttribute(dataAttribute);
	                if (attrOptions && "" !== attrOptions && (attrOptions = attrOptions.replace(new RegExp("'", "g"), '"'), 
	                dataoptions = JSON.parse("{" + attrOptions + "}")), dataoptions) {
	                    optionData = undefined;
	                    for (p in dataoptions) if ("alias" === p.toLowerCase()) {
	                        optionData = dataoptions[p];
	                        break;
	                    }
	                }
	                importOption("alias", optionData), userOptions.alias && resolveAlias(userOptions.alias, userOptions, opts);
	                for (option in opts) {
	                    if (dataoptions) {
	                        optionData = undefined;
	                        for (p in dataoptions) if (p.toLowerCase() === option.toLowerCase()) {
	                            optionData = dataoptions[p];
	                            break;
	                        }
	                    }
	                    importOption(option, optionData);
	                }
	                return $.extend(!0, opts, userOptions), opts;
	            }
	            var that = this;
	            return "string" == typeof elems && (elems = document.getElementById(elems) || document.querySelectorAll(elems)), 
	            elems = elems.nodeName ? [ elems ] : elems, $.each(elems, function(ndx, el) {
	                var scopedOpts = $.extend(!0, {}, that.opts);
	                importAttributeOptions(el, scopedOpts, $.extend(!0, {}, that.userOptions), that.dataAttribute);
	                var maskset = generateMaskSet(scopedOpts, that.noMasksCache);
	                maskset !== undefined && (el.inputmask !== undefined && el.inputmask.remove(), el.inputmask = new Inputmask(undefined, undefined, !0), 
	                el.inputmask.opts = scopedOpts, el.inputmask.noMasksCache = that.noMasksCache, el.inputmask.userOptions = $.extend(!0, {}, that.userOptions), 
	                el.inputmask.isRTL = scopedOpts.isRTL, el.inputmask.el = el, el.inputmask.maskset = maskset, 
	                $.data(el, "_inputmask_opts", scopedOpts), maskScope.call(el.inputmask, {
	                    action: "mask"
	                }));
	            }), elems && elems[0] ? elems[0].inputmask || this : this;
	        },
	        option: function(options, noremask) {
	            return "string" == typeof options ? this.opts[options] : "object" == typeof options ? ($.extend(this.userOptions, options), 
	            this.el && !0 !== noremask && this.mask(this.el), this) : void 0;
	        },
	        unmaskedvalue: function(value) {
	            return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), 
	            maskScope.call(this, {
	                action: "unmaskedvalue",
	                value: value
	            });
	        },
	        remove: function() {
	            return maskScope.call(this, {
	                action: "remove"
	            });
	        },
	        getemptymask: function() {
	            return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), 
	            maskScope.call(this, {
	                action: "getemptymask"
	            });
	        },
	        hasMaskedValue: function() {
	            return !this.opts.autoUnmask;
	        },
	        isComplete: function() {
	            return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), 
	            maskScope.call(this, {
	                action: "isComplete"
	            });
	        },
	        getmetadata: function() {
	            return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), 
	            maskScope.call(this, {
	                action: "getmetadata"
	            });
	        },
	        isValid: function(value) {
	            return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), 
	            maskScope.call(this, {
	                action: "isValid",
	                value: value
	            });
	        },
	        format: function(value, metadata) {
	            return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), 
	            maskScope.call(this, {
	                action: "format",
	                value: value,
	                metadata: metadata
	            });
	        },
	        analyseMask: function(mask, regexMask, opts) {
	            function MaskToken(isGroup, isOptional, isQuantifier, isAlternator) {
	                this.matches = [], this.openGroup = isGroup || !1, this.alternatorGroup = !1, this.isGroup = isGroup || !1, 
	                this.isOptional = isOptional || !1, this.isQuantifier = isQuantifier || !1, this.isAlternator = isAlternator || !1, 
	                this.quantifier = {
	                    min: 1,
	                    max: 1
	                };
	            }
	            function insertTestDefinition(mtoken, element, position) {
	                position = position !== undefined ? position : mtoken.matches.length;
	                var prevMatch = mtoken.matches[position - 1];
	                if (regexMask) 0 === element.indexOf("[") || escaped ? mtoken.matches.splice(position++, 0, {
	                    fn: new RegExp(element, opts.casing ? "i" : ""),
	                    cardinality: 1,
	                    optionality: mtoken.isOptional,
	                    newBlockMarker: prevMatch === undefined || prevMatch.def !== element,
	                    casing: null,
	                    def: element,
	                    placeholder: undefined,
	                    nativeDef: element
	                }) : $.each(element.split(""), function(ndx, lmnt) {
	                    prevMatch = mtoken.matches[position - 1], mtoken.matches.splice(position++, 0, {
	                        fn: null,
	                        cardinality: 0,
	                        optionality: mtoken.isOptional,
	                        newBlockMarker: prevMatch === undefined || prevMatch.def !== lmnt && null !== prevMatch.fn,
	                        casing: null,
	                        def: opts.staticDefinitionSymbol || lmnt,
	                        placeholder: opts.staticDefinitionSymbol !== undefined ? lmnt : undefined,
	                        nativeDef: lmnt
	                    });
	                }), escaped = !1; else {
	                    var maskdef = (opts.definitions ? opts.definitions[element] : undefined) || Inputmask.prototype.definitions[element];
	                    if (maskdef && !escaped) {
	                        for (var prevalidators = maskdef.prevalidator, prevalidatorsL = prevalidators ? prevalidators.length : 0, i = 1; i < maskdef.cardinality; i++) {
	                            var prevalidator = prevalidatorsL >= i ? prevalidators[i - 1] : [], validator = prevalidator.validator, cardinality = prevalidator.cardinality;
	                            mtoken.matches.splice(position++, 0, {
	                                fn: validator ? "string" == typeof validator ? new RegExp(validator, opts.casing ? "i" : "") : new function() {
	                                    this.test = validator;
	                                }() : new RegExp("."),
	                                cardinality: cardinality || 1,
	                                optionality: mtoken.isOptional,
	                                newBlockMarker: prevMatch === undefined || prevMatch.def !== (maskdef.definitionSymbol || element),
	                                casing: maskdef.casing,
	                                def: maskdef.definitionSymbol || element,
	                                placeholder: maskdef.placeholder,
	                                nativeDef: element
	                            }), prevMatch = mtoken.matches[position - 1];
	                        }
	                        mtoken.matches.splice(position++, 0, {
	                            fn: maskdef.validator ? "string" == typeof maskdef.validator ? new RegExp(maskdef.validator, opts.casing ? "i" : "") : new function() {
	                                this.test = maskdef.validator;
	                            }() : new RegExp("."),
	                            cardinality: maskdef.cardinality,
	                            optionality: mtoken.isOptional,
	                            newBlockMarker: prevMatch === undefined || prevMatch.def !== (maskdef.definitionSymbol || element),
	                            casing: maskdef.casing,
	                            def: maskdef.definitionSymbol || element,
	                            placeholder: maskdef.placeholder,
	                            nativeDef: element
	                        });
	                    } else mtoken.matches.splice(position++, 0, {
	                        fn: null,
	                        cardinality: 0,
	                        optionality: mtoken.isOptional,
	                        newBlockMarker: prevMatch === undefined || prevMatch.def !== element && null !== prevMatch.fn,
	                        casing: null,
	                        def: opts.staticDefinitionSymbol || element,
	                        placeholder: opts.staticDefinitionSymbol !== undefined ? element : undefined,
	                        nativeDef: element
	                    }), escaped = !1;
	                }
	            }
	            function verifyGroupMarker(maskToken) {
	                maskToken && maskToken.matches && $.each(maskToken.matches, function(ndx, token) {
	                    var nextToken = maskToken.matches[ndx + 1];
	                    (nextToken === undefined || nextToken.matches === undefined || !1 === nextToken.isQuantifier) && token && token.isGroup && (token.isGroup = !1, 
	                    regexMask || (insertTestDefinition(token, opts.groupmarker.start, 0), !0 !== token.openGroup && insertTestDefinition(token, opts.groupmarker.end))), 
	                    verifyGroupMarker(token);
	                });
	            }
	            function defaultCase() {
	                if (openenings.length > 0) {
	                    if (currentOpeningToken = openenings[openenings.length - 1], insertTestDefinition(currentOpeningToken, m), 
	                    currentOpeningToken.isAlternator) {
	                        alternator = openenings.pop();
	                        for (var mndx = 0; mndx < alternator.matches.length; mndx++) alternator.matches[mndx].isGroup = !1;
	                        openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1], 
	                        currentOpeningToken.matches.push(alternator)) : currentToken.matches.push(alternator);
	                    }
	                } else insertTestDefinition(currentToken, m);
	            }
	            function reverseTokens(maskToken) {
	                maskToken.matches = maskToken.matches.reverse();
	                for (var match in maskToken.matches) if (maskToken.matches.hasOwnProperty(match)) {
	                    var intMatch = parseInt(match);
	                    if (maskToken.matches[match].isQuantifier && maskToken.matches[intMatch + 1] && maskToken.matches[intMatch + 1].isGroup) {
	                        var qt = maskToken.matches[match];
	                        maskToken.matches.splice(match, 1), maskToken.matches.splice(intMatch + 1, 0, qt);
	                    }
	                    maskToken.matches[match].matches !== undefined ? maskToken.matches[match] = reverseTokens(maskToken.matches[match]) : maskToken.matches[match] = function(st) {
	                        return st === opts.optionalmarker.start ? st = opts.optionalmarker.end : st === opts.optionalmarker.end ? st = opts.optionalmarker.start : st === opts.groupmarker.start ? st = opts.groupmarker.end : st === opts.groupmarker.end && (st = opts.groupmarker.start), 
	                        st;
	                    }(maskToken.matches[match]);
	                }
	                return maskToken;
	            }
	            var match, m, openingToken, currentOpeningToken, alternator, lastMatch, groupToken, tokenizer = /(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g, regexTokenizer = /\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g, escaped = !1, currentToken = new MaskToken(), openenings = [], maskTokens = [];
	            for (regexMask && (opts.optionalmarker.start = undefined, opts.optionalmarker.end = undefined); match = regexMask ? regexTokenizer.exec(mask) : tokenizer.exec(mask); ) {
	                if (m = match[0], regexMask && !0 !== escaped) switch (m.charAt(0)) {
	                  case "?":
	                    m = "{0,1}";
	                    break;
	
	                  case "+":
	                  case "*":
	                    m = "{" + m + "}";
	                }
	                if (escaped) defaultCase(); else switch (m.charAt(0)) {
	                  case opts.escapeChar:
	                    escaped = !0, regexMask && defaultCase();
	                    break;
	
	                  case opts.optionalmarker.end:
	                  case opts.groupmarker.end:
	                    if (openingToken = openenings.pop(), openingToken.openGroup = !1, openingToken !== undefined) if (openenings.length > 0) {
	                        if (currentOpeningToken = openenings[openenings.length - 1], currentOpeningToken.matches.push(openingToken), 
	                        currentOpeningToken.isAlternator) {
	                            alternator = openenings.pop();
	                            for (var mndx = 0; mndx < alternator.matches.length; mndx++) alternator.matches[mndx].isGroup = !1, 
	                            alternator.matches[mndx].alternatorGroup = !1;
	                            openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1], 
	                            currentOpeningToken.matches.push(alternator)) : currentToken.matches.push(alternator);
	                        }
	                    } else currentToken.matches.push(openingToken); else defaultCase();
	                    break;
	
	                  case opts.optionalmarker.start:
	                    openenings.push(new MaskToken(!1, !0));
	                    break;
	
	                  case opts.groupmarker.start:
	                    openenings.push(new MaskToken(!0));
	                    break;
	
	                  case opts.quantifiermarker.start:
	                    var quantifier = new MaskToken(!1, !1, !0);
	                    m = m.replace(/[{}]/g, "");
	                    var mq = m.split(","), mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]), mq1 = 1 === mq.length ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);
	                    if ("*" !== mq1 && "+" !== mq1 || (mq0 = "*" === mq1 ? 0 : 1), quantifier.quantifier = {
	                        min: mq0,
	                        max: mq1
	                    }, openenings.length > 0) {
	                        var matches = openenings[openenings.length - 1].matches;
	                        match = matches.pop(), match.isGroup || (groupToken = new MaskToken(!0), groupToken.matches.push(match), 
	                        match = groupToken), matches.push(match), matches.push(quantifier);
	                    } else match = currentToken.matches.pop(), match.isGroup || (regexMask && null === match.fn && "." === match.def && (match.fn = new RegExp(match.def, opts.casing ? "i" : "")), 
	                    groupToken = new MaskToken(!0), groupToken.matches.push(match), match = groupToken), 
	                    currentToken.matches.push(match), currentToken.matches.push(quantifier);
	                    break;
	
	                  case opts.alternatormarker:
	                    if (openenings.length > 0) {
	                        currentOpeningToken = openenings[openenings.length - 1];
	                        var subToken = currentOpeningToken.matches[currentOpeningToken.matches.length - 1];
	                        lastMatch = currentOpeningToken.openGroup && (subToken.matches === undefined || !1 === subToken.isGroup && !1 === subToken.isAlternator) ? openenings.pop() : currentOpeningToken.matches.pop();
	                    } else lastMatch = currentToken.matches.pop();
	                    if (lastMatch.isAlternator) openenings.push(lastMatch); else if (lastMatch.alternatorGroup ? (alternator = openenings.pop(), 
	                    lastMatch.alternatorGroup = !1) : alternator = new MaskToken(!1, !1, !1, !0), alternator.matches.push(lastMatch), 
	                    openenings.push(alternator), lastMatch.openGroup) {
	                        lastMatch.openGroup = !1;
	                        var alternatorGroup = new MaskToken(!0);
	                        alternatorGroup.alternatorGroup = !0, openenings.push(alternatorGroup);
	                    }
	                    break;
	
	                  default:
	                    defaultCase();
	                }
	            }
	            for (;openenings.length > 0; ) openingToken = openenings.pop(), currentToken.matches.push(openingToken);
	            return currentToken.matches.length > 0 && (verifyGroupMarker(currentToken), maskTokens.push(currentToken)), 
	            (opts.numericInput || opts.isRTL) && reverseTokens(maskTokens[0]), maskTokens;
	        }
	    }, Inputmask.extendDefaults = function(options) {
	        $.extend(!0, Inputmask.prototype.defaults, options);
	    }, Inputmask.extendDefinitions = function(definition) {
	        $.extend(!0, Inputmask.prototype.definitions, definition);
	    }, Inputmask.extendAliases = function(alias) {
	        $.extend(!0, Inputmask.prototype.aliases, alias);
	    }, Inputmask.format = function(value, options, metadata) {
	        return Inputmask(options).format(value, metadata);
	    }, Inputmask.unmask = function(value, options) {
	        return Inputmask(options).unmaskedvalue(value);
	    }, Inputmask.isValid = function(value, options) {
	        return Inputmask(options).isValid(value);
	    }, Inputmask.remove = function(elems) {
	        $.each(elems, function(ndx, el) {
	            el.inputmask && el.inputmask.remove();
	        });
	    }, Inputmask.escapeRegex = function(str) {
	        var specials = [ "/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\", "$", "^" ];
	        return str.replace(new RegExp("(\\" + specials.join("|\\") + ")", "gim"), "\\$1");
	    }, Inputmask.keyCode = {
	        ALT: 18,
	        BACKSPACE: 8,
	        BACKSPACE_SAFARI: 127,
	        CAPS_LOCK: 20,
	        COMMA: 188,
	        COMMAND: 91,
	        COMMAND_LEFT: 91,
	        COMMAND_RIGHT: 93,
	        CONTROL: 17,
	        DELETE: 46,
	        DOWN: 40,
	        END: 35,
	        ENTER: 13,
	        ESCAPE: 27,
	        HOME: 36,
	        INSERT: 45,
	        LEFT: 37,
	        MENU: 93,
	        NUMPAD_ADD: 107,
	        NUMPAD_DECIMAL: 110,
	        NUMPAD_DIVIDE: 111,
	        NUMPAD_ENTER: 108,
	        NUMPAD_MULTIPLY: 106,
	        NUMPAD_SUBTRACT: 109,
	        PAGE_DOWN: 34,
	        PAGE_UP: 33,
	        PERIOD: 190,
	        RIGHT: 39,
	        SHIFT: 16,
	        SPACE: 32,
	        TAB: 9,
	        UP: 38,
	        WINDOWS: 91,
	        X: 88
	    }, Inputmask;
	});

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	* inputmask.extensions.js
	* https://github.com/RobinHerbots/Inputmask
	* Copyright (c) 2010 - 2017 Robin Herbots
	* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
	* Version: 3.3.7
	*/
	
	!function(factory) {
	     true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(3), __webpack_require__(6) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == typeof exports ? module.exports = factory(require("./dependencyLibs/inputmask.dependencyLib"), require("./inputmask")) : factory(window.dependencyLib || jQuery, window.Inputmask);
	}(function($, Inputmask) {
	    return Inputmask.extendDefinitions({
	        A: {
	            validator: "[A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",
	            cardinality: 1,
	            casing: "upper"
	        },
	        "&": {
	            validator: "[0-9A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",
	            cardinality: 1,
	            casing: "upper"
	        },
	        "#": {
	            validator: "[0-9A-Fa-f]",
	            cardinality: 1,
	            casing: "upper"
	        }
	    }), Inputmask.extendAliases({
	        url: {
	            definitions: {
	                i: {
	                    validator: ".",
	                    cardinality: 1
	                }
	            },
	            mask: "(\\http://)|(\\http\\s://)|(ftp://)|(ftp\\s://)i{+}",
	            insertMode: !1,
	            autoUnmask: !1,
	            inputmode: "url"
	        },
	        ip: {
	            mask: "i[i[i]].i[i[i]].i[i[i]].i[i[i]]",
	            definitions: {
	                i: {
	                    validator: function(chrs, maskset, pos, strict, opts) {
	                        return pos - 1 > -1 && "." !== maskset.buffer[pos - 1] ? (chrs = maskset.buffer[pos - 1] + chrs, 
	                        chrs = pos - 2 > -1 && "." !== maskset.buffer[pos - 2] ? maskset.buffer[pos - 2] + chrs : "0" + chrs) : chrs = "00" + chrs, 
	                        new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(chrs);
	                    },
	                    cardinality: 1
	                }
	            },
	            onUnMask: function(maskedValue, unmaskedValue, opts) {
	                return maskedValue;
	            },
	            inputmode: "numeric"
	        },
	        email: {
	            mask: "*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",
	            greedy: !1,
	            onBeforePaste: function(pastedValue, opts) {
	                return pastedValue = pastedValue.toLowerCase(), pastedValue.replace("mailto:", "");
	            },
	            definitions: {
	                "*": {
	                    validator: "[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",
	                    cardinality: 1,
	                    casing: "lower"
	                },
	                "-": {
	                    validator: "[0-9A-Za-z-]",
	                    cardinality: 1,
	                    casing: "lower"
	                }
	            },
	            onUnMask: function(maskedValue, unmaskedValue, opts) {
	                return maskedValue;
	            },
	            inputmode: "email"
	        },
	        mac: {
	            mask: "##:##:##:##:##:##"
	        },
	        vin: {
	            mask: "V{13}9{4}",
	            definitions: {
	                V: {
	                    validator: "[A-HJ-NPR-Za-hj-npr-z\\d]",
	                    cardinality: 1,
	                    casing: "upper"
	                }
	            },
	            clearIncomplete: !0,
	            autoUnmask: !0
	        }
	    }), Inputmask;
	});

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	* inputmask.numeric.extensions.js
	* https://github.com/RobinHerbots/Inputmask
	* Copyright (c) 2010 - 2017 Robin Herbots
	* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
	* Version: 3.3.7
	*/
	
	!function(factory) {
	     true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(3), __webpack_require__(6) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == typeof exports ? module.exports = factory(require("./dependencyLibs/inputmask.dependencyLib"), require("./inputmask")) : factory(window.dependencyLib || jQuery, window.Inputmask);
	}(function($, Inputmask, undefined) {
	    function autoEscape(txt, opts) {
	        for (var escapedTxt = "", i = 0; i < txt.length; i++) Inputmask.prototype.definitions[txt.charAt(i)] || opts.definitions[txt.charAt(i)] || opts.optionalmarker.start === txt.charAt(i) || opts.optionalmarker.end === txt.charAt(i) || opts.quantifiermarker.start === txt.charAt(i) || opts.quantifiermarker.end === txt.charAt(i) || opts.groupmarker.start === txt.charAt(i) || opts.groupmarker.end === txt.charAt(i) || opts.alternatormarker === txt.charAt(i) ? escapedTxt += "\\" + txt.charAt(i) : escapedTxt += txt.charAt(i);
	        return escapedTxt;
	    }
	    return Inputmask.extendAliases({
	        numeric: {
	            mask: function(opts) {
	                if (0 !== opts.repeat && isNaN(opts.integerDigits) && (opts.integerDigits = opts.repeat), 
	                opts.repeat = 0, opts.groupSeparator === opts.radixPoint && ("." === opts.radixPoint ? opts.groupSeparator = "," : "," === opts.radixPoint ? opts.groupSeparator = "." : opts.groupSeparator = ""), 
	                " " === opts.groupSeparator && (opts.skipOptionalPartCharacter = undefined), opts.autoGroup = opts.autoGroup && "" !== opts.groupSeparator, 
	                opts.autoGroup && ("string" == typeof opts.groupSize && isFinite(opts.groupSize) && (opts.groupSize = parseInt(opts.groupSize)), 
	                isFinite(opts.integerDigits))) {
	                    var seps = Math.floor(opts.integerDigits / opts.groupSize), mod = opts.integerDigits % opts.groupSize;
	                    opts.integerDigits = parseInt(opts.integerDigits) + (0 === mod ? seps - 1 : seps), 
	                    opts.integerDigits < 1 && (opts.integerDigits = "*");
	                }
	                opts.placeholder.length > 1 && (opts.placeholder = opts.placeholder.charAt(0)), 
	                "radixFocus" === opts.positionCaretOnClick && "" === opts.placeholder && !1 === opts.integerOptional && (opts.positionCaretOnClick = "lvp"), 
	                opts.definitions[";"] = opts.definitions["~"], opts.definitions[";"].definitionSymbol = "~", 
	                !0 === opts.numericInput && (opts.positionCaretOnClick = "radixFocus" === opts.positionCaretOnClick ? "lvp" : opts.positionCaretOnClick, 
	                opts.digitsOptional = !1, isNaN(opts.digits) && (opts.digits = 2), opts.decimalProtect = !1);
	                var mask = "[+]";
	                if (mask += autoEscape(opts.prefix, opts), !0 === opts.integerOptional ? mask += "~{1," + opts.integerDigits + "}" : mask += "~{" + opts.integerDigits + "}", 
	                opts.digits !== undefined) {
	                    opts.radixPointDefinitionSymbol = opts.decimalProtect ? ":" : opts.radixPoint;
	                    var dq = opts.digits.toString().split(",");
	                    isFinite(dq[0] && dq[1] && isFinite(dq[1])) ? mask += opts.radixPointDefinitionSymbol + ";{" + opts.digits + "}" : (isNaN(opts.digits) || parseInt(opts.digits) > 0) && (opts.digitsOptional ? mask += "[" + opts.radixPointDefinitionSymbol + ";{1," + opts.digits + "}]" : mask += opts.radixPointDefinitionSymbol + ";{" + opts.digits + "}");
	                }
	                return mask += autoEscape(opts.suffix, opts), mask += "[-]", opts.greedy = !1, mask;
	            },
	            placeholder: "",
	            greedy: !1,
	            digits: "*",
	            digitsOptional: !0,
	            enforceDigitsOnBlur: !1,
	            radixPoint: ".",
	            positionCaretOnClick: "radixFocus",
	            groupSize: 3,
	            groupSeparator: "",
	            autoGroup: !1,
	            allowMinus: !0,
	            negationSymbol: {
	                front: "-",
	                back: ""
	            },
	            integerDigits: "+",
	            integerOptional: !0,
	            prefix: "",
	            suffix: "",
	            rightAlign: !0,
	            decimalProtect: !0,
	            min: null,
	            max: null,
	            step: 1,
	            insertMode: !0,
	            autoUnmask: !1,
	            unmaskAsNumber: !1,
	            inputmode: "numeric",
	            preValidation: function(buffer, pos, c, isSelection, opts) {
	                if ("-" === c || c == opts.negationSymbol.front) return !0 === opts.allowMinus && (opts.isNegative = opts.isNegative === undefined || !opts.isNegative, 
	                "" === buffer.join("") || {
	                    caret: pos,
	                    dopost: !0
	                });
	                if (!1 === isSelection && c === opts.radixPoint && opts.digits !== undefined && (isNaN(opts.digits) || parseInt(opts.digits) > 0)) {
	                    var radixPos = $.inArray(opts.radixPoint, buffer);
	                    if (-1 !== radixPos) return !0 === opts.numericInput ? pos === radixPos : {
	                        caret: radixPos + 1
	                    };
	                }
	                return !0;
	            },
	            postValidation: function(buffer, currentResult, opts) {
	                var suffix = opts.suffix.split(""), prefix = opts.prefix.split("");
	                if (currentResult.pos == undefined && currentResult.caret !== undefined && !0 !== currentResult.dopost) return currentResult;
	                var caretPos = currentResult.caret != undefined ? currentResult.caret : currentResult.pos, maskedValue = buffer.slice();
	                opts.numericInput && (caretPos = maskedValue.length - caretPos - 1, maskedValue = maskedValue.reverse());
	                var charAtPos = maskedValue[caretPos];
	                if (charAtPos === opts.groupSeparator && (caretPos += 1, charAtPos = maskedValue[caretPos]), 
	                caretPos == maskedValue.length - opts.suffix.length - 1 && charAtPos === opts.radixPoint) return currentResult;
	                charAtPos !== undefined && charAtPos !== opts.radixPoint && charAtPos !== opts.negationSymbol.front && charAtPos !== opts.negationSymbol.back && (maskedValue[caretPos] = "?", 
	                opts.prefix.length > 0 && caretPos >= (!1 === opts.isNegative ? 1 : 0) && caretPos < opts.prefix.length - 1 + (!1 === opts.isNegative ? 1 : 0) ? prefix[caretPos - (!1 === opts.isNegative ? 1 : 0)] = "?" : opts.suffix.length > 0 && caretPos >= maskedValue.length - opts.suffix.length - (!1 === opts.isNegative ? 1 : 0) && (suffix[caretPos - (maskedValue.length - opts.suffix.length - (!1 === opts.isNegative ? 1 : 0))] = "?")), 
	                prefix = prefix.join(""), suffix = suffix.join("");
	                var processValue = maskedValue.join("").replace(prefix, "");
	                if (processValue = processValue.replace(suffix, ""), processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), "g"), ""), 
	                processValue = processValue.replace(new RegExp("[-" + Inputmask.escapeRegex(opts.negationSymbol.front) + "]", "g"), ""), 
	                processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back) + "$"), ""), 
	                isNaN(opts.placeholder) && (processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.placeholder), "g"), "")), 
	                processValue.length > 1 && 1 !== processValue.indexOf(opts.radixPoint) && ("0" == charAtPos && (processValue = processValue.replace(/^\?/g, "")), 
	                processValue = processValue.replace(/^0/g, "")), processValue.charAt(0) === opts.radixPoint && "" !== opts.radixPoint && !0 !== opts.numericInput && (processValue = "0" + processValue), 
	                "" !== processValue) {
	                    if (processValue = processValue.split(""), (!opts.digitsOptional || opts.enforceDigitsOnBlur && "blur" === currentResult.event) && isFinite(opts.digits)) {
	                        var radixPosition = $.inArray(opts.radixPoint, processValue), rpb = $.inArray(opts.radixPoint, maskedValue);
	                        -1 === radixPosition && (processValue.push(opts.radixPoint), radixPosition = processValue.length - 1);
	                        for (var i = 1; i <= opts.digits; i++) opts.digitsOptional && (!opts.enforceDigitsOnBlur || "blur" !== currentResult.event) || processValue[radixPosition + i] !== undefined && processValue[radixPosition + i] !== opts.placeholder.charAt(0) ? -1 !== rpb && maskedValue[rpb + i] !== undefined && (processValue[radixPosition + i] = processValue[radixPosition + i] || maskedValue[rpb + i]) : processValue[radixPosition + i] = currentResult.placeholder || opts.placeholder.charAt(0);
	                    }
	                    !0 !== opts.autoGroup || "" === opts.groupSeparator || charAtPos === opts.radixPoint && currentResult.pos === undefined && !currentResult.dopost ? processValue = processValue.join("") : (processValue = Inputmask(function(buffer, opts) {
	                        var postMask = "";
	                        if (postMask += "(" + opts.groupSeparator + "*{" + opts.groupSize + "}){*}", "" !== opts.radixPoint) {
	                            var radixSplit = buffer.join("").split(opts.radixPoint);
	                            radixSplit[1] && (postMask += opts.radixPoint + "*{" + radixSplit[1].match(/^\d*\??\d*/)[0].length + "}");
	                        }
	                        return postMask;
	                    }(processValue, opts), {
	                        numericInput: !0,
	                        jitMasking: !0,
	                        definitions: {
	                            "*": {
	                                validator: "[0-9?]",
	                                cardinality: 1
	                            }
	                        }
	                    }).format(processValue.join("")), processValue.charAt(0) === opts.groupSeparator && processValue.substr(1));
	                }
	                if (opts.isNegative && "blur" === currentResult.event && (opts.isNegative = "0" !== processValue), 
	                processValue = prefix + processValue, processValue += suffix, opts.isNegative && (processValue = opts.negationSymbol.front + processValue, 
	                processValue += opts.negationSymbol.back), processValue = processValue.split(""), 
	                charAtPos !== undefined) if (charAtPos !== opts.radixPoint && charAtPos !== opts.negationSymbol.front && charAtPos !== opts.negationSymbol.back) caretPos = $.inArray("?", processValue), 
	                caretPos > -1 ? processValue[caretPos] = charAtPos : caretPos = currentResult.caret || 0; else if (charAtPos === opts.radixPoint || charAtPos === opts.negationSymbol.front || charAtPos === opts.negationSymbol.back) {
	                    var newCaretPos = $.inArray(charAtPos, processValue);
	                    -1 !== newCaretPos && (caretPos = newCaretPos);
	                }
	                opts.numericInput && (caretPos = processValue.length - caretPos - 1, processValue = processValue.reverse());
	                var rslt = {
	                    caret: charAtPos === undefined || currentResult.pos !== undefined ? caretPos + (opts.numericInput ? -1 : 1) : caretPos,
	                    buffer: processValue,
	                    refreshFromBuffer: currentResult.dopost || buffer.join("") !== processValue.join("")
	                };
	                return rslt.refreshFromBuffer ? rslt : currentResult;
	            },
	            onBeforeWrite: function(e, buffer, caretPos, opts) {
	                if (e) switch (e.type) {
	                  case "keydown":
	                    return opts.postValidation(buffer, {
	                        caret: caretPos,
	                        dopost: !0
	                    }, opts);
	
	                  case "blur":
	                  case "checkval":
	                    var unmasked;
	                    if (function(opts) {
	                        opts.parseMinMaxOptions === undefined && (null !== opts.min && (opts.min = opts.min.toString().replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), "g"), ""), 
	                        "," === opts.radixPoint && (opts.min = opts.min.replace(opts.radixPoint, ".")), 
	                        opts.min = isFinite(opts.min) ? parseFloat(opts.min) : NaN, isNaN(opts.min) && (opts.min = Number.MIN_VALUE)), 
	                        null !== opts.max && (opts.max = opts.max.toString().replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), "g"), ""), 
	                        "," === opts.radixPoint && (opts.max = opts.max.replace(opts.radixPoint, ".")), 
	                        opts.max = isFinite(opts.max) ? parseFloat(opts.max) : NaN, isNaN(opts.max) && (opts.max = Number.MAX_VALUE)), 
	                        opts.parseMinMaxOptions = "done");
	                    }(opts), null !== opts.min || null !== opts.max) {
	                        if (unmasked = opts.onUnMask(buffer.join(""), undefined, $.extend({}, opts, {
	                            unmaskAsNumber: !0
	                        })), null !== opts.min && unmasked < opts.min) return opts.isNegative = opts.min < 0, 
	                        opts.postValidation(opts.min.toString().replace(".", opts.radixPoint).split(""), {
	                            caret: caretPos,
	                            dopost: !0,
	                            placeholder: "0"
	                        }, opts);
	                        if (null !== opts.max && unmasked > opts.max) return opts.isNegative = opts.max < 0, 
	                        opts.postValidation(opts.max.toString().replace(".", opts.radixPoint).split(""), {
	                            caret: caretPos,
	                            dopost: !0,
	                            placeholder: "0"
	                        }, opts);
	                    }
	                    return opts.postValidation(buffer, {
	                        caret: caretPos,
	                        dopost: !0,
	                        placeholder: "0",
	                        event: "blur"
	                    }, opts);
	
	                  case "_checkval":
	                    return {
	                        caret: caretPos
	                    };
	                }
	            },
	            regex: {
	                integerPart: function(opts, emptyCheck) {
	                    return emptyCheck ? new RegExp("[" + Inputmask.escapeRegex(opts.negationSymbol.front) + "+]?") : new RegExp("[" + Inputmask.escapeRegex(opts.negationSymbol.front) + "+]?\\d+");
	                },
	                integerNPart: function(opts) {
	                    return new RegExp("[\\d" + Inputmask.escapeRegex(opts.groupSeparator) + Inputmask.escapeRegex(opts.placeholder.charAt(0)) + "]+");
	                }
	            },
	            definitions: {
	                "~": {
	                    validator: function(chrs, maskset, pos, strict, opts, isSelection) {
	                        var isValid = strict ? new RegExp("[0-9" + Inputmask.escapeRegex(opts.groupSeparator) + "]").test(chrs) : new RegExp("[0-9]").test(chrs);
	                        if (!0 === isValid) {
	                            if (!0 !== opts.numericInput && maskset.validPositions[pos] !== undefined && "~" === maskset.validPositions[pos].match.def && !isSelection) {
	                                var processValue = maskset.buffer.join("");
	                                processValue = processValue.replace(new RegExp("[-" + Inputmask.escapeRegex(opts.negationSymbol.front) + "]", "g"), ""), 
	                                processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back) + "$"), "");
	                                var pvRadixSplit = processValue.split(opts.radixPoint);
	                                pvRadixSplit.length > 1 && (pvRadixSplit[1] = pvRadixSplit[1].replace(/0/g, opts.placeholder.charAt(0))), 
	                                "0" === pvRadixSplit[0] && (pvRadixSplit[0] = pvRadixSplit[0].replace(/0/g, opts.placeholder.charAt(0))), 
	                                processValue = pvRadixSplit[0] + opts.radixPoint + pvRadixSplit[1] || "";
	                                var bufferTemplate = maskset._buffer.join("");
	                                for (processValue === opts.radixPoint && (processValue = bufferTemplate); null === processValue.match(Inputmask.escapeRegex(bufferTemplate) + "$"); ) bufferTemplate = bufferTemplate.slice(1);
	                                processValue = processValue.replace(bufferTemplate, ""), processValue = processValue.split(""), 
	                                isValid = processValue[pos] === undefined ? {
	                                    pos: pos,
	                                    remove: pos
	                                } : {
	                                    pos: pos
	                                };
	                            }
	                        } else strict || chrs !== opts.radixPoint || maskset.validPositions[pos - 1] !== undefined || (maskset.buffer[pos] = "0", 
	                        isValid = {
	                            pos: pos + 1
	                        });
	                        return isValid;
	                    },
	                    cardinality: 1
	                },
	                "+": {
	                    validator: function(chrs, maskset, pos, strict, opts) {
	                        return opts.allowMinus && ("-" === chrs || chrs === opts.negationSymbol.front);
	                    },
	                    cardinality: 1,
	                    placeholder: ""
	                },
	                "-": {
	                    validator: function(chrs, maskset, pos, strict, opts) {
	                        return opts.allowMinus && chrs === opts.negationSymbol.back;
	                    },
	                    cardinality: 1,
	                    placeholder: ""
	                },
	                ":": {
	                    validator: function(chrs, maskset, pos, strict, opts) {
	                        var radix = "[" + Inputmask.escapeRegex(opts.radixPoint) + "]", isValid = new RegExp(radix).test(chrs);
	                        return isValid && maskset.validPositions[pos] && maskset.validPositions[pos].match.placeholder === opts.radixPoint && (isValid = {
	                            caret: pos + 1
	                        }), isValid;
	                    },
	                    cardinality: 1,
	                    placeholder: function(opts) {
	                        return opts.radixPoint;
	                    }
	                }
	            },
	            onUnMask: function(maskedValue, unmaskedValue, opts) {
	                if ("" === unmaskedValue && !0 === opts.nullable) return unmaskedValue;
	                var processValue = maskedValue.replace(opts.prefix, "");
	                return processValue = processValue.replace(opts.suffix, ""), processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), "g"), ""), 
	                "" !== opts.placeholder.charAt(0) && (processValue = processValue.replace(new RegExp(opts.placeholder.charAt(0), "g"), "0")), 
	                opts.unmaskAsNumber ? ("" !== opts.radixPoint && -1 !== processValue.indexOf(opts.radixPoint) && (processValue = processValue.replace(Inputmask.escapeRegex.call(this, opts.radixPoint), ".")), 
	                processValue = processValue.replace(new RegExp("^" + Inputmask.escapeRegex(opts.negationSymbol.front)), "-"), 
	                processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back) + "$"), ""), 
	                Number(processValue)) : processValue;
	            },
	            isComplete: function(buffer, opts) {
	                var maskedValue = buffer.join("");
	                if (buffer.slice().join("") !== maskedValue) return !1;
	                var processValue = maskedValue.replace(opts.prefix, "");
	                return processValue = processValue.replace(opts.suffix, ""), processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), "g"), ""), 
	                "," === opts.radixPoint && (processValue = processValue.replace(Inputmask.escapeRegex(opts.radixPoint), ".")), 
	                isFinite(processValue);
	            },
	            onBeforeMask: function(initialValue, opts) {
	                if (opts.isNegative = undefined, initialValue = initialValue.toString().charAt(initialValue.length - 1) === opts.radixPoint ? initialValue.toString().substr(0, initialValue.length - 1) : initialValue.toString(), 
	                "" !== opts.radixPoint && isFinite(initialValue)) {
	                    var vs = initialValue.split("."), groupSize = "" !== opts.groupSeparator ? parseInt(opts.groupSize) : 0;
	                    2 === vs.length && (vs[0].length > groupSize || vs[1].length > groupSize || vs[0].length <= groupSize && vs[1].length < groupSize) && (initialValue = initialValue.replace(".", opts.radixPoint));
	                }
	                var kommaMatches = initialValue.match(/,/g), dotMatches = initialValue.match(/\./g);
	                if (dotMatches && kommaMatches ? dotMatches.length > kommaMatches.length ? (initialValue = initialValue.replace(/\./g, ""), 
	                initialValue = initialValue.replace(",", opts.radixPoint)) : kommaMatches.length > dotMatches.length ? (initialValue = initialValue.replace(/,/g, ""), 
	                initialValue = initialValue.replace(".", opts.radixPoint)) : initialValue = initialValue.indexOf(".") < initialValue.indexOf(",") ? initialValue.replace(/\./g, "") : initialValue = initialValue.replace(/,/g, "") : initialValue = initialValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), "g"), ""), 
	                0 === opts.digits && (-1 !== initialValue.indexOf(".") ? initialValue = initialValue.substring(0, initialValue.indexOf(".")) : -1 !== initialValue.indexOf(",") && (initialValue = initialValue.substring(0, initialValue.indexOf(",")))), 
	                "" !== opts.radixPoint && isFinite(opts.digits) && -1 !== initialValue.indexOf(opts.radixPoint)) {
	                    var valueParts = initialValue.split(opts.radixPoint), decPart = valueParts[1].match(new RegExp("\\d*"))[0];
	                    if (parseInt(opts.digits) < decPart.toString().length) {
	                        var digitsFactor = Math.pow(10, parseInt(opts.digits));
	                        initialValue = initialValue.replace(Inputmask.escapeRegex(opts.radixPoint), "."), 
	                        initialValue = Math.round(parseFloat(initialValue) * digitsFactor) / digitsFactor, 
	                        initialValue = initialValue.toString().replace(".", opts.radixPoint);
	                    }
	                }
	                return initialValue;
	            },
	            canClearPosition: function(maskset, position, lvp, strict, opts) {
	                var vp = maskset.validPositions[position], canClear = vp.input !== opts.radixPoint || null !== maskset.validPositions[position].match.fn && !1 === opts.decimalProtect || vp.input === opts.radixPoint && maskset.validPositions[position + 1] && null === maskset.validPositions[position + 1].match.fn || isFinite(vp.input) || position === lvp || vp.input === opts.groupSeparator || vp.input === opts.negationSymbol.front || vp.input === opts.negationSymbol.back;
	                return !canClear || "+" != vp.match.nativeDef && "-" != vp.match.nativeDef || (opts.isNegative = !1), 
	                canClear;
	            },
	            onKeyDown: function(e, buffer, caretPos, opts) {
	                var $input = $(this);
	                if (e.ctrlKey) switch (e.keyCode) {
	                  case Inputmask.keyCode.UP:
	                    $input.val(parseFloat(this.inputmask.unmaskedvalue()) + parseInt(opts.step)), $input.trigger("setvalue");
	                    break;
	
	                  case Inputmask.keyCode.DOWN:
	                    $input.val(parseFloat(this.inputmask.unmaskedvalue()) - parseInt(opts.step)), $input.trigger("setvalue");
	                }
	            }
	        },
	        currency: {
	            prefix: "$ ",
	            groupSeparator: ",",
	            alias: "numeric",
	            placeholder: "0",
	            autoGroup: !0,
	            digits: 2,
	            digitsOptional: !1,
	            clearMaskOnLostFocus: !1
	        },
	        decimal: {
	            alias: "numeric"
	        },
	        integer: {
	            alias: "numeric",
	            digits: 0,
	            radixPoint: ""
	        },
	        percentage: {
	            alias: "numeric",
	            digits: 2,
	            digitsOptional: !0,
	            radixPoint: ".",
	            placeholder: "0",
	            autoGroup: !1,
	            min: 0,
	            max: 100,
	            suffix: " %",
	            allowMinus: !1
	        }
	    }), Inputmask;
	});

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	* inputmask.phone.extensions.js
	* https://github.com/RobinHerbots/Inputmask
	* Copyright (c) 2010 - 2017 Robin Herbots
	* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
	* Version: 3.3.7
	*/
	
	!function(factory) {
	     true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(3), __webpack_require__(6) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == typeof exports ? module.exports = factory(require("./dependencyLibs/inputmask.dependencyLib"), require("./inputmask")) : factory(window.dependencyLib || jQuery, window.Inputmask);
	}(function($, Inputmask) {
	    function maskSort(a, b) {
	        var maska = (a.mask || a).replace(/#/g, "9").replace(/\)/, "9").replace(/[+()#-]/g, ""), maskb = (b.mask || b).replace(/#/g, "9").replace(/\)/, "9").replace(/[+()#-]/g, ""), maskas = (a.mask || a).split("#")[0], maskbs = (b.mask || b).split("#")[0];
	        return 0 === maskbs.indexOf(maskas) ? -1 : 0 === maskas.indexOf(maskbs) ? 1 : maska.localeCompare(maskb);
	    }
	    var analyseMaskBase = Inputmask.prototype.analyseMask;
	    return Inputmask.prototype.analyseMask = function(mask, regexMask, opts) {
	        function reduceVariations(masks, previousVariation, previousmaskGroup) {
	            previousVariation = previousVariation || "", previousmaskGroup = previousmaskGroup || maskGroups, 
	            "" !== previousVariation && (previousmaskGroup[previousVariation] = {});
	            for (var variation = "", maskGroup = previousmaskGroup[previousVariation] || previousmaskGroup, i = masks.length - 1; i >= 0; i--) mask = masks[i].mask || masks[i], 
	            variation = mask.substr(0, 1), maskGroup[variation] = maskGroup[variation] || [], 
	            maskGroup[variation].unshift(mask.substr(1)), masks.splice(i, 1);
	            for (var ndx in maskGroup) maskGroup[ndx].length > 500 && reduceVariations(maskGroup[ndx].slice(), ndx, maskGroup);
	        }
	        function rebuild(maskGroup) {
	            var mask = "", submasks = [];
	            for (var ndx in maskGroup) $.isArray(maskGroup[ndx]) ? 1 === maskGroup[ndx].length ? submasks.push(ndx + maskGroup[ndx]) : submasks.push(ndx + opts.groupmarker.start + maskGroup[ndx].join(opts.groupmarker.end + opts.alternatormarker + opts.groupmarker.start) + opts.groupmarker.end) : submasks.push(ndx + rebuild(maskGroup[ndx]));
	            return 1 === submasks.length ? mask += submasks[0] : mask += opts.groupmarker.start + submasks.join(opts.groupmarker.end + opts.alternatormarker + opts.groupmarker.start) + opts.groupmarker.end, 
	            mask;
	        }
	        var maskGroups = {};
	        return opts.phoneCodes && (opts.phoneCodes && opts.phoneCodes.length > 1e3 && (mask = mask.substr(1, mask.length - 2), 
	        reduceVariations(mask.split(opts.groupmarker.end + opts.alternatormarker + opts.groupmarker.start)), 
	        mask = rebuild(maskGroups)), mask = mask.replace(/9/g, "\\9")), analyseMaskBase.call(this, mask, regexMask, opts);
	    }, Inputmask.extendAliases({
	        abstractphone: {
	            groupmarker: {
	                start: "<",
	                end: ">"
	            },
	            countrycode: "",
	            phoneCodes: [],
	            mask: function(opts) {
	                return opts.definitions = {
	                    "#": Inputmask.prototype.definitions[9]
	                }, opts.phoneCodes.sort(maskSort);
	            },
	            keepStatic: !0,
	            onBeforeMask: function(value, opts) {
	                var processedValue = value.replace(/^0{1,2}/, "").replace(/[\s]/g, "");
	                return (processedValue.indexOf(opts.countrycode) > 1 || -1 === processedValue.indexOf(opts.countrycode)) && (processedValue = "+" + opts.countrycode + processedValue), 
	                processedValue;
	            },
	            onUnMask: function(maskedValue, unmaskedValue, opts) {
	                return maskedValue.replace(/[()#-]/g, "");
	            },
	            inputmode: "tel"
	        }
	    }), Inputmask;
	});

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		var sliderEl = document.querySelector('.reviews__slides');
	
		if (!sliderEl) return false;
	
		var slider = new _siema2.default({
			selector: sliderEl,
			loop: true,
			duration: 600
		});
	
		var prevBtn = document.querySelector('.reviews__slider-btn_left');
		var nextBtn = document.querySelector('.reviews__slider-btn_right');
	
		prevBtn.addEventListener('click', function () {
			return slider.prev();
		});
		nextBtn.addEventListener('click', function () {
			return slider.next();
		});
	
		setInterval(function () {
			slider.next();
		}, 4000);
	};
	
	var _siema = __webpack_require__(11);
	
	var _siema2 = _interopRequireDefault(_siema);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	!function(e,t){ true?module.exports=t():"function"==typeof define&&define.amd?define("Siema",[],t):"object"==typeof exports?exports.Siema=t():e.Siema=t()}(this,function(){return function(e){function t(s){if(i[s])return i[s].exports;var r=i[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var i={};return t.m=e,t.c=i,t.i=function(e){return e},t.d=function(e,i,s){t.o(e,i)||Object.defineProperty(e,i,{configurable:!1,enumerable:!0,get:s})},t.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(i,"a",i),i},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,i){"use strict";function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n=function(){function e(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,i,s){return i&&e(t.prototype,i),s&&e(t,s),t}}(),o=function(){function e(t){var i=this;s(this,e),this.config=e.mergeSettings(t),this.selector="string"==typeof this.config.selector?document.querySelector(this.config.selector):this.config.selector,this.selectorWidth=this.selector.offsetWidth,this.innerElements=[].slice.call(this.selector.children),this.currentSlide=this.config.startIndex,this.transformProperty=e.webkitOrNot(),["resizeHandler","touchstartHandler","touchendHandler","touchmoveHandler","mousedownHandler","mouseupHandler","mouseleaveHandler","mousemoveHandler"].forEach(function(e){i[e]=i[e].bind(i)}),this.init()}return n(e,[{key:"init",value:function(){if(window.addEventListener("resize",this.resizeHandler),this.config.draggable&&(this.pointerDown=!1,this.drag={startX:0,endX:0,startY:0,letItGo:null},this.selector.addEventListener("touchstart",this.touchstartHandler,{passive:!0}),this.selector.addEventListener("touchend",this.touchendHandler),this.selector.addEventListener("touchmove",this.touchmoveHandler,{passive:!0}),this.selector.addEventListener("mousedown",this.mousedownHandler),this.selector.addEventListener("mouseup",this.mouseupHandler),this.selector.addEventListener("mouseleave",this.mouseleaveHandler),this.selector.addEventListener("mousemove",this.mousemoveHandler)),null===this.selector)throw new Error("Something wrong with your selector 😭");this.resolveSlidesNumber(),this.selector.style.overflow="hidden",this.sliderFrame=document.createElement("div"),this.sliderFrame.style.width=this.selectorWidth/this.perPage*this.innerElements.length+"px",this.sliderFrame.style.webkitTransition="all "+this.config.duration+"ms "+this.config.easing,this.sliderFrame.style.transition="all "+this.config.duration+"ms "+this.config.easing,this.config.draggable&&(this.selector.style.cursor="-webkit-grab");for(var e=document.createDocumentFragment(),t=0;t<this.innerElements.length;t++){var i=document.createElement("div");i.style.cssFloat="left",i.style.float="left",i.style.width=100/this.innerElements.length+"%",i.appendChild(this.innerElements[t]),e.appendChild(i)}this.sliderFrame.appendChild(e),this.selector.innerHTML="",this.selector.appendChild(this.sliderFrame),this.slideToCurrent(),this.config.onInit.call(this)}},{key:"resolveSlidesNumber",value:function(){if("number"==typeof this.config.perPage)this.perPage=this.config.perPage;else if("object"===r(this.config.perPage)){this.perPage=1;for(var e in this.config.perPage)window.innerWidth>=e&&(this.perPage=this.config.perPage[e])}}},{key:"prev",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=arguments[1];if(!(this.innerElements.length<=this.perPage)){var i=this.currentSlide;0===this.currentSlide&&this.config.loop?this.currentSlide=this.innerElements.length-this.perPage:this.currentSlide=Math.max(this.currentSlide-e,0),i!==this.currentSlide&&(this.slideToCurrent(),this.config.onChange.call(this),t&&t.call(this))}}},{key:"next",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=arguments[1];if(!(this.innerElements.length<=this.perPage)){var i=this.currentSlide;this.currentSlide===this.innerElements.length-this.perPage&&this.config.loop?this.currentSlide=0:this.currentSlide=Math.min(this.currentSlide+e,this.innerElements.length-this.perPage),i!==this.currentSlide&&(this.slideToCurrent(),this.config.onChange.call(this),t&&t.call(this))}}},{key:"goTo",value:function(e,t){if(!(this.innerElements.length<=this.perPage)){var i=this.currentSlide;this.currentSlide=Math.min(Math.max(e,0),this.innerElements.length-this.perPage),i!==this.currentSlide&&(this.slideToCurrent(),this.config.onChange.call(this),t&&t.call(this))}}},{key:"slideToCurrent",value:function(){this.sliderFrame.style[this.transformProperty]="translate3d(-"+this.currentSlide*(this.selectorWidth/this.perPage)+"px, 0, 0)"}},{key:"updateAfterDrag",value:function(){var e=this.drag.endX-this.drag.startX,t=Math.abs(e),i=Math.ceil(t/(this.selectorWidth/this.perPage));e>0&&t>this.config.threshold&&this.innerElements.length>this.perPage?this.prev(i):e<0&&t>this.config.threshold&&this.innerElements.length>this.perPage&&this.next(i),this.slideToCurrent()}},{key:"resizeHandler",value:function(){this.resolveSlidesNumber(),this.selectorWidth=this.selector.offsetWidth,this.sliderFrame.style.width=this.selectorWidth/this.perPage*this.innerElements.length+"px",this.slideToCurrent()}},{key:"clearDrag",value:function(){this.drag={startX:0,endX:0,startY:0,letItGo:null}}},{key:"touchstartHandler",value:function(e){e.stopPropagation(),this.pointerDown=!0,this.drag.startX=e.touches[0].pageX,this.drag.startY=e.touches[0].pageY}},{key:"touchendHandler",value:function(e){e.stopPropagation(),this.pointerDown=!1,this.sliderFrame.style.webkitTransition="all "+this.config.duration+"ms "+this.config.easing,this.sliderFrame.style.transition="all "+this.config.duration+"ms "+this.config.easing,this.drag.endX&&this.updateAfterDrag(),this.clearDrag()}},{key:"touchmoveHandler",value:function(e){e.stopPropagation(),null===this.drag.letItGo&&(this.drag.letItGo=Math.abs(this.drag.startY-e.touches[0].pageY)<Math.abs(this.drag.startX-e.touches[0].pageX)),this.pointerDown&&this.drag.letItGo&&(this.drag.endX=e.touches[0].pageX,this.sliderFrame.style.webkitTransition="all 0ms "+this.config.easing,this.sliderFrame.style.transition="all 0ms "+this.config.easing,this.sliderFrame.style[this.transformProperty]="translate3d("+(this.currentSlide*(this.selectorWidth/this.perPage)+(this.drag.startX-this.drag.endX))*-1+"px, 0, 0)")}},{key:"mousedownHandler",value:function(e){e.preventDefault(),e.stopPropagation(),this.pointerDown=!0,this.drag.startX=e.pageX}},{key:"mouseupHandler",value:function(e){e.stopPropagation(),this.pointerDown=!1,this.selector.style.cursor="-webkit-grab",this.sliderFrame.style.webkitTransition="all "+this.config.duration+"ms "+this.config.easing,this.sliderFrame.style.transition="all "+this.config.duration+"ms "+this.config.easing,this.drag.endX&&this.updateAfterDrag(),this.clearDrag()}},{key:"mousemoveHandler",value:function(e){e.preventDefault(),this.pointerDown&&(this.drag.endX=e.pageX,this.selector.style.cursor="-webkit-grabbing",this.sliderFrame.style.webkitTransition="all 0ms "+this.config.easing,this.sliderFrame.style.transition="all 0ms "+this.config.easing,this.sliderFrame.style[this.transformProperty]="translate3d("+(this.currentSlide*(this.selectorWidth/this.perPage)+(this.drag.startX-this.drag.endX))*-1+"px, 0, 0)")}},{key:"mouseleaveHandler",value:function(e){this.pointerDown&&(this.pointerDown=!1,this.selector.style.cursor="-webkit-grab",this.drag.endX=e.pageX,this.sliderFrame.style.webkitTransition="all "+this.config.duration+"ms "+this.config.easing,this.sliderFrame.style.transition="all "+this.config.duration+"ms "+this.config.easing,this.updateAfterDrag(),this.clearDrag())}},{key:"updateFrame",value:function(){this.sliderFrame=document.createElement("div"),this.sliderFrame.style.width=this.selectorWidth/this.perPage*this.innerElements.length+"px",this.sliderFrame.style.webkitTransition="all "+this.config.duration+"ms "+this.config.easing,this.sliderFrame.style.transition="all "+this.config.duration+"ms "+this.config.easing,this.config.draggable&&(this.selector.style.cursor="-webkit-grab");for(var e=document.createDocumentFragment(),t=0;t<this.innerElements.length;t++){var i=document.createElement("div");i.style.cssFloat="left",i.style.float="left",i.style.width=100/this.innerElements.length+"%",i.appendChild(this.innerElements[t]),e.appendChild(i)}this.sliderFrame.appendChild(e),this.selector.innerHTML="",this.selector.appendChild(this.sliderFrame),this.slideToCurrent()}},{key:"remove",value:function(e,t){if(e<0||e>=this.innerElements.length)throw new Error("Item to remove doesn't exist 😭");this.innerElements.splice(e,1),this.currentSlide=e<=this.currentSlide?this.currentSlide-1:this.currentSlide,this.updateFrame(),t&&t.call(this)}},{key:"insert",value:function(e,t,i){if(t<0||t>this.innerElements.length+1)throw new Error("Unable to inset it at this index 😭");if(this.innerElements.indexOf(e)!==-1)throw new Error("The same item in a carousel? Really? Nope 😭");this.innerElements.splice(t,0,e),this.currentSlide=t<=this.currentSlide?this.currentSlide+1:this.currentSlide,this.updateFrame(),i&&i.call(this)}},{key:"prepend",value:function(e,t){this.insert(e,0),t&&t.call(this)}},{key:"append",value:function(e,t){this.insert(e,this.innerElements.length+1),t&&t.call(this)}},{key:"destroy",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments[1];if(window.removeEventListener("resize",this.resizeHandler),this.selector.style.cursor="auto",this.selector.removeEventListener("touchstart",this.touchstartHandler),this.selector.removeEventListener("touchend",this.touchendHandler),this.selector.removeEventListener("touchmove",this.touchmoveHandler),this.selector.removeEventListener("mousedown",this.mousedownHandler),this.selector.removeEventListener("mouseup",this.mouseupHandler),this.selector.removeEventListener("mouseleave",this.mouseleaveHandler),this.selector.removeEventListener("mousemove",this.mousemoveHandler),e){for(var i=document.createDocumentFragment(),s=0;s<this.innerElements.length;s++)i.appendChild(this.innerElements[s]);this.selector.innerHTML="",this.selector.appendChild(i),this.selector.removeAttribute("style")}t&&t.call(this)}}],[{key:"mergeSettings",value:function(e){var t={selector:".siema",duration:200,easing:"ease-out",perPage:1,startIndex:0,draggable:!0,threshold:20,loop:!1,onInit:function(){},onChange:function(){}},i=e;for(var s in i)t[s]=i[s];return t}},{key:"webkitOrNot",value:function(){var e=document.documentElement.style;return"string"==typeof e.transform?"transform":"WebkitTransform"}}]),e}();t.default=o,e.exports=t.default}])});

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		// Найти DOM элемент формы
		var form = document.getElementById('for-models-form');
		if (!form) return false;
		// Отловить событие отправки формы
		form.addEventListener('submit', function (e) {
			e.preventDefault();
			//- Валидация данных
			(0, _helpers.validateForm)(form);
			//- Подготовить данные для отправки
			var data = new FormData(form);
			//- Отправить данные на сервер
			send(form.action, data, form);
		});
	};
	
	var _noty = __webpack_require__(13);
	
	var _noty2 = _interopRequireDefault(_noty);
	
	var _helpers = __webpack_require__(14);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function send(action, formData, form) {
		var xhr = new XMLHttpRequest();
	
		//-- Обработать результат отправки
		xhr.onload = xhr.onerror = function () {
			//--- Показать сообщение об успехе / ошибке
			if (this.status == 200) {
				new _noty2.default({
					type: 'success',
					text: 'Анкета успешно отправленна',
					timeout: 5000,
					progressBar: true,
					closeWith: ['click', 'button']
				}).show();
	
				// Скрыть форму
				form.classList.add('hidden');
				// Показать текст об успешной отправке
				var text = document.querySelector('.form__text.hidden');
				if (text) {
					text.classList.remove('hidden');
				}
	
				var title = document.querySelector('.form__title');
				title.innerHTML = 'Анкета отправленна';
			} else {
				new _noty2.default({
					type: 'error',
					text: 'Произошла ошибка при отправке данных...',
					timeout: 5000,
					progressBar: true,
					closeWith: ['click', 'button']
				}).show();
			}
		};
	
		xhr.open("POST", action, true);
		xhr.send(formData);
	}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("Noty", [], factory);
		else if(typeof exports === 'object')
			exports["Noty"] = factory();
		else
			root["Noty"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 6);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.css = exports.deepExtend = exports.animationEndEvents = undefined;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.inArray = inArray;
	exports.stopPropagation = stopPropagation;
	exports.generateID = generateID;
	exports.outerHeight = outerHeight;
	exports.addListener = addListener;
	exports.hasClass = hasClass;
	exports.addClass = addClass;
	exports.removeClass = removeClass;
	exports.remove = remove;
	exports.classList = classList;
	exports.visibilityChangeFlow = visibilityChangeFlow;
	exports.createAudioElements = createAudioElements;
	
	var _api = __webpack_require__(1);
	
	var API = _interopRequireWildcard(_api);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var animationEndEvents = exports.animationEndEvents = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';
	
	function inArray(needle, haystack, argStrict) {
	  var key = void 0;
	  var strict = !!argStrict;
	
	  if (strict) {
	    for (key in haystack) {
	      if (haystack.hasOwnProperty(key) && haystack[key] === needle) {
	        return true;
	      }
	    }
	  } else {
	    for (key in haystack) {
	      if (haystack.hasOwnProperty(key) && haystack[key] === needle) {
	        return true;
	      }
	    }
	  }
	  return false;
	}
	
	function stopPropagation(evt) {
	  evt = evt || window.event;
	
	  if (typeof evt.stopPropagation !== 'undefined') {
	    evt.stopPropagation();
	  } else {
	    evt.cancelBubble = true;
	  }
	}
	
	var deepExtend = exports.deepExtend = function deepExtend(out) {
	  out = out || {};
	
	  for (var i = 1; i < arguments.length; i++) {
	    var obj = arguments[i];
	
	    if (!obj) continue;
	
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        if (Array.isArray(obj[key])) {
	          out[key] = obj[key];
	        } else if (_typeof(obj[key]) === 'object' && obj[key] !== null) {
	          out[key] = deepExtend(out[key], obj[key]);
	        } else {
	          out[key] = obj[key];
	        }
	      }
	    }
	  }
	
	  return out;
	};
	
	function generateID() {
	  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	
	  var id = 'noty_' + prefix + '_';
	
	  id += 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	    var r = Math.random() * 16 | 0;
	    var v = c === 'x' ? r : r & 0x3 | 0x8;
	    return v.toString(16);
	  });
	
	  return id;
	}
	
	function outerHeight(el) {
	  var height = el.offsetHeight;
	  var style = window.getComputedStyle(el);
	
	  height += parseInt(style.marginTop) + parseInt(style.marginBottom);
	  return height;
	}
	
	var css = exports.css = function () {
	  var cssPrefixes = ['Webkit', 'O', 'Moz', 'ms'];
	  var cssProps = {};
	
	  function camelCase(string) {
	    return string.replace(/^-ms-/, 'ms-').replace(/-([\da-z])/gi, function (match, letter) {
	      return letter.toUpperCase();
	    });
	  }
	
	  function getVendorProp(name) {
	    var style = document.body.style;
	    if (name in style) return name;
	
	    var i = cssPrefixes.length;
	    var capName = name.charAt(0).toUpperCase() + name.slice(1);
	    var vendorName = void 0;
	
	    while (i--) {
	      vendorName = cssPrefixes[i] + capName;
	      if (vendorName in style) return vendorName;
	    }
	
	    return name;
	  }
	
	  function getStyleProp(name) {
	    name = camelCase(name);
	    return cssProps[name] || (cssProps[name] = getVendorProp(name));
	  }
	
	  function applyCss(element, prop, value) {
	    prop = getStyleProp(prop);
	    element.style[prop] = value;
	  }
	
	  return function (element, properties) {
	    var args = arguments;
	    var prop = void 0;
	    var value = void 0;
	
	    if (args.length === 2) {
	      for (prop in properties) {
	        if (properties.hasOwnProperty(prop)) {
	          value = properties[prop];
	          if (value !== undefined && properties.hasOwnProperty(prop)) {
	            applyCss(element, prop, value);
	          }
	        }
	      }
	    } else {
	      applyCss(element, args[1], args[2]);
	    }
	  };
	}();
	
	function addListener(el, events, cb) {
	  var useCapture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	
	  events = events.split(' ');
	  for (var i = 0; i < events.length; i++) {
	    if (document.addEventListener) {
	      el.addEventListener(events[i], cb, useCapture);
	    } else if (document.attachEvent) {
	      el.attachEvent('on' + events[i], cb);
	    }
	  }
	}
	
	function hasClass(element, name) {
	  var list = typeof element === 'string' ? element : classList(element);
	  return list.indexOf(' ' + name + ' ') >= 0;
	}
	
	function addClass(element, name) {
	  var oldList = classList(element);
	  var newList = oldList + name;
	
	  if (hasClass(oldList, name)) return;
	
	  // Trim the opening space.
	  element.className = newList.substring(1);
	}
	
	function removeClass(element, name) {
	  var oldList = classList(element);
	  var newList = void 0;
	
	  if (!hasClass(element, name)) return;
	
	  // Replace the class name.
	  newList = oldList.replace(' ' + name + ' ', ' ');
	
	  // Trim the opening and closing spaces.
	  element.className = newList.substring(1, newList.length - 1);
	}
	
	function remove(element) {
	  if (element.parentNode) {
	    element.parentNode.removeChild(element);
	  }
	}
	
	function classList(element) {
	  return (' ' + (element && element.className || '') + ' ').replace(/\s+/gi, ' ');
	}
	
	function visibilityChangeFlow() {
	  var hidden = void 0;
	  var visibilityChange = void 0;
	  if (typeof document.hidden !== 'undefined') {
	    // Opera 12.10 and Firefox 18 and later support
	    hidden = 'hidden';
	    visibilityChange = 'visibilitychange';
	  } else if (typeof document.msHidden !== 'undefined') {
	    hidden = 'msHidden';
	    visibilityChange = 'msvisibilitychange';
	  } else if (typeof document.webkitHidden !== 'undefined') {
	    hidden = 'webkitHidden';
	    visibilityChange = 'webkitvisibilitychange';
	  }
	
	  function onVisibilityChange() {
	    API.PageHidden = document[hidden];
	    handleVisibilityChange();
	  }
	
	  function onBlur() {
	    API.PageHidden = true;
	    handleVisibilityChange();
	  }
	
	  function onFocus() {
	    API.PageHidden = false;
	    handleVisibilityChange();
	  }
	
	  function handleVisibilityChange() {
	    if (API.PageHidden) stopAll();else resumeAll();
	  }
	
	  function stopAll() {
	    setTimeout(function () {
	      Object.keys(API.Store).forEach(function (id) {
	        if (API.Store.hasOwnProperty(id)) {
	          if (API.Store[id].options.visibilityControl) {
	            API.Store[id].stop();
	          }
	        }
	      });
	    }, 100);
	  }
	
	  function resumeAll() {
	    setTimeout(function () {
	      Object.keys(API.Store).forEach(function (id) {
	        if (API.Store.hasOwnProperty(id)) {
	          if (API.Store[id].options.visibilityControl) {
	            API.Store[id].resume();
	          }
	        }
	      });
	      API.queueRenderAll();
	    }, 100);
	  }
	
	  addListener(document, visibilityChange, onVisibilityChange);
	  addListener(window, 'blur', onBlur);
	  addListener(window, 'focus', onFocus);
	}
	
	function createAudioElements(ref) {
	  if (ref.hasSound) {
	    var audioElement = document.createElement('audio');
	
	    ref.options.sounds.sources.forEach(function (s) {
	      var source = document.createElement('source');
	      source.src = s;
	      source.type = 'audio/' + getExtension(s);
	      audioElement.appendChild(source);
	    });
	
	    if (ref.barDom) {
	      ref.barDom.appendChild(audioElement);
	    } else {
	      document.querySelector('body').appendChild(audioElement);
	    }
	
	    audioElement.volume = ref.options.sounds.volume;
	
	    if (!ref.soundPlayed) {
	      audioElement.play();
	      ref.soundPlayed = true;
	    }
	
	    audioElement.onended = function () {
	      remove(audioElement);
	    };
	  }
	}
	
	function getExtension(fileName) {
	  return fileName.match(/\.([^.]+)$/)[1];
	}
	
	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Defaults = exports.Store = exports.Queues = exports.DefaultMaxVisible = exports.docTitle = exports.DocModalCount = exports.PageHidden = undefined;
	exports.getQueueCounts = getQueueCounts;
	exports.addToQueue = addToQueue;
	exports.removeFromQueue = removeFromQueue;
	exports.queueRender = queueRender;
	exports.queueRenderAll = queueRenderAll;
	exports.ghostFix = ghostFix;
	exports.build = build;
	exports.hasButtons = hasButtons;
	exports.handleModal = handleModal;
	exports.handleModalClose = handleModalClose;
	exports.queueClose = queueClose;
	exports.dequeueClose = dequeueClose;
	exports.fire = fire;
	exports.openFlow = openFlow;
	exports.closeFlow = closeFlow;
	
	var _utils = __webpack_require__(0);
	
	var Utils = _interopRequireWildcard(_utils);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var PageHidden = exports.PageHidden = false;
	var DocModalCount = exports.DocModalCount = 0;
	
	var DocTitleProps = {
	  originalTitle: null,
	  count: 0,
	  changed: false,
	  timer: -1
	};
	
	var docTitle = exports.docTitle = {
	  increment: function increment() {
	    DocTitleProps.count++;
	
	    docTitle._update();
	  },
	
	  decrement: function decrement() {
	    DocTitleProps.count--;
	
	    if (DocTitleProps.count <= 0) {
	      docTitle._clear();
	      return;
	    }
	
	    docTitle._update();
	  },
	
	  _update: function _update() {
	    var title = document.title;
	
	    if (!DocTitleProps.changed) {
	      DocTitleProps.originalTitle = title;
	      document.title = '(' + DocTitleProps.count + ') ' + title;
	      DocTitleProps.changed = true;
	    } else {
	      document.title = '(' + DocTitleProps.count + ') ' + DocTitleProps.originalTitle;
	    }
	  },
	
	  _clear: function _clear() {
	    if (DocTitleProps.changed) {
	      DocTitleProps.count = 0;
	      document.title = DocTitleProps.originalTitle;
	      DocTitleProps.changed = false;
	    }
	  }
	};
	
	var DefaultMaxVisible = exports.DefaultMaxVisible = 5;
	
	var Queues = exports.Queues = {
	  global: {
	    maxVisible: DefaultMaxVisible,
	    queue: []
	  }
	};
	
	var Store = exports.Store = {};
	
	var Defaults = exports.Defaults = {
	  type: 'alert',
	  layout: 'topRight',
	  theme: 'mint',
	  text: '',
	  timeout: false,
	  progressBar: true,
	  closeWith: ['click'],
	  animation: {
	    open: 'noty_effects_open',
	    close: 'noty_effects_close'
	  },
	  id: false,
	  force: false,
	  killer: false,
	  queue: 'global',
	  container: false,
	  buttons: [],
	  callbacks: {
	    beforeShow: null,
	    onShow: null,
	    afterShow: null,
	    onClose: null,
	    afterClose: null,
	    onHover: null,
	    onTemplate: null
	  },
	  sounds: {
	    sources: [],
	    volume: 1,
	    conditions: []
	  },
	  titleCount: {
	    conditions: []
	  },
	  modal: false,
	  visibilityControl: true
	};
	
	/**
	 * @param {string} queueName
	 * @return {object}
	 */
	function getQueueCounts() {
	  var queueName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'global';
	
	  var count = 0;
	  var max = DefaultMaxVisible;
	
	  if (Queues.hasOwnProperty(queueName)) {
	    max = Queues[queueName].maxVisible;
	    Object.keys(Store).forEach(function (i) {
	      if (Store[i].options.queue === queueName && !Store[i].closed) count++;
	    });
	  }
	
	  return {
	    current: count,
	    maxVisible: max
	  };
	}
	
	/**
	 * @param {Noty} ref
	 * @return {void}
	 */
	function addToQueue(ref) {
	  if (!Queues.hasOwnProperty(ref.options.queue)) {
	    Queues[ref.options.queue] = { maxVisible: DefaultMaxVisible, queue: [] };
	  }
	
	  Queues[ref.options.queue].queue.push(ref);
	}
	
	/**
	 * @param {Noty} ref
	 * @return {void}
	 */
	function removeFromQueue(ref) {
	  if (Queues.hasOwnProperty(ref.options.queue)) {
	    var queue = [];
	    Object.keys(Queues[ref.options.queue].queue).forEach(function (i) {
	      if (Queues[ref.options.queue].queue[i].id !== ref.id) {
	        queue.push(Queues[ref.options.queue].queue[i]);
	      }
	    });
	    Queues[ref.options.queue].queue = queue;
	  }
	}
	
	/**
	 * @param {string} queueName
	 * @return {void}
	 */
	function queueRender() {
	  var queueName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'global';
	
	  if (Queues.hasOwnProperty(queueName)) {
	    var noty = Queues[queueName].queue.shift();
	
	    if (noty) noty.show();
	  }
	}
	
	/**
	 * @return {void}
	 */
	function queueRenderAll() {
	  Object.keys(Queues).forEach(function (queueName) {
	    queueRender(queueName);
	  });
	}
	
	/**
	 * @param {Noty} ref
	 * @return {void}
	 */
	function ghostFix(ref) {
	  var ghostID = Utils.generateID('ghost');
	  var ghost = document.createElement('div');
	  ghost.setAttribute('id', ghostID);
	  Utils.css(ghost, {
	    height: Utils.outerHeight(ref.barDom) + 'px'
	  });
	
	  ref.barDom.insertAdjacentHTML('afterend', ghost.outerHTML);
	
	  Utils.remove(ref.barDom);
	  ghost = document.getElementById(ghostID);
	  Utils.addClass(ghost, 'noty_fix_effects_height');
	  Utils.addListener(ghost, Utils.animationEndEvents, function () {
	    Utils.remove(ghost);
	  });
	}
	
	/**
	 * @param {Noty} ref
	 * @return {void}
	 */
	function build(ref) {
	  findOrCreateContainer(ref);
	
	  var markup = '<div class="noty_body">' + ref.options.text + '</div>' + buildButtons(ref) + '<div class="noty_progressbar"></div>';
	
	  ref.barDom = document.createElement('div');
	  ref.barDom.setAttribute('id', ref.id);
	  Utils.addClass(ref.barDom, 'noty_bar noty_type__' + ref.options.type + ' noty_theme__' + ref.options.theme);
	
	  ref.barDom.innerHTML = markup;
	
	  fire(ref, 'onTemplate');
	}
	
	/**
	 * @param {Noty} ref
	 * @return {boolean}
	 */
	function hasButtons(ref) {
	  return !!(ref.options.buttons && Object.keys(ref.options.buttons).length);
	}
	
	/**
	 * @param {Noty} ref
	 * @return {string}
	 */
	function buildButtons(ref) {
	  if (hasButtons(ref)) {
	    var buttons = document.createElement('div');
	    Utils.addClass(buttons, 'noty_buttons');
	
	    Object.keys(ref.options.buttons).forEach(function (key) {
	      buttons.appendChild(ref.options.buttons[key].dom);
	    });
	
	    ref.options.buttons.forEach(function (btn) {
	      buttons.appendChild(btn.dom);
	    });
	    return buttons.outerHTML;
	  }
	  return '';
	}
	
	/**
	 * @param {Noty} ref
	 * @return {void}
	 */
	function handleModal(ref) {
	  if (ref.options.modal) {
	    if (DocModalCount === 0) {
	      createModal(ref);
	    }
	
	    exports.DocModalCount = DocModalCount += 1;
	  }
	}
	
	/**
	 * @param {Noty} ref
	 * @return {void}
	 */
	function handleModalClose(ref) {
	  if (ref.options.modal && DocModalCount > 0) {
	    exports.DocModalCount = DocModalCount -= 1;
	
	    if (DocModalCount <= 0) {
	      var modal = document.querySelector('.noty_modal');
	
	      if (modal) {
	        Utils.removeClass(modal, 'noty_modal_open');
	        Utils.addClass(modal, 'noty_modal_close');
	        Utils.addListener(modal, Utils.animationEndEvents, function () {
	          Utils.remove(modal);
	        });
	      }
	    }
	  }
	}
	
	/**
	 * @return {void}
	 */
	function createModal() {
	  var body = document.querySelector('body');
	  var modal = document.createElement('div');
	  Utils.addClass(modal, 'noty_modal');
	  body.insertBefore(modal, body.firstChild);
	  Utils.addClass(modal, 'noty_modal_open');
	
	  Utils.addListener(modal, Utils.animationEndEvents, function () {
	    Utils.removeClass(modal, 'noty_modal_open');
	  });
	}
	
	/**
	 * @param {Noty} ref
	 * @return {void}
	 */
	function findOrCreateContainer(ref) {
	  if (ref.options.container) {
	    ref.layoutDom = document.querySelector(ref.options.container);
	    return;
	  }
	
	  var layoutID = 'noty_layout__' + ref.options.layout;
	  ref.layoutDom = document.querySelector('div#' + layoutID);
	
	  if (!ref.layoutDom) {
	    ref.layoutDom = document.createElement('div');
	    ref.layoutDom.setAttribute('id', layoutID);
	    Utils.addClass(ref.layoutDom, 'noty_layout');
	    document.querySelector('body').appendChild(ref.layoutDom);
	  }
	}
	
	/**
	 * @param {Noty} ref
	 * @return {void}
	 */
	function queueClose(ref) {
	  if (ref.options.timeout) {
	    if (ref.options.progressBar && ref.progressDom) {
	      Utils.css(ref.progressDom, {
	        transition: 'width ' + ref.options.timeout + 'ms linear',
	        width: '0%'
	      });
	    }
	
	    clearTimeout(ref.closeTimer);
	
	    ref.closeTimer = setTimeout(function () {
	      ref.close();
	    }, ref.options.timeout);
	  }
	}
	
	/**
	 * @param {Noty} ref
	 * @return {void}
	 */
	function dequeueClose(ref) {
	  if (ref.options.timeout && ref.closeTimer) {
	    clearTimeout(ref.closeTimer);
	    ref.closeTimer = -1;
	
	    if (ref.options.progressBar && ref.progressDom) {
	      Utils.css(ref.progressDom, {
	        transition: 'width 0ms linear',
	        width: '100%'
	      });
	    }
	  }
	}
	
	/**
	 * @param {Noty} ref
	 * @param {string} eventName
	 * @return {void}
	 */
	function fire(ref, eventName) {
	  if (ref.listeners.hasOwnProperty(eventName)) {
	    ref.listeners[eventName].forEach(function (cb) {
	      if (typeof cb === 'function') {
	        cb.apply(ref);
	      }
	    });
	  }
	}
	
	/**
	 * @param {Noty} ref
	 * @return {void}
	 */
	function openFlow(ref) {
	  fire(ref, 'afterShow');
	  queueClose(ref);
	
	  Utils.addListener(ref.barDom, 'mouseenter', function () {
	    dequeueClose(ref);
	  });
	
	  Utils.addListener(ref.barDom, 'mouseleave', function () {
	    queueClose(ref);
	  });
	}
	
	/**
	 * @param {Noty} ref
	 * @return {void}
	 */
	function closeFlow(ref) {
	  delete Store[ref.id];
	  ref.closing = false;
	  fire(ref, 'afterClose');
	
	  Utils.remove(ref.barDom);
	
	  if (ref.layoutDom.querySelectorAll('.noty_bar').length === 0 && !ref.options.container) {
	    Utils.remove(ref.layoutDom);
	  }
	
	  if (Utils.inArray('docVisible', ref.options.titleCount.conditions) || Utils.inArray('docHidden', ref.options.titleCount.conditions)) {
	    docTitle.decrement();
	  }
	
	  queueRender(ref.options.queue);
	}
	
	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.NotyButton = undefined;
	
	var _utils = __webpack_require__(0);
	
	var Utils = _interopRequireWildcard(_utils);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NotyButton = exports.NotyButton = function NotyButton(html, classes, cb) {
	  var _this = this;
	
	  var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	
	  _classCallCheck(this, NotyButton);
	
	  this.dom = document.createElement('button');
	  this.dom.innerHTML = html;
	  this.id = attributes.id = attributes.id || Utils.generateID('button');
	  this.cb = cb;
	  Object.keys(attributes).forEach(function (propertyName) {
	    _this.dom.setAttribute(propertyName, attributes[propertyName]);
	  });
	  Utils.addClass(this.dom, classes || 'noty_btn');
	
	  return this;
	};
	
	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Push = exports.Push = function () {
	  function Push() {
	    var workerPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/service-worker.js';
	
	    _classCallCheck(this, Push);
	
	    this.subData = {};
	    this.workerPath = workerPath;
	    this.listeners = {
	      onPermissionGranted: [],
	      onPermissionDenied: [],
	      onSubscriptionSuccess: [],
	      onSubscriptionCancel: [],
	      onWorkerError: [],
	      onWorkerSuccess: [],
	      onWorkerNotSupported: []
	    };
	    return this;
	  }
	
	  /**
	   * @param {string} eventName
	   * @param {function} cb
	   * @return {Push}
	   */
	
	
	  _createClass(Push, [{
	    key: 'on',
	    value: function on(eventName) {
	      var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
	
	      if (typeof cb === 'function' && this.listeners.hasOwnProperty(eventName)) {
	        this.listeners[eventName].push(cb);
	      }
	
	      return this;
	    }
	  }, {
	    key: 'fire',
	    value: function fire(eventName) {
	      var _this = this;
	
	      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	
	      if (this.listeners.hasOwnProperty(eventName)) {
	        this.listeners[eventName].forEach(function (cb) {
	          if (typeof cb === 'function') {
	            cb.apply(_this, params);
	          }
	        });
	      }
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	      console.log('NOT IMPLEMENTED YET');
	    }
	
	    /**
	     * @return {boolean}
	     */
	
	  }, {
	    key: 'isSupported',
	    value: function isSupported() {
	      var result = false;
	
	      try {
	        result = window.Notification || window.webkitNotifications || navigator.mozNotification || window.external && window.external.msIsSiteMode() !== undefined;
	      } catch (e) {}
	
	      return result;
	    }
	
	    /**
	     * @return {string}
	     */
	
	  }, {
	    key: 'getPermissionStatus',
	    value: function getPermissionStatus() {
	      var perm = 'default';
	
	      if (window.Notification && window.Notification.permissionLevel) {
	        perm = window.Notification.permissionLevel;
	      } else if (window.webkitNotifications && window.webkitNotifications.checkPermission) {
	        switch (window.webkitNotifications.checkPermission()) {
	          case 1:
	            perm = 'default';
	            break;
	          case 0:
	            perm = 'granted';
	            break;
	          default:
	            perm = 'denied';
	        }
	      } else if (window.Notification && window.Notification.permission) {
	        perm = window.Notification.permission;
	      } else if (navigator.mozNotification) {
	        perm = 'granted';
	      } else if (window.external && window.external.msIsSiteMode() !== undefined) {
	        perm = window.external.msIsSiteMode() ? 'granted' : 'default';
	      }
	
	      return perm.toString().toLowerCase();
	    }
	
	    /**
	     * @return {string}
	     */
	
	  }, {
	    key: 'getEndpoint',
	    value: function getEndpoint(subscription) {
	      var endpoint = subscription.endpoint;
	      var subscriptionId = subscription.subscriptionId;
	
	      // fix for Chrome < 45
	      if (subscriptionId && endpoint.indexOf(subscriptionId) === -1) {
	        endpoint += '/' + subscriptionId;
	      }
	
	      return endpoint;
	    }
	
	    /**
	     * @return {boolean}
	     */
	
	  }, {
	    key: 'isSWRegistered',
	    value: function isSWRegistered() {
	      try {
	        return navigator.serviceWorker.controller.state === 'activated';
	      } catch (e) {
	        return false;
	      }
	    }
	
	    /**
	     * @return {void}
	     */
	
	  }, {
	    key: 'unregisterWorker',
	    value: function unregisterWorker() {
	      var self = this;
	      if ('serviceWorker' in navigator) {
	        navigator.serviceWorker.getRegistrations().then(function (registrations) {
	          var _iteratorNormalCompletion = true;
	          var _didIteratorError = false;
	          var _iteratorError = undefined;
	
	          try {
	            for (var _iterator = registrations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	              var registration = _step.value;
	
	              registration.unregister();
	              self.fire('onSubscriptionCancel');
	            }
	          } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion && _iterator.return) {
	                _iterator.return();
	              }
	            } finally {
	              if (_didIteratorError) {
	                throw _iteratorError;
	              }
	            }
	          }
	        });
	      }
	    }
	
	    /**
	     * @return {void}
	     */
	
	  }, {
	    key: 'requestSubscription',
	    value: function requestSubscription() {
	      var _this2 = this;
	
	      var userVisibleOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	
	      var self = this;
	      var current = this.getPermissionStatus();
	      var cb = function cb(result) {
	        if (result === 'granted') {
	          _this2.fire('onPermissionGranted');
	
	          if ('serviceWorker' in navigator) {
	            navigator.serviceWorker.register(_this2.workerPath).then(function () {
	              navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {
	                self.fire('onWorkerSuccess');
	                serviceWorkerRegistration.pushManager.subscribe({
	                  userVisibleOnly: userVisibleOnly
	                }).then(function (subscription) {
	                  var key = subscription.getKey('p256dh');
	                  var token = subscription.getKey('auth');
	
	                  self.subData = {
	                    endpoint: self.getEndpoint(subscription),
	                    p256dh: key ? window.btoa(String.fromCharCode.apply(null, new Uint8Array(key))) : null,
	                    auth: token ? window.btoa(String.fromCharCode.apply(null, new Uint8Array(token))) : null
	                  };
	
	                  self.fire('onSubscriptionSuccess', [self.subData]);
	                }).catch(function (err) {
	                  self.fire('onWorkerError', [err]);
	                });
	              });
	            });
	          } else {
	            self.fire('onWorkerNotSupported');
	          }
	        } else if (result === 'denied') {
	          _this2.fire('onPermissionDenied');
	          _this2.unregisterWorker();
	        }
	      };
	
	      if (current === 'default') {
	        if (window.Notification && window.Notification.requestPermission) {
	          window.Notification.requestPermission(cb);
	        } else if (window.webkitNotifications && window.webkitNotifications.checkPermission) {
	          window.webkitNotifications.requestPermission(cb);
	        }
	      } else {
	        cb(current);
	      }
	    }
	  }]);
	
	  return Push;
	}();
	
	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {
	
	/* WEBPACK VAR INJECTION */(function(process, global) {var require;/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
	 * @version   4.1.0
	 */
	
	(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (global.ES6Promise = factory());
	}(this, (function () { 'use strict';
	
	function objectOrFunction(x) {
	  return typeof x === 'function' || typeof x === 'object' && x !== null;
	}
	
	function isFunction(x) {
	  return typeof x === 'function';
	}
	
	var _isArray = undefined;
	if (!Array.isArray) {
	  _isArray = function (x) {
	    return Object.prototype.toString.call(x) === '[object Array]';
	  };
	} else {
	  _isArray = Array.isArray;
	}
	
	var isArray = _isArray;
	
	var len = 0;
	var vertxNext = undefined;
	var customSchedulerFn = undefined;
	
	var asap = function asap(callback, arg) {
	  queue[len] = callback;
	  queue[len + 1] = arg;
	  len += 2;
	  if (len === 2) {
	    // If len is 2, that means that we need to schedule an async flush.
	    // If additional callbacks are queued before the queue is flushed, they
	    // will be processed by this flush that we are scheduling.
	    if (customSchedulerFn) {
	      customSchedulerFn(flush);
	    } else {
	      scheduleFlush();
	    }
	  }
	};
	
	function setScheduler(scheduleFn) {
	  customSchedulerFn = scheduleFn;
	}
	
	function setAsap(asapFn) {
	  asap = asapFn;
	}
	
	var browserWindow = typeof window !== 'undefined' ? window : undefined;
	var browserGlobal = browserWindow || {};
	var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';
	
	// test for web worker but not in IE10
	var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
	
	// node
	function useNextTick() {
	  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	  // see https://github.com/cujojs/when/issues/410 for details
	  return function () {
	    return process.nextTick(flush);
	  };
	}
	
	// vertx
	function useVertxTimer() {
	  if (typeof vertxNext !== 'undefined') {
	    return function () {
	      vertxNext(flush);
	    };
	  }
	
	  return useSetTimeout();
	}
	
	function useMutationObserver() {
	  var iterations = 0;
	  var observer = new BrowserMutationObserver(flush);
	  var node = document.createTextNode('');
	  observer.observe(node, { characterData: true });
	
	  return function () {
	    node.data = iterations = ++iterations % 2;
	  };
	}
	
	// web worker
	function useMessageChannel() {
	  var channel = new MessageChannel();
	  channel.port1.onmessage = flush;
	  return function () {
	    return channel.port2.postMessage(0);
	  };
	}
	
	function useSetTimeout() {
	  // Store setTimeout reference so es6-promise will be unaffected by
	  // other code modifying setTimeout (like sinon.useFakeTimers())
	  var globalSetTimeout = setTimeout;
	  return function () {
	    return globalSetTimeout(flush, 1);
	  };
	}
	
	var queue = new Array(1000);
	function flush() {
	  for (var i = 0; i < len; i += 2) {
	    var callback = queue[i];
	    var arg = queue[i + 1];
	
	    callback(arg);
	
	    queue[i] = undefined;
	    queue[i + 1] = undefined;
	  }
	
	  len = 0;
	}
	
	function attemptVertx() {
	  try {
	    var r = require;
	    var vertx = __webpack_require__(9);
	    vertxNext = vertx.runOnLoop || vertx.runOnContext;
	    return useVertxTimer();
	  } catch (e) {
	    return useSetTimeout();
	  }
	}
	
	var scheduleFlush = undefined;
	// Decide what async method to use to triggering processing of queued callbacks:
	if (isNode) {
	  scheduleFlush = useNextTick();
	} else if (BrowserMutationObserver) {
	  scheduleFlush = useMutationObserver();
	} else if (isWorker) {
	  scheduleFlush = useMessageChannel();
	} else if (browserWindow === undefined && "function" === 'function') {
	  scheduleFlush = attemptVertx();
	} else {
	  scheduleFlush = useSetTimeout();
	}
	
	function then(onFulfillment, onRejection) {
	  var _arguments = arguments;
	
	  var parent = this;
	
	  var child = new this.constructor(noop);
	
	  if (child[PROMISE_ID] === undefined) {
	    makePromise(child);
	  }
	
	  var _state = parent._state;
	
	  if (_state) {
	    (function () {
	      var callback = _arguments[_state - 1];
	      asap(function () {
	        return invokeCallback(_state, child, callback, parent._result);
	      });
	    })();
	  } else {
	    subscribe(parent, child, onFulfillment, onRejection);
	  }
	
	  return child;
	}
	
	/**
	  `Promise.resolve` returns a promise that will become resolved with the
	  passed `value`. It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    resolve(1);
	  });
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.resolve(1);
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  @method resolve
	  @static
	  @param {Any} value value that the returned promise will be resolved with
	  Useful for tooling.
	  @return {Promise} a promise that will become fulfilled with the given
	  `value`
	*/
	function resolve(object) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (object && typeof object === 'object' && object.constructor === Constructor) {
	    return object;
	  }
	
	  var promise = new Constructor(noop);
	  _resolve(promise, object);
	  return promise;
	}
	
	var PROMISE_ID = Math.random().toString(36).substring(16);
	
	function noop() {}
	
	var PENDING = void 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	
	var GET_THEN_ERROR = new ErrorObject();
	
	function selfFulfillment() {
	  return new TypeError("You cannot resolve a promise with itself");
	}
	
	function cannotReturnOwn() {
	  return new TypeError('A promises callback cannot return that same promise.');
	}
	
	function getThen(promise) {
	  try {
	    return promise.then;
	  } catch (error) {
	    GET_THEN_ERROR.error = error;
	    return GET_THEN_ERROR;
	  }
	}
	
	function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	  try {
	    then.call(value, fulfillmentHandler, rejectionHandler);
	  } catch (e) {
	    return e;
	  }
	}
	
	function handleForeignThenable(promise, thenable, then) {
	  asap(function (promise) {
	    var sealed = false;
	    var error = tryThen(then, thenable, function (value) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	      if (thenable !== value) {
	        _resolve(promise, value);
	      } else {
	        fulfill(promise, value);
	      }
	    }, function (reason) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	
	      _reject(promise, reason);
	    }, 'Settle: ' + (promise._label || ' unknown promise'));
	
	    if (!sealed && error) {
	      sealed = true;
	      _reject(promise, error);
	    }
	  }, promise);
	}
	
	function handleOwnThenable(promise, thenable) {
	  if (thenable._state === FULFILLED) {
	    fulfill(promise, thenable._result);
	  } else if (thenable._state === REJECTED) {
	    _reject(promise, thenable._result);
	  } else {
	    subscribe(thenable, undefined, function (value) {
	      return _resolve(promise, value);
	    }, function (reason) {
	      return _reject(promise, reason);
	    });
	  }
	}
	
	function handleMaybeThenable(promise, maybeThenable, then$$) {
	  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
	    handleOwnThenable(promise, maybeThenable);
	  } else {
	    if (then$$ === GET_THEN_ERROR) {
	      _reject(promise, GET_THEN_ERROR.error);
	      GET_THEN_ERROR.error = null;
	    } else if (then$$ === undefined) {
	      fulfill(promise, maybeThenable);
	    } else if (isFunction(then$$)) {
	      handleForeignThenable(promise, maybeThenable, then$$);
	    } else {
	      fulfill(promise, maybeThenable);
	    }
	  }
	}
	
	function _resolve(promise, value) {
	  if (promise === value) {
	    _reject(promise, selfFulfillment());
	  } else if (objectOrFunction(value)) {
	    handleMaybeThenable(promise, value, getThen(value));
	  } else {
	    fulfill(promise, value);
	  }
	}
	
	function publishRejection(promise) {
	  if (promise._onerror) {
	    promise._onerror(promise._result);
	  }
	
	  publish(promise);
	}
	
	function fulfill(promise, value) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	
	  promise._result = value;
	  promise._state = FULFILLED;
	
	  if (promise._subscribers.length !== 0) {
	    asap(publish, promise);
	  }
	}
	
	function _reject(promise, reason) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	  promise._state = REJECTED;
	  promise._result = reason;
	
	  asap(publishRejection, promise);
	}
	
	function subscribe(parent, child, onFulfillment, onRejection) {
	  var _subscribers = parent._subscribers;
	  var length = _subscribers.length;
	
	  parent._onerror = null;
	
	  _subscribers[length] = child;
	  _subscribers[length + FULFILLED] = onFulfillment;
	  _subscribers[length + REJECTED] = onRejection;
	
	  if (length === 0 && parent._state) {
	    asap(publish, parent);
	  }
	}
	
	function publish(promise) {
	  var subscribers = promise._subscribers;
	  var settled = promise._state;
	
	  if (subscribers.length === 0) {
	    return;
	  }
	
	  var child = undefined,
	      callback = undefined,
	      detail = promise._result;
	
	  for (var i = 0; i < subscribers.length; i += 3) {
	    child = subscribers[i];
	    callback = subscribers[i + settled];
	
	    if (child) {
	      invokeCallback(settled, child, callback, detail);
	    } else {
	      callback(detail);
	    }
	  }
	
	  promise._subscribers.length = 0;
	}
	
	function ErrorObject() {
	  this.error = null;
	}
	
	var TRY_CATCH_ERROR = new ErrorObject();
	
	function tryCatch(callback, detail) {
	  try {
	    return callback(detail);
	  } catch (e) {
	    TRY_CATCH_ERROR.error = e;
	    return TRY_CATCH_ERROR;
	  }
	}
	
	function invokeCallback(settled, promise, callback, detail) {
	  var hasCallback = isFunction(callback),
	      value = undefined,
	      error = undefined,
	      succeeded = undefined,
	      failed = undefined;
	
	  if (hasCallback) {
	    value = tryCatch(callback, detail);
	
	    if (value === TRY_CATCH_ERROR) {
	      failed = true;
	      error = value.error;
	      value.error = null;
	    } else {
	      succeeded = true;
	    }
	
	    if (promise === value) {
	      _reject(promise, cannotReturnOwn());
	      return;
	    }
	  } else {
	    value = detail;
	    succeeded = true;
	  }
	
	  if (promise._state !== PENDING) {
	    // noop
	  } else if (hasCallback && succeeded) {
	      _resolve(promise, value);
	    } else if (failed) {
	      _reject(promise, error);
	    } else if (settled === FULFILLED) {
	      fulfill(promise, value);
	    } else if (settled === REJECTED) {
	      _reject(promise, value);
	    }
	}
	
	function initializePromise(promise, resolver) {
	  try {
	    resolver(function resolvePromise(value) {
	      _resolve(promise, value);
	    }, function rejectPromise(reason) {
	      _reject(promise, reason);
	    });
	  } catch (e) {
	    _reject(promise, e);
	  }
	}
	
	var id = 0;
	function nextId() {
	  return id++;
	}
	
	function makePromise(promise) {
	  promise[PROMISE_ID] = id++;
	  promise._state = undefined;
	  promise._result = undefined;
	  promise._subscribers = [];
	}
	
	function Enumerator(Constructor, input) {
	  this._instanceConstructor = Constructor;
	  this.promise = new Constructor(noop);
	
	  if (!this.promise[PROMISE_ID]) {
	    makePromise(this.promise);
	  }
	
	  if (isArray(input)) {
	    this._input = input;
	    this.length = input.length;
	    this._remaining = input.length;
	
	    this._result = new Array(this.length);
	
	    if (this.length === 0) {
	      fulfill(this.promise, this._result);
	    } else {
	      this.length = this.length || 0;
	      this._enumerate();
	      if (this._remaining === 0) {
	        fulfill(this.promise, this._result);
	      }
	    }
	  } else {
	    _reject(this.promise, validationError());
	  }
	}
	
	function validationError() {
	  return new Error('Array Methods must be provided an Array');
	};
	
	Enumerator.prototype._enumerate = function () {
	  var length = this.length;
	  var _input = this._input;
	
	  for (var i = 0; this._state === PENDING && i < length; i++) {
	    this._eachEntry(_input[i], i);
	  }
	};
	
	Enumerator.prototype._eachEntry = function (entry, i) {
	  var c = this._instanceConstructor;
	  var resolve$$ = c.resolve;
	
	  if (resolve$$ === resolve) {
	    var _then = getThen(entry);
	
	    if (_then === then && entry._state !== PENDING) {
	      this._settledAt(entry._state, i, entry._result);
	    } else if (typeof _then !== 'function') {
	      this._remaining--;
	      this._result[i] = entry;
	    } else if (c === Promise) {
	      var promise = new c(noop);
	      handleMaybeThenable(promise, entry, _then);
	      this._willSettleAt(promise, i);
	    } else {
	      this._willSettleAt(new c(function (resolve$$) {
	        return resolve$$(entry);
	      }), i);
	    }
	  } else {
	    this._willSettleAt(resolve$$(entry), i);
	  }
	};
	
	Enumerator.prototype._settledAt = function (state, i, value) {
	  var promise = this.promise;
	
	  if (promise._state === PENDING) {
	    this._remaining--;
	
	    if (state === REJECTED) {
	      _reject(promise, value);
	    } else {
	      this._result[i] = value;
	    }
	  }
	
	  if (this._remaining === 0) {
	    fulfill(promise, this._result);
	  }
	};
	
	Enumerator.prototype._willSettleAt = function (promise, i) {
	  var enumerator = this;
	
	  subscribe(promise, undefined, function (value) {
	    return enumerator._settledAt(FULFILLED, i, value);
	  }, function (reason) {
	    return enumerator._settledAt(REJECTED, i, reason);
	  });
	};
	
	/**
	  `Promise.all` accepts an array of promises, and returns a new promise which
	  is fulfilled with an array of fulfillment values for the passed promises, or
	  rejected with the reason of the first passed promise to be rejected. It casts all
	  elements of the passed iterable to promises as it runs this algorithm.
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = resolve(2);
	  let promise3 = resolve(3);
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // The array here would be [ 1, 2, 3 ];
	  });
	  ```
	
	  If any of the `promises` given to `all` are rejected, the first promise
	  that is rejected will be given as an argument to the returned promises's
	  rejection handler. For example:
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = reject(new Error("2"));
	  let promise3 = reject(new Error("3"));
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // Code here never runs because there are rejected promises!
	  }, function(error) {
	    // error.message === "2"
	  });
	  ```
	
	  @method all
	  @static
	  @param {Array} entries array of promises
	  @param {String} label optional string for labeling the promise.
	  Useful for tooling.
	  @return {Promise} promise that is fulfilled when all `promises` have been
	  fulfilled, or rejected if any of them become rejected.
	  @static
	*/
	function all(entries) {
	  return new Enumerator(this, entries).promise;
	}
	
	/**
	  `Promise.race` returns a new promise which is settled in the same way as the
	  first passed promise to settle.
	
	  Example:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 2');
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // result === 'promise 2' because it was resolved before promise1
	    // was resolved.
	  });
	  ```
	
	  `Promise.race` is deterministic in that only the state of the first
	  settled promise matters. For example, even if other promises given to the
	  `promises` array argument are resolved, but the first settled promise has
	  become rejected before the other promises became fulfilled, the returned
	  promise will become rejected:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      reject(new Error('promise 2'));
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // Code here never runs
	  }, function(reason){
	    // reason.message === 'promise 2' because promise 2 became rejected before
	    // promise 1 became fulfilled
	  });
	  ```
	
	  An example real-world use case is implementing timeouts:
	
	  ```javascript
	  Promise.race([ajax('foo.json'), timeout(5000)])
	  ```
	
	  @method race
	  @static
	  @param {Array} promises array of promises to observe
	  Useful for tooling.
	  @return {Promise} a promise which settles in the same way as the first passed
	  promise to settle.
	*/
	function race(entries) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (!isArray(entries)) {
	    return new Constructor(function (_, reject) {
	      return reject(new TypeError('You must pass an array to race.'));
	    });
	  } else {
	    return new Constructor(function (resolve, reject) {
	      var length = entries.length;
	      for (var i = 0; i < length; i++) {
	        Constructor.resolve(entries[i]).then(resolve, reject);
	      }
	    });
	  }
	}
	
	/**
	  `Promise.reject` returns a promise rejected with the passed `reason`.
	  It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    reject(new Error('WHOOPS'));
	  });
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.reject(new Error('WHOOPS'));
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  @method reject
	  @static
	  @param {Any} reason value that the returned promise will be rejected with.
	  Useful for tooling.
	  @return {Promise} a promise rejected with the given `reason`.
	*/
	function reject(reason) {
	  /*jshint validthis:true */
	  var Constructor = this;
	  var promise = new Constructor(noop);
	  _reject(promise, reason);
	  return promise;
	}
	
	function needsResolver() {
	  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	}
	
	function needsNew() {
	  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	}
	
	/**
	  Promise objects represent the eventual result of an asynchronous operation. The
	  primary way of interacting with a promise is through its `then` method, which
	  registers callbacks to receive either a promise's eventual value or the reason
	  why the promise cannot be fulfilled.
	
	  Terminology
	  -----------
	
	  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	  - `thenable` is an object or function that defines a `then` method.
	  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	  - `exception` is a value that is thrown using the throw statement.
	  - `reason` is a value that indicates why a promise was rejected.
	  - `settled` the final resting state of a promise, fulfilled or rejected.
	
	  A promise can be in one of three states: pending, fulfilled, or rejected.
	
	  Promises that are fulfilled have a fulfillment value and are in the fulfilled
	  state.  Promises that are rejected have a rejection reason and are in the
	  rejected state.  A fulfillment value is never a thenable.
	
	  Promises can also be said to *resolve* a value.  If this value is also a
	  promise, then the original promise's settled state will match the value's
	  settled state.  So a promise that *resolves* a promise that rejects will
	  itself reject, and a promise that *resolves* a promise that fulfills will
	  itself fulfill.
	
	
	  Basic Usage:
	  ------------
	
	  ```js
	  let promise = new Promise(function(resolve, reject) {
	    // on success
	    resolve(value);
	
	    // on failure
	    reject(reason);
	  });
	
	  promise.then(function(value) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Advanced Usage:
	  ---------------
	
	  Promises shine when abstracting away asynchronous interactions such as
	  `XMLHttpRequest`s.
	
	  ```js
	  function getJSON(url) {
	    return new Promise(function(resolve, reject){
	      let xhr = new XMLHttpRequest();
	
	      xhr.open('GET', url);
	      xhr.onreadystatechange = handler;
	      xhr.responseType = 'json';
	      xhr.setRequestHeader('Accept', 'application/json');
	      xhr.send();
	
	      function handler() {
	        if (this.readyState === this.DONE) {
	          if (this.status === 200) {
	            resolve(this.response);
	          } else {
	            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	          }
	        }
	      };
	    });
	  }
	
	  getJSON('/posts.json').then(function(json) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Unlike callbacks, promises are great composable primitives.
	
	  ```js
	  Promise.all([
	    getJSON('/posts'),
	    getJSON('/comments')
	  ]).then(function(values){
	    values[0] // => postsJSON
	    values[1] // => commentsJSON
	
	    return values;
	  });
	  ```
	
	  @class Promise
	  @param {function} resolver
	  Useful for tooling.
	  @constructor
	*/
	function Promise(resolver) {
	  this[PROMISE_ID] = nextId();
	  this._result = this._state = undefined;
	  this._subscribers = [];
	
	  if (noop !== resolver) {
	    typeof resolver !== 'function' && needsResolver();
	    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
	  }
	}
	
	Promise.all = all;
	Promise.race = race;
	Promise.resolve = resolve;
	Promise.reject = reject;
	Promise._setScheduler = setScheduler;
	Promise._setAsap = setAsap;
	Promise._asap = asap;
	
	Promise.prototype = {
	  constructor: Promise,
	
	  /**
	    The primary way of interacting with a promise is through its `then` method,
	    which registers callbacks to receive either a promise's eventual value or the
	    reason why the promise cannot be fulfilled.
	  
	    ```js
	    findUser().then(function(user){
	      // user is available
	    }, function(reason){
	      // user is unavailable, and you are given the reason why
	    });
	    ```
	  
	    Chaining
	    --------
	  
	    The return value of `then` is itself a promise.  This second, 'downstream'
	    promise is resolved with the return value of the first promise's fulfillment
	    or rejection handler, or rejected if the handler throws an exception.
	  
	    ```js
	    findUser().then(function (user) {
	      return user.name;
	    }, function (reason) {
	      return 'default name';
	    }).then(function (userName) {
	      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	      // will be `'default name'`
	    });
	  
	    findUser().then(function (user) {
	      throw new Error('Found user, but still unhappy');
	    }, function (reason) {
	      throw new Error('`findUser` rejected and we're unhappy');
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	    });
	    ```
	    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	  
	    ```js
	    findUser().then(function (user) {
	      throw new PedagogicalException('Upstream error');
	    }).then(function (value) {
	      // never reached
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // The `PedgagocialException` is propagated all the way down to here
	    });
	    ```
	  
	    Assimilation
	    ------------
	  
	    Sometimes the value you want to propagate to a downstream promise can only be
	    retrieved asynchronously. This can be achieved by returning a promise in the
	    fulfillment or rejection handler. The downstream promise will then be pending
	    until the returned promise is settled. This is called *assimilation*.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // The user's comments are now available
	    });
	    ```
	  
	    If the assimliated promise rejects, then the downstream promise will also reject.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // If `findCommentsByAuthor` fulfills, we'll have the value here
	    }, function (reason) {
	      // If `findCommentsByAuthor` rejects, we'll have the reason here
	    });
	    ```
	  
	    Simple Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let result;
	  
	    try {
	      result = findResult();
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	    findResult(function(result, err){
	      if (err) {
	        // failure
	      } else {
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findResult().then(function(result){
	      // success
	    }, function(reason){
	      // failure
	    });
	    ```
	  
	    Advanced Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let author, books;
	  
	    try {
	      author = findAuthor();
	      books  = findBooksByAuthor(author);
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	  
	    function foundBooks(books) {
	  
	    }
	  
	    function failure(reason) {
	  
	    }
	  
	    findAuthor(function(author, err){
	      if (err) {
	        failure(err);
	        // failure
	      } else {
	        try {
	          findBoooksByAuthor(author, function(books, err) {
	            if (err) {
	              failure(err);
	            } else {
	              try {
	                foundBooks(books);
	              } catch(reason) {
	                failure(reason);
	              }
	            }
	          });
	        } catch(error) {
	          failure(err);
	        }
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findAuthor().
	      then(findBooksByAuthor).
	      then(function(books){
	        // found books
	    }).catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method then
	    @param {Function} onFulfilled
	    @param {Function} onRejected
	    Useful for tooling.
	    @return {Promise}
	  */
	  then: then,
	
	  /**
	    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	    as the catch block of a try/catch statement.
	  
	    ```js
	    function findAuthor(){
	      throw new Error('couldn't find that author');
	    }
	  
	    // synchronous
	    try {
	      findAuthor();
	    } catch(reason) {
	      // something went wrong
	    }
	  
	    // async with promises
	    findAuthor().catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method catch
	    @param {Function} onRejection
	    Useful for tooling.
	    @return {Promise}
	  */
	  'catch': function _catch(onRejection) {
	    return this.then(null, onRejection);
	  }
	};
	
	function polyfill() {
	    var local = undefined;
	
	    if (typeof global !== 'undefined') {
	        local = global;
	    } else if (typeof self !== 'undefined') {
	        local = self;
	    } else {
	        try {
	            local = Function('return this')();
	        } catch (e) {
	            throw new Error('polyfill failed because global object is unavailable in this environment');
	        }
	    }
	
	    var P = local.Promise;
	
	    if (P) {
	        var promiseToString = null;
	        try {
	            promiseToString = Object.prototype.toString.call(P.resolve());
	        } catch (e) {
	            // silently ignored
	        }
	
	        if (promiseToString === '[object Promise]' && !P.cast) {
	            return;
	        }
	    }
	
	    local.Promise = Promise;
	}
	
	// Strange compat..
	Promise.polyfill = polyfill;
	Promise.Promise = Promise;
	
	return Promise;
	
	})));
	//# sourceMappingURL=es6-promise.map
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7), __webpack_require__(8)))
	
	/***/ }),
	/* 5 */
	/***/ (function(module, exports) {
	
	// removed by extract-text-webpack-plugin
	
	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global VERSION */
	
	__webpack_require__(5);
	
	var _es6Promise = __webpack_require__(4);
	
	var _es6Promise2 = _interopRequireDefault(_es6Promise);
	
	var _utils = __webpack_require__(0);
	
	var Utils = _interopRequireWildcard(_utils);
	
	var _api = __webpack_require__(1);
	
	var API = _interopRequireWildcard(_api);
	
	var _button = __webpack_require__(2);
	
	var _push = __webpack_require__(3);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Noty = function () {
	  /**
	   * @param {object} options
	   * @return {Noty}
	   */
	  function Noty() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    _classCallCheck(this, Noty);
	
	    this.options = Utils.deepExtend({}, API.Defaults, options);
	    this.id = this.options.id || Utils.generateID('bar');
	    this.closeTimer = -1;
	    this.barDom = null;
	    this.layoutDom = null;
	    this.progressDom = null;
	    this.showing = false;
	    this.shown = false;
	    this.closed = false;
	    this.closing = false;
	    this.killable = this.options.timeout || this.options.closeWith.length > 0;
	    this.hasSound = this.options.sounds.sources.length > 0;
	    this.soundPlayed = false;
	    this.listeners = {
	      beforeShow: [],
	      onShow: [],
	      afterShow: [],
	      onClose: [],
	      afterClose: [],
	      onHover: [],
	      onTemplate: []
	    };
	    this.promises = {
	      show: null,
	      close: null
	    };
	    this.on('beforeShow', this.options.callbacks.beforeShow);
	    this.on('onShow', this.options.callbacks.onShow);
	    this.on('afterShow', this.options.callbacks.afterShow);
	    this.on('onClose', this.options.callbacks.onClose);
	    this.on('afterClose', this.options.callbacks.afterClose);
	    this.on('onHover', this.options.callbacks.onHover);
	    this.on('onTemplate', this.options.callbacks.onTemplate);
	
	    return this;
	  }
	
	  /**
	   * @param {string} eventName
	   * @param {function} cb
	   * @return {Noty}
	   */
	
	
	  _createClass(Noty, [{
	    key: 'on',
	    value: function on(eventName) {
	      var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
	
	      if (typeof cb === 'function' && this.listeners.hasOwnProperty(eventName)) {
	        this.listeners[eventName].push(cb);
	      }
	
	      return this;
	    }
	
	    /**
	     * @return {Noty}
	     */
	
	  }, {
	    key: 'show',
	    value: function show() {
	      var _this = this;
	
	      if (this.options.killer === true && !API.PageHidden) {
	        Noty.closeAll();
	      } else if (typeof this.options.killer === 'string' && !API.PageHidden) {
	        Noty.closeAll(this.options.killer);
	      } else {
	        var queueCounts = API.getQueueCounts(this.options.queue);
	
	        if (queueCounts.current >= queueCounts.maxVisible || API.PageHidden) {
	          API.addToQueue(this);
	
	          if (API.PageHidden && this.hasSound && Utils.inArray('docHidden', this.options.sounds.conditions)) {
	            Utils.createAudioElements(this);
	          }
	
	          if (API.PageHidden && Utils.inArray('docHidden', this.options.titleCount.conditions)) {
	            API.docTitle.increment();
	          }
	
	          return this;
	        }
	      }
	
	      API.Store[this.id] = this;
	
	      API.fire(this, 'beforeShow');
	
	      this.showing = true;
	
	      if (this.closing) {
	        this.showing = false;
	        return this;
	      }
	
	      API.build(this);
	      API.handleModal(this);
	
	      if (this.options.force) {
	        this.layoutDom.insertBefore(this.barDom, this.layoutDom.firstChild);
	      } else {
	        this.layoutDom.appendChild(this.barDom);
	      }
	
	      if (this.hasSound && !this.soundPlayed && Utils.inArray('docVisible', this.options.sounds.conditions)) {
	        Utils.createAudioElements(this);
	      }
	
	      if (Utils.inArray('docVisible', this.options.titleCount.conditions)) {
	        API.docTitle.increment();
	      }
	
	      this.shown = true;
	      this.closed = false;
	
	      // bind button events if any
	      if (API.hasButtons(this)) {
	        Object.keys(this.options.buttons).forEach(function (key) {
	          var btn = _this.barDom.querySelector('#' + _this.options.buttons[key].id);
	          Utils.addListener(btn, 'click', function (e) {
	            Utils.stopPropagation(e);
	            _this.options.buttons[key].cb();
	          });
	        });
	      }
	
	      this.progressDom = this.barDom.querySelector('.noty_progressbar');
	
	      if (Utils.inArray('click', this.options.closeWith)) {
	        Utils.addClass(this.barDom, 'noty_close_with_click');
	        Utils.addListener(this.barDom, 'click', function (e) {
	          Utils.stopPropagation(e);
	          _this.close();
	        }, false);
	      }
	
	      Utils.addListener(this.barDom, 'mouseenter', function () {
	        API.fire(_this, 'onHover');
	      }, false);
	
	      if (this.options.timeout) Utils.addClass(this.barDom, 'noty_has_timeout');
	
	      if (Utils.inArray('button', this.options.closeWith)) {
	        Utils.addClass(this.barDom, 'noty_close_with_button');
	
	        var closeButton = document.createElement('div');
	        Utils.addClass(closeButton, 'noty_close_button');
	        closeButton.innerHTML = '×';
	        this.barDom.appendChild(closeButton);
	
	        Utils.addListener(closeButton, 'click', function (e) {
	          Utils.stopPropagation(e);
	          _this.close();
	        }, false);
	      }
	
	      API.fire(this, 'onShow');
	
	      if (this.options.animation.open === null) {
	        this.promises.show = new _es6Promise2.default(function (resolve) {
	          resolve();
	        });
	      } else if (typeof this.options.animation.open === 'function') {
	        this.promises.show = new _es6Promise2.default(this.options.animation.open.bind(this));
	      } else {
	        Utils.addClass(this.barDom, this.options.animation.open);
	        this.promises.show = new _es6Promise2.default(function (resolve) {
	          Utils.addListener(_this.barDom, Utils.animationEndEvents, function () {
	            Utils.removeClass(_this.barDom, _this.options.animation.open);
	            resolve();
	          });
	        });
	      }
	
	      this.promises.show.then(function () {
	        var _t = _this;
	        setTimeout(function () {
	          API.openFlow(_t);
	        }, 100);
	      });
	
	      return this;
	    }
	
	    /**
	     * @return {Noty}
	     */
	
	  }, {
	    key: 'stop',
	    value: function stop() {
	      API.dequeueClose(this);
	      return this;
	    }
	
	    /**
	     * @return {Noty}
	     */
	
	  }, {
	    key: 'resume',
	    value: function resume() {
	      API.queueClose(this);
	      return this;
	    }
	
	    /**
	     * @param {int|boolean} ms
	     * @return {Noty}
	     */
	
	  }, {
	    key: 'setTimeout',
	    value: function (_setTimeout) {
	      function setTimeout(_x) {
	        return _setTimeout.apply(this, arguments);
	      }
	
	      setTimeout.toString = function () {
	        return _setTimeout.toString();
	      };
	
	      return setTimeout;
	    }(function (ms) {
	      this.stop();
	      this.options.timeout = ms;
	
	      if (this.barDom) {
	        if (this.options.timeout) {
	          Utils.addClass(this.barDom, 'noty_has_timeout');
	        } else {
	          Utils.removeClass(this.barDom, 'noty_has_timeout');
	        }
	
	        var _t = this;
	        setTimeout(function () {
	          // ugly fix for progressbar display bug
	          _t.resume();
	        }, 100);
	      }
	
	      return this;
	    })
	
	    /**
	     * @param {string} html
	     * @param {boolean} optionsOverride
	     * @return {Noty}
	     */
	
	  }, {
	    key: 'setText',
	    value: function setText(html) {
	      var optionsOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      if (this.barDom) {
	        this.barDom.querySelector('.noty_body').innerHTML = html;
	      }
	
	      if (optionsOverride) this.options.text = html;
	
	      return this;
	    }
	
	    /**
	     * @param {string} type
	     * @param {boolean} optionsOverride
	     * @return {Noty}
	     */
	
	  }, {
	    key: 'setType',
	    value: function setType(type) {
	      var _this2 = this;
	
	      var optionsOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      if (this.barDom) {
	        var classList = Utils.classList(this.barDom).split(' ');
	
	        classList.forEach(function (c) {
	          if (c.substring(0, 11) === 'noty_type__') {
	            Utils.removeClass(_this2.barDom, c);
	          }
	        });
	
	        Utils.addClass(this.barDom, 'noty_type__' + type);
	      }
	
	      if (optionsOverride) this.options.type = type;
	
	      return this;
	    }
	
	    /**
	     * @param {string} theme
	     * @param {boolean} optionsOverride
	     * @return {Noty}
	     */
	
	  }, {
	    key: 'setTheme',
	    value: function setTheme(theme) {
	      var _this3 = this;
	
	      var optionsOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      if (this.barDom) {
	        var classList = Utils.classList(this.barDom).split(' ');
	
	        classList.forEach(function (c) {
	          if (c.substring(0, 12) === 'noty_theme__') {
	            Utils.removeClass(_this3.barDom, c);
	          }
	        });
	
	        Utils.addClass(this.barDom, 'noty_theme__' + theme);
	      }
	
	      if (optionsOverride) this.options.theme = theme;
	
	      return this;
	    }
	
	    /**
	     * @return {Noty}
	     */
	
	  }, {
	    key: 'close',
	    value: function close() {
	      var _this4 = this;
	
	      if (this.closed) return this;
	
	      if (!this.shown) {
	        // it's in the queue
	        API.removeFromQueue(this);
	        return this;
	      }
	
	      API.fire(this, 'onClose');
	
	      this.closing = true;
	
	      if (this.options.animation.close === null) {
	        this.promises.close = new _es6Promise2.default(function (resolve) {
	          resolve();
	        });
	      } else if (typeof this.options.animation.close === 'function') {
	        this.promises.close = new _es6Promise2.default(this.options.animation.close.bind(this));
	      } else {
	        Utils.addClass(this.barDom, this.options.animation.close);
	        this.promises.close = new _es6Promise2.default(function (resolve) {
	          Utils.addListener(_this4.barDom, Utils.animationEndEvents, function () {
	            if (_this4.options.force) {
	              Utils.remove(_this4.barDom);
	            } else {
	              API.ghostFix(_this4);
	            }
	            resolve();
	          });
	        });
	      }
	
	      this.promises.close.then(function () {
	        API.closeFlow(_this4);
	        API.handleModalClose(_this4);
	      });
	
	      this.closed = true;
	
	      return this;
	    }
	
	    // API functions
	
	    /**
	     * @param {boolean|string} queueName
	     * @return {Noty}
	     */
	
	  }], [{
	    key: 'closeAll',
	    value: function closeAll() {
	      var queueName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      Object.keys(API.Store).forEach(function (id) {
	        if (queueName) {
	          if (API.Store[id].options.queue === queueName && API.Store[id].killable) {
	            API.Store[id].close();
	          }
	        } else if (API.Store[id].killable) {
	          API.Store[id].close();
	        }
	      });
	      return this;
	    }
	
	    /**
	     * @param {Object} obj
	     * @return {Noty}
	     */
	
	  }, {
	    key: 'overrideDefaults',
	    value: function overrideDefaults(obj) {
	      API.Defaults = Utils.deepExtend({}, API.Defaults, obj);
	      return this;
	    }
	
	    /**
	     * @param {int} amount
	     * @param {string} queueName
	     * @return {Noty}
	     */
	
	  }, {
	    key: 'setMaxVisible',
	    value: function setMaxVisible() {
	      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : API.DefaultMaxVisible;
	      var queueName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'global';
	
	      if (!API.Queues.hasOwnProperty(queueName)) {
	        API.Queues[queueName] = { maxVisible: amount, queue: [] };
	      }
	
	      API.Queues[queueName].maxVisible = amount;
	      return this;
	    }
	
	    /**
	     * @param {string} innerHtml
	     * @param {String} classes
	     * @param {Function} cb
	     * @param {Object} attributes
	     * @return {NotyButton}
	     */
	
	  }, {
	    key: 'button',
	    value: function button(innerHtml) {
	      var classes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	      var cb = arguments[2];
	      var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	
	      return new _button.NotyButton(innerHtml, classes, cb, attributes);
	    }
	
	    /**
	     * @return {string}
	     */
	
	  }, {
	    key: 'version',
	    value: function version() {
	      return "3.1.0";
	    }
	
	    /**
	     * @param {String} workerPath
	     * @return {Push}
	     */
	
	  }, {
	    key: 'Push',
	    value: function Push(workerPath) {
	      return new _push.Push(workerPath);
	    }
	  }]);
	
	  return Noty;
	}();
	
	// Document visibility change controller
	
	
	exports.default = Noty;
	Utils.visibilityChangeFlow();
	module.exports = exports['default'];
	
	/***/ }),
	/* 7 */
	/***/ (function(module, exports) {
	
	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };
	
	
	/***/ }),
	/* 8 */
	/***/ (function(module, exports) {
	
	var g;
	
	// This works in non-strict mode
	g = (function() {
		return this;
	})();
	
	try {
		// This works if eval is allowed (see CSP)
		g = g || Function("return this")() || (1,eval)("this");
	} catch(e) {
		// This works if the window reference is available
		if(typeof window === "object")
			g = window;
	}
	
	// g can still be undefined, but nothing to do about it...
	// We return undefined, instead of nothing here, so it's
	// easier to handle this case. if(!global) { ...}
	
	module.exports = g;
	
	
	/***/ }),
	/* 9 */
	/***/ (function(module, exports) {
	
	/* (ignored) */
	
	/***/ })
	/******/ ]);
	});
	//# sourceMappingURL=noty.js.map

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.validateForm = validateForm;
	exports.forEachDom = forEachDom;
	exports.send = send;
	exports.noty = noty;
	
	__webpack_require__(15);
	
	var _noty = __webpack_require__(13);
	
	var _noty2 = _interopRequireDefault(_noty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function validateForm(form) {
		var formFields = form.querySelectorAll('.form__field');
	
		Array.prototype.forEach.call(formFields, function (field) {
			var input = field.querySelector('.form__input') || field.querySelector('.form__textarea') || field.querySelector('.form__select');
	
			if (!input) return false;
	
			if (input.required && !input.value) {
				field.classList.add('form__field_state_error');
				field.classList.add('form__field_error-type_required');
				console.log(input.value);
			}
		});
	}
	
	function forEachDom(els, fn) {
		return Array.prototype.forEach.call(els, fn);
	}
	
	function send(action, formData, successHandler, errorHandler) {
		var xhr = new XMLHttpRequest();
	
		//-- Обработать результат отправки
		xhr.onload = xhr.onerror = function () {
			//--- Показать сообщение об успехе / ошибке
			if (this.status == 200) {
				successHandler(this);
			} else {
				errorHandler(this);
			}
		};
	
		xhr.open("POST", action, true);
		xhr.send(formData);
	}
	
	function noty(type, msg) {
		new _noty2.default({
			type: type,
			text: msg,
			timeout: 5000,
			progressBar: true,
			closeWith: ['click', 'button']
		}).show();
	}

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	(function(self) {
	  'use strict';
	
	  if (self.fetch) {
	    return
	  }
	
	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob()
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }
	
	  if (support.arrayBuffer) {
	    var viewClasses = [
	      '[object Int8Array]',
	      '[object Uint8Array]',
	      '[object Uint8ClampedArray]',
	      '[object Int16Array]',
	      '[object Uint16Array]',
	      '[object Int32Array]',
	      '[object Uint32Array]',
	      '[object Float32Array]',
	      '[object Float64Array]'
	    ]
	
	    var isDataView = function(obj) {
	      return obj && DataView.prototype.isPrototypeOf(obj)
	    }
	
	    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
	      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	    }
	  }
	
	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }
	
	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }
	
	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift()
	        return {done: value === undefined, value: value}
	      }
	    }
	
	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      }
	    }
	
	    return iterator
	  }
	
	  function Headers(headers) {
	    this.map = {}
	
	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)
	    } else if (Array.isArray(headers)) {
	      headers.forEach(function(header) {
	        this.append(header[0], header[1])
	      }, this)
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }
	
	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var oldValue = this.map[name]
	    this.map[name] = oldValue ? oldValue+','+value : value
	  }
	
	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }
	
	  Headers.prototype.get = function(name) {
	    name = normalizeName(name)
	    return this.has(name) ? this.map[name] : null
	  }
	
	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }
	
	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = normalizeValue(value)
	  }
	
	  Headers.prototype.forEach = function(callback, thisArg) {
	    for (var name in this.map) {
	      if (this.map.hasOwnProperty(name)) {
	        callback.call(thisArg, this.map[name], name, this)
	      }
	    }
	  }
	
	  Headers.prototype.keys = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push(name) })
	    return iteratorFor(items)
	  }
	
	  Headers.prototype.values = function() {
	    var items = []
	    this.forEach(function(value) { items.push(value) })
	    return iteratorFor(items)
	  }
	
	  Headers.prototype.entries = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push([name, value]) })
	    return iteratorFor(items)
	  }
	
	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
	  }
	
	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }
	
	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }
	
	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsArrayBuffer(blob)
	    return promise
	  }
	
	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsText(blob)
	    return promise
	  }
	
	  function readArrayBufferAsText(buf) {
	    var view = new Uint8Array(buf)
	    var chars = new Array(view.length)
	
	    for (var i = 0; i < view.length; i++) {
	      chars[i] = String.fromCharCode(view[i])
	    }
	    return chars.join('')
	  }
	
	  function bufferClone(buf) {
	    if (buf.slice) {
	      return buf.slice(0)
	    } else {
	      var view = new Uint8Array(buf.byteLength)
	      view.set(new Uint8Array(buf))
	      return view.buffer
	    }
	  }
	
	  function Body() {
	    this.bodyUsed = false
	
	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (!body) {
	        this._bodyText = ''
	      } else if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString()
	      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	        this._bodyArrayBuffer = bufferClone(body.buffer)
	        // IE 10-11 can't handle a DataView body.
	        this._bodyInit = new Blob([this._bodyArrayBuffer])
	      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	        this._bodyArrayBuffer = bufferClone(body)
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }
	
	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
	        }
	      }
	    }
	
	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }
	
	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyArrayBuffer) {
	          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }
	
	      this.arrayBuffer = function() {
	        if (this._bodyArrayBuffer) {
	          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
	        } else {
	          return this.blob().then(readBlobAsArrayBuffer)
	        }
	      }
	    }
	
	    this.text = function() {
	      var rejected = consumed(this)
	      if (rejected) {
	        return rejected
	      }
	
	      if (this._bodyBlob) {
	        return readBlobAsText(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as text')
	      } else {
	        return Promise.resolve(this._bodyText)
	      }
	    }
	
	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }
	
	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }
	
	    return this
	  }
	
	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']
	
	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }
	
	  function Request(input, options) {
	    options = options || {}
	    var body = options.body
	
	    if (input instanceof Request) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body && input._bodyInit != null) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = String(input)
	    }
	
	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null
	
	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }
	
	  Request.prototype.clone = function() {
	    return new Request(this, { body: this._bodyInit })
	  }
	
	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }
	
	  function parseHeaders(rawHeaders) {
	    var headers = new Headers()
	    rawHeaders.split(/\r?\n/).forEach(function(line) {
	      var parts = line.split(':')
	      var key = parts.shift().trim()
	      if (key) {
	        var value = parts.join(':').trim()
	        headers.append(key, value)
	      }
	    })
	    return headers
	  }
	
	  Body.call(Request.prototype)
	
	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }
	
	    this.type = 'default'
	    this.status = 'status' in options ? options.status : 200
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = 'statusText' in options ? options.statusText : 'OK'
	    this.headers = new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }
	
	  Body.call(Response.prototype)
	
	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }
	
	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }
	
	  var redirectStatuses = [301, 302, 303, 307, 308]
	
	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }
	
	    return new Response(null, {status: status, headers: {location: url}})
	  }
	
	  self.Headers = Headers
	  self.Request = Request
	  self.Response = Response
	
	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request = new Request(input, init)
	      var xhr = new XMLHttpRequest()
	
	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	        }
	        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
	        var body = 'response' in xhr ? xhr.response : xhr.responseText
	        resolve(new Response(body, options))
	      }
	
	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.open(request.method, request.url, true)
	
	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      }
	
	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }
	
	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })
	
	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		// Отображение загружаемых изображений
		var field = document.querySelector('.attach-photos__field');if (!field) return false;
		var input = field.querySelector('input');if (!input) return false;
		var photoIterator = 1;
	
		eventListener(input);
	
		function eventListener(input) {
			input.addEventListener('change', function (e) {
				insertImage(input);
				photoIterator++;
				var newInput = input.cloneNode(true);
				newInput.name = 'photos[' + photoIterator + ']';
				input.id = '';
				field.appendChild(newInput);
				eventListener(newInput);
			});
		}
	};
	
	function insertImage(input) {
		var file = input.files[0];
		if (!file) return false;
	
		// DOMNodes
		var container = document.querySelector('.attach-photos__container');
		var field = container.querySelector('.attach-photos__field');
		var itemTemplate = container.querySelector('.attach-photos__item.hidden');
	
		var item = itemTemplate.cloneNode(true);
		var item_img = item.querySelector('img');
		var item_path = item.querySelector('.attach-photos__path');
		var item_removeBtn = item.querySelector('.attach-photos__remove-btn');
	
		item.classList.remove('hidden');
		item_path.innerHTML = file.name;
		container.appendChild(item);
	
		// Обработка удаления изображения
		item_removeBtn.addEventListener('click', function (e) {
			// удалить блок с изображением
			container.removeChild(item);
			// удалить Input с файлом изображения
			input.value = null;
			input.files = null;
			field.removeChild(input);
		});
	
		var reader = new FileReader();
		reader.onload = function (e) {
			item_img.setAttribute('src', e.target.result);
		};
		reader.readAsDataURL(file);
	} //@FIX - есть недочет, если удалить все загружаемые изображения то одна все ровно отправляется

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		if (!document.getElementById('models-cards')) return false;
	
		var app = new Vue({
			el: '#models-cards',
			data: {
				showBtn: true,
				models: [],
				page: 1
			},
			methods: {
				loadModels: function loadModels(e) {
					var _this = this;
	
					++this.page;
					fetch('/get-models/' + this.page, {
						credentials: 'include',
						method: 'GET'
					}).then(function (response) {
						return response.json();
					}).then(function (json) {
						console.log('parsed json', json);
	
						_this.models = _this.models.concat(json);
						if (json.length < 9) {
							_this.showBtn = false;
						}
					}).catch(function (ex) {
						console.log('parsing failed', ex);
					});
				}
			}
		});
	};
	
	__webpack_require__(15);

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		if (!document.getElementById('models-cards-admin')) return false;
	
		Vue.use(_vTooltip2.default);
	
		var app = new Vue({
			el: '#models-cards-admin',
			data: {
				showBtn: true,
				models: [],
				page: 0,
				filter: 'not-approved',
				filters: {
					all: 'all',
					notApproved: 'not-approved'
				}
			},
			methods: {
				loadModels: function loadModels(filter) {
					var _this = this;
	
					++this.page;
	
					fetch('/models/get-by-filter/' + filter + '/' + this.page, {
						credentials: 'include',
						method: 'GET'
					}).then(function (response) {
						return response.json();
					}).then(function (json) {
						_this.models = _this.models.concat(json);
	
						if (json.length < 9) {
							_this.showBtn = false;
						}
					}).catch(function (ex) {
						(0, _helpers.noty)('error', 'Ошибка при загрузке анкет: ' + ex);
					});
				},
				reloadModels: function reloadModels(filter) {
					var _this2 = this;
	
					this.page = 1;
	
					fetch('/models/get-by-filter/' + filter + '/' + this.page, {
						credentials: 'include',
						method: 'GET'
					}).then(function (response) {
						return response.json();
					}).then(function (json) {
						_this2.models = json;
	
						if (json.length < 9) {
							_this2.showBtn = false;
						}
					}).catch(function (ex) {
						(0, _helpers.noty)('error', 'Ошибка при загрузке анкет: ' + ex);
					});
				},
				toggleApproved: function toggleApproved(index) {
					var model = this.models[index];
					var data = new FormData();
	
					data.append('id', model.id);
	
					fetch('/models/toggle-approved', {
						method: 'POST',
						body: data,
						credentials: 'include'
					}).then(function (response) {
						if (response.status == 200) {
							(0, _helpers.noty)('success', 'Статус анкеты обновлен');
							model.is_approved = !model.is_approved;
						} else {
							(0, _helpers.noty)('error', 'Произошла ошибка при запросе к серверу :(');
						}
					});
				},
				removeModel: function removeModel(index) {
					var _this3 = this;
	
					if (!confirm('Отменить удаление невозможно! удаляем?')) {
						return false;
					}
	
					var model = this.models[index];
					var data = new FormData();
	
					data.append('id', model.id);
	
					fetch('/models/delete', {
						method: 'POST',
						body: data,
						credentials: 'include'
					}).then(function (response) {
						if (response.status == 200) {
							(0, _helpers.noty)('success', 'Анкета удалена');
							// Убрать анкету из массива
							_this3.models.splice(index, 1);
						} else {
							(0, _helpers.noty)('error', 'Произошла ошибка при запросе к серверу :(');
						}
					});
				}
			},
			mounted: function mounted() {
				this.loadModels(this.filter);
			},
			watch: {
				filter: function filter(value) {
					this.reloadModels(value);
				}
			}
		});
	};
	
	__webpack_require__(15);
	
	var _helpers = __webpack_require__(14);
	
	var _vTooltip = __webpack_require__(19);
	
	var _vTooltip2 = _interopRequireDefault(_vTooltip);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 3);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tooltip_js__ = __webpack_require__(2);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tooltip_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_tooltip_js__);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(1);
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return state; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return defaultOptions; });
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	
	
	
	
	var state = {
	  enabled: true
	};
	
	var positions = ['top', 'top-start', 'top-end', 'right', 'right-start', 'right-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end'];
	
	var defaultOptions = {
	  defaultPlacement: 'top',
	  defaultClass: 'vue-tooltip-theme',
	  defaultTemplate: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
	  defaultDelay: 0,
	  defaultTrigger: 'hover focus',
	  defaultOffset: 0,
	  defaultContainer: 'body'
	};
	
	function getOptions(options) {
	  return {
	    placement: options.placement || directive.options.defaultPlacement,
	    delay: options.delay || directive.options.defaultDelay,
	    template: options.template || directive.options.defaultTemplate,
	    trigger: options.trigger || directive.options.defaultTrigger,
	    offset: options.offset || directive.options.defaultOffset,
	    container: options.container || directive.options.defaultContainer
	  };
	}
	
	function getPlacement(value, modifiers) {
	  var placement = value.placement;
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;
	
	  try {
	    for (var _iterator = positions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var pos = _step.value;
	
	      if (modifiers[pos]) {
	        placement = pos;
	      }
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }
	
	  return placement;
	}
	
	var SuperTooltip = function (_Tooltip) {
	  _inherits(SuperTooltip, _Tooltip);
	
	  function SuperTooltip() {
	    _classCallCheck(this, SuperTooltip);
	
	    return _possibleConstructorReturn(this, (SuperTooltip.__proto__ || Object.getPrototypeOf(SuperTooltip)).apply(this, arguments));
	  }
	
	  _createClass(SuperTooltip, [{
	    key: 'setClasses',
	    value: function setClasses(classes) {
	      var el = this._tooltipNode;
	
	      if (el) {
	        var oldClasses = this._oldClasses;
	        if (classes) {
	          if (oldClasses) {
	            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["a" /* replaceClasses */])(el, classes, oldClasses);
	          } else {
	            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["b" /* addClasses */])(el, classes);
	          }
	        } else if (oldClasses) {
	          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["c" /* removeClasses */])(el, oldClasses);
	        }
	        this._oldClasses = classes;
	      } else {
	        this._pendingClasses = classes;
	      }
	
	      this._classes = classes;
	    }
	  }, {
	    key: 'setContent',
	    value: function setContent(content) {
	      this.options.title = content;
	      if (this._tooltipNode) {
	        var el = this._tooltipNode.querySelector(this.innerSelector);
	
	        if (el) {
	          if (!content) {
	            el.innerHTML = '';
	          } else {
	            el.innerHTML = content;
	          }
	
	          this.popperInstance.update();
	        }
	      }
	    }
	  }, {
	    key: 'setOptions',
	    value: function setOptions(options) {
	      options = getOptions(options);
	
	      var needPopperUpdate = false;
	      var needRestart = false;
	
	      if (this.options.offset !== options.offset || this.options.placement !== options.placement) {
	        needPopperUpdate = true;
	      }
	
	      if (this.options.template !== options.template || this.options.trigger !== options.trigger || this.options.container !== options.container) {
	        needRestart = true;
	      }
	
	      for (var key in options) {
	        this.options[key] = options[key];
	      }
	
	      if (this._tooltipNode) {
	        if (needRestart) {
	          var isOpen = this._isOpen;
	
	          this.dispose();
	
	          var events = typeof this.options.trigger === 'string' ? options.trigger.split(' ').filter(function (trigger) {
	            return ['click', 'hover', 'focus'].indexOf(trigger) !== -1;
	          }) : [];
	          this._setEventListeners(this.reference, events, this.options);
	
	          this.setClasses(this._classes);
	
	          if (isOpen) {
	            this.show();
	          }
	        } else if (needPopperUpdate) {
	          this.popperInstance.update();
	        }
	      }
	    }
	  }, {
	    key: '_create',
	    value: function _create() {
	      var _get2;
	
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	
	      var result = (_get2 = _get(SuperTooltip.prototype.__proto__ || Object.getPrototypeOf(SuperTooltip.prototype), '_create', this)).call.apply(_get2, [this].concat(args));
	
	      if (this.options.trigger.indexOf('hover') !== -1) {
	        result.addEventListener('mouseenter', this.hide);
	        result.addEventListener('click', this.hide);
	      }
	
	      return result;
	    }
	  }, {
	    key: '_dispose',
	    value: function _dispose() {
	      var _this2 = this;
	
	      if (this._tooltipNode) {
	        this._tooltipNode.removeEventListener('mouseenter', this.hide);
	        this._tooltipNode.removeEventListener('click', this.hide);
	      }
	
	      this._events.forEach(function (_ref) {
	        var func = _ref.func,
	            event = _ref.event;
	
	        _this2.reference.removeEventListener(event, func);
	      });
	      this._events = [];
	      return _get(SuperTooltip.prototype.__proto__ || Object.getPrototypeOf(SuperTooltip.prototype), '_dispose', this).call(this);
	    }
	  }, {
	    key: '_show',
	    value: function _show() {
	      var _get3,
	          _this3 = this;
	
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }
	
	      var result = (_get3 = _get(SuperTooltip.prototype.__proto__ || Object.getPrototypeOf(SuperTooltip.prototype), '_show', this)).call.apply(_get3, [this].concat(args));
	
	      if (this._pendingClasses) {
	        this.setClasses(this._pendingClasses);
	        this._pendingClasses = null;
	      }
	
	      // Fix position
	      setTimeout(function () {
	        _this3.popperInstance.update();
	      }, 0);
	
	      return result;
	    }
	  }]);
	
	  return SuperTooltip;
	}(__WEBPACK_IMPORTED_MODULE_0_tooltip_js___default.a);
	
	function createTooltip(el, value, modifiers) {
	  var content = value.content || value;
	  var classes = value.classes || directive.options.defaultClass;
	
	  var tooltip = el._tooltip = new SuperTooltip(el, _extends({
	    title: content,
	    html: true
	  }, getOptions(_extends({}, value, {
	    placement: getPlacement(value, modifiers)
	  }))));
	  tooltip.setClasses(classes);
	}
	
	function destroyTooltip(el) {
	  if (el._tooltip) {
	    el._tooltip.dispose();
	    delete el._tooltip;
	  }
	}
	
	var directive = {
	  options: defaultOptions,
	  bind: function bind(el, _ref2) {
	    var value = _ref2.value,
	        modifiers = _ref2.modifiers;
	
	    var content = value && value.content || value;
	    destroyTooltip(el);
	    if (content && state.enabled) {
	      createTooltip(el, value, modifiers);
	    }
	  },
	  update: function update(el, _ref3) {
	    var value = _ref3.value,
	        oldValue = _ref3.oldValue,
	        modifiers = _ref3.modifiers;
	
	    var content = value && value.content || value;
	    if (!content || !state.enabled) {
	      destroyTooltip(el);
	    } else if (el._tooltip) {
	      var tooltip = el._tooltip;
	      // Content
	      tooltip.setContent(content);
	      // CSS Classes
	      tooltip.setClasses(value && value.classes || directive.options.defaultClass);
	      // Options
	      tooltip.setOptions(_extends({}, value, {
	        placement: getPlacement(value, modifiers)
	      }));
	    } else {
	      createTooltip(el, value, modifiers);
	    }
	  },
	  unbind: function unbind(el) {
	    destroyTooltip(el);
	  }
	};
	
	/* harmony default export */ __webpack_exports__["b"] = directive;
	
	/***/ }),
	/* 1 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["b"] = addClasses;
	/* harmony export (immutable) */ __webpack_exports__["c"] = removeClasses;
	/* harmony export (immutable) */ __webpack_exports__["a"] = replaceClasses;
	
	function convertToArray(value) {
	  if (typeof value === 'string') {
	    value = value.split(' ');
	  }
	  return value;
	}
	
	function addClasses(el, classes) {
	  classes = convertToArray(classes);
	  classes.forEach(function (c) {
	    el.classList.add(c);
	  });
	}
	
	function removeClasses(el, classes) {
	  classes = convertToArray(classes);
	  classes.forEach(function (c) {
	    el.classList.remove(c);
	  });
	}
	
	function replaceClasses(el, newClasses, oldClasses) {
	  removeClasses(el, oldClasses);
	  addClasses(el, newClasses);
	}
	
	/***/ }),
	/* 2 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(20);
	
	/***/ }),
	/* 3 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__v_tooltip__ = __webpack_require__(0);
	/* harmony export (immutable) */ __webpack_exports__["install"] = install;
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VTooltip", function() { return VTooltip; });
	
	
	function install(Vue, options) {
	  if (install.installed) return;
	  install.installed = true;
	
	  options = Object.assign({}, __WEBPACK_IMPORTED_MODULE_0__v_tooltip__["a" /* defaultOptions */], options || {});
	  __WEBPACK_IMPORTED_MODULE_0__v_tooltip__["b" /* default */].options = options;
	  Vue.directive('tooltip', __WEBPACK_IMPORTED_MODULE_0__v_tooltip__["b" /* default */]);
	}
	
	var VTooltip = __WEBPACK_IMPORTED_MODULE_0__v_tooltip__["b" /* default */];
	
	var plugin = {
	  install: install,
	
	  get enabled() {
	    return __WEBPACK_IMPORTED_MODULE_0__v_tooltip__["c" /* state */].enabled;
	  },
	
	  set enabled(value) {
	    __WEBPACK_IMPORTED_MODULE_0__v_tooltip__["c" /* state */].enabled = value;
	  }
	};
	
	// Auto-install
	var GlobalVue = null;
	if (typeof window !== 'undefined') {
	  GlobalVue = window.Vue;
	} else if (typeof global !== 'undefined') {
	  GlobalVue = global.Vue;
	}
	if (GlobalVue) {
	  GlobalVue.use(plugin);
	}
	
	/* harmony default export */ __webpack_exports__["default"] = plugin;
	
	/***/ })
	/******/ ]);
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	(function (global, factory) {
		 true ? module.exports = factory(__webpack_require__(21)) :
		typeof define === 'function' && define.amd ? define(['popper.js'], factory) :
		(global.Tooltip = factory(global.Popper));
	}(this, (function (Popper) { 'use strict';
	
	Popper = 'default' in Popper ? Popper['default'] : Popper;
	
	/**
	 * Check if the given variable is a function
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Any} functionToCheck - variable to check
	 * @returns {Boolean} answer to: is a function?
	 */
	function isFunction(functionToCheck) {
	  var getType = {};
	  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	}
	
	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	
	
	
	
	
	
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};
	
	var DEFAULT_OPTIONS = {
	  container: false,
	  delay: 0,
	  html: false,
	  placement: 'top',
	  title: '',
	  template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
	  trigger: 'hover focus',
	  offset: 0
	};
	
	var Tooltip = function () {
	  /**
	   * Create a new Tooltip.js instance
	   * @class Tooltip
	   * @param {HTMLElement} reference - The reference element used to position the tooltip
	   * @param {Object} options
	   * @param {String} options.placement=bottom
	   *      Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -end),
	   *      left(-start, -end)`
	   *
	   * @param {HTMLElement} reference - The DOM node used as reference of the tooltip (it can be a jQuery element).
	   * @param {Object} options - Configuration of the tooltip
	   * @param {HTMLElement|String|false} options.container=false - Append the tooltip to a specific element.
	   * @param {Number|Object} options.delay=0
	   *      Delay showing and hiding the tooltip (ms) - does not apply to manual trigger type.
	   *      If a number is supplied, delay is applied to both hide/show.
	   *      Object structure is: `{ show: 500, hide: 100 }`
	   * @param {Boolean} options.html=false - Insert HTML into the tooltip. If false, the content will inserted with `innerText`.
	   * @param {String|PlacementFunction} options.placement='top' - One of the allowed placements, or a function returning one of them.
	   * @param {String} options.template='<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
	   *      Base HTML to used when creating the tooltip.
	   *      The tooltip's `title` will be injected into the `.tooltip-inner` or `.tooltip__inner`.
	   *      `.tooltip-arrow` or `.tooltip__arrow` will become the tooltip's arrow.
	   *      The outermost wrapper element should have the `.tooltip` class.
	   * @param {String|HTMLElement|TitleFunction} options.title='' - Default title value if `title` attribute isn't present.
	   * @param {String} options.trigger='hover focus'
	   *      How tooltip is triggered - click | hover | focus | manual.
	   *      You may pass multiple triggers; separate them with a space. `manual` cannot be combined with any other trigger.
	   * @param {HTMLElement} options.boundariesElement
	   *      The element used as boundaries for the tooltip. For more information refer to Popper.js'
	   *      [boundariesElement docs](https://popper.js.org/popper-documentation.html)
	   * @param {Number|String} options.offset=0 - Offset of the tooltip relative to its reference. For more information refer to Popper.js'
	   *      [offset docs](https://popper.js.org/popper-documentation.html)
	   * @return {Object} instance - The generated tooltip instance
	   */
	  function Tooltip(reference, options) {
	    classCallCheck(this, Tooltip);
	
	    _initialiseProps.call(this);
	
	    // apply user options over default ones
	    options = _extends({}, DEFAULT_OPTIONS, options);
	
	    reference.jquery && (reference = reference[0]);
	
	    // cache reference and options
	    this.reference = reference;
	    this.options = options;
	
	    // get events list
	    var events = typeof options.trigger === 'string' ? options.trigger.split(' ').filter(function (trigger) {
	      return ['click', 'hover', 'focus'].indexOf(trigger) !== -1;
	    }) : [];
	
	    // set initial state
	    this._isOpen = false;
	
	    // set event listeners
	    this._setEventListeners(reference, events, options);
	  }
	
	  //
	  // Public methods
	  //
	
	  /**
	   * Reveals an element's tooltip. This is considered a "manual" triggering of the tooltip.
	   * Tooltips with zero-length titles are never displayed.
	   * @memberof Tooltip
	   */
	
	
	  /**
	   * Hides an element’s tooltip. This is considered a “manual” triggering of the tooltip.
	   * @memberof Tooltip
	   */
	
	
	  /**
	   * Hides and destroys an element’s tooltip.
	   * @memberof Tooltip
	   */
	
	
	  /**
	   * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.
	   * @memberof Tooltip
	   */
	
	
	  //
	  // Defaults
	  //
	
	
	  //
	  // Private methods
	  //
	
	  createClass(Tooltip, [{
	    key: '_create',
	
	
	    /**
	     * Creates a new tooltip node
	     * @memberof Tooltip
	     * @private
	     * @param {HTMLElement} reference
	     * @param {String} template
	     * @param {String|HTMLElement|TitleFunction} title
	     * @param {Boolean} allowHtml
	     * @return {HTMLelement} tooltipNode
	     */
	    value: function _create(reference, template, title, allowHtml) {
	      // create tooltip element
	      var tooltipGenerator = window.document.createElement('div');
	      tooltipGenerator.innerHTML = template.trim();
	      var tooltipNode = tooltipGenerator.childNodes[0];
	
	      // add unique ID to our tooltip (needed for accessibility reasons)
	      tooltipNode.id = 'tooltip_' + Math.random().toString(36).substr(2, 10);
	
	      // set initial `aria-hidden` state to `false` (it's visible!)
	      tooltipNode.setAttribute('aria-hidden', 'false');
	
	      // add title to tooltip
	      var titleNode = tooltipGenerator.querySelector(this.innerSelector);
	      if (title.nodeType === 1) {
	        // if title is a node, append it only if allowHtml is true
	        allowHtml && titleNode.appendChild(title);
	      } else if (isFunction(title)) {
	        // if title is a function, call it and set innerText or innerHtml depending by `allowHtml` value
	        var titleText = title.call(reference);
	        allowHtml ? titleNode.innerHTML = titleText : titleNode.innerText = titleText;
	      } else {
	        // if it's just a simple text, set innerText or innerHtml depending by `allowHtml` value
	        allowHtml ? titleNode.innerHTML = title : titleNode.innerText = title;
	      }
	
	      // return the generated tooltip node
	      return tooltipNode;
	    }
	  }, {
	    key: '_show',
	    value: function _show(reference, options) {
	      // don't show if it's already visible
	      if (this._isOpen) {
	        return this;
	      }
	      this._isOpen = true;
	
	      // if the tooltipNode already exists, just show it
	      if (this._tooltipNode) {
	        this._tooltipNode.style.display = '';
	        this._tooltipNode.setAttribute('aria-hidden', 'false');
	        this.popperInstance.update();
	        return this;
	      }
	
	      // get title
	      var title = reference.getAttribute('title') || options.title;
	
	      // don't show tooltip if no title is defined
	      if (!title) {
	        return this;
	      }
	
	      // create tooltip node
	      var tooltipNode = this._create(reference, options.template, title, options.html);
	
	      // Add `aria-describedby` to our reference element for accessibility reasons
	      tooltipNode.setAttribute('aria-describedby', tooltipNode.id);
	
	      // append tooltip to container
	      var container = this._findContainer(options.container, reference);
	
	      this._append(tooltipNode, container);
	
	      var popperOptions = {
	        placement: options.placement,
	        modifiers: {
	          arrow: {
	            element: this.arrowSelector
	          }
	        }
	      };
	
	      if (options.boundariesElement) {
	        popperOptions.modifiers.preventOverflow = {
	          boundariesElement: options.boundariesElement
	        };
	      }
	
	      this.popperInstance = new Popper(reference, tooltipNode, popperOptions);
	
	      this._tooltipNode = tooltipNode;
	
	      return this;
	    }
	  }, {
	    key: '_hide',
	    value: function _hide() /*reference, options*/{
	      // don't hide if it's already hidden
	      if (!this._isOpen) {
	        return this;
	      }
	
	      this._isOpen = false;
	
	      // hide tooltipNode
	      this._tooltipNode.style.display = 'none';
	      this._tooltipNode.setAttribute('aria-hidden', 'true');
	
	      return this;
	    }
	  }, {
	    key: '_dispose',
	    value: function _dispose() {
	      var _this = this;
	
	      if (this._tooltipNode) {
	        this._hide();
	
	        // destroy instance
	        this.popperInstance.destroy();
	
	        // remove event listeners
	        this._events.forEach(function (_ref) {
	          var func = _ref.func,
	              event = _ref.event;
	
	          _this.reference.removeEventListener(event, func);
	        });
	        this._events = [];
	
	        // destroy tooltipNode
	        this._tooltipNode.parentNode.removeChild(this._tooltipNode);
	        this._tooltipNode = null;
	      }
	      return this;
	    }
	  }, {
	    key: '_findContainer',
	    value: function _findContainer(container, reference) {
	      // if container is a query, get the relative element
	      if (typeof container === 'string') {
	        container = window.document.querySelector(container);
	      } else if (container === false) {
	        // if container is `false`, set it to reference parent
	        container = reference.parentNode;
	      }
	      return container;
	    }
	
	    /**
	     * Append tooltip to container
	     * @memberof Tooltip
	     * @private
	     * @param {HTMLElement} tooltip
	     * @param {HTMLElement|String|false} container
	     */
	
	  }, {
	    key: '_append',
	    value: function _append(tooltipNode, container) {
	      container.appendChild(tooltipNode);
	    }
	  }, {
	    key: '_setEventListeners',
	    value: function _setEventListeners(reference, events, options) {
	      var _this2 = this;
	
	      var directEvents = [];
	      var oppositeEvents = [];
	
	      events.forEach(function (event) {
	        switch (event) {
	          case 'hover':
	            directEvents.push('mouseenter');
	            oppositeEvents.push('mouseleave');
	          case 'focus':
	            directEvents.push('focus');
	            oppositeEvents.push('blur');
	          case 'click':
	            directEvents.push('click');
	            oppositeEvents.push('click');
	        }
	      });
	
	      // schedule show tooltip
	      directEvents.forEach(function (event) {
	        var func = function func(evt) {
	          if (_this2._isOpen === true) {
	            return;
	          }
	          evt.usedByTooltip = true;
	          _this2._scheduleShow(reference, options.delay, options, evt);
	        };
	        _this2._events.push({ event: event, func: func });
	        reference.addEventListener(event, func);
	      });
	
	      // schedule hide tooltip
	      oppositeEvents.forEach(function (event) {
	        var func = function func(evt) {
	          if (evt.usedByTooltip === true) {
	            return;
	          }
	          _this2._scheduleHide(reference, options.delay, options, evt);
	        };
	        _this2._events.push({ event: event, func: func });
	        reference.addEventListener(event, func);
	      });
	    }
	  }, {
	    key: '_scheduleShow',
	    value: function _scheduleShow(reference, delay, options /*, evt */) {
	      var _this3 = this;
	
	      // defaults to 0
	      var computedDelay = delay && delay.show || delay || 0;
	      window.setTimeout(function () {
	        return _this3._show(reference, options);
	      }, computedDelay);
	    }
	  }, {
	    key: '_scheduleHide',
	    value: function _scheduleHide(reference, delay, options, evt) {
	      var _this4 = this;
	
	      // defaults to 0
	      var computedDelay = delay && delay.hide || delay || 0;
	      window.setTimeout(function () {
	        if (_this4._isOpen === false) {
	          return;
	        }
	        if (!document.body.contains(_this4._tooltipNode)) {
	          return;
	        }
	
	        // if we are hiding because of a mouseleave, we must check that the new
	        // reference isn't the tooltip, because in this case we don't want to hide it
	        if (evt.type === 'mouseleave') {
	          var isSet = _this4._setTooltipNodeEvent(evt, reference, delay, options);
	
	          // if we set the new event, don't hide the tooltip yet
	          // the new event will take care to hide it if necessary
	          if (isSet) {
	            return;
	          }
	        }
	
	        _this4._hide(reference, options);
	      }, computedDelay);
	    }
	  }]);
	  return Tooltip;
	}();
	
	/**
	 * Placement function, its context is the Tooltip instance.
	 * @memberof Tooltip
	 * @callback PlacementFunction
	 * @param {HTMLElement} tooltip - tooltip DOM node.
	 * @param {HTMLElement} reference - reference DOM node.
	 * @return {String} placement - One of the allowed placement options.
	 */
	
	/**
	 * Title function, its context is the Tooltip instance.
	 * @memberof Tooltip
	 * @callback TitleFunction
	 * @return {String} placement - The desired title.
	 */
	
	
	var _initialiseProps = function _initialiseProps() {
	  var _this5 = this;
	
	  this.show = function () {
	    return _this5._show(_this5.reference, _this5.options);
	  };
	
	  this.hide = function () {
	    return _this5._hide();
	  };
	
	  this.dispose = function () {
	    return _this5._dispose();
	  };
	
	  this.toggle = function () {
	    if (_this5._isOpen) {
	      return _this5.hide();
	    } else {
	      return _this5.show();
	    }
	  };
	
	  this.arrowSelector = '.tooltip-arrow, .tooltip__arrow';
	  this.innerSelector = '.tooltip-inner, .tooltip__inner';
	  this._events = [];
	
	  this._setTooltipNodeEvent = function (evt, reference, delay, options) {
	    var relatedreference = evt.relatedreference || evt.toElement;
	
	    var callback = function callback(evt2) {
	      var relatedreference2 = evt2.relatedreference || evt2.toElement;
	
	      // Remove event listener after call
	      _this5._tooltipNode.removeEventListener(evt.type, callback);
	
	      // If the new reference is not the reference element
	      if (!reference.contains(relatedreference2)) {
	        // Schedule to hide tooltip
	        _this5._scheduleHide(reference, options.delay, options, evt2);
	      }
	    };
	
	    if (_this5._tooltipNode.contains(relatedreference)) {
	      // listen to mouseleave on the tooltip element to be able to hide the tooltip
	      _this5._tooltipNode.addEventListener(evt.type, callback);
	      return true;
	    }
	
	    return false;
	  };
	};
	
	return Tooltip;
	
	})));
	//# sourceMappingURL=tooltip.js.map


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**!
	 * @fileOverview Kickass library to create and place poppers near their reference elements.
	 * @version 1.10.8
	 * @license
	 * Copyright (c) 2016 Federico Zivolo and contributors
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 */
	(function (global, factory) {
		 true ? module.exports = factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(global.Popper = factory());
	}(this, (function () { 'use strict';
	
	var nativeHints = ['native code', '[object MutationObserverConstructor]'];
	
	/**
	 * Determine if a function is implemented natively (as opposed to a polyfill).
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Function | undefined} fn the function to check
	 * @returns {Boolean}
	 */
	var isNative = (function (fn) {
	  return nativeHints.some(function (hint) {
	    return (fn || '').toString().indexOf(hint) > -1;
	  });
	});
	
	var isBrowser = typeof window !== 'undefined';
	var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
	var timeoutDuration = 0;
	for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
	  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
	    timeoutDuration = 1;
	    break;
	  }
	}
	
	function microtaskDebounce(fn) {
	  var scheduled = false;
	  var i = 0;
	  var elem = document.createElement('span');
	
	  // MutationObserver provides a mechanism for scheduling microtasks, which
	  // are scheduled *before* the next task. This gives us a way to debounce
	  // a function but ensure it's called *before* the next paint.
	  var observer = new MutationObserver(function () {
	    fn();
	    scheduled = false;
	  });
	
	  observer.observe(elem, { attributes: true });
	
	  return function () {
	    if (!scheduled) {
	      scheduled = true;
	      elem.setAttribute('x-index', i);
	      i = i + 1; // don't use compund (+=) because it doesn't get optimized in V8
	    }
	  };
	}
	
	function taskDebounce(fn) {
	  var scheduled = false;
	  return function () {
	    if (!scheduled) {
	      scheduled = true;
	      setTimeout(function () {
	        scheduled = false;
	        fn();
	      }, timeoutDuration);
	    }
	  };
	}
	
	// It's common for MutationObserver polyfills to be seen in the wild, however
	// these rely on Mutation Events which only occur when an element is connected
	// to the DOM. The algorithm used in this module does not use a connected element,
	// and so we must ensure that a *native* MutationObserver is available.
	var supportsNativeMutationObserver = isBrowser && isNative(window.MutationObserver);
	
	/**
	* Create a debounced version of a method, that's asynchronously deferred
	* but called in the minimum time possible.
	*
	* @method
	* @memberof Popper.Utils
	* @argument {Function} fn
	* @returns {Function}
	*/
	var debounce = supportsNativeMutationObserver ? microtaskDebounce : taskDebounce;
	
	/**
	 * Check if the given variable is a function
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Any} functionToCheck - variable to check
	 * @returns {Boolean} answer to: is a function?
	 */
	function isFunction(functionToCheck) {
	  var getType = {};
	  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	}
	
	/**
	 * Get CSS computed property of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Eement} element
	 * @argument {String} property
	 */
	function getStyleComputedProperty(element, property) {
	  if (element.nodeType !== 1) {
	    return [];
	  }
	  // NOTE: 1 DOM access here
	  var css = window.getComputedStyle(element, null);
	  return property ? css[property] : css;
	}
	
	/**
	 * Returns the parentNode or the host of the element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} parent
	 */
	function getParentNode(element) {
	  if (element.nodeName === 'HTML') {
	    return element;
	  }
	  return element.parentNode || element.host;
	}
	
	/**
	 * Returns the scrolling parent of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} scroll parent
	 */
	function getScrollParent(element) {
	  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
	  if (!element || ['HTML', 'BODY', '#document'].indexOf(element.nodeName) !== -1) {
	    return window.document.body;
	  }
	
	  // Firefox want us to check `-x` and `-y` variations as well
	
	  var _getStyleComputedProp = getStyleComputedProperty(element),
	      overflow = _getStyleComputedProp.overflow,
	      overflowX = _getStyleComputedProp.overflowX,
	      overflowY = _getStyleComputedProp.overflowY;
	
	  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
	    return element;
	  }
	
	  return getScrollParent(getParentNode(element));
	}
	
	function isOffsetContainer(element) {
	  var nodeName = element.nodeName;
	
	  if (nodeName === 'BODY') {
	    return false;
	  }
	  return nodeName === 'HTML' || element.firstElementChild.offsetParent === element;
	}
	
	/**
	 * Finds the root node (document, shadowDOM root) of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} node
	 * @returns {Element} root node
	 */
	function getRoot(node) {
	  if (node.parentNode !== null) {
	    return getRoot(node.parentNode);
	  }
	
	  return node;
	}
	
	/**
	 * Returns the offset parent of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} offset parent
	 */
	function getOffsetParent(element) {
	  // NOTE: 1 DOM access here
	  var offsetParent = element && element.offsetParent;
	  var nodeName = offsetParent && offsetParent.nodeName;
	
	  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
	    return window.document.documentElement;
	  }
	
	  return offsetParent;
	}
	
	/**
	 * Finds the offset parent common to the two provided nodes
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element1
	 * @argument {Element} element2
	 * @returns {Element} common offset parent
	 */
	function findCommonOffsetParent(element1, element2) {
	  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
	  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
	    return window.document.documentElement;
	  }
	
	  // Here we make sure to give as "start" the element that comes first in the DOM
	  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
	  var start = order ? element1 : element2;
	  var end = order ? element2 : element1;
	
	  // Get common ancestor container
	  var range = document.createRange();
	  range.setStart(start, 0);
	  range.setEnd(end, 0);
	  var commonAncestorContainer = range.commonAncestorContainer;
	
	  // Both nodes are inside #document
	
	  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
	    if (isOffsetContainer(commonAncestorContainer)) {
	      return commonAncestorContainer;
	    }
	
	    return getOffsetParent(commonAncestorContainer);
	  }
	
	  // one of the nodes is inside shadowDOM, find which one
	  var element1root = getRoot(element1);
	  if (element1root.host) {
	    return findCommonOffsetParent(element1root.host, element2);
	  } else {
	    return findCommonOffsetParent(element1, getRoot(element2).host);
	  }
	}
	
	/**
	 * Gets the scroll value of the given element in the given side (top and left)
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @argument {String} side `top` or `left`
	 * @returns {number} amount of scrolled pixels
	 */
	function getScroll(element) {
	  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
	
	  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
	  var nodeName = element.nodeName;
	
	  if (nodeName === 'BODY' || nodeName === 'HTML') {
	    var html = window.document.documentElement;
	    var scrollingElement = window.document.scrollingElement || html;
	    return scrollingElement[upperSide];
	  }
	
	  return element[upperSide];
	}
	
	/*
	 * Sum or subtract the element scroll values (left and top) from a given rect object
	 * @method
	 * @memberof Popper.Utils
	 * @param {Object} rect - Rect object you want to change
	 * @param {HTMLElement} element - The element from the function reads the scroll values
	 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
	 * @return {Object} rect - The modifier rect object
	 */
	function includeScroll(rect, element) {
	  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	  var scrollTop = getScroll(element, 'top');
	  var scrollLeft = getScroll(element, 'left');
	  var modifier = subtract ? -1 : 1;
	  rect.top += scrollTop * modifier;
	  rect.bottom += scrollTop * modifier;
	  rect.left += scrollLeft * modifier;
	  rect.right += scrollLeft * modifier;
	  return rect;
	}
	
	/*
	 * Helper to detect borders of a given element
	 * @method
	 * @memberof Popper.Utils
	 * @param {CSSStyleDeclaration} styles
	 * Result of `getStyleComputedProperty` on the given element
	 * @param {String} axis - `x` or `y`
	 * @return {number} borders - The borders size of the given axis
	 */
	
	function getBordersSize(styles, axis) {
	  var sideA = axis === 'x' ? 'Left' : 'Top';
	  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';
	
	  return +styles['border' + sideA + 'Width'].split('px')[0] + +styles['border' + sideB + 'Width'].split('px')[0];
	}
	
	/**
	 * Tells if you are running Internet Explorer 10
	 * @method
	 * @memberof Popper.Utils
	 * @returns {Boolean} isIE10
	 */
	var isIE10 = undefined;
	
	var isIE10$1 = function () {
	  if (isIE10 === undefined) {
	    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;
	  }
	  return isIE10;
	};
	
	function getSize(axis, body, html, computedStyle) {
	  return Math.max(body['offset' + axis], html['client' + axis], html['offset' + axis], isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);
	}
	
	function getWindowSizes() {
	  var body = window.document.body;
	  var html = window.document.documentElement;
	  var computedStyle = isIE10$1() && window.getComputedStyle(html);
	
	  return {
	    height: getSize('Height', body, html, computedStyle),
	    width: getSize('Width', body, html, computedStyle)
	  };
	}
	
	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	
	
	
	
	
	var defineProperty = function (obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};
	
	/**
	 * Given element offsets, generate an output similar to getBoundingClientRect
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Object} offsets
	 * @returns {Object} ClientRect like output
	 */
	function getClientRect(offsets) {
	  return _extends({}, offsets, {
	    right: offsets.left + offsets.width,
	    bottom: offsets.top + offsets.height
	  });
	}
	
	/**
	 * Get bounding client rect of given element
	 * @method
	 * @memberof Popper.Utils
	 * @param {HTMLElement} element
	 * @return {Object} client rect
	 */
	function getBoundingClientRect(element) {
	  var rect = {};
	
	  // IE10 10 FIX: Please, don't ask, the element isn't
	  // considered in DOM in some circumstances...
	  // This isn't reproducible in IE10 compatibility mode of IE11
	  if (isIE10$1()) {
	    try {
	      rect = element.getBoundingClientRect();
	      var scrollTop = getScroll(element, 'top');
	      var scrollLeft = getScroll(element, 'left');
	      rect.top += scrollTop;
	      rect.left += scrollLeft;
	      rect.bottom += scrollTop;
	      rect.right += scrollLeft;
	    } catch (err) {}
	  } else {
	    rect = element.getBoundingClientRect();
	  }
	
	  var result = {
	    left: rect.left,
	    top: rect.top,
	    width: rect.right - rect.left,
	    height: rect.bottom - rect.top
	  };
	
	  // subtract scrollbar size from sizes
	  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};
	  var width = sizes.width || element.clientWidth || result.right - result.left;
	  var height = sizes.height || element.clientHeight || result.bottom - result.top;
	
	  var horizScrollbar = element.offsetWidth - width;
	  var vertScrollbar = element.offsetHeight - height;
	
	  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
	  // we make this check conditional for performance reasons
	  if (horizScrollbar || vertScrollbar) {
	    var styles = getStyleComputedProperty(element);
	    horizScrollbar -= getBordersSize(styles, 'x');
	    vertScrollbar -= getBordersSize(styles, 'y');
	
	    result.width -= horizScrollbar;
	    result.height -= vertScrollbar;
	  }
	
	  return getClientRect(result);
	}
	
	function getOffsetRectRelativeToArbitraryNode(children, parent) {
	  var isIE10 = isIE10$1();
	  var isHTML = parent.nodeName === 'HTML';
	  var childrenRect = getBoundingClientRect(children);
	  var parentRect = getBoundingClientRect(parent);
	  var scrollParent = getScrollParent(children);
	
	  var styles = getStyleComputedProperty(parent);
	  var borderTopWidth = +styles.borderTopWidth.split('px')[0];
	  var borderLeftWidth = +styles.borderLeftWidth.split('px')[0];
	
	  var offsets = getClientRect({
	    top: childrenRect.top - parentRect.top - borderTopWidth,
	    left: childrenRect.left - parentRect.left - borderLeftWidth,
	    width: childrenRect.width,
	    height: childrenRect.height
	  });
	  offsets.marginTop = 0;
	  offsets.marginLeft = 0;
	
	  // Subtract margins of documentElement in case it's being used as parent
	  // we do this only on HTML because it's the only element that behaves
	  // differently when margins are applied to it. The margins are included in
	  // the box of the documentElement, in the other cases not.
	  if (!isIE10 && isHTML) {
	    var marginTop = +styles.marginTop.split('px')[0];
	    var marginLeft = +styles.marginLeft.split('px')[0];
	
	    offsets.top -= borderTopWidth - marginTop;
	    offsets.bottom -= borderTopWidth - marginTop;
	    offsets.left -= borderLeftWidth - marginLeft;
	    offsets.right -= borderLeftWidth - marginLeft;
	
	    // Attach marginTop and marginLeft because in some circumstances we may need them
	    offsets.marginTop = marginTop;
	    offsets.marginLeft = marginLeft;
	  }
	
	  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
	    offsets = includeScroll(offsets, parent);
	  }
	
	  return offsets;
	}
	
	function getViewportOffsetRectRelativeToArtbitraryNode(element) {
	  var html = window.document.documentElement;
	  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
	  var width = Math.max(html.clientWidth, window.innerWidth || 0);
	  var height = Math.max(html.clientHeight, window.innerHeight || 0);
	
	  var scrollTop = getScroll(html);
	  var scrollLeft = getScroll(html, 'left');
	
	  var offset = {
	    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
	    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
	    width: width,
	    height: height
	  };
	
	  return getClientRect(offset);
	}
	
	/**
	 * Check if the given element is fixed or is inside a fixed parent
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @argument {Element} customContainer
	 * @returns {Boolean} answer to "isFixed?"
	 */
	function isFixed(element) {
	  var nodeName = element.nodeName;
	  if (nodeName === 'BODY' || nodeName === 'HTML') {
	    return false;
	  }
	  if (getStyleComputedProperty(element, 'position') === 'fixed') {
	    return true;
	  }
	  return isFixed(getParentNode(element));
	}
	
	/**
	 * Computed the boundaries limits and return them
	 * @method
	 * @memberof Popper.Utils
	 * @param {HTMLElement} popper
	 * @param {HTMLElement} reference
	 * @param {number} padding
	 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
	 * @returns {Object} Coordinates of the boundaries
	 */
	function getBoundaries(popper, reference, padding, boundariesElement) {
	  // NOTE: 1 DOM access here
	  var boundaries = { top: 0, left: 0 };
	  var offsetParent = findCommonOffsetParent(popper, reference);
	
	  // Handle viewport case
	  if (boundariesElement === 'viewport') {
	    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);
	  } else {
	    // Handle other cases based on DOM element used as boundaries
	    var boundariesNode = void 0;
	    if (boundariesElement === 'scrollParent') {
	      boundariesNode = getScrollParent(getParentNode(popper));
	      if (boundariesNode.nodeName === 'BODY') {
	        boundariesNode = window.document.documentElement;
	      }
	    } else if (boundariesElement === 'window') {
	      boundariesNode = window.document.documentElement;
	    } else {
	      boundariesNode = boundariesElement;
	    }
	
	    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);
	
	    // In case of HTML, we need a different computation
	    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
	      var _getWindowSizes = getWindowSizes(),
	          height = _getWindowSizes.height,
	          width = _getWindowSizes.width;
	
	      boundaries.top += offsets.top - offsets.marginTop;
	      boundaries.bottom = height + offsets.top;
	      boundaries.left += offsets.left - offsets.marginLeft;
	      boundaries.right = width + offsets.left;
	    } else {
	      // for all the other DOM elements, this one is good
	      boundaries = offsets;
	    }
	  }
	
	  // Add paddings
	  boundaries.left += padding;
	  boundaries.top += padding;
	  boundaries.right -= padding;
	  boundaries.bottom -= padding;
	
	  return boundaries;
	}
	
	function getArea(_ref) {
	  var width = _ref.width,
	      height = _ref.height;
	
	  return width * height;
	}
	
	/**
	 * Utility used to transform the `auto` placement to the placement with more
	 * available space.
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
	  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
	
	  if (placement.indexOf('auto') === -1) {
	    return placement;
	  }
	
	  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
	
	  var rects = {
	    top: {
	      width: boundaries.width,
	      height: refRect.top - boundaries.top
	    },
	    right: {
	      width: boundaries.right - refRect.right,
	      height: boundaries.height
	    },
	    bottom: {
	      width: boundaries.width,
	      height: boundaries.bottom - refRect.bottom
	    },
	    left: {
	      width: refRect.left - boundaries.left,
	      height: boundaries.height
	    }
	  };
	
	  var sortedAreas = Object.keys(rects).map(function (key) {
	    return _extends({
	      key: key
	    }, rects[key], {
	      area: getArea(rects[key])
	    });
	  }).sort(function (a, b) {
	    return b.area - a.area;
	  });
	
	  var filteredAreas = sortedAreas.filter(function (_ref2) {
	    var width = _ref2.width,
	        height = _ref2.height;
	    return width >= popper.clientWidth && height >= popper.clientHeight;
	  });
	
	  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
	
	  var variation = placement.split('-')[1];
	
	  return computedPlacement + (variation ? '-' + variation : '');
	}
	
	/**
	 * Get offsets to the reference element
	 * @method
	 * @memberof Popper.Utils
	 * @param {Object} state
	 * @param {Element} popper - the popper element
	 * @param {Element} reference - the reference element (the popper will be relative to this)
	 * @returns {Object} An object containing the offsets which will be applied to the popper
	 */
	function getReferenceOffsets(state, popper, reference) {
	  var commonOffsetParent = findCommonOffsetParent(popper, reference);
	  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);
	}
	
	/**
	 * Get the outer sizes of the given element (offset size + margins)
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Object} object containing width and height properties
	 */
	function getOuterSizes(element) {
	  var styles = window.getComputedStyle(element);
	  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
	  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
	  var result = {
	    width: element.offsetWidth + y,
	    height: element.offsetHeight + x
	  };
	  return result;
	}
	
	/**
	 * Get the opposite placement of the given one
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} placement
	 * @returns {String} flipped placement
	 */
	function getOppositePlacement(placement) {
	  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
	  return placement.replace(/left|right|bottom|top/g, function (matched) {
	    return hash[matched];
	  });
	}
	
	/**
	 * Get offsets to the popper
	 * @method
	 * @memberof Popper.Utils
	 * @param {Object} position - CSS position the Popper will get applied
	 * @param {HTMLElement} popper - the popper element
	 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
	 * @param {String} placement - one of the valid placement options
	 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
	 */
	function getPopperOffsets(popper, referenceOffsets, placement) {
	  placement = placement.split('-')[0];
	
	  // Get popper node sizes
	  var popperRect = getOuterSizes(popper);
	
	  // Add position, width and height to our offsets object
	  var popperOffsets = {
	    width: popperRect.width,
	    height: popperRect.height
	  };
	
	  // depending by the popper placement we have to compute its offsets slightly differently
	  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
	  var mainSide = isHoriz ? 'top' : 'left';
	  var secondarySide = isHoriz ? 'left' : 'top';
	  var measurement = isHoriz ? 'height' : 'width';
	  var secondaryMeasurement = !isHoriz ? 'height' : 'width';
	
	  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
	  if (placement === secondarySide) {
	    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
	  } else {
	    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
	  }
	
	  return popperOffsets;
	}
	
	/**
	 * Mimics the `find` method of Array
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Array} arr
	 * @argument prop
	 * @argument value
	 * @returns index or -1
	 */
	function find(arr, check) {
	  // use native find if supported
	  if (Array.prototype.find) {
	    return arr.find(check);
	  }
	
	  // use `filter` to obtain the same behavior of `find`
	  return arr.filter(check)[0];
	}
	
	/**
	 * Return the index of the matching object
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Array} arr
	 * @argument prop
	 * @argument value
	 * @returns index or -1
	 */
	function findIndex(arr, prop, value) {
	  // use native findIndex if supported
	  if (Array.prototype.findIndex) {
	    return arr.findIndex(function (cur) {
	      return cur[prop] === value;
	    });
	  }
	
	  // use `find` + `indexOf` if `findIndex` isn't supported
	  var match = find(arr, function (obj) {
	    return obj[prop] === value;
	  });
	  return arr.indexOf(match);
	}
	
	/**
	 * Loop trough the list of modifiers and run them in order,
	 * each of them will then edit the data object.
	 * @method
	 * @memberof Popper.Utils
	 * @param {dataObject} data
	 * @param {Array} modifiers
	 * @param {String} ends - Optional modifier name used as stopper
	 * @returns {dataObject}
	 */
	function runModifiers(modifiers, data, ends) {
	  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));
	
	  modifiersToRun.forEach(function (modifier) {
	    if (modifier.function) {
	      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
	    }
	    var fn = modifier.function || modifier.fn;
	    if (modifier.enabled && isFunction(fn)) {
	      // Add properties to offsets to make them a complete clientRect object
	      // we do this before each modifier to make sure the previous one doesn't
	      // mess with these values
	      data.offsets.popper = getClientRect(data.offsets.popper);
	      data.offsets.reference = getClientRect(data.offsets.reference);
	
	      data = fn(data, modifier);
	    }
	  });
	
	  return data;
	}
	
	/**
	 * Updates the position of the popper, computing the new offsets and applying
	 * the new style.<br />
	 * Prefer `scheduleUpdate` over `update` because of performance reasons.
	 * @method
	 * @memberof Popper
	 */
	function update() {
	  // if popper is destroyed, don't perform any further update
	  if (this.state.isDestroyed) {
	    return;
	  }
	
	  var data = {
	    instance: this,
	    styles: {},
	    attributes: {},
	    flipped: false,
	    offsets: {}
	  };
	
	  // compute reference element offsets
	  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);
	
	  // compute auto placement, store placement inside the data object,
	  // modifiers will be able to edit `placement` if needed
	  // and refer to originalPlacement to know the original value
	  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
	
	  // store the computed placement inside `originalPlacement`
	  data.originalPlacement = data.placement;
	
	  // compute the popper offsets
	  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
	  data.offsets.popper.position = 'absolute';
	
	  // run the modifiers
	  data = runModifiers(this.modifiers, data);
	
	  // the first `update` will call `onCreate` callback
	  // the other ones will call `onUpdate` callback
	  if (!this.state.isCreated) {
	    this.state.isCreated = true;
	    this.options.onCreate(data);
	  } else {
	    this.options.onUpdate(data);
	  }
	}
	
	/**
	 * Helper used to know if the given modifier is enabled.
	 * @method
	 * @memberof Popper.Utils
	 * @returns {Boolean}
	 */
	function isModifierEnabled(modifiers, modifierName) {
	  return modifiers.some(function (_ref) {
	    var name = _ref.name,
	        enabled = _ref.enabled;
	    return enabled && name === modifierName;
	  });
	}
	
	/**
	 * Get the prefixed supported property name
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} property (camelCase)
	 * @returns {String} prefixed property (camelCase)
	 */
	function getSupportedPropertyName(property) {
	  var prefixes = [false, 'ms', 'webkit', 'moz', 'o'];
	  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
	
	  for (var i = 0; i < prefixes.length - 1; i++) {
	    var prefix = prefixes[i];
	    var toCheck = prefix ? '' + prefix + upperProp : property;
	    if (typeof window.document.body.style[toCheck] !== 'undefined') {
	      return toCheck;
	    }
	  }
	  return null;
	}
	
	/**
	 * Destroy the popper
	 * @method
	 * @memberof Popper
	 */
	function destroy() {
	  this.state.isDestroyed = true;
	
	  // touch DOM only if `applyStyle` modifier is enabled
	  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
	    this.popper.removeAttribute('x-placement');
	    this.popper.style.left = '';
	    this.popper.style.position = '';
	    this.popper.style.top = '';
	    this.popper.style[getSupportedPropertyName('transform')] = '';
	  }
	
	  this.disableEventListeners();
	
	  // remove the popper if user explicity asked for the deletion on destroy
	  // do not use `remove` because IE11 doesn't support it
	  if (this.options.removeOnDestroy) {
	    this.popper.parentNode.removeChild(this.popper);
	  }
	  return this;
	}
	
	function attachToScrollParents(scrollParent, event, callback, scrollParents) {
	  var isBody = scrollParent.nodeName === 'BODY';
	  var target = isBody ? window : scrollParent;
	  target.addEventListener(event, callback, { passive: true });
	
	  if (!isBody) {
	    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
	  }
	  scrollParents.push(target);
	}
	
	/**
	 * Setup needed event listeners used to update the popper position
	 * @method
	 * @memberof Popper.Utils
	 * @private
	 */
	function setupEventListeners(reference, options, state, updateBound) {
	  // Resize event listener on window
	  state.updateBound = updateBound;
	  window.addEventListener('resize', state.updateBound, { passive: true });
	
	  // Scroll event listener on scroll parents
	  var scrollElement = getScrollParent(reference);
	  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
	  state.scrollElement = scrollElement;
	  state.eventsEnabled = true;
	
	  return state;
	}
	
	/**
	 * It will add resize/scroll events and start recalculating
	 * position of the popper element when they are triggered.
	 * @method
	 * @memberof Popper
	 */
	function enableEventListeners() {
	  if (!this.state.eventsEnabled) {
	    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
	  }
	}
	
	/**
	 * Remove event listeners used to update the popper position
	 * @method
	 * @memberof Popper.Utils
	 * @private
	 */
	function removeEventListeners(reference, state) {
	  // Remove resize event listener on window
	  window.removeEventListener('resize', state.updateBound);
	
	  // Remove scroll event listener on scroll parents
	  state.scrollParents.forEach(function (target) {
	    target.removeEventListener('scroll', state.updateBound);
	  });
	
	  // Reset state
	  state.updateBound = null;
	  state.scrollParents = [];
	  state.scrollElement = null;
	  state.eventsEnabled = false;
	  return state;
	}
	
	/**
	 * It will remove resize/scroll events and won't recalculate popper position
	 * when they are triggered. It also won't trigger onUpdate callback anymore,
	 * unless you call `update` method manually.
	 * @method
	 * @memberof Popper
	 */
	function disableEventListeners() {
	  if (this.state.eventsEnabled) {
	    window.cancelAnimationFrame(this.scheduleUpdate);
	    this.state = removeEventListeners(this.reference, this.state);
	  }
	}
	
	/**
	 * Tells if a given input is a number
	 * @method
	 * @memberof Popper.Utils
	 * @param {*} input to check
	 * @return {Boolean}
	 */
	function isNumeric(n) {
	  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
	}
	
	/**
	 * Set the style to the given popper
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element - Element to apply the style to
	 * @argument {Object} styles
	 * Object with a list of properties and values which will be applied to the element
	 */
	function setStyles(element, styles) {
	  Object.keys(styles).forEach(function (prop) {
	    var unit = '';
	    // add unit if the value is numeric and is one of the following
	    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
	      unit = 'px';
	    }
	    element.style[prop] = styles[prop] + unit;
	  });
	}
	
	/**
	 * Set the attributes to the given popper
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element - Element to apply the attributes to
	 * @argument {Object} styles
	 * Object with a list of properties and values which will be applied to the element
	 */
	function setAttributes(element, attributes) {
	  Object.keys(attributes).forEach(function (prop) {
	    var value = attributes[prop];
	    if (value !== false) {
	      element.setAttribute(prop, attributes[prop]);
	    } else {
	      element.removeAttribute(prop);
	    }
	  });
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} data.styles - List of style properties - values to apply to popper element
	 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The same data object
	 */
	function applyStyle(data) {
	  // any property present in `data.styles` will be applied to the popper,
	  // in this way we can make the 3rd party modifiers add custom styles to it
	  // Be aware, modifiers could override the properties defined in the previous
	  // lines of this modifier!
	  setStyles(data.instance.popper, data.styles);
	
	  // any property present in `data.attributes` will be applied to the popper,
	  // they will be set as HTML attributes of the element
	  setAttributes(data.instance.popper, data.attributes);
	
	  // if the arrow style has been computed, apply the arrow style
	  if (data.offsets.arrow) {
	    setStyles(data.arrowElement, data.offsets.arrow);
	  }
	
	  return data;
	}
	
	/**
	 * Set the x-placement attribute before everything else because it could be used
	 * to add margins to the popper margins needs to be calculated to get the
	 * correct popper offsets.
	 * @method
	 * @memberof Popper.modifiers
	 * @param {HTMLElement} reference - The reference element used to position the popper
	 * @param {HTMLElement} popper - The HTML element used as popper.
	 * @param {Object} options - Popper.js options
	 */
	function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
	  // compute reference element offsets
	  var referenceOffsets = getReferenceOffsets(state, popper, reference);
	
	  // compute auto placement, store placement inside the data object,
	  // modifiers will be able to edit `placement` if needed
	  // and refer to originalPlacement to know the original value
	  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
	
	  popper.setAttribute('x-placement', placement);
	
	  // Apply `position` to popper before anything else because
	  // without the position applied we can't guarantee correct computations
	  setStyles(popper, { position: 'absolute' });
	
	  return options;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function computeStyle(data, options) {
	  var x = options.x,
	      y = options.y;
	  var popper = data.offsets.popper;
	
	  // Remove this legacy support in Popper.js v2
	
	  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
	    return modifier.name === 'applyStyle';
	  }).gpuAcceleration;
	  if (legacyGpuAccelerationOption !== undefined) {
	    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
	  }
	  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;
	
	  var offsetParent = getOffsetParent(data.instance.popper);
	  var offsetParentRect = getBoundingClientRect(offsetParent);
	
	  // Styles
	  var styles = {
	    position: popper.position
	  };
	
	  // floor sides to avoid blurry text
	  var offsets = {
	    left: Math.floor(popper.left),
	    top: Math.floor(popper.top),
	    bottom: Math.floor(popper.bottom),
	    right: Math.floor(popper.right)
	  };
	
	  var sideA = x === 'bottom' ? 'top' : 'bottom';
	  var sideB = y === 'right' ? 'left' : 'right';
	
	  // if gpuAcceleration is set to `true` and transform is supported,
	  //  we use `translate3d` to apply the position to the popper we
	  // automatically use the supported prefixed version if needed
	  var prefixedProperty = getSupportedPropertyName('transform');
	
	  // now, let's make a step back and look at this code closely (wtf?)
	  // If the content of the popper grows once it's been positioned, it
	  // may happen that the popper gets misplaced because of the new content
	  // overflowing its reference element
	  // To avoid this problem, we provide two options (x and y), which allow
	  // the consumer to define the offset origin.
	  // If we position a popper on top of a reference element, we can set
	  // `x` to `top` to make the popper grow towards its top instead of
	  // its bottom.
	  var left = void 0,
	      top = void 0;
	  if (sideA === 'bottom') {
	    top = -offsetParentRect.height + offsets.bottom;
	  } else {
	    top = offsets.top;
	  }
	  if (sideB === 'right') {
	    left = -offsetParentRect.width + offsets.right;
	  } else {
	    left = offsets.left;
	  }
	  if (gpuAcceleration && prefixedProperty) {
	    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
	    styles[sideA] = 0;
	    styles[sideB] = 0;
	    styles.willChange = 'transform';
	  } else {
	    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
	    var invertTop = sideA === 'bottom' ? -1 : 1;
	    var invertLeft = sideB === 'right' ? -1 : 1;
	    styles[sideA] = top * invertTop;
	    styles[sideB] = left * invertLeft;
	    styles.willChange = sideA + ', ' + sideB;
	  }
	
	  // Attributes
	  var attributes = {
	    'x-placement': data.placement
	  };
	
	  // Update attributes and styles of `data`
	  data.attributes = _extends({}, attributes, data.attributes);
	  data.styles = _extends({}, styles, data.styles);
	
	  return data;
	}
	
	/**
	 * Helper used to know if the given modifier depends from another one.<br />
	 * It checks if the needed modifier is listed and enabled.
	 * @method
	 * @memberof Popper.Utils
	 * @param {Array} modifiers - list of modifiers
	 * @param {String} requestingName - name of requesting modifier
	 * @param {String} requestedName - name of requested modifier
	 * @returns {Boolean}
	 */
	function isModifierRequired(modifiers, requestingName, requestedName) {
	  var requesting = find(modifiers, function (_ref) {
	    var name = _ref.name;
	    return name === requestingName;
	  });
	
	  var isRequired = !!requesting && modifiers.some(function (modifier) {
	    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
	  });
	
	  if (!isRequired) {
	    var _requesting = '`' + requestingName + '`';
	    var requested = '`' + requestedName + '`';
	    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
	  }
	  return isRequired;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function arrow(data, options) {
	  // arrow depends on keepTogether in order to work
	  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
	    return data;
	  }
	
	  var arrowElement = options.element;
	
	  // if arrowElement is a string, suppose it's a CSS selector
	  if (typeof arrowElement === 'string') {
	    arrowElement = data.instance.popper.querySelector(arrowElement);
	
	    // if arrowElement is not found, don't run the modifier
	    if (!arrowElement) {
	      return data;
	    }
	  } else {
	    // if the arrowElement isn't a query selector we must check that the
	    // provided DOM node is child of its popper node
	    if (!data.instance.popper.contains(arrowElement)) {
	      console.warn('WARNING: `arrow.element` must be child of its popper element!');
	      return data;
	    }
	  }
	
	  var placement = data.placement.split('-')[0];
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	
	  var isVertical = ['left', 'right'].indexOf(placement) !== -1;
	
	  var len = isVertical ? 'height' : 'width';
	  var side = isVertical ? 'top' : 'left';
	  var altSide = isVertical ? 'left' : 'top';
	  var opSide = isVertical ? 'bottom' : 'right';
	  var arrowElementSize = getOuterSizes(arrowElement)[len];
	
	  //
	  // extends keepTogether behavior making sure the popper and its reference have enough pixels in conjuction
	  //
	
	  // top/left side
	  if (reference[opSide] - arrowElementSize < popper[side]) {
	    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
	  }
	  // bottom/right side
	  if (reference[side] + arrowElementSize > popper[opSide]) {
	    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
	  }
	
	  // compute center of the popper
	  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
	
	  // Compute the sideValue using the updated popper offsets
	  var sideValue = center - getClientRect(data.offsets.popper)[side];
	
	  // prevent arrowElement from being placed not contiguously to its popper
	  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
	
	  data.arrowElement = arrowElement;
	  data.offsets.arrow = {};
	  data.offsets.arrow[side] = Math.round(sideValue);
	  data.offsets.arrow[altSide] = ''; // make sure to unset any eventual altSide value from the DOM node
	
	  return data;
	}
	
	/**
	 * Get the opposite placement variation of the given one
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} placement variation
	 * @returns {String} flipped placement variation
	 */
	function getOppositeVariation(variation) {
	  if (variation === 'end') {
	    return 'start';
	  } else if (variation === 'start') {
	    return 'end';
	  }
	  return variation;
	}
	
	/**
	 * List of accepted placements to use as values of the `placement` option.<br />
	 * Valid placements are:
	 * - `auto`
	 * - `top`
	 * - `right`
	 * - `bottom`
	 * - `left`
	 *
	 * Each placement can have a variation from this list:
	 * - `-start`
	 * - `-end`
	 *
	 * Variations are interpreted easily if you think of them as the left to right
	 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
	 * is right.<br />
	 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
	 *
	 * Some valid examples are:
	 * - `top-end` (on top of reference, right aligned)
	 * - `right-start` (on right of reference, top aligned)
	 * - `bottom` (on bottom, centered)
	 * - `auto-right` (on the side with more space available, alignment depends by placement)
	 *
	 * @static
	 * @type {Array}
	 * @enum {String}
	 * @readonly
	 * @method placements
	 * @memberof Popper
	 */
	var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];
	
	// Get rid of `auto` `auto-start` and `auto-end`
	var validPlacements = placements.slice(3);
	
	/**
	 * Given an initial placement, returns all the subsequent placements
	 * clockwise (or counter-clockwise).
	 *
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} placement - A valid placement (it accepts variations)
	 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
	 * @returns {Array} placements including their variations
	 */
	function clockwise(placement) {
	  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  var index = validPlacements.indexOf(placement);
	  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
	  return counter ? arr.reverse() : arr;
	}
	
	var BEHAVIORS = {
	  FLIP: 'flip',
	  CLOCKWISE: 'clockwise',
	  COUNTERCLOCKWISE: 'counterclockwise'
	};
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function flip(data, options) {
	  // if `inner` modifier is enabled, we can't use the `flip` modifier
	  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
	    return data;
	  }
	
	  if (data.flipped && data.placement === data.originalPlacement) {
	    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
	    return data;
	  }
	
	  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);
	
	  var placement = data.placement.split('-')[0];
	  var placementOpposite = getOppositePlacement(placement);
	  var variation = data.placement.split('-')[1] || '';
	
	  var flipOrder = [];
	
	  switch (options.behavior) {
	    case BEHAVIORS.FLIP:
	      flipOrder = [placement, placementOpposite];
	      break;
	    case BEHAVIORS.CLOCKWISE:
	      flipOrder = clockwise(placement);
	      break;
	    case BEHAVIORS.COUNTERCLOCKWISE:
	      flipOrder = clockwise(placement, true);
	      break;
	    default:
	      flipOrder = options.behavior;
	  }
	
	  flipOrder.forEach(function (step, index) {
	    if (placement !== step || flipOrder.length === index + 1) {
	      return data;
	    }
	
	    placement = data.placement.split('-')[0];
	    placementOpposite = getOppositePlacement(placement);
	
	    var popperOffsets = data.offsets.popper;
	    var refOffsets = data.offsets.reference;
	
	    // using floor because the reference offsets may contain decimals we are not going to consider here
	    var floor = Math.floor;
	    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);
	
	    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
	    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
	    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
	    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
	
	    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;
	
	    // flip the variation if required
	    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
	    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);
	
	    if (overlapsRef || overflowsBoundaries || flippedVariation) {
	      // this boolean to detect any flip loop
	      data.flipped = true;
	
	      if (overlapsRef || overflowsBoundaries) {
	        placement = flipOrder[index + 1];
	      }
	
	      if (flippedVariation) {
	        variation = getOppositeVariation(variation);
	      }
	
	      data.placement = placement + (variation ? '-' + variation : '');
	
	      // this object contains `position`, we want to preserve it along with
	      // any additional property we may add in the future
	      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
	
	      data = runModifiers(data.instance.modifiers, data, 'flip');
	    }
	  });
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function keepTogether(data) {
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	
	  var placement = data.placement.split('-')[0];
	  var floor = Math.floor;
	  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
	  var side = isVertical ? 'right' : 'bottom';
	  var opSide = isVertical ? 'left' : 'top';
	  var measurement = isVertical ? 'width' : 'height';
	
	  if (popper[side] < floor(reference[opSide])) {
	    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
	  }
	  if (popper[opSide] > floor(reference[side])) {
	    data.offsets.popper[opSide] = floor(reference[side]);
	  }
	
	  return data;
	}
	
	/**
	 * Converts a string containing value + unit into a px value number
	 * @function
	 * @memberof {modifiers~offset}
	 * @private
	 * @argument {String} str - Value + unit string
	 * @argument {String} measurement - `height` or `width`
	 * @argument {Object} popperOffsets
	 * @argument {Object} referenceOffsets
	 * @returns {Number|String}
	 * Value in pixels, or original string if no values were extracted
	 */
	function toValue(str, measurement, popperOffsets, referenceOffsets) {
	  // separate value from unit
	  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
	  var value = +split[1];
	  var unit = split[2];
	
	  // If it's not a number it's an operator, I guess
	  if (!value) {
	    return str;
	  }
	
	  if (unit.indexOf('%') === 0) {
	    var element = void 0;
	    switch (unit) {
	      case '%p':
	        element = popperOffsets;
	        break;
	      case '%':
	      case '%r':
	      default:
	        element = referenceOffsets;
	    }
	
	    var rect = getClientRect(element);
	    return rect[measurement] / 100 * value;
	  } else if (unit === 'vh' || unit === 'vw') {
	    // if is a vh or vw, we calculate the size based on the viewport
	    var size = void 0;
	    if (unit === 'vh') {
	      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
	    } else {
	      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
	    }
	    return size / 100 * value;
	  } else {
	    // if is an explicit pixel unit, we get rid of the unit and keep the value
	    // if is an implicit unit, it's px, and we return just the value
	    return value;
	  }
	}
	
	/**
	 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
	 * @function
	 * @memberof {modifiers~offset}
	 * @private
	 * @argument {String} offset
	 * @argument {Object} popperOffsets
	 * @argument {Object} referenceOffsets
	 * @argument {String} basePlacement
	 * @returns {Array} a two cells array with x and y offsets in numbers
	 */
	function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
	  var offsets = [0, 0];
	
	  // Use height if placement is left or right and index is 0 otherwise use width
	  // in this way the first offset will use an axis and the second one
	  // will use the other one
	  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;
	
	  // Split the offset string to obtain a list of values and operands
	  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
	  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
	    return frag.trim();
	  });
	
	  // Detect if the offset string contains a pair of values or a single one
	  // they could be separated by comma or space
	  var divider = fragments.indexOf(find(fragments, function (frag) {
	    return frag.search(/,|\s/) !== -1;
	  }));
	
	  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
	    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
	  }
	
	  // If divider is found, we divide the list of values and operands to divide
	  // them by ofset X and Y.
	  var splitRegex = /\s*,\s*|\s+/;
	  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
	
	  // Convert the values with units to absolute pixels to allow our computations
	  ops = ops.map(function (op, index) {
	    // Most of the units rely on the orientation of the popper
	    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
	    var mergeWithPrevious = false;
	    return op
	    // This aggregates any `+` or `-` sign that aren't considered operators
	    // e.g.: 10 + +5 => [10, +, +5]
	    .reduce(function (a, b) {
	      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
	        a[a.length - 1] = b;
	        mergeWithPrevious = true;
	        return a;
	      } else if (mergeWithPrevious) {
	        a[a.length - 1] += b;
	        mergeWithPrevious = false;
	        return a;
	      } else {
	        return a.concat(b);
	      }
	    }, [])
	    // Here we convert the string values into number values (in px)
	    .map(function (str) {
	      return toValue(str, measurement, popperOffsets, referenceOffsets);
	    });
	  });
	
	  // Loop trough the offsets arrays and execute the operations
	  ops.forEach(function (op, index) {
	    op.forEach(function (frag, index2) {
	      if (isNumeric(frag)) {
	        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
	      }
	    });
	  });
	  return offsets;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @argument {Number|String} options.offset=0
	 * The offset value as described in the modifier description
	 * @returns {Object} The data object, properly modified
	 */
	function offset(data, _ref) {
	  var offset = _ref.offset;
	  var placement = data.placement,
	      _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	
	  var basePlacement = placement.split('-')[0];
	
	  var offsets = void 0;
	  if (isNumeric(+offset)) {
	    offsets = [+offset, 0];
	  } else {
	    offsets = parseOffset(offset, popper, reference, basePlacement);
	  }
	
	  if (basePlacement === 'left') {
	    popper.top += offsets[0];
	    popper.left -= offsets[1];
	  } else if (basePlacement === 'right') {
	    popper.top += offsets[0];
	    popper.left += offsets[1];
	  } else if (basePlacement === 'top') {
	    popper.left += offsets[0];
	    popper.top -= offsets[1];
	  } else if (basePlacement === 'bottom') {
	    popper.left += offsets[0];
	    popper.top += offsets[1];
	  }
	
	  data.popper = popper;
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function preventOverflow(data, options) {
	  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
	
	  // If offsetParent is the reference element, we really want to
	  // go one step up and use the next offsetParent as reference to
	  // avoid to make this modifier completely useless and look like broken
	  if (data.instance.reference === boundariesElement) {
	    boundariesElement = getOffsetParent(boundariesElement);
	  }
	
	  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);
	  options.boundaries = boundaries;
	
	  var order = options.priority;
	  var popper = data.offsets.popper;
	
	  var check = {
	    primary: function primary(placement) {
	      var value = popper[placement];
	      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
	        value = Math.max(popper[placement], boundaries[placement]);
	      }
	      return defineProperty({}, placement, value);
	    },
	    secondary: function secondary(placement) {
	      var mainSide = placement === 'right' ? 'left' : 'top';
	      var value = popper[mainSide];
	      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
	        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
	      }
	      return defineProperty({}, mainSide, value);
	    }
	  };
	
	  order.forEach(function (placement) {
	    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
	    popper = _extends({}, popper, check[side](placement));
	  });
	
	  data.offsets.popper = popper;
	
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function shift(data) {
	  var placement = data.placement;
	  var basePlacement = placement.split('-')[0];
	  var shiftvariation = placement.split('-')[1];
	
	  // if shift shiftvariation is specified, run the modifier
	  if (shiftvariation) {
	    var _data$offsets = data.offsets,
	        reference = _data$offsets.reference,
	        popper = _data$offsets.popper;
	
	    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
	    var side = isVertical ? 'left' : 'top';
	    var measurement = isVertical ? 'width' : 'height';
	
	    var shiftOffsets = {
	      start: defineProperty({}, side, reference[side]),
	      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
	    };
	
	    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
	  }
	
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function hide(data) {
	  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
	    return data;
	  }
	
	  var refRect = data.offsets.reference;
	  var bound = find(data.instance.modifiers, function (modifier) {
	    return modifier.name === 'preventOverflow';
	  }).boundaries;
	
	  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
	    // Avoid unnecessary DOM access if visibility hasn't changed
	    if (data.hide === true) {
	      return data;
	    }
	
	    data.hide = true;
	    data.attributes['x-out-of-boundaries'] = '';
	  } else {
	    // Avoid unnecessary DOM access if visibility hasn't changed
	    if (data.hide === false) {
	      return data;
	    }
	
	    data.hide = false;
	    data.attributes['x-out-of-boundaries'] = false;
	  }
	
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function inner(data) {
	  var placement = data.placement;
	  var basePlacement = placement.split('-')[0];
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	
	  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;
	
	  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;
	
	  popper[isHoriz ? 'left' : 'top'] = reference[placement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);
	
	  data.placement = getOppositePlacement(placement);
	  data.offsets.popper = getClientRect(popper);
	
	  return data;
	}
	
	/**
	 * Modifier function, each modifier can have a function of this type assigned
	 * to its `fn` property.<br />
	 * These functions will be called on each update, this means that you must
	 * make sure they are performant enough to avoid performance bottlenecks.
	 *
	 * @function ModifierFn
	 * @argument {dataObject} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {dataObject} The data object, properly modified
	 */
	
	/**
	 * Modifiers are plugins used to alter the behavior of your poppers.<br />
	 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
	 * needed by the library.
	 *
	 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
	 * All the other properties are configurations that could be tweaked.
	 * @namespace modifiers
	 */
	var modifiers = {
	  /**
	   * Modifier used to shift the popper on the start or end of its reference
	   * element.<br />
	   * It will read the variation of the `placement` property.<br />
	   * It can be one either `-end` or `-start`.
	   * @memberof modifiers
	   * @inner
	   */
	  shift: {
	    /** @prop {number} order=100 - Index used to define the order of execution */
	    order: 100,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: shift
	  },
	
	  /**
	   * The `offset` modifier can shift your popper on both its axis.
	   *
	   * It accepts the following units:
	   * - `px` or unitless, interpreted as pixels
	   * - `%` or `%r`, percentage relative to the length of the reference element
	   * - `%p`, percentage relative to the length of the popper element
	   * - `vw`, CSS viewport width unit
	   * - `vh`, CSS viewport height unit
	   *
	   * For length is intended the main axis relative to the placement of the popper.<br />
	   * This means that if the placement is `top` or `bottom`, the length will be the
	   * `width`. In case of `left` or `right`, it will be the height.
	   *
	   * You can provide a single value (as `Number` or `String`), or a pair of values
	   * as `String` divided by a comma or one (or more) white spaces.<br />
	   * The latter is a deprecated method because it leads to confusion and will be
	   * removed in v2.<br />
	   * Additionally, it accepts additions and subtractions between different units.
	   * Note that multiplications and divisions aren't supported.
	   *
	   * Valid examples are:
	   * ```
	   * 10
	   * '10%'
	   * '10, 10'
	   * '10%, 10'
	   * '10 + 10%'
	   * '10 - 5vh + 3%'
	   * '-10px + 5vh, 5px - 6%'
	   * ```
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  offset: {
	    /** @prop {number} order=200 - Index used to define the order of execution */
	    order: 200,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: offset,
	    /** @prop {Number|String} offset=0
	     * The offset value as described in the modifier description
	     */
	    offset: 0
	  },
	
	  /**
	   * Modifier used to prevent the popper from being positioned outside the boundary.
	   *
	   * An scenario exists where the reference itself is not within the boundaries.<br />
	   * We can say it has "escaped the boundaries" — or just "escaped".<br />
	   * In this case we need to decide whether the popper should either:
	   *
	   * - detach from the reference and remain "trapped" in the boundaries, or
	   * - if it should ignore the boundary and "escape with its reference"
	   *
	   * When `escapeWithReference` is set to`true` and reference is completely
	   * outside its boundaries, the popper will overflow (or completely leave)
	   * the boundaries in order to remain attached to the edge of the reference.
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  preventOverflow: {
	    /** @prop {number} order=300 - Index used to define the order of execution */
	    order: 300,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: preventOverflow,
	    /**
	     * @prop {Array} [priority=['left','right','top','bottom']]
	     * Popper will try to prevent overflow following these priorities by default,
	     * then, it could overflow on the left and on top of the `boundariesElement`
	     */
	    priority: ['left', 'right', 'top', 'bottom'],
	    /**
	     * @prop {number} padding=5
	     * Amount of pixel used to define a minimum distance between the boundaries
	     * and the popper this makes sure the popper has always a little padding
	     * between the edges of its container
	     */
	    padding: 5,
	    /**
	     * @prop {String|HTMLElement} boundariesElement='scrollParent'
	     * Boundaries used by the modifier, can be `scrollParent`, `window`,
	     * `viewport` or any DOM element.
	     */
	    boundariesElement: 'scrollParent'
	  },
	
	  /**
	   * Modifier used to make sure the reference and its popper stay near eachothers
	   * without leaving any gap between the two. Expecially useful when the arrow is
	   * enabled and you want to assure it to point to its reference element.
	   * It cares only about the first axis, you can still have poppers with margin
	   * between the popper and its reference element.
	   * @memberof modifiers
	   * @inner
	   */
	  keepTogether: {
	    /** @prop {number} order=400 - Index used to define the order of execution */
	    order: 400,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: keepTogether
	  },
	
	  /**
	   * This modifier is used to move the `arrowElement` of the popper to make
	   * sure it is positioned between the reference element and its popper element.
	   * It will read the outer size of the `arrowElement` node to detect how many
	   * pixels of conjuction are needed.
	   *
	   * It has no effect if no `arrowElement` is provided.
	   * @memberof modifiers
	   * @inner
	   */
	  arrow: {
	    /** @prop {number} order=500 - Index used to define the order of execution */
	    order: 500,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: arrow,
	    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
	    element: '[x-arrow]'
	  },
	
	  /**
	   * Modifier used to flip the popper's placement when it starts to overlap its
	   * reference element.
	   *
	   * Requires the `preventOverflow` modifier before it in order to work.
	   *
	   * **NOTE:** this modifier will interrupt the current update cycle and will
	   * restart it if it detects the need to flip the placement.
	   * @memberof modifiers
	   * @inner
	   */
	  flip: {
	    /** @prop {number} order=600 - Index used to define the order of execution */
	    order: 600,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: flip,
	    /**
	     * @prop {String|Array} behavior='flip'
	     * The behavior used to change the popper's placement. It can be one of
	     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
	     * placements (with optional variations).
	     */
	    behavior: 'flip',
	    /**
	     * @prop {number} padding=5
	     * The popper will flip if it hits the edges of the `boundariesElement`
	     */
	    padding: 5,
	    /**
	     * @prop {String|HTMLElement} boundariesElement='viewport'
	     * The element which will define the boundaries of the popper position,
	     * the popper will never be placed outside of the defined boundaries
	     * (except if keepTogether is enabled)
	     */
	    boundariesElement: 'viewport'
	  },
	
	  /**
	   * Modifier used to make the popper flow toward the inner of the reference element.
	   * By default, when this modifier is disabled, the popper will be placed outside
	   * the reference element.
	   * @memberof modifiers
	   * @inner
	   */
	  inner: {
	    /** @prop {number} order=700 - Index used to define the order of execution */
	    order: 700,
	    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
	    enabled: false,
	    /** @prop {ModifierFn} */
	    fn: inner
	  },
	
	  /**
	   * Modifier used to hide the popper when its reference element is outside of the
	   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
	   * be used to hide with a CSS selector the popper when its reference is
	   * out of boundaries.
	   *
	   * Requires the `preventOverflow` modifier before it in order to work.
	   * @memberof modifiers
	   * @inner
	   */
	  hide: {
	    /** @prop {number} order=800 - Index used to define the order of execution */
	    order: 800,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: hide
	  },
	
	  /**
	   * Computes the style that will be applied to the popper element to gets
	   * properly positioned.
	   *
	   * Note that this modifier will not touch the DOM, it just prepares the styles
	   * so that `applyStyle` modifier can apply it. This separation is useful
	   * in case you need to replace `applyStyle` with a custom implementation.
	   *
	   * This modifier has `850` as `order` value to maintain backward compatibility
	   * with previous versions of Popper.js. Expect the modifiers ordering method
	   * to change in future major versions of the library.
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  computeStyle: {
	    /** @prop {number} order=850 - Index used to define the order of execution */
	    order: 850,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: computeStyle,
	    /**
	     * @prop {Boolean} gpuAcceleration=true
	     * If true, it uses the CSS 3d transformation to position the popper.
	     * Otherwise, it will use the `top` and `left` properties.
	     */
	    gpuAcceleration: true,
	    /**
	     * @prop {string} [x='bottom']
	     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
	     * Change this if your popper should grow in a direction different from `bottom`
	     */
	    x: 'bottom',
	    /**
	     * @prop {string} [x='left']
	     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
	     * Change this if your popper should grow in a direction different from `right`
	     */
	    y: 'right'
	  },
	
	  /**
	   * Applies the computed styles to the popper element.
	   *
	   * All the DOM manipulations are limited to this modifier. This is useful in case
	   * you want to integrate Popper.js inside a framework or view library and you
	   * want to delegate all the DOM manipulations to it.
	   *
	   * Note that if you disable this modifier, you must make sure the popper element
	   * has its position set to `absolute` before Popper.js can do its work!
	   *
	   * Just disable this modifier and define you own to achieve the desired effect.
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  applyStyle: {
	    /** @prop {number} order=900 - Index used to define the order of execution */
	    order: 900,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: applyStyle,
	    /** @prop {Function} */
	    onLoad: applyStyleOnLoad,
	    /**
	     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
	     * @prop {Boolean} gpuAcceleration=true
	     * If true, it uses the CSS 3d transformation to position the popper.
	     * Otherwise, it will use the `top` and `left` properties.
	     */
	    gpuAcceleration: undefined
	  }
	};
	
	/**
	 * The `dataObject` is an object containing all the informations used by Popper.js
	 * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
	 * @name dataObject
	 * @property {Object} data.instance The Popper.js instance
	 * @property {String} data.placement Placement applied to popper
	 * @property {String} data.originalPlacement Placement originally defined on init
	 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
	 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.
	 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
	 * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)
	 * @property {Object} data.boundaries Offsets of the popper boundaries
	 * @property {Object} data.offsets The measurements of popper, reference and arrow elements.
	 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
	 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
	 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
	 */
	
	/**
	 * Default options provided to Popper.js constructor.<br />
	 * These can be overriden using the `options` argument of Popper.js.<br />
	 * To override an option, simply pass as 3rd argument an object with the same
	 * structure of this object, example:
	 * ```
	 * new Popper(ref, pop, {
	 *   modifiers: {
	 *     preventOverflow: { enabled: false }
	 *   }
	 * })
	 * ```
	 * @type {Object}
	 * @static
	 * @memberof Popper
	 */
	var Defaults = {
	  /**
	   * Popper's placement
	   * @prop {Popper.placements} placement='bottom'
	   */
	  placement: 'bottom',
	
	  /**
	   * Whether events (resize, scroll) are initially enabled
	   * @prop {Boolean} eventsEnabled=true
	   */
	  eventsEnabled: true,
	
	  /**
	   * Set to true if you want to automatically remove the popper when
	   * you call the `destroy` method.
	   * @prop {Boolean} removeOnDestroy=false
	   */
	  removeOnDestroy: false,
	
	  /**
	   * Callback called when the popper is created.<br />
	   * By default, is set to no-op.<br />
	   * Access Popper.js instance with `data.instance`.
	   * @prop {onCreate}
	   */
	  onCreate: function onCreate() {},
	
	  /**
	   * Callback called when the popper is updated, this callback is not called
	   * on the initialization/creation of the popper, but only on subsequent
	   * updates.<br />
	   * By default, is set to no-op.<br />
	   * Access Popper.js instance with `data.instance`.
	   * @prop {onUpdate}
	   */
	  onUpdate: function onUpdate() {},
	
	  /**
	   * List of modifiers used to modify the offsets before they are applied to the popper.
	   * They provide most of the functionalities of Popper.js
	   * @prop {modifiers}
	   */
	  modifiers: modifiers
	};
	
	/**
	 * @callback onCreate
	 * @param {dataObject} data
	 */
	
	/**
	 * @callback onUpdate
	 * @param {dataObject} data
	 */
	
	// Utils
	// Methods
	var Popper = function () {
	  /**
	   * Create a new Popper.js instance
	   * @class Popper
	   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
	   * @param {HTMLElement} popper - The HTML element used as popper.
	   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
	   * @return {Object} instance - The generated Popper.js instance
	   */
	  function Popper(reference, popper) {
	    var _this = this;
	
	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	    classCallCheck(this, Popper);
	
	    this.scheduleUpdate = function () {
	      return requestAnimationFrame(_this.update);
	    };
	
	    // make update() debounced, so that it only runs at most once-per-tick
	    this.update = debounce(this.update.bind(this));
	
	    // with {} we create a new object with the options inside it
	    this.options = _extends({}, Popper.Defaults, options);
	
	    // init state
	    this.state = {
	      isDestroyed: false,
	      isCreated: false,
	      scrollParents: []
	    };
	
	    // get reference and popper elements (allow jQuery wrappers)
	    this.reference = reference.jquery ? reference[0] : reference;
	    this.popper = popper.jquery ? popper[0] : popper;
	
	    // Deep merge modifiers options
	    this.options.modifiers = {};
	    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
	      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
	    });
	
	    // Refactoring modifiers' list (Object => Array)
	    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
	      return _extends({
	        name: name
	      }, _this.options.modifiers[name]);
	    })
	    // sort the modifiers by order
	    .sort(function (a, b) {
	      return a.order - b.order;
	    });
	
	    // modifiers have the ability to execute arbitrary code when Popper.js get inited
	    // such code is executed in the same order of its modifier
	    // they could add new properties to their options configuration
	    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
	    this.modifiers.forEach(function (modifierOptions) {
	      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
	        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
	      }
	    });
	
	    // fire the first update to position the popper in the right place
	    this.update();
	
	    var eventsEnabled = this.options.eventsEnabled;
	    if (eventsEnabled) {
	      // setup event listeners, they will take care of update the position in specific situations
	      this.enableEventListeners();
	    }
	
	    this.state.eventsEnabled = eventsEnabled;
	  }
	
	  // We can't use class properties because they don't get listed in the
	  // class prototype and break stuff like Sinon stubs
	
	
	  createClass(Popper, [{
	    key: 'update',
	    value: function update$$1() {
	      return update.call(this);
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy$$1() {
	      return destroy.call(this);
	    }
	  }, {
	    key: 'enableEventListeners',
	    value: function enableEventListeners$$1() {
	      return enableEventListeners.call(this);
	    }
	  }, {
	    key: 'disableEventListeners',
	    value: function disableEventListeners$$1() {
	      return disableEventListeners.call(this);
	    }
	
	    /**
	     * Schedule an update, it will run on the next UI update available
	     * @method scheduleUpdate
	     * @memberof Popper
	     */
	
	
	    /**
	     * Collection of utilities useful when writing custom modifiers.
	     * Starting from version 1.7, this method is available only if you
	     * include `popper-utils.js` before `popper.js`.
	     *
	     * **DEPRECATION**: This way to access PopperUtils is deprecated
	     * and will be removed in v2! Use the PopperUtils module directly instead.
	     * Due to the high instability of the methods contained in Utils, we can't
	     * guarantee them to follow semver. Use them at your own risk!
	     * @static
	     * @private
	     * @type {Object}
	     * @deprecated since version 1.8
	     * @member Utils
	     * @memberof Popper
	     */
	
	  }]);
	  return Popper;
	}();
	
	/**
	 * The `referenceObject` is an object that provides an interface compatible with Popper.js
	 * and lets you use it as replacement of a real DOM node.<br />
	 * You can use this method to position a popper relatively to a set of coordinates
	 * in case you don't have a DOM node to use as reference.
	 *
	 * ```
	 * new Popper(referenceObject, popperNode);
	 * ```
	 *
	 * NB: This feature isn't supported in Internet Explorer 10
	 * @name referenceObject
	 * @property {Function} data.getBoundingClientRect
	 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
	 * @property {number} data.clientWidth
	 * An ES6 getter that will return the width of the virtual reference element.
	 * @property {number} data.clientHeight
	 * An ES6 getter that will return the height of the virtual reference element.
	 */
	
	
	Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
	Popper.placements = placements;
	Popper.Defaults = Defaults;
	
	return Popper;
	
	})));
	//# sourceMappingURL=popper.js.map
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		var sliderEl = document.querySelector('.model-card__gallery-slider');
		var nav = document.querySelector('.model-card__gallery-nav');
		var navLinks = document.querySelectorAll('.model-card__gallery-nav-link');
		var showMoreBtn = document.querySelector('#show-more-btn');
	
		if (!sliderEl) return false;
	
		var slider = new _siema2.default({
			selector: sliderEl,
			onInit: function onInit() {
				var item = navLinks[0];
				if (!item) return false;
				item.classList.add('-active');
			},
			onChange: function onChange() {
				var item = navLinks[this.currentSlide];
				if (!item) return false;
	
				(0, _helpers.forEachDom)(navLinks, function (item, i, array) {
					item.classList.remove('-active');
				});
	
				item.classList.add('-active');
			}
		});
	
		(0, _helpers.forEachDom)(navLinks, function (item, i, array) {
			var isBlocked = item.classList.contains('model-card__gallery-nav-link_blocked');
			if (isBlocked) return false;
	
			item.addEventListener('click', function (e) {
				slider.goTo(i);
			});
		});
	
		// Показать/скрыть невлезающие превьюшки фотографий
		if (showMoreBtn) {
			showMoreBtn.addEventListener('click', function (e) {
				console.log(e);
				nav.classList.add('-expanded');
				showMoreBtn.parentNode.classList.add('hidden');
			});
		}
	};
	
	var _siema = __webpack_require__(11);
	
	var _siema2 = _interopRequireDefault(_siema);
	
	var _helpers = __webpack_require__(14);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		if (!document.getElementById('order-form')) return false;
	
		var app = new Vue({
			el: '#order-form',
			data: {
				models: [],
				services: [],
				isShowOrderModal: false,
				isChooseModel: false,
				isChooseService: false,
				changed_model: null,
				changed_model_index: null,
				selected_model: null,
				selected_services: [],
				changed_service: null,
				changed_service_index: null
			},
			computed: {
				modelLink: function modelLink() {
					return '/model/' + this.selected_model.slug + '-' + this.selected_model.id;
				},
				// Возвращает id-шники выбранных услуг в json массиве
				selectedServices: function selectedServices() {
					var result = [];
	
					this.selected_services.forEach(function (service, index) {
						result.push(service.id);
					});
	
					return JSON.stringify(result);
				}
			},
			methods: {
				// Очистить поле выбраной модели
				clearModel: function clearModel(e) {
					this.selected_model = null;
				},
				// Удалить сервис из списка выбраных
				removeService: function removeService(index) {
					if (this.selected_services[index]) {
						this.selected_services.splice(index, 1);
					}
				},
				showOrderModal: function showOrderModal() {
					this.isShowOrderModal = true;
				},
				hidOrderModal: function hidOrderModal() {
					this.isShowOrderModal = false;
				},
				chooseModel: function chooseModel(index) {
					this.showOrderModal();
					this.isChooseModel = true;
					this.isChooseService = false;
				},
				chooseService: function chooseService(index) {
					this.showOrderModal();
					this.isChooseService = true;
					this.isChooseModel = false;
				},
				changeModel: function changeModel(index) {
					this.changed_model_index = index;
					this.changed_model = this.models[index];
				},
				changeService: function changeService(index) {
					this.changed_service_index = index;
					this.changed_service = this.services[index];
				},
				isActiveModalListItemModels: function isActiveModalListItemModels(index) {
					return index === this.changed_model_index;
				},
				isActiveModalListItemServices: function isActiveModalListItemServices(index) {
					return index === this.changed_service_index;
				},
				selectModel: function selectModel() {
					this.selected_model = this.changed_model;
					this.hidOrderModal();
				},
				selectService: function selectService() {
					this.selected_services.push(this.changed_service);
					this.hidOrderModal();
				},
				parseMarkdown: function parseMarkdown(mdContent) {
					return _markdown2.markdown.toHTML(mdContent);
				}
			},
			mounted: function mounted() {
				var _this = this;
	
				(0, _inputmask2.default)({ mask: "+7 999 999-99-99" }).mask(document.querySelectorAll('input[type=phone]'));
	
				fetch('models/list', {
					credentials: 'include',
					method: 'GET'
				}).then(function (response) {
					return response.json();
				}).then(function (json) {
					_this.models = json;
				}).catch(function (ex) {
					console.log('parsing failed', ex);
				});
	
				fetch('/services/all', {
					credentials: 'include',
					method: 'GET'
				}).then(function (response) {
					return response.json();
				}).then(function (json) {
					_this.services = json;
				}).catch(function (ex) {
					console.log('parsing failed', ex);
				});
	
				document.onkeydown = function (evt) {
					evt = evt || window.event;
					var isEscape = false;
					if ("key" in evt) {
						isEscape = evt.key == "Escape" || evt.key == "Esc";
					} else {
						isEscape = evt.keyCode == 27;
					}
	
					if (isEscape) {
						_this.hidOrderModal();
					}
				};
			},
			watch: {
				isShowOrderModal: function isShowOrderModal(val) {
					document.body.style.overflow = val ? 'hidden' : '';
				},
				services: function services(val) {
					this.changed_service = val[0];
					this.changed_service_index = 0;
				},
				models: function models(val) {
					this.changed_model = val[0];
					this.changed_model_index = 0;
				}
			},
			filters: {
				markdown: function markdown(value) {
					return _markdown2.markdown.toHTML(value);
				},
				age: function age(_age) {
					var aEndings = ['год', 'года', 'лет'];
					var sEnding = void 0,
					    i = void 0;
					_age = _age % 100;
					if (_age >= 11 && _age <= 19) {
						sEnding = aEndings[2];
					} else {
						i = _age % 10;
						switch (i) {
							case 1:
								sEnding = aEndings[0];break;
							case 2:
							case 3:
							case 4:
								sEnding = aEndings[1];break;
							default:
								sEnding = aEndings[2];
						}
					}
					return _age + ' ' + sEnding;
				}
			}
		});
	
		return app;
	};
	
	__webpack_require__(15);
	
	var _markdown2 = __webpack_require__(24);
	
	var _inputmask = __webpack_require__(1);
	
	var _inputmask2 = _interopRequireDefault(_inputmask);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	// super simple module for the most common nodejs use case.
	exports.markdown = __webpack_require__(25);
	exports.parse = exports.markdown.toHTML;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	// Released under MIT license
	// Copyright (c) 2009-2010 Dominic Baggott
	// Copyright (c) 2009-2010 Ash Berlin
	// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)
	
	/*jshint browser:true, devel:true */
	
	(function( expose ) {
	
	/**
	 *  class Markdown
	 *
	 *  Markdown processing in Javascript done right. We have very particular views
	 *  on what constitutes 'right' which include:
	 *
	 *  - produces well-formed HTML (this means that em and strong nesting is
	 *    important)
	 *
	 *  - has an intermediate representation to allow processing of parsed data (We
	 *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).
	 *
	 *  - is easily extensible to add new dialects without having to rewrite the
	 *    entire parsing mechanics
	 *
	 *  - has a good test suite
	 *
	 *  This implementation fulfills all of these (except that the test suite could
	 *  do with expanding to automatically run all the fixtures from other Markdown
	 *  implementations.)
	 *
	 *  ##### Intermediate Representation
	 *
	 *  *TODO* Talk about this :) Its JsonML, but document the node names we use.
	 *
	 *  [JsonML]: http://jsonml.org/ "JSON Markup Language"
	 **/
	var Markdown = expose.Markdown = function(dialect) {
	  switch (typeof dialect) {
	    case "undefined":
	      this.dialect = Markdown.dialects.Gruber;
	      break;
	    case "object":
	      this.dialect = dialect;
	      break;
	    default:
	      if ( dialect in Markdown.dialects ) {
	        this.dialect = Markdown.dialects[dialect];
	      }
	      else {
	        throw new Error("Unknown Markdown dialect '" + String(dialect) + "'");
	      }
	      break;
	  }
	  this.em_state = [];
	  this.strong_state = [];
	  this.debug_indent = "";
	};
	
	/**
	 *  parse( markdown, [dialect] ) -> JsonML
	 *  - markdown (String): markdown string to parse
	 *  - dialect (String | Dialect): the dialect to use, defaults to gruber
	 *
	 *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.
	 **/
	expose.parse = function( source, dialect ) {
	  // dialect will default if undefined
	  var md = new Markdown( dialect );
	  return md.toTree( source );
	};
	
	/**
	 *  toHTML( markdown, [dialect]  ) -> String
	 *  toHTML( md_tree ) -> String
	 *  - markdown (String): markdown string to parse
	 *  - md_tree (Markdown.JsonML): parsed markdown tree
	 *
	 *  Take markdown (either as a string or as a JsonML tree) and run it through
	 *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.
	 **/
	expose.toHTML = function toHTML( source , dialect , options ) {
	  var input = expose.toHTMLTree( source , dialect , options );
	
	  return expose.renderJsonML( input );
	};
	
	/**
	 *  toHTMLTree( markdown, [dialect] ) -> JsonML
	 *  toHTMLTree( md_tree ) -> JsonML
	 *  - markdown (String): markdown string to parse
	 *  - dialect (String | Dialect): the dialect to use, defaults to gruber
	 *  - md_tree (Markdown.JsonML): parsed markdown tree
	 *
	 *  Turn markdown into HTML, represented as a JsonML tree. If a string is given
	 *  to this function, it is first parsed into a markdown tree by calling
	 *  [[parse]].
	 **/
	expose.toHTMLTree = function toHTMLTree( input, dialect , options ) {
	  // convert string input to an MD tree
	  if ( typeof input ==="string" ) input = this.parse( input, dialect );
	
	  // Now convert the MD tree to an HTML tree
	
	  // remove references from the tree
	  var attrs = extract_attr( input ),
	      refs = {};
	
	  if ( attrs && attrs.references ) {
	    refs = attrs.references;
	  }
	
	  var html = convert_tree_to_html( input, refs , options );
	  merge_text_nodes( html );
	  return html;
	};
	
	// For Spidermonkey based engines
	function mk_block_toSource() {
	  return "Markdown.mk_block( " +
	          uneval(this.toString()) +
	          ", " +
	          uneval(this.trailing) +
	          ", " +
	          uneval(this.lineNumber) +
	          " )";
	}
	
	// node
	function mk_block_inspect() {
	  var util = __webpack_require__(26);
	  return "Markdown.mk_block( " +
	          util.inspect(this.toString()) +
	          ", " +
	          util.inspect(this.trailing) +
	          ", " +
	          util.inspect(this.lineNumber) +
	          " )";
	
	}
	
	var mk_block = Markdown.mk_block = function(block, trail, line) {
	  // Be helpful for default case in tests.
	  if ( arguments.length == 1 ) trail = "\n\n";
	
	  var s = new String(block);
	  s.trailing = trail;
	  // To make it clear its not just a string
	  s.inspect = mk_block_inspect;
	  s.toSource = mk_block_toSource;
	
	  if ( line != undefined )
	    s.lineNumber = line;
	
	  return s;
	};
	
	function count_lines( str ) {
	  var n = 0, i = -1;
	  while ( ( i = str.indexOf("\n", i + 1) ) !== -1 ) n++;
	  return n;
	}
	
	// Internal - split source into rough blocks
	Markdown.prototype.split_blocks = function splitBlocks( input, startLine ) {
	  input = input.replace(/(\r\n|\n|\r)/g, "\n");
	  // [\s\S] matches _anything_ (newline or space)
	  // [^] is equivalent but doesn't work in IEs.
	  var re = /([\s\S]+?)($|\n#|\n(?:\s*\n|$)+)/g,
	      blocks = [],
	      m;
	
	  var line_no = 1;
	
	  if ( ( m = /^(\s*\n)/.exec(input) ) != null ) {
	    // skip (but count) leading blank lines
	    line_no += count_lines( m[0] );
	    re.lastIndex = m[0].length;
	  }
	
	  while ( ( m = re.exec(input) ) !== null ) {
	    if (m[2] == "\n#") {
	      m[2] = "\n";
	      re.lastIndex--;
	    }
	    blocks.push( mk_block( m[1], m[2], line_no ) );
	    line_no += count_lines( m[0] );
	  }
	
	  return blocks;
	};
	
	/**
	 *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]
	 *  - block (String): the block to process
	 *  - next (Array): the following blocks
	 *
	 * Process `block` and return an array of JsonML nodes representing `block`.
	 *
	 * It does this by asking each block level function in the dialect to process
	 * the block until one can. Succesful handling is indicated by returning an
	 * array (with zero or more JsonML nodes), failure by a false value.
	 *
	 * Blocks handlers are responsible for calling [[Markdown#processInline]]
	 * themselves as appropriate.
	 *
	 * If the blocks were split incorrectly or adjacent blocks need collapsing you
	 * can adjust `next` in place using shift/splice etc.
	 *
	 * If any of this default behaviour is not right for the dialect, you can
	 * define a `__call__` method on the dialect that will get invoked to handle
	 * the block processing.
	 */
	Markdown.prototype.processBlock = function processBlock( block, next ) {
	  var cbs = this.dialect.block,
	      ord = cbs.__order__;
	
	  if ( "__call__" in cbs ) {
	    return cbs.__call__.call(this, block, next);
	  }
	
	  for ( var i = 0; i < ord.length; i++ ) {
	    //D:this.debug( "Testing", ord[i] );
	    var res = cbs[ ord[i] ].call( this, block, next );
	    if ( res ) {
	      //D:this.debug("  matched");
	      if ( !isArray(res) || ( res.length > 0 && !( isArray(res[0]) ) ) )
	        this.debug(ord[i], "didn't return a proper array");
	      //D:this.debug( "" );
	      return res;
	    }
	  }
	
	  // Uhoh! no match! Should we throw an error?
	  return [];
	};
	
	Markdown.prototype.processInline = function processInline( block ) {
	  return this.dialect.inline.__call__.call( this, String( block ) );
	};
	
	/**
	 *  Markdown#toTree( source ) -> JsonML
	 *  - source (String): markdown source to parse
	 *
	 *  Parse `source` into a JsonML tree representing the markdown document.
	 **/
	// custom_tree means set this.tree to `custom_tree` and restore old value on return
	Markdown.prototype.toTree = function toTree( source, custom_root ) {
	  var blocks = source instanceof Array ? source : this.split_blocks( source );
	
	  // Make tree a member variable so its easier to mess with in extensions
	  var old_tree = this.tree;
	  try {
	    this.tree = custom_root || this.tree || [ "markdown" ];
	
	    blocks:
	    while ( blocks.length ) {
	      var b = this.processBlock( blocks.shift(), blocks );
	
	      // Reference blocks and the like won't return any content
	      if ( !b.length ) continue blocks;
	
	      this.tree.push.apply( this.tree, b );
	    }
	    return this.tree;
	  }
	  finally {
	    if ( custom_root ) {
	      this.tree = old_tree;
	    }
	  }
	};
	
	// Noop by default
	Markdown.prototype.debug = function () {
	  var args = Array.prototype.slice.call( arguments);
	  args.unshift(this.debug_indent);
	  if ( typeof print !== "undefined" )
	      print.apply( print, args );
	  if ( typeof console !== "undefined" && typeof console.log !== "undefined" )
	      console.log.apply( null, args );
	}
	
	Markdown.prototype.loop_re_over_block = function( re, block, cb ) {
	  // Dont use /g regexps with this
	  var m,
	      b = block.valueOf();
	
	  while ( b.length && (m = re.exec(b) ) != null ) {
	    b = b.substr( m[0].length );
	    cb.call(this, m);
	  }
	  return b;
	};
	
	/**
	 * Markdown.dialects
	 *
	 * Namespace of built-in dialects.
	 **/
	Markdown.dialects = {};
	
	/**
	 * Markdown.dialects.Gruber
	 *
	 * The default dialect that follows the rules set out by John Gruber's
	 * markdown.pl as closely as possible. Well actually we follow the behaviour of
	 * that script which in some places is not exactly what the syntax web page
	 * says.
	 **/
	Markdown.dialects.Gruber = {
	  block: {
	    atxHeader: function atxHeader( block, next ) {
	      var m = block.match( /^(#{1,6})\s*(.*?)\s*#*\s*(?:\n|$)/ );
	
	      if ( !m ) return undefined;
	
	      var header = [ "header", { level: m[ 1 ].length } ];
	      Array.prototype.push.apply(header, this.processInline(m[ 2 ]));
	
	      if ( m[0].length < block.length )
	        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );
	
	      return [ header ];
	    },
	
	    setextHeader: function setextHeader( block, next ) {
	      var m = block.match( /^(.*)\n([-=])\2\2+(?:\n|$)/ );
	
	      if ( !m ) return undefined;
	
	      var level = ( m[ 2 ] === "=" ) ? 1 : 2;
	      var header = [ "header", { level : level }, m[ 1 ] ];
	
	      if ( m[0].length < block.length )
	        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );
	
	      return [ header ];
	    },
	
	    code: function code( block, next ) {
	      // |    Foo
	      // |bar
	      // should be a code block followed by a paragraph. Fun
	      //
	      // There might also be adjacent code block to merge.
	
	      var ret = [],
	          re = /^(?: {0,3}\t| {4})(.*)\n?/,
	          lines;
	
	      // 4 spaces + content
	      if ( !block.match( re ) ) return undefined;
	
	      block_search:
	      do {
	        // Now pull out the rest of the lines
	        var b = this.loop_re_over_block(
	                  re, block.valueOf(), function( m ) { ret.push( m[1] ); } );
	
	        if ( b.length ) {
	          // Case alluded to in first comment. push it back on as a new block
	          next.unshift( mk_block(b, block.trailing) );
	          break block_search;
	        }
	        else if ( next.length ) {
	          // Check the next block - it might be code too
	          if ( !next[0].match( re ) ) break block_search;
	
	          // Pull how how many blanks lines follow - minus two to account for .join
	          ret.push ( block.trailing.replace(/[^\n]/g, "").substring(2) );
	
	          block = next.shift();
	        }
	        else {
	          break block_search;
	        }
	      } while ( true );
	
	      return [ [ "code_block", ret.join("\n") ] ];
	    },
	
	    horizRule: function horizRule( block, next ) {
	      // this needs to find any hr in the block to handle abutting blocks
	      var m = block.match( /^(?:([\s\S]*?)\n)?[ \t]*([-_*])(?:[ \t]*\2){2,}[ \t]*(?:\n([\s\S]*))?$/ );
	
	      if ( !m ) {
	        return undefined;
	      }
	
	      var jsonml = [ [ "hr" ] ];
	
	      // if there's a leading abutting block, process it
	      if ( m[ 1 ] ) {
	        jsonml.unshift.apply( jsonml, this.processBlock( m[ 1 ], [] ) );
	      }
	
	      // if there's a trailing abutting block, stick it into next
	      if ( m[ 3 ] ) {
	        next.unshift( mk_block( m[ 3 ] ) );
	      }
	
	      return jsonml;
	    },
	
	    // There are two types of lists. Tight and loose. Tight lists have no whitespace
	    // between the items (and result in text just in the <li>) and loose lists,
	    // which have an empty line between list items, resulting in (one or more)
	    // paragraphs inside the <li>.
	    //
	    // There are all sorts weird edge cases about the original markdown.pl's
	    // handling of lists:
	    //
	    // * Nested lists are supposed to be indented by four chars per level. But
	    //   if they aren't, you can get a nested list by indenting by less than
	    //   four so long as the indent doesn't match an indent of an existing list
	    //   item in the 'nest stack'.
	    //
	    // * The type of the list (bullet or number) is controlled just by the
	    //    first item at the indent. Subsequent changes are ignored unless they
	    //    are for nested lists
	    //
	    lists: (function( ) {
	      // Use a closure to hide a few variables.
	      var any_list = "[*+-]|\\d+\\.",
	          bullet_list = /[*+-]/,
	          number_list = /\d+\./,
	          // Capture leading indent as it matters for determining nested lists.
	          is_list_re = new RegExp( "^( {0,3})(" + any_list + ")[ \t]+" ),
	          indent_re = "(?: {0,3}\\t| {4})";
	
	      // TODO: Cache this regexp for certain depths.
	      // Create a regexp suitable for matching an li for a given stack depth
	      function regex_for_depth( depth ) {
	
	        return new RegExp(
	          // m[1] = indent, m[2] = list_type
	          "(?:^(" + indent_re + "{0," + depth + "} {0,3})(" + any_list + ")\\s+)|" +
	          // m[3] = cont
	          "(^" + indent_re + "{0," + (depth-1) + "}[ ]{0,4})"
	        );
	      }
	      function expand_tab( input ) {
	        return input.replace( / {0,3}\t/g, "    " );
	      }
	
	      // Add inline content `inline` to `li`. inline comes from processInline
	      // so is an array of content
	      function add(li, loose, inline, nl) {
	        if ( loose ) {
	          li.push( [ "para" ].concat(inline) );
	          return;
	        }
	        // Hmmm, should this be any block level element or just paras?
	        var add_to = li[li.length -1] instanceof Array && li[li.length - 1][0] == "para"
	                   ? li[li.length -1]
	                   : li;
	
	        // If there is already some content in this list, add the new line in
	        if ( nl && li.length > 1 ) inline.unshift(nl);
	
	        for ( var i = 0; i < inline.length; i++ ) {
	          var what = inline[i],
	              is_str = typeof what == "string";
	          if ( is_str && add_to.length > 1 && typeof add_to[add_to.length-1] == "string" ) {
	            add_to[ add_to.length-1 ] += what;
	          }
	          else {
	            add_to.push( what );
	          }
	        }
	      }
	
	      // contained means have an indent greater than the current one. On
	      // *every* line in the block
	      function get_contained_blocks( depth, blocks ) {
	
	        var re = new RegExp( "^(" + indent_re + "{" + depth + "}.*?\\n?)*$" ),
	            replace = new RegExp("^" + indent_re + "{" + depth + "}", "gm"),
	            ret = [];
	
	        while ( blocks.length > 0 ) {
	          if ( re.exec( blocks[0] ) ) {
	            var b = blocks.shift(),
	                // Now remove that indent
	                x = b.replace( replace, "");
	
	            ret.push( mk_block( x, b.trailing, b.lineNumber ) );
	          }
	          else {
	            break;
	          }
	        }
	        return ret;
	      }
	
	      // passed to stack.forEach to turn list items up the stack into paras
	      function paragraphify(s, i, stack) {
	        var list = s.list;
	        var last_li = list[list.length-1];
	
	        if ( last_li[1] instanceof Array && last_li[1][0] == "para" ) {
	          return;
	        }
	        if ( i + 1 == stack.length ) {
	          // Last stack frame
	          // Keep the same array, but replace the contents
	          last_li.push( ["para"].concat( last_li.splice(1, last_li.length - 1) ) );
	        }
	        else {
	          var sublist = last_li.pop();
	          last_li.push( ["para"].concat( last_li.splice(1, last_li.length - 1) ), sublist );
	        }
	      }
	
	      // The matcher function
	      return function( block, next ) {
	        var m = block.match( is_list_re );
	        if ( !m ) return undefined;
	
	        function make_list( m ) {
	          var list = bullet_list.exec( m[2] )
	                   ? ["bulletlist"]
	                   : ["numberlist"];
	
	          stack.push( { list: list, indent: m[1] } );
	          return list;
	        }
	
	
	        var stack = [], // Stack of lists for nesting.
	            list = make_list( m ),
	            last_li,
	            loose = false,
	            ret = [ stack[0].list ],
	            i;
	
	        // Loop to search over block looking for inner block elements and loose lists
	        loose_search:
	        while ( true ) {
	          // Split into lines preserving new lines at end of line
	          var lines = block.split( /(?=\n)/ );
	
	          // We have to grab all lines for a li and call processInline on them
	          // once as there are some inline things that can span lines.
	          var li_accumulate = "";
	
	          // Loop over the lines in this block looking for tight lists.
	          tight_search:
	          for ( var line_no = 0; line_no < lines.length; line_no++ ) {
	            var nl = "",
	                l = lines[line_no].replace(/^\n/, function(n) { nl = n; return ""; });
	
	            // TODO: really should cache this
	            var line_re = regex_for_depth( stack.length );
	
	            m = l.match( line_re );
	            //print( "line:", uneval(l), "\nline match:", uneval(m) );
	
	            // We have a list item
	            if ( m[1] !== undefined ) {
	              // Process the previous list item, if any
	              if ( li_accumulate.length ) {
	                add( last_li, loose, this.processInline( li_accumulate ), nl );
	                // Loose mode will have been dealt with. Reset it
	                loose = false;
	                li_accumulate = "";
	              }
	
	              m[1] = expand_tab( m[1] );
	              var wanted_depth = Math.floor(m[1].length/4)+1;
	              //print( "want:", wanted_depth, "stack:", stack.length);
	              if ( wanted_depth > stack.length ) {
	                // Deep enough for a nested list outright
	                //print ( "new nested list" );
	                list = make_list( m );
	                last_li.push( list );
	                last_li = list[1] = [ "listitem" ];
	              }
	              else {
	                // We aren't deep enough to be strictly a new level. This is
	                // where Md.pl goes nuts. If the indent matches a level in the
	                // stack, put it there, else put it one deeper then the
	                // wanted_depth deserves.
	                var found = false;
	                for ( i = 0; i < stack.length; i++ ) {
	                  if ( stack[ i ].indent != m[1] ) continue;
	                  list = stack[ i ].list;
	                  stack.splice( i+1, stack.length - (i+1) );
	                  found = true;
	                  break;
	                }
	
	                if (!found) {
	                  //print("not found. l:", uneval(l));
	                  wanted_depth++;
	                  if ( wanted_depth <= stack.length ) {
	                    stack.splice(wanted_depth, stack.length - wanted_depth);
	                    //print("Desired depth now", wanted_depth, "stack:", stack.length);
	                    list = stack[wanted_depth-1].list;
	                    //print("list:", uneval(list) );
	                  }
	                  else {
	                    //print ("made new stack for messy indent");
	                    list = make_list(m);
	                    last_li.push(list);
	                  }
	                }
	
	                //print( uneval(list), "last", list === stack[stack.length-1].list );
	                last_li = [ "listitem" ];
	                list.push(last_li);
	              } // end depth of shenegains
	              nl = "";
	            }
	
	            // Add content
	            if ( l.length > m[0].length ) {
	              li_accumulate += nl + l.substr( m[0].length );
	            }
	          } // tight_search
	
	          if ( li_accumulate.length ) {
	            add( last_li, loose, this.processInline( li_accumulate ), nl );
	            // Loose mode will have been dealt with. Reset it
	            loose = false;
	            li_accumulate = "";
	          }
	
	          // Look at the next block - we might have a loose list. Or an extra
	          // paragraph for the current li
	          var contained = get_contained_blocks( stack.length, next );
	
	          // Deal with code blocks or properly nested lists
	          if ( contained.length > 0 ) {
	            // Make sure all listitems up the stack are paragraphs
	            forEach( stack, paragraphify, this);
	
	            last_li.push.apply( last_li, this.toTree( contained, [] ) );
	          }
	
	          var next_block = next[0] && next[0].valueOf() || "";
	
	          if ( next_block.match(is_list_re) || next_block.match( /^ / ) ) {
	            block = next.shift();
	
	            // Check for an HR following a list: features/lists/hr_abutting
	            var hr = this.dialect.block.horizRule( block, next );
	
	            if ( hr ) {
	              ret.push.apply(ret, hr);
	              break;
	            }
	
	            // Make sure all listitems up the stack are paragraphs
	            forEach( stack, paragraphify, this);
	
	            loose = true;
	            continue loose_search;
	          }
	          break;
	        } // loose_search
	
	        return ret;
	      };
	    })(),
	
	    blockquote: function blockquote( block, next ) {
	      if ( !block.match( /^>/m ) )
	        return undefined;
	
	      var jsonml = [];
	
	      // separate out the leading abutting block, if any. I.e. in this case:
	      //
	      //  a
	      //  > b
	      //
	      if ( block[ 0 ] != ">" ) {
	        var lines = block.split( /\n/ ),
	            prev = [],
	            line_no = block.lineNumber;
	
	        // keep shifting lines until you find a crotchet
	        while ( lines.length && lines[ 0 ][ 0 ] != ">" ) {
	            prev.push( lines.shift() );
	            line_no++;
	        }
	
	        var abutting = mk_block( prev.join( "\n" ), "\n", block.lineNumber );
	        jsonml.push.apply( jsonml, this.processBlock( abutting, [] ) );
	        // reassemble new block of just block quotes!
	        block = mk_block( lines.join( "\n" ), block.trailing, line_no );
	      }
	
	
	      // if the next block is also a blockquote merge it in
	      while ( next.length && next[ 0 ][ 0 ] == ">" ) {
	        var b = next.shift();
	        block = mk_block( block + block.trailing + b, b.trailing, block.lineNumber );
	      }
	
	      // Strip off the leading "> " and re-process as a block.
	      var input = block.replace( /^> ?/gm, "" ),
	          old_tree = this.tree,
	          processedBlock = this.toTree( input, [ "blockquote" ] ),
	          attr = extract_attr( processedBlock );
	
	      // If any link references were found get rid of them
	      if ( attr && attr.references ) {
	        delete attr.references;
	        // And then remove the attribute object if it's empty
	        if ( isEmpty( attr ) ) {
	          processedBlock.splice( 1, 1 );
	        }
	      }
	
	      jsonml.push( processedBlock );
	      return jsonml;
	    },
	
	    referenceDefn: function referenceDefn( block, next) {
	      var re = /^\s*\[(.*?)\]:\s*(\S+)(?:\s+(?:(['"])(.*?)\3|\((.*?)\)))?\n?/;
	      // interesting matches are [ , ref_id, url, , title, title ]
	
	      if ( !block.match(re) )
	        return undefined;
	
	      // make an attribute node if it doesn't exist
	      if ( !extract_attr( this.tree ) ) {
	        this.tree.splice( 1, 0, {} );
	      }
	
	      var attrs = extract_attr( this.tree );
	
	      // make a references hash if it doesn't exist
	      if ( attrs.references === undefined ) {
	        attrs.references = {};
	      }
	
	      var b = this.loop_re_over_block(re, block, function( m ) {
	
	        if ( m[2] && m[2][0] == "<" && m[2][m[2].length-1] == ">" )
	          m[2] = m[2].substring( 1, m[2].length - 1 );
	
	        var ref = attrs.references[ m[1].toLowerCase() ] = {
	          href: m[2]
	        };
	
	        if ( m[4] !== undefined )
	          ref.title = m[4];
	        else if ( m[5] !== undefined )
	          ref.title = m[5];
	
	      } );
	
	      if ( b.length )
	        next.unshift( mk_block( b, block.trailing ) );
	
	      return [];
	    },
	
	    para: function para( block, next ) {
	      // everything's a para!
	      return [ ["para"].concat( this.processInline( block ) ) ];
	    }
	  }
	};
	
	Markdown.dialects.Gruber.inline = {
	
	    __oneElement__: function oneElement( text, patterns_or_re, previous_nodes ) {
	      var m,
	          res,
	          lastIndex = 0;
	
	      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;
	      var re = new RegExp( "([\\s\\S]*?)(" + (patterns_or_re.source || patterns_or_re) + ")" );
	
	      m = re.exec( text );
	      if (!m) {
	        // Just boring text
	        return [ text.length, text ];
	      }
	      else if ( m[1] ) {
	        // Some un-interesting text matched. Return that first
	        return [ m[1].length, m[1] ];
	      }
	
	      var res;
	      if ( m[2] in this.dialect.inline ) {
	        res = this.dialect.inline[ m[2] ].call(
	                  this,
	                  text.substr( m.index ), m, previous_nodes || [] );
	      }
	      // Default for now to make dev easier. just slurp special and output it.
	      res = res || [ m[2].length, m[2] ];
	      return res;
	    },
	
	    __call__: function inline( text, patterns ) {
	
	      var out = [],
	          res;
	
	      function add(x) {
	        //D:self.debug("  adding output", uneval(x));
	        if ( typeof x == "string" && typeof out[out.length-1] == "string" )
	          out[ out.length-1 ] += x;
	        else
	          out.push(x);
	      }
	
	      while ( text.length > 0 ) {
	        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out );
	        text = text.substr( res.shift() );
	        forEach(res, add )
	      }
	
	      return out;
	    },
	
	    // These characters are intersting elsewhere, so have rules for them so that
	    // chunks of plain text blocks don't include them
	    "]": function () {},
	    "}": function () {},
	
	    __escape__ : /^\\[\\`\*_{}\[\]()#\+.!\-]/,
	
	    "\\": function escaped( text ) {
	      // [ length of input processed, node/children to add... ]
	      // Only esacape: \ ` * _ { } [ ] ( ) # * + - . !
	      if ( this.dialect.inline.__escape__.exec( text ) )
	        return [ 2, text.charAt( 1 ) ];
	      else
	        // Not an esacpe
	        return [ 1, "\\" ];
	    },
	
	    "![": function image( text ) {
	
	      // Unlike images, alt text is plain text only. no other elements are
	      // allowed in there
	
	      // ![Alt text](/path/to/img.jpg "Optional title")
	      //      1          2            3       4         <--- captures
	      var m = text.match( /^!\[(.*?)\][ \t]*\([ \t]*([^")]*?)(?:[ \t]+(["'])(.*?)\3)?[ \t]*\)/ );
	
	      if ( m ) {
	        if ( m[2] && m[2][0] == "<" && m[2][m[2].length-1] == ">" )
	          m[2] = m[2].substring( 1, m[2].length - 1 );
	
	        m[2] = this.dialect.inline.__call__.call( this, m[2], /\\/ )[0];
	
	        var attrs = { alt: m[1], href: m[2] || "" };
	        if ( m[4] !== undefined)
	          attrs.title = m[4];
	
	        return [ m[0].length, [ "img", attrs ] ];
	      }
	
	      // ![Alt text][id]
	      m = text.match( /^!\[(.*?)\][ \t]*\[(.*?)\]/ );
	
	      if ( m ) {
	        // We can't check if the reference is known here as it likely wont be
	        // found till after. Check it in md tree->hmtl tree conversion
	        return [ m[0].length, [ "img_ref", { alt: m[1], ref: m[2].toLowerCase(), original: m[0] } ] ];
	      }
	
	      // Just consume the '!['
	      return [ 2, "![" ];
	    },
	
	    "[": function link( text ) {
	
	      var orig = String(text);
	      // Inline content is possible inside `link text`
	      var res = Markdown.DialectHelpers.inline_until_char.call( this, text.substr(1), "]" );
	
	      // No closing ']' found. Just consume the [
	      if ( !res ) return [ 1, "[" ];
	
	      var consumed = 1 + res[ 0 ],
	          children = res[ 1 ],
	          link,
	          attrs;
	
	      // At this point the first [...] has been parsed. See what follows to find
	      // out which kind of link we are (reference or direct url)
	      text = text.substr( consumed );
	
	      // [link text](/path/to/img.jpg "Optional title")
	      //                 1            2       3         <--- captures
	      // This will capture up to the last paren in the block. We then pull
	      // back based on if there a matching ones in the url
	      //    ([here](/url/(test))
	      // The parens have to be balanced
	      var m = text.match( /^\s*\([ \t]*([^"']*)(?:[ \t]+(["'])(.*?)\2)?[ \t]*\)/ );
	      if ( m ) {
	        var url = m[1];
	        consumed += m[0].length;
	
	        if ( url && url[0] == "<" && url[url.length-1] == ">" )
	          url = url.substring( 1, url.length - 1 );
	
	        // If there is a title we don't have to worry about parens in the url
	        if ( !m[3] ) {
	          var open_parens = 1; // One open that isn't in the capture
	          for ( var len = 0; len < url.length; len++ ) {
	            switch ( url[len] ) {
	            case "(":
	              open_parens++;
	              break;
	            case ")":
	              if ( --open_parens == 0) {
	                consumed -= url.length - len;
	                url = url.substring(0, len);
	              }
	              break;
	            }
	          }
	        }
	
	        // Process escapes only
	        url = this.dialect.inline.__call__.call( this, url, /\\/ )[0];
	
	        attrs = { href: url || "" };
	        if ( m[3] !== undefined)
	          attrs.title = m[3];
	
	        link = [ "link", attrs ].concat( children );
	        return [ consumed, link ];
	      }
	
	      // [Alt text][id]
	      // [Alt text] [id]
	      m = text.match( /^\s*\[(.*?)\]/ );
	
	      if ( m ) {
	
	        consumed += m[ 0 ].length;
	
	        // [links][] uses links as its reference
	        attrs = { ref: ( m[ 1 ] || String(children) ).toLowerCase(),  original: orig.substr( 0, consumed ) };
	
	        link = [ "link_ref", attrs ].concat( children );
	
	        // We can't check if the reference is known here as it likely wont be
	        // found till after. Check it in md tree->hmtl tree conversion.
	        // Store the original so that conversion can revert if the ref isn't found.
	        return [ consumed, link ];
	      }
	
	      // [id]
	      // Only if id is plain (no formatting.)
	      if ( children.length == 1 && typeof children[0] == "string" ) {
	
	        attrs = { ref: children[0].toLowerCase(),  original: orig.substr( 0, consumed ) };
	        link = [ "link_ref", attrs, children[0] ];
	        return [ consumed, link ];
	      }
	
	      // Just consume the "["
	      return [ 1, "[" ];
	    },
	
	
	    "<": function autoLink( text ) {
	      var m;
	
	      if ( ( m = text.match( /^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\.[a-zA-Z]+))>/ ) ) != null ) {
	        if ( m[3] ) {
	          return [ m[0].length, [ "link", { href: "mailto:" + m[3] }, m[3] ] ];
	
	        }
	        else if ( m[2] == "mailto" ) {
	          return [ m[0].length, [ "link", { href: m[1] }, m[1].substr("mailto:".length ) ] ];
	        }
	        else
	          return [ m[0].length, [ "link", { href: m[1] }, m[1] ] ];
	      }
	
	      return [ 1, "<" ];
	    },
	
	    "`": function inlineCode( text ) {
	      // Inline code block. as many backticks as you like to start it
	      // Always skip over the opening ticks.
	      var m = text.match( /(`+)(([\s\S]*?)\1)/ );
	
	      if ( m && m[2] )
	        return [ m[1].length + m[2].length, [ "inlinecode", m[3] ] ];
	      else {
	        // TODO: No matching end code found - warn!
	        return [ 1, "`" ];
	      }
	    },
	
	    "  \n": function lineBreak( text ) {
	      return [ 3, [ "linebreak" ] ];
	    }
	
	};
	
	// Meta Helper/generator method for em and strong handling
	function strong_em( tag, md ) {
	
	  var state_slot = tag + "_state",
	      other_slot = tag == "strong" ? "em_state" : "strong_state";
	
	  function CloseTag(len) {
	    this.len_after = len;
	    this.name = "close_" + md;
	  }
	
	  return function ( text, orig_match ) {
	
	    if ( this[state_slot][0] == md ) {
	      // Most recent em is of this type
	      //D:this.debug("closing", md);
	      this[state_slot].shift();
	
	      // "Consume" everything to go back to the recrusion in the else-block below
	      return[ text.length, new CloseTag(text.length-md.length) ];
	    }
	    else {
	      // Store a clone of the em/strong states
	      var other = this[other_slot].slice(),
	          state = this[state_slot].slice();
	
	      this[state_slot].unshift(md);
	
	      //D:this.debug_indent += "  ";
	
	      // Recurse
	      var res = this.processInline( text.substr( md.length ) );
	      //D:this.debug_indent = this.debug_indent.substr(2);
	
	      var last = res[res.length - 1];
	
	      //D:this.debug("processInline from", tag + ": ", uneval( res ) );
	
	      var check = this[state_slot].shift();
	      if ( last instanceof CloseTag ) {
	        res.pop();
	        // We matched! Huzzah.
	        var consumed = text.length - last.len_after;
	        return [ consumed, [ tag ].concat(res) ];
	      }
	      else {
	        // Restore the state of the other kind. We might have mistakenly closed it.
	        this[other_slot] = other;
	        this[state_slot] = state;
	
	        // We can't reuse the processed result as it could have wrong parsing contexts in it.
	        return [ md.length, md ];
	      }
	    }
	  }; // End returned function
	}
	
	Markdown.dialects.Gruber.inline["**"] = strong_em("strong", "**");
	Markdown.dialects.Gruber.inline["__"] = strong_em("strong", "__");
	Markdown.dialects.Gruber.inline["*"]  = strong_em("em", "*");
	Markdown.dialects.Gruber.inline["_"]  = strong_em("em", "_");
	
	
	// Build default order from insertion order.
	Markdown.buildBlockOrder = function(d) {
	  var ord = [];
	  for ( var i in d ) {
	    if ( i == "__order__" || i == "__call__" ) continue;
	    ord.push( i );
	  }
	  d.__order__ = ord;
	};
	
	// Build patterns for inline matcher
	Markdown.buildInlinePatterns = function(d) {
	  var patterns = [];
	
	  for ( var i in d ) {
	    // __foo__ is reserved and not a pattern
	    if ( i.match( /^__.*__$/) ) continue;
	    var l = i.replace( /([\\.*+?|()\[\]{}])/g, "\\$1" )
	             .replace( /\n/, "\\n" );
	    patterns.push( i.length == 1 ? l : "(?:" + l + ")" );
	  }
	
	  patterns = patterns.join("|");
	  d.__patterns__ = patterns;
	  //print("patterns:", uneval( patterns ) );
	
	  var fn = d.__call__;
	  d.__call__ = function(text, pattern) {
	    if ( pattern != undefined ) {
	      return fn.call(this, text, pattern);
	    }
	    else
	    {
	      return fn.call(this, text, patterns);
	    }
	  };
	};
	
	Markdown.DialectHelpers = {};
	Markdown.DialectHelpers.inline_until_char = function( text, want ) {
	  var consumed = 0,
	      nodes = [];
	
	  while ( true ) {
	    if ( text.charAt( consumed ) == want ) {
	      // Found the character we were looking for
	      consumed++;
	      return [ consumed, nodes ];
	    }
	
	    if ( consumed >= text.length ) {
	      // No closing char found. Abort.
	      return null;
	    }
	
	    var res = this.dialect.inline.__oneElement__.call(this, text.substr( consumed ) );
	    consumed += res[ 0 ];
	    // Add any returned nodes.
	    nodes.push.apply( nodes, res.slice( 1 ) );
	  }
	}
	
	// Helper function to make sub-classing a dialect easier
	Markdown.subclassDialect = function( d ) {
	  function Block() {}
	  Block.prototype = d.block;
	  function Inline() {}
	  Inline.prototype = d.inline;
	
	  return { block: new Block(), inline: new Inline() };
	};
	
	Markdown.buildBlockOrder ( Markdown.dialects.Gruber.block );
	Markdown.buildInlinePatterns( Markdown.dialects.Gruber.inline );
	
	Markdown.dialects.Maruku = Markdown.subclassDialect( Markdown.dialects.Gruber );
	
	Markdown.dialects.Maruku.processMetaHash = function processMetaHash( meta_string ) {
	  var meta = split_meta_hash( meta_string ),
	      attr = {};
	
	  for ( var i = 0; i < meta.length; ++i ) {
	    // id: #foo
	    if ( /^#/.test( meta[ i ] ) ) {
	      attr.id = meta[ i ].substring( 1 );
	    }
	    // class: .foo
	    else if ( /^\./.test( meta[ i ] ) ) {
	      // if class already exists, append the new one
	      if ( attr["class"] ) {
	        attr["class"] = attr["class"] + meta[ i ].replace( /./, " " );
	      }
	      else {
	        attr["class"] = meta[ i ].substring( 1 );
	      }
	    }
	    // attribute: foo=bar
	    else if ( /\=/.test( meta[ i ] ) ) {
	      var s = meta[ i ].split( /\=/ );
	      attr[ s[ 0 ] ] = s[ 1 ];
	    }
	  }
	
	  return attr;
	}
	
	function split_meta_hash( meta_string ) {
	  var meta = meta_string.split( "" ),
	      parts = [ "" ],
	      in_quotes = false;
	
	  while ( meta.length ) {
	    var letter = meta.shift();
	    switch ( letter ) {
	      case " " :
	        // if we're in a quoted section, keep it
	        if ( in_quotes ) {
	          parts[ parts.length - 1 ] += letter;
	        }
	        // otherwise make a new part
	        else {
	          parts.push( "" );
	        }
	        break;
	      case "'" :
	      case '"' :
	        // reverse the quotes and move straight on
	        in_quotes = !in_quotes;
	        break;
	      case "\\" :
	        // shift off the next letter to be used straight away.
	        // it was escaped so we'll keep it whatever it is
	        letter = meta.shift();
	      default :
	        parts[ parts.length - 1 ] += letter;
	        break;
	    }
	  }
	
	  return parts;
	}
	
	Markdown.dialects.Maruku.block.document_meta = function document_meta( block, next ) {
	  // we're only interested in the first block
	  if ( block.lineNumber > 1 ) return undefined;
	
	  // document_meta blocks consist of one or more lines of `Key: Value\n`
	  if ( ! block.match( /^(?:\w+:.*\n)*\w+:.*$/ ) ) return undefined;
	
	  // make an attribute node if it doesn't exist
	  if ( !extract_attr( this.tree ) ) {
	    this.tree.splice( 1, 0, {} );
	  }
	
	  var pairs = block.split( /\n/ );
	  for ( p in pairs ) {
	    var m = pairs[ p ].match( /(\w+):\s*(.*)$/ ),
	        key = m[ 1 ].toLowerCase(),
	        value = m[ 2 ];
	
	    this.tree[ 1 ][ key ] = value;
	  }
	
	  // document_meta produces no content!
	  return [];
	};
	
	Markdown.dialects.Maruku.block.block_meta = function block_meta( block, next ) {
	  // check if the last line of the block is an meta hash
	  var m = block.match( /(^|\n) {0,3}\{:\s*((?:\\\}|[^\}])*)\s*\}$/ );
	  if ( !m ) return undefined;
	
	  // process the meta hash
	  var attr = this.dialect.processMetaHash( m[ 2 ] );
	
	  var hash;
	
	  // if we matched ^ then we need to apply meta to the previous block
	  if ( m[ 1 ] === "" ) {
	    var node = this.tree[ this.tree.length - 1 ];
	    hash = extract_attr( node );
	
	    // if the node is a string (rather than JsonML), bail
	    if ( typeof node === "string" ) return undefined;
	
	    // create the attribute hash if it doesn't exist
	    if ( !hash ) {
	      hash = {};
	      node.splice( 1, 0, hash );
	    }
	
	    // add the attributes in
	    for ( a in attr ) {
	      hash[ a ] = attr[ a ];
	    }
	
	    // return nothing so the meta hash is removed
	    return [];
	  }
	
	  // pull the meta hash off the block and process what's left
	  var b = block.replace( /\n.*$/, "" ),
	      result = this.processBlock( b, [] );
	
	  // get or make the attributes hash
	  hash = extract_attr( result[ 0 ] );
	  if ( !hash ) {
	    hash = {};
	    result[ 0 ].splice( 1, 0, hash );
	  }
	
	  // attach the attributes to the block
	  for ( a in attr ) {
	    hash[ a ] = attr[ a ];
	  }
	
	  return result;
	};
	
	Markdown.dialects.Maruku.block.definition_list = function definition_list( block, next ) {
	  // one or more terms followed by one or more definitions, in a single block
	  var tight = /^((?:[^\s:].*\n)+):\s+([\s\S]+)$/,
	      list = [ "dl" ],
	      i, m;
	
	  // see if we're dealing with a tight or loose block
	  if ( ( m = block.match( tight ) ) ) {
	    // pull subsequent tight DL blocks out of `next`
	    var blocks = [ block ];
	    while ( next.length && tight.exec( next[ 0 ] ) ) {
	      blocks.push( next.shift() );
	    }
	
	    for ( var b = 0; b < blocks.length; ++b ) {
	      var m = blocks[ b ].match( tight ),
	          terms = m[ 1 ].replace( /\n$/, "" ).split( /\n/ ),
	          defns = m[ 2 ].split( /\n:\s+/ );
	
	      // print( uneval( m ) );
	
	      for ( i = 0; i < terms.length; ++i ) {
	        list.push( [ "dt", terms[ i ] ] );
	      }
	
	      for ( i = 0; i < defns.length; ++i ) {
	        // run inline processing over the definition
	        list.push( [ "dd" ].concat( this.processInline( defns[ i ].replace( /(\n)\s+/, "$1" ) ) ) );
	      }
	    }
	  }
	  else {
	    return undefined;
	  }
	
	  return [ list ];
	};
	
	// splits on unescaped instances of @ch. If @ch is not a character the result
	// can be unpredictable
	
	Markdown.dialects.Maruku.block.table = function table (block, next) {
	
	    var _split_on_unescaped = function(s, ch) {
	        ch = ch || '\\s';
	        if (ch.match(/^[\\|\[\]{}?*.+^$]$/)) { ch = '\\' + ch; }
	        var res = [ ],
	            r = new RegExp('^((?:\\\\.|[^\\\\' + ch + '])*)' + ch + '(.*)'),
	            m;
	        while(m = s.match(r)) {
	            res.push(m[1]);
	            s = m[2];
	        }
	        res.push(s);
	        return res;
	    }
	
	    var leading_pipe = /^ {0,3}\|(.+)\n {0,3}\|\s*([\-:]+[\-| :]*)\n((?:\s*\|.*(?:\n|$))*)(?=\n|$)/,
	        // find at least an unescaped pipe in each line
	        no_leading_pipe = /^ {0,3}(\S(?:\\.|[^\\|])*\|.*)\n {0,3}([\-:]+\s*\|[\-| :]*)\n((?:(?:\\.|[^\\|])*\|.*(?:\n|$))*)(?=\n|$)/,
	        i, m;
	    if (m = block.match(leading_pipe)) {
	        // remove leading pipes in contents
	        // (header and horizontal rule already have the leading pipe left out)
	        m[3] = m[3].replace(/^\s*\|/gm, '');
	    } else if (! ( m = block.match(no_leading_pipe))) {
	        return undefined;
	    }
	
	    var table = [ "table", [ "thead", [ "tr" ] ], [ "tbody" ] ];
	
	    // remove trailing pipes, then split on pipes
	    // (no escaped pipes are allowed in horizontal rule)
	    m[2] = m[2].replace(/\|\s*$/, '').split('|');
	
	    // process alignment
	    var html_attrs = [ ];
	    forEach (m[2], function (s) {
	        if (s.match(/^\s*-+:\s*$/))       html_attrs.push({align: "right"});
	        else if (s.match(/^\s*:-+\s*$/))  html_attrs.push({align: "left"});
	        else if (s.match(/^\s*:-+:\s*$/)) html_attrs.push({align: "center"});
	        else                              html_attrs.push({});
	    });
	
	    // now for the header, avoid escaped pipes
	    m[1] = _split_on_unescaped(m[1].replace(/\|\s*$/, ''), '|');
	    for (i = 0; i < m[1].length; i++) {
	        table[1][1].push(['th', html_attrs[i] || {}].concat(
	            this.processInline(m[1][i].trim())));
	    }
	
	    // now for body contents
	    forEach (m[3].replace(/\|\s*$/mg, '').split('\n'), function (row) {
	        var html_row = ['tr'];
	        row = _split_on_unescaped(row, '|');
	        for (i = 0; i < row.length; i++) {
	            html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));
	        }
	        table[2].push(html_row);
	    }, this);
	
	    return [table];
	}
	
	Markdown.dialects.Maruku.inline[ "{:" ] = function inline_meta( text, matches, out ) {
	  if ( !out.length ) {
	    return [ 2, "{:" ];
	  }
	
	  // get the preceeding element
	  var before = out[ out.length - 1 ];
	
	  if ( typeof before === "string" ) {
	    return [ 2, "{:" ];
	  }
	
	  // match a meta hash
	  var m = text.match( /^\{:\s*((?:\\\}|[^\}])*)\s*\}/ );
	
	  // no match, false alarm
	  if ( !m ) {
	    return [ 2, "{:" ];
	  }
	
	  // attach the attributes to the preceeding element
	  var meta = this.dialect.processMetaHash( m[ 1 ] ),
	      attr = extract_attr( before );
	
	  if ( !attr ) {
	    attr = {};
	    before.splice( 1, 0, attr );
	  }
	
	  for ( var k in meta ) {
	    attr[ k ] = meta[ k ];
	  }
	
	  // cut out the string and replace it with nothing
	  return [ m[ 0 ].length, "" ];
	};
	
	Markdown.dialects.Maruku.inline.__escape__ = /^\\[\\`\*_{}\[\]()#\+.!\-|:]/;
	
	Markdown.buildBlockOrder ( Markdown.dialects.Maruku.block );
	Markdown.buildInlinePatterns( Markdown.dialects.Maruku.inline );
	
	var isArray = Array.isArray || function(obj) {
	  return Object.prototype.toString.call(obj) == "[object Array]";
	};
	
	var forEach;
	// Don't mess with Array.prototype. Its not friendly
	if ( Array.prototype.forEach ) {
	  forEach = function( arr, cb, thisp ) {
	    return arr.forEach( cb, thisp );
	  };
	}
	else {
	  forEach = function(arr, cb, thisp) {
	    for (var i = 0; i < arr.length; i++) {
	      cb.call(thisp || arr, arr[i], i, arr);
	    }
	  }
	}
	
	var isEmpty = function( obj ) {
	  for ( var key in obj ) {
	    if ( hasOwnProperty.call( obj, key ) ) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	function extract_attr( jsonml ) {
	  return isArray(jsonml)
	      && jsonml.length > 1
	      && typeof jsonml[ 1 ] === "object"
	      && !( isArray(jsonml[ 1 ]) )
	      ? jsonml[ 1 ]
	      : undefined;
	}
	
	
	
	/**
	 *  renderJsonML( jsonml[, options] ) -> String
	 *  - jsonml (Array): JsonML array to render to XML
	 *  - options (Object): options
	 *
	 *  Converts the given JsonML into well-formed XML.
	 *
	 *  The options currently understood are:
	 *
	 *  - root (Boolean): wether or not the root node should be included in the
	 *    output, or just its children. The default `false` is to not include the
	 *    root itself.
	 */
	expose.renderJsonML = function( jsonml, options ) {
	  options = options || {};
	  // include the root element in the rendered output?
	  options.root = options.root || false;
	
	  var content = [];
	
	  if ( options.root ) {
	    content.push( render_tree( jsonml ) );
	  }
	  else {
	    jsonml.shift(); // get rid of the tag
	    if ( jsonml.length && typeof jsonml[ 0 ] === "object" && !( jsonml[ 0 ] instanceof Array ) ) {
	      jsonml.shift(); // get rid of the attributes
	    }
	
	    while ( jsonml.length ) {
	      content.push( render_tree( jsonml.shift() ) );
	    }
	  }
	
	  return content.join( "\n\n" );
	};
	
	function escapeHTML( text ) {
	  return text.replace( /&/g, "&amp;" )
	             .replace( /</g, "&lt;" )
	             .replace( />/g, "&gt;" )
	             .replace( /"/g, "&quot;" )
	             .replace( /'/g, "&#39;" );
	}
	
	function render_tree( jsonml ) {
	  // basic case
	  if ( typeof jsonml === "string" ) {
	    return escapeHTML( jsonml );
	  }
	
	  var tag = jsonml.shift(),
	      attributes = {},
	      content = [];
	
	  if ( jsonml.length && typeof jsonml[ 0 ] === "object" && !( jsonml[ 0 ] instanceof Array ) ) {
	    attributes = jsonml.shift();
	  }
	
	  while ( jsonml.length ) {
	    content.push( render_tree( jsonml.shift() ) );
	  }
	
	  var tag_attrs = "";
	  for ( var a in attributes ) {
	    tag_attrs += " " + a + '="' + escapeHTML( attributes[ a ] ) + '"';
	  }
	
	  // be careful about adding whitespace here for inline elements
	  if ( tag == "img" || tag == "br" || tag == "hr" ) {
	    return "<"+ tag + tag_attrs + "/>";
	  }
	  else {
	    return "<"+ tag + tag_attrs + ">" + content.join( "" ) + "</" + tag + ">";
	  }
	}
	
	function convert_tree_to_html( tree, references, options ) {
	  var i;
	  options = options || {};
	
	  // shallow clone
	  var jsonml = tree.slice( 0 );
	
	  if ( typeof options.preprocessTreeNode === "function" ) {
	      jsonml = options.preprocessTreeNode(jsonml, references);
	  }
	
	  // Clone attributes if they exist
	  var attrs = extract_attr( jsonml );
	  if ( attrs ) {
	    jsonml[ 1 ] = {};
	    for ( i in attrs ) {
	      jsonml[ 1 ][ i ] = attrs[ i ];
	    }
	    attrs = jsonml[ 1 ];
	  }
	
	  // basic case
	  if ( typeof jsonml === "string" ) {
	    return jsonml;
	  }
	
	  // convert this node
	  switch ( jsonml[ 0 ] ) {
	    case "header":
	      jsonml[ 0 ] = "h" + jsonml[ 1 ].level;
	      delete jsonml[ 1 ].level;
	      break;
	    case "bulletlist":
	      jsonml[ 0 ] = "ul";
	      break;
	    case "numberlist":
	      jsonml[ 0 ] = "ol";
	      break;
	    case "listitem":
	      jsonml[ 0 ] = "li";
	      break;
	    case "para":
	      jsonml[ 0 ] = "p";
	      break;
	    case "markdown":
	      jsonml[ 0 ] = "html";
	      if ( attrs ) delete attrs.references;
	      break;
	    case "code_block":
	      jsonml[ 0 ] = "pre";
	      i = attrs ? 2 : 1;
	      var code = [ "code" ];
	      code.push.apply( code, jsonml.splice( i, jsonml.length - i ) );
	      jsonml[ i ] = code;
	      break;
	    case "inlinecode":
	      jsonml[ 0 ] = "code";
	      break;
	    case "img":
	      jsonml[ 1 ].src = jsonml[ 1 ].href;
	      delete jsonml[ 1 ].href;
	      break;
	    case "linebreak":
	      jsonml[ 0 ] = "br";
	    break;
	    case "link":
	      jsonml[ 0 ] = "a";
	      break;
	    case "link_ref":
	      jsonml[ 0 ] = "a";
	
	      // grab this ref and clean up the attribute node
	      var ref = references[ attrs.ref ];
	
	      // if the reference exists, make the link
	      if ( ref ) {
	        delete attrs.ref;
	
	        // add in the href and title, if present
	        attrs.href = ref.href;
	        if ( ref.title ) {
	          attrs.title = ref.title;
	        }
	
	        // get rid of the unneeded original text
	        delete attrs.original;
	      }
	      // the reference doesn't exist, so revert to plain text
	      else {
	        return attrs.original;
	      }
	      break;
	    case "img_ref":
	      jsonml[ 0 ] = "img";
	
	      // grab this ref and clean up the attribute node
	      var ref = references[ attrs.ref ];
	
	      // if the reference exists, make the link
	      if ( ref ) {
	        delete attrs.ref;
	
	        // add in the href and title, if present
	        attrs.src = ref.href;
	        if ( ref.title ) {
	          attrs.title = ref.title;
	        }
	
	        // get rid of the unneeded original text
	        delete attrs.original;
	      }
	      // the reference doesn't exist, so revert to plain text
	      else {
	        return attrs.original;
	      }
	      break;
	  }
	
	  // convert all the children
	  i = 1;
	
	  // deal with the attribute node, if it exists
	  if ( attrs ) {
	    // if there are keys, skip over it
	    for ( var key in jsonml[ 1 ] ) {
	        i = 2;
	        break;
	    }
	    // if there aren't, remove it
	    if ( i === 1 ) {
	      jsonml.splice( i, 1 );
	    }
	  }
	
	  for ( ; i < jsonml.length; ++i ) {
	    jsonml[ i ] = convert_tree_to_html( jsonml[ i ], references, options );
	  }
	
	  return jsonml;
	}
	
	
	// merges adjacent text nodes into a single node
	function merge_text_nodes( jsonml ) {
	  // skip the tag name and attribute hash
	  var i = extract_attr( jsonml ) ? 2 : 1;
	
	  while ( i < jsonml.length ) {
	    // if it's a string check the next item too
	    if ( typeof jsonml[ i ] === "string" ) {
	      if ( i + 1 < jsonml.length && typeof jsonml[ i + 1 ] === "string" ) {
	        // merge the second string into the first and remove it
	        jsonml[ i ] += jsonml.splice( i + 1, 1 )[ 0 ];
	      }
	      else {
	        ++i;
	      }
	    }
	    // if it's not a string recurse
	    else {
	      merge_text_nodes( jsonml[ i ] );
	      ++i;
	    }
	  }
	}
	
	} )( (function() {
	  if ( false ) {
	    window.markdown = {};
	    return window.markdown;
	  }
	  else {
	    return exports;
	  }
	} )() );


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(28);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(29);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(27)))

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 28 */
/***/ (function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		var flashList = document.querySelector('.flash-list');
		if (!flashList) return false;
	
		var flashItems = flashList.querySelectorAll('.flash-list__item');
	
		(0, _helpers.forEachDom)(flashItems, function (item) {
			var type = item.getAttribute('data-type');
			var text = item.innerHTML.trim();
	
			new _noty2.default({
				type: type,
				text: text,
				timeout: 5000,
				progressBar: true,
				closeWith: ['click', 'button']
			}).show();
		});
	};
	
	var _noty = __webpack_require__(13);
	
	var _noty2 = _interopRequireDefault(_noty);
	
	var _helpers = __webpack_require__(14);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		if (!document.getElementById('call-order')) return false;
	
		var app = new Vue({
			el: '#call-order',
			data: {
				isShowModal: false,
				modalContent: {
					order: true,
					success: false,
					error: false
				},
				formFields: {
					name: null,
					phone: null
				}
			},
			methods: {
				showModal: function showModal() {
					this.isShowModal = true;
				},
				hideModal: function hideModal() {
					this.isShowModal = false;
				},
				switchContent: function switchContent(content) {
					// Убрать все остальные окна
					for (var key in this.modalContent) {
						this.modalContent[key] = false;
					}
					// Показать выбранное
					this.modalContent[content] = true;
				},
				submitForm: function submitForm(e) {
					var _this = this;
	
					var form = e.target;
					var data = new FormData(form);
					(0, _helpers.send)(form.action, data, function () {
						_this.switchContent('success');
					}, function () {
						_this.switchContent('error');
					});
				}
			},
			mounted: function mounted() {
				var _this2 = this;
	
				(0, _inputmask2.default)({ mask: "+7 999 999-99-99" }).mask(document.querySelectorAll('input[name=phone]'));
	
				// Найти все кнопки активирующие попап на странице
				var btns = document.querySelectorAll('.call-order-btn');
				(0, _helpers.forEachDom)(btns, function (btn) {
					btn.addEventListener('click', function (e) {
						_this2.showModal();
					});
				});
			},
	
			watch: {
				isShowModal: function isShowModal(val) {
					console.log(val);
					document.body.style.overflow = val ? 'hidden' : '';
				}
			}
		});
	
		return app;
	};
	
	__webpack_require__(15);
	
	var _inputmask = __webpack_require__(1);
	
	var _inputmask2 = _interopRequireDefault(_inputmask);
	
	var _helpers = __webpack_require__(14);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		if (!document.getElementById('services-admin')) return false;
	
		var app = new Vue({
			el: '#services-admin',
			data: {
				services: []
			},
			methods: {
				load: function load() {
					var _this = this;
	
					fetch('/services/all', {
						credentials: 'include',
						method: 'GET'
					}).then(function (response) {
						return response.json();
					}).then(function (json) {
						_this.services = json;
					}).catch(function (ex) {
						(0, _helpers.noty)('error', 'Ошибка при загрузке сервисов: ' + ex);
					});
				}
			},
			mounted: function mounted() {
				this.load();
			},
			watch: {}
		});
	};
	
	__webpack_require__(15);
	
	var _helpers = __webpack_require__(14);
	
	var _vTooltip = __webpack_require__(19);
	
	var _vTooltip2 = _interopRequireDefault(_vTooltip);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		var mainScreen = document.querySelector('.main-screen');
		if (!mainScreen) return false;
	
		var slider = mainScreen.querySelector('.main-screen__slider');
		var slidesCount = slider.getAttribute('data-slide-count');
		var currentSlideNumber = slider.getAttribute('data-slide');
	
		setInterval(function () {
			if (currentSlideNumber >= slidesCount) {
				currentSlideNumber = 1;
			} else {
				currentSlideNumber++;
			}
	
			animatelo.pulse(slider);
			slider.setAttribute('data-slide', currentSlideNumber);
		}, 6000);
	};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		var sr = (0, _scrollreveal2.default)({ reset: true });
		sr.reveal('.about__advantage');
		sr.reveal('.services-cards__card');
		sr.reveal('.models-cards__card');
		sr.reveal('.about__title');
		sr.reveal('.services-cards__title');
		sr.reveal('.models-cards-section .title');
		sr.reveal('.reviews__title');
	};
	
	var _scrollreveal = __webpack_require__(35);
	
	var _scrollreveal2 = _interopRequireDefault(_scrollreveal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/////    /////    /////    /////
	/////    /////    /////    /////
	/////    /////    /////    /////
	/////    /////    /////    /////
	/////             /////    /////
	/////             /////    /////
	/////    /////    /////    /////
	/////    /////    /////    /////
	         /////    /////
	         /////    /////
	/////    /////    /////    /////
	/////    /////    /////    /////
	/////    /////    /////    /////
	/////    /////    /////    /////
	
	/**
	 * ScrollReveal
	 * ------------
	 * Version : 3.3.6
	 * Website : scrollrevealjs.org
	 * Repo    : github.com/jlmakes/scrollreveal.js
	 * Author  : Julian Lloyd (@jlmakes)
	 */
	
	;(function () {
	  'use strict'
	
	  var sr
	  var _requestAnimationFrame
	
	  function ScrollReveal (config) {
	    // Support instantiation without the `new` keyword.
	    if (typeof this === 'undefined' || Object.getPrototypeOf(this) !== ScrollReveal.prototype) {
	      return new ScrollReveal(config)
	    }
	
	    sr = this // Save reference to instance.
	    sr.version = '3.3.6'
	    sr.tools = new Tools() // *required utilities
	
	    if (sr.isSupported()) {
	      sr.tools.extend(sr.defaults, config || {})
	
	      sr.defaults.container = _resolveContainer(sr.defaults)
	
	      sr.store = {
	        elements: {},
	        containers: []
	      }
	
	      sr.sequences = {}
	      sr.history = []
	      sr.uid = 0
	      sr.initialized = false
	    } else if (typeof console !== 'undefined' && console !== null) {
	      // Note: IE9 only supports console if devtools are open.
	      console.log('ScrollReveal is not supported in this browser.')
	    }
	
	    return sr
	  }
	
	  /**
	   * Configuration
	   * -------------
	   * This object signature can be passed directly to the ScrollReveal constructor,
	   * or as the second argument of the `reveal()` method.
	   */
	
	  ScrollReveal.prototype.defaults = {
	    // 'bottom', 'left', 'top', 'right'
	    origin: 'bottom',
	
	    // Can be any valid CSS distance, e.g. '5rem', '10%', '20vw', etc.
	    distance: '20px',
	
	    // Time in milliseconds.
	    duration: 500,
	    delay: 0,
	
	    // Starting angles in degrees, will transition from these values to 0 in all axes.
	    rotate: { x: 0, y: 0, z: 0 },
	
	    // Starting opacity value, before transitioning to the computed opacity.
	    opacity: 0,
	
	    // Starting scale value, will transition from this value to 1
	    scale: 0.9,
	
	    // Accepts any valid CSS easing, e.g. 'ease', 'ease-in-out', 'linear', etc.
	    easing: 'cubic-bezier(0.6, 0.2, 0.1, 1)',
	
	    // `<html>` is the default reveal container. You can pass either:
	    // DOM Node, e.g. document.querySelector('.fooContainer')
	    // Selector, e.g. '.fooContainer'
	    container: window.document.documentElement,
	
	    // true/false to control reveal animations on mobile.
	    mobile: true,
	
	    // true:  reveals occur every time elements become visible
	    // false: reveals occur once as elements become visible
	    reset: false,
	
	    // 'always' — delay for all reveal animations
	    // 'once'   — delay only the first time reveals occur
	    // 'onload' - delay only for animations triggered by first load
	    useDelay: 'always',
	
	    // Change when an element is considered in the viewport. The default value
	    // of 0.20 means 20% of an element must be visible for its reveal to occur.
	    viewFactor: 0.2,
	
	    // Pixel values that alter the container boundaries.
	    // e.g. Set `{ top: 48 }`, if you have a 48px tall fixed toolbar.
	    // --
	    // Visual Aid: https://scrollrevealjs.org/assets/viewoffset.png
	    viewOffset: { top: 0, right: 0, bottom: 0, left: 0 },
	
	    // Callbacks that fire for each triggered element reveal, and reset.
	    beforeReveal: function (domEl) {},
	    beforeReset: function (domEl) {},
	
	    // Callbacks that fire for each completed element reveal, and reset.
	    afterReveal: function (domEl) {},
	    afterReset: function (domEl) {}
	  }
	
	  /**
	   * Check if client supports CSS Transform and CSS Transition.
	   * @return {boolean}
	   */
	  ScrollReveal.prototype.isSupported = function () {
	    var style = document.documentElement.style
	    return 'WebkitTransition' in style && 'WebkitTransform' in style ||
	      'transition' in style && 'transform' in style
	  }
	
	  /**
	   * Creates a reveal set, a group of elements that will animate when they
	   * become visible. If [interval] is provided, a new sequence is created
	   * that will ensure elements reveal in the order they appear in the DOM.
	   *
	   * @param {Node|NodeList|string} [target]   The node, node list or selector to use for animation.
	   * @param {Object}               [config]   Override the defaults for this reveal set.
	   * @param {number}               [interval] Time between sequenced element animations (milliseconds).
	   * @param {boolean}              [sync]     Used internally when updating reveals for async content.
	   *
	   * @return {Object} The current ScrollReveal instance.
	   */
	  ScrollReveal.prototype.reveal = function (target, config, interval, sync) {
	    var container
	    var elements
	    var elem
	    var elemId
	    var sequence
	    var sequenceId
	
	    // No custom configuration was passed, but a sequence interval instead.
	    // let’s shuffle things around to make sure everything works.
	    if (config !== undefined && typeof config === 'number') {
	      interval = config
	      config = {}
	    } else if (config === undefined || config === null) {
	      config = {}
	    }
	
	    container = _resolveContainer(config)
	    elements = _getRevealElements(target, container)
	
	    if (!elements.length) {
	      console.log('ScrollReveal: reveal on "' + target + '" failed, no elements found.')
	      return sr
	    }
	
	    // Prepare a new sequence if an interval is passed.
	    if (interval && typeof interval === 'number') {
	      sequenceId = _nextUid()
	
	      sequence = sr.sequences[sequenceId] = {
	        id: sequenceId,
	        interval: interval,
	        elemIds: [],
	        active: false
	      }
	    }
	
	    // Begin main loop to configure ScrollReveal elements.
	    for (var i = 0; i < elements.length; i++) {
	      // Check if the element has already been configured and grab it from the store.
	      elemId = elements[i].getAttribute('data-sr-id')
	      if (elemId) {
	        elem = sr.store.elements[elemId]
	      } else {
	        // Otherwise, let’s do some basic setup.
	        elem = {
	          id: _nextUid(),
	          domEl: elements[i],
	          seen: false,
	          revealing: false
	        }
	        elem.domEl.setAttribute('data-sr-id', elem.id)
	      }
	
	      // Sequence only setup
	      if (sequence) {
	        elem.sequence = {
	          id: sequence.id,
	          index: sequence.elemIds.length
	        }
	
	        sequence.elemIds.push(elem.id)
	      }
	
	      // New or existing element, it’s time to update its configuration, styles,
	      // and send the updates to our store.
	      _configure(elem, config, container)
	      _style(elem)
	      _updateStore(elem)
	
	      // We need to make sure elements are set to visibility: visible, even when
	      // on mobile and `config.mobile === false`, or if unsupported.
	      if (sr.tools.isMobile() && !elem.config.mobile || !sr.isSupported()) {
	        elem.domEl.setAttribute('style', elem.styles.inline)
	        elem.disabled = true
	      } else if (!elem.revealing) {
	        // Otherwise, proceed normally.
	        elem.domEl.setAttribute('style',
	          elem.styles.inline +
	          elem.styles.transform.initial
	        )
	      }
	    }
	
	    // Each `reveal()` is recorded so that when calling `sync()` while working
	    // with asynchronously loaded content, it can re-trace your steps but with
	    // all your new elements now in the DOM.
	
	    // Since `reveal()` is called internally by `sync()`, we don’t want to
	    // record or intiialize each reveal during syncing.
	    if (!sync && sr.isSupported()) {
	      _record(target, config, interval)
	
	      // We push initialization to the event queue using setTimeout, so that we can
	      // give ScrollReveal room to process all reveal calls before putting things into motion.
	      // --
	      // Philip Roberts - What the heck is the event loop anyway? (JSConf EU 2014)
	      // https://www.youtube.com/watch?v=8aGhZQkoFbQ
	      if (sr.initTimeout) {
	        window.clearTimeout(sr.initTimeout)
	      }
	      sr.initTimeout = window.setTimeout(_init, 0)
	    }
	
	    return sr
	  }
	
	  /**
	   * Re-runs `reveal()` for each record stored in history, effectively capturing
	   * any content loaded asynchronously that matches existing reveal set targets.
	   * @return {Object} The current ScrollReveal instance.
	   */
	  ScrollReveal.prototype.sync = function () {
	    if (sr.history.length && sr.isSupported()) {
	      for (var i = 0; i < sr.history.length; i++) {
	        var record = sr.history[i]
	        sr.reveal(record.target, record.config, record.interval, true)
	      }
	      _init()
	    } else {
	      console.log('ScrollReveal: sync failed, no reveals found.')
	    }
	    return sr
	  }
	
	  /**
	   * Private Methods
	   * ---------------
	   */
	
	  function _resolveContainer (config) {
	    if (config && config.container) {
	      if (typeof config.container === 'string') {
	        return window.document.documentElement.querySelector(config.container)
	      } else if (sr.tools.isNode(config.container)) {
	        return config.container
	      } else {
	        console.log('ScrollReveal: invalid container "' + config.container + '" provided.')
	        console.log('ScrollReveal: falling back to default container.')
	      }
	    }
	    return sr.defaults.container
	  }
	
	  /**
	   * check to see if a node or node list was passed in as the target,
	   * otherwise query the container using target as a selector.
	   *
	   * @param {Node|NodeList|string} [target]    client input for reveal target.
	   * @param {Node}                 [container] parent element for selector queries.
	   *
	   * @return {array} elements to be revealed.
	   */
	  function _getRevealElements (target, container) {
	    if (typeof target === 'string') {
	      return Array.prototype.slice.call(container.querySelectorAll(target))
	    } else if (sr.tools.isNode(target)) {
	      return [target]
	    } else if (sr.tools.isNodeList(target)) {
	      return Array.prototype.slice.call(target)
	    }
	    return []
	  }
	
	  /**
	   * A consistent way of creating unique IDs.
	   * @returns {number}
	   */
	  function _nextUid () {
	    return ++sr.uid
	  }
	
	  function _configure (elem, config, container) {
	    // If a container was passed as a part of the config object,
	    // let’s overwrite it with the resolved container passed in.
	    if (config.container) config.container = container
	    // If the element hasn’t already been configured, let’s use a clone of the
	    // defaults extended by the configuration passed as the second argument.
	    if (!elem.config) {
	      elem.config = sr.tools.extendClone(sr.defaults, config)
	    } else {
	      // Otherwise, let’s use a clone of the existing element configuration extended
	      // by the configuration passed as the second argument.
	      elem.config = sr.tools.extendClone(elem.config, config)
	    }
	
	    // Infer CSS Transform axis from origin string.
	    if (elem.config.origin === 'top' || elem.config.origin === 'bottom') {
	      elem.config.axis = 'Y'
	    } else {
	      elem.config.axis = 'X'
	    }
	  }
	
	  function _style (elem) {
	    var computed = window.getComputedStyle(elem.domEl)
	
	    if (!elem.styles) {
	      elem.styles = {
	        transition: {},
	        transform: {},
	        computed: {}
	      }
	
	      // Capture any existing inline styles, and add our visibility override.
	      // --
	      // See section 4.2. in the Documentation:
	      // https://github.com/jlmakes/scrollreveal.js#42-improve-user-experience
	      elem.styles.inline = elem.domEl.getAttribute('style') || ''
	      elem.styles.inline += '; visibility: visible; '
	
	      // grab the elements existing opacity.
	      elem.styles.computed.opacity = computed.opacity
	
	      // grab the elements existing transitions.
	      if (!computed.transition || computed.transition === 'all 0s ease 0s') {
	        elem.styles.computed.transition = ''
	      } else {
	        elem.styles.computed.transition = computed.transition + ', '
	      }
	    }
	
	    // Create transition styles
	    elem.styles.transition.instant = _generateTransition(elem, 0)
	    elem.styles.transition.delayed = _generateTransition(elem, elem.config.delay)
	
	    // Generate transform styles, first with the webkit prefix.
	    elem.styles.transform.initial = ' -webkit-transform:'
	    elem.styles.transform.target = ' -webkit-transform:'
	    _generateTransform(elem)
	
	    // And again without any prefix.
	    elem.styles.transform.initial += 'transform:'
	    elem.styles.transform.target += 'transform:'
	    _generateTransform(elem)
	  }
	
	  function _generateTransition (elem, delay) {
	    var config = elem.config
	
	    return '-webkit-transition: ' + elem.styles.computed.transition +
	      '-webkit-transform ' + config.duration / 1000 + 's ' +
	      config.easing + ' ' +
	      delay / 1000 + 's, opacity ' +
	      config.duration / 1000 + 's ' +
	      config.easing + ' ' +
	      delay / 1000 + 's; ' +
	
	      'transition: ' + elem.styles.computed.transition +
	      'transform ' + config.duration / 1000 + 's ' +
	      config.easing + ' ' +
	      delay / 1000 + 's, opacity ' +
	      config.duration / 1000 + 's ' +
	      config.easing + ' ' +
	      delay / 1000 + 's; '
	  }
	
	  function _generateTransform (elem) {
	    var config = elem.config
	    var cssDistance
	    var transform = elem.styles.transform
	
	    // Let’s make sure our our pixel distances are negative for top and left.
	    // e.g. origin = 'top' and distance = '25px' starts at `top: -25px` in CSS.
	    if (config.origin === 'top' || config.origin === 'left') {
	      cssDistance = /^-/.test(config.distance)
	        ? config.distance.substr(1)
	        : '-' + config.distance
	    } else {
	      cssDistance = config.distance
	    }
	
	    if (parseInt(config.distance)) {
	      transform.initial += ' translate' + config.axis + '(' + cssDistance + ')'
	      transform.target += ' translate' + config.axis + '(0)'
	    }
	    if (config.scale) {
	      transform.initial += ' scale(' + config.scale + ')'
	      transform.target += ' scale(1)'
	    }
	    if (config.rotate.x) {
	      transform.initial += ' rotateX(' + config.rotate.x + 'deg)'
	      transform.target += ' rotateX(0)'
	    }
	    if (config.rotate.y) {
	      transform.initial += ' rotateY(' + config.rotate.y + 'deg)'
	      transform.target += ' rotateY(0)'
	    }
	    if (config.rotate.z) {
	      transform.initial += ' rotateZ(' + config.rotate.z + 'deg)'
	      transform.target += ' rotateZ(0)'
	    }
	    transform.initial += '; opacity: ' + config.opacity + ';'
	    transform.target += '; opacity: ' + elem.styles.computed.opacity + ';'
	  }
	
	  function _updateStore (elem) {
	    var container = elem.config.container
	
	    // If this element’s container isn’t already in the store, let’s add it.
	    if (container && sr.store.containers.indexOf(container) === -1) {
	      sr.store.containers.push(elem.config.container)
	    }
	
	    // Update the element stored with our new element.
	    sr.store.elements[elem.id] = elem
	  }
	
	  function _record (target, config, interval) {
	    // Save the `reveal()` arguments that triggered this `_record()` call, so we
	    // can re-trace our steps when calling the `sync()` method.
	    var record = {
	      target: target,
	      config: config,
	      interval: interval
	    }
	    sr.history.push(record)
	  }
	
	  function _init () {
	    if (sr.isSupported()) {
	      // Initial animate call triggers valid reveal animations on first load.
	      // Subsequent animate calls are made inside the event handler.
	      _animate()
	
	      // Then we loop through all container nodes in the store and bind event
	      // listeners to each.
	      for (var i = 0; i < sr.store.containers.length; i++) {
	        sr.store.containers[i].addEventListener('scroll', _handler)
	        sr.store.containers[i].addEventListener('resize', _handler)
	      }
	
	      // Let’s also do a one-time binding of window event listeners.
	      if (!sr.initialized) {
	        window.addEventListener('scroll', _handler)
	        window.addEventListener('resize', _handler)
	        sr.initialized = true
	      }
	    }
	    return sr
	  }
	
	  function _handler () {
	    _requestAnimationFrame(_animate)
	  }
	
	  function _setActiveSequences () {
	    var active
	    var elem
	    var elemId
	    var sequence
	
	    // Loop through all sequences
	    sr.tools.forOwn(sr.sequences, function (sequenceId) {
	      sequence = sr.sequences[sequenceId]
	      active = false
	
	      // For each sequenced elemenet, let’s check visibility and if
	      // any are visible, set it’s sequence to active.
	      for (var i = 0; i < sequence.elemIds.length; i++) {
	        elemId = sequence.elemIds[i]
	        elem = sr.store.elements[elemId]
	        if (_isElemVisible(elem) && !active) {
	          active = true
	        }
	      }
	
	      sequence.active = active
	    })
	  }
	
	  function _animate () {
	    var delayed
	    var elem
	
	    _setActiveSequences()
	
	    // Loop through all elements in the store
	    sr.tools.forOwn(sr.store.elements, function (elemId) {
	      elem = sr.store.elements[elemId]
	      delayed = _shouldUseDelay(elem)
	
	      // Let’s see if we should revealand if so,
	      // trigger the `beforeReveal` callback and
	      // determine whether or not to use delay.
	      if (_shouldReveal(elem)) {
	        elem.config.beforeReveal(elem.domEl)
	        if (delayed) {
	          elem.domEl.setAttribute('style',
	            elem.styles.inline +
	            elem.styles.transform.target +
	            elem.styles.transition.delayed
	          )
	        } else {
	          elem.domEl.setAttribute('style',
	            elem.styles.inline +
	            elem.styles.transform.target +
	            elem.styles.transition.instant
	          )
	        }
	
	        // Let’s queue the `afterReveal` callback
	        // and mark the element as seen and revealing.
	        _queueCallback('reveal', elem, delayed)
	        elem.revealing = true
	        elem.seen = true
	
	        if (elem.sequence) {
	          _queueNextInSequence(elem, delayed)
	        }
	      } else if (_shouldReset(elem)) {
	        //Otherwise reset our element and
	        // trigger the `beforeReset` callback.
	        elem.config.beforeReset(elem.domEl)
	        elem.domEl.setAttribute('style',
	          elem.styles.inline +
	          elem.styles.transform.initial +
	          elem.styles.transition.instant
	        )
	        // And queue the `afterReset` callback.
	        _queueCallback('reset', elem)
	        elem.revealing = false
	      }
	    })
	  }
	
	  function _queueNextInSequence (elem, delayed) {
	    var elapsed = 0
	    var delay = 0
	    var sequence = sr.sequences[elem.sequence.id]
	
	    // We’re processing a sequenced element, so let's block other elements in this sequence.
	    sequence.blocked = true
	
	    // Since we’re triggering animations a part of a sequence after animations on first load,
	    // we need to check for that condition and explicitly add the delay to our timer.
	    if (delayed && elem.config.useDelay === 'onload') {
	      delay = elem.config.delay
	    }
	
	    // If a sequence timer is already running, capture the elapsed time and clear it.
	    if (elem.sequence.timer) {
	      elapsed = Math.abs(elem.sequence.timer.started - new Date())
	      window.clearTimeout(elem.sequence.timer)
	    }
	
	    // Start a new timer.
	    elem.sequence.timer = { started: new Date() }
	    elem.sequence.timer.clock = window.setTimeout(function () {
	      // Sequence interval has passed, so unblock the sequence and re-run the handler.
	      sequence.blocked = false
	      elem.sequence.timer = null
	      _handler()
	    }, Math.abs(sequence.interval) + delay - elapsed)
	  }
	
	  function _queueCallback (type, elem, delayed) {
	    var elapsed = 0
	    var duration = 0
	    var callback = 'after'
	
	    // Check which callback we’re working with.
	    switch (type) {
	      case 'reveal':
	        duration = elem.config.duration
	        if (delayed) {
	          duration += elem.config.delay
	        }
	        callback += 'Reveal'
	        break
	
	      case 'reset':
	        duration = elem.config.duration
	        callback += 'Reset'
	        break
	    }
	
	    // If a timer is already running, capture the elapsed time and clear it.
	    if (elem.timer) {
	      elapsed = Math.abs(elem.timer.started - new Date())
	      window.clearTimeout(elem.timer.clock)
	    }
	
	    // Start a new timer.
	    elem.timer = { started: new Date() }
	    elem.timer.clock = window.setTimeout(function () {
	      // The timer completed, so let’s fire the callback and null the timer.
	      elem.config[callback](elem.domEl)
	      elem.timer = null
	    }, duration - elapsed)
	  }
	
	  function _shouldReveal (elem) {
	    if (elem.sequence) {
	      var sequence = sr.sequences[elem.sequence.id]
	      return sequence.active &&
	        !sequence.blocked &&
	        !elem.revealing &&
	        !elem.disabled
	    }
	    return _isElemVisible(elem) &&
	      !elem.revealing &&
	      !elem.disabled
	  }
	
	  function _shouldUseDelay (elem) {
	    var config = elem.config.useDelay
	    return config === 'always' ||
	      (config === 'onload' && !sr.initialized) ||
	      (config === 'once' && !elem.seen)
	  }
	
	  function _shouldReset (elem) {
	    if (elem.sequence) {
	      var sequence = sr.sequences[elem.sequence.id]
	      return !sequence.active &&
	        elem.config.reset &&
	        elem.revealing &&
	        !elem.disabled
	    }
	    return !_isElemVisible(elem) &&
	      elem.config.reset &&
	      elem.revealing &&
	      !elem.disabled
	  }
	
	  function _getContainer (container) {
	    return {
	      width: container.clientWidth,
	      height: container.clientHeight
	    }
	  }
	
	  function _getScrolled (container) {
	    // Return the container scroll values, plus the its offset.
	    if (container && container !== window.document.documentElement) {
	      var offset = _getOffset(container)
	      return {
	        x: container.scrollLeft + offset.left,
	        y: container.scrollTop + offset.top
	      }
	    } else {
	      // Otherwise, default to the window object’s scroll values.
	      return {
	        x: window.pageXOffset,
	        y: window.pageYOffset
	      }
	    }
	  }
	
	  function _getOffset (domEl) {
	    var offsetTop = 0
	    var offsetLeft = 0
	
	      // Grab the element’s dimensions.
	    var offsetHeight = domEl.offsetHeight
	    var offsetWidth = domEl.offsetWidth
	
	    // Now calculate the distance between the element and its parent, then
	    // again for the parent to its parent, and again etc... until we have the
	    // total distance of the element to the document’s top and left origin.
	    do {
	      if (!isNaN(domEl.offsetTop)) {
	        offsetTop += domEl.offsetTop
	      }
	      if (!isNaN(domEl.offsetLeft)) {
	        offsetLeft += domEl.offsetLeft
	      }
	      domEl = domEl.offsetParent
	    } while (domEl)
	
	    return {
	      top: offsetTop,
	      left: offsetLeft,
	      height: offsetHeight,
	      width: offsetWidth
	    }
	  }
	
	  function _isElemVisible (elem) {
	    var offset = _getOffset(elem.domEl)
	    var container = _getContainer(elem.config.container)
	    var scrolled = _getScrolled(elem.config.container)
	    var vF = elem.config.viewFactor
	
	      // Define the element geometry.
	    var elemHeight = offset.height
	    var elemWidth = offset.width
	    var elemTop = offset.top
	    var elemLeft = offset.left
	    var elemBottom = elemTop + elemHeight
	    var elemRight = elemLeft + elemWidth
	
	    return confirmBounds() || isPositionFixed()
	
	    function confirmBounds () {
	      // Define the element’s functional boundaries using its view factor.
	      var top = elemTop + elemHeight * vF
	      var left = elemLeft + elemWidth * vF
	      var bottom = elemBottom - elemHeight * vF
	      var right = elemRight - elemWidth * vF
	
	      // Define the container functional boundaries using its view offset.
	      var viewTop = scrolled.y + elem.config.viewOffset.top
	      var viewLeft = scrolled.x + elem.config.viewOffset.left
	      var viewBottom = scrolled.y - elem.config.viewOffset.bottom + container.height
	      var viewRight = scrolled.x - elem.config.viewOffset.right + container.width
	
	      return top < viewBottom &&
	        bottom > viewTop &&
	        left < viewRight &&
	        right > viewLeft
	    }
	
	    function isPositionFixed () {
	      return (window.getComputedStyle(elem.domEl).position === 'fixed')
	    }
	  }
	
	  /**
	   * Utilities
	   * ---------
	   */
	
	  function Tools () {}
	
	  Tools.prototype.isObject = function (object) {
	    return object !== null && typeof object === 'object' && object.constructor === Object
	  }
	
	  Tools.prototype.isNode = function (object) {
	    return typeof window.Node === 'object'
	      ? object instanceof window.Node
	      : object && typeof object === 'object' &&
	        typeof object.nodeType === 'number' &&
	        typeof object.nodeName === 'string'
	  }
	
	  Tools.prototype.isNodeList = function (object) {
	    var prototypeToString = Object.prototype.toString.call(object)
	    var regex = /^\[object (HTMLCollection|NodeList|Object)\]$/
	
	    return typeof window.NodeList === 'object'
	      ? object instanceof window.NodeList
	      : object && typeof object === 'object' &&
	        regex.test(prototypeToString) &&
	        typeof object.length === 'number' &&
	        (object.length === 0 || this.isNode(object[0]))
	  }
	
	  Tools.prototype.forOwn = function (object, callback) {
	    if (!this.isObject(object)) {
	      throw new TypeError('Expected "object", but received "' + typeof object + '".')
	    } else {
	      for (var property in object) {
	        if (object.hasOwnProperty(property)) {
	          callback(property)
	        }
	      }
	    }
	  }
	
	  Tools.prototype.extend = function (target, source) {
	    this.forOwn(source, function (property) {
	      if (this.isObject(source[property])) {
	        if (!target[property] || !this.isObject(target[property])) {
	          target[property] = {}
	        }
	        this.extend(target[property], source[property])
	      } else {
	        target[property] = source[property]
	      }
	    }.bind(this))
	    return target
	  }
	
	  Tools.prototype.extendClone = function (target, source) {
	    return this.extend(this.extend({}, target), source)
	  }
	
	  Tools.prototype.isMobile = function () {
	    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
	  }
	
	  /**
	   * Polyfills
	   * --------
	   */
	
	  _requestAnimationFrame = window.requestAnimationFrame ||
	    window.webkitRequestAnimationFrame ||
	    window.mozRequestAnimationFrame ||
	    function (callback) {
	      window.setTimeout(callback, 1000 / 60)
	    }
	
	  /**
	   * Module Wrapper
	   * --------------
	   */
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return ScrollReveal
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
	  } else if (typeof module !== 'undefined' && module.exports) {
	    module.exports = ScrollReveal
	  } else {
	    window.ScrollReveal = ScrollReveal
	  }
	})();


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		var subscriptionEl = document.getElementById('subscription');
		if (!subscriptionEl) return false;
	
		Vue.use(_iview2.default);
		var app = new Vue({
			el: '#subscription',
			data: {
				subscribers: [],
				selected_subscribers: [],
				models: {
					data: [],
					selected: [],
					columns: _modelsColumns2.default,
					page: 1,
					fields: []
				},
				subscribers_edit_id: null
			},
			methods: {
				modelsFetch: function modelsFetch() {
					var _this = this;
	
					fetch('/get-models/' + this.models.page, {
						credentials: 'include',
						method: 'GET'
					}).then(function (response) {
						return response.json();
					}).then(function (json) {
						_this.models.data = _this.models.data.concat(json);
						_this.$Message.success('Анкеты загружены');
						_this.models.page++;
					}).catch(function (ex) {
						(0, _helpers.noty)('error', 'Ошибка при загрузке подписчиков: ' + ex);
					});
				},
				modelsSelect: function modelsSelect(items, item) {
					this.models.selected = items;
				},
				subscribersFetch: function subscribersFetch() {
					var _this2 = this;
	
					fetch('/subscription/subscribers', {
						credentials: 'include',
						method: 'GET'
					}).then(function (response) {
						return response.json();
					}).then(function (json) {
						_this2.subscribers = json;
					}).catch(function (ex) {
						(0, _helpers.noty)('error', 'Ошибка при загрузке подписчиков: ' + ex);
					});
				},
				subscribersAdd: function subscribersAdd(subscriber) {
					this.subscribers.push(subscriber);
				},
				subscribersCreate: function subscribersCreate(e) {
					var _this3 = this;
	
					var form = e.target;
					var data = new FormData(form);
					(0, _helpers.send)(form.action, data, function (xhr) {
						var subscriber = JSON.parse(xhr.responseText);
						_this3.subscribersAdd(subscriber);
						form.reset();
					}, function (xhr) {
						console.log(xhr);
					});
				},
				subscribersDelete: function subscribersDelete(index) {
					var _this4 = this;
	
					var data = new FormData();
					data.append('id', this.subscribers[index].id);
	
					this.$Modal.confirm({
						title: 'Пожалуйста подтвердите удаление',
						content: '<p>Удаление отменить не возможно</p>',
						okText: 'OK',
						cancelText: 'Отмена',
						onOk: function onOk() {
							fetch('/subscription/subscribers/delete', {
								credentials: 'same-origin',
								method: 'POST',
								body: data
							});
							_this4.subscribers.splice(index, 1);
							_this4.$Message.success('Подписчик удален');
						},
						onCancel: function onCancel() {}
					});
				},
				subscribersUpdate: function subscribersUpdate(e) {
					var _this5 = this;
	
					var form = e.target;
					var data = new FormData(form);
					fetch(form.action, {
						method: 'POST',
						body: data,
						credentials: 'same-origin'
					}).then(function (response) {
						if (response.status !== 200) {
							(0, _helpers.noty)('error', 'Произошла ошибка при сохранении подписчика: ' + response.statusText);
						} else {
							_this5.subscribers_edit_id = null;
						}
					}, function (error) {
						(0, _helpers.noty)('error', 'Произошла ошибка при сохранении подписчика: ' + error);
					});
				},
				subscribersEditToggle: function subscribersEditToggle(id) {
					this.subscribers_edit_id = id || null;
				},
				sendMail: function sendMail(e) {
					var data = {
						subscribers: this.selected_subscribers,
						fields: this.models.fields,
						models: this.models.selected
					};
					var error = false;
					var errors = {
						subscribers: {
							title: 'Выберите <b>е-мейлы</b> получателей!'
						},
						fields: {
							title: 'Выберите <b>поля анкет</b> для отправки'
						},
						models: {
							title: 'Выберите <b>анкеты</b> для отправки'
						}
					};
	
					for (var prop in data) {
						if (data[prop].length < 1) {
							this.$Notice.error(errors[prop]);
							error = true;
						}
					}
	
					if (error) return false;
	
					var formData = new FormData();
					formData.append('data', JSON.stringify(data));
					fetch('/subscription/send', {
						method: 'POST',
						body: formData,
						credentials: 'same-origin'
					}).then(function (response) {
						if (response.status !== 200) {
							// sussess
						} else {
								// error
							}
					}, function (error) {
						// error
					});
				}
			},
			mounted: function mounted() {
				this.subscribersFetch();
				this.modelsFetch();
			}
		});
	};
	
	__webpack_require__(15);
	
	var _helpers = __webpack_require__(14);
	
	var _iview = __webpack_require__(37);
	
	var _iview2 = _interopRequireDefault(_iview);
	
	var _modelsColumns = __webpack_require__(39);
	
	var _modelsColumns2 = _interopRequireDefault(_modelsColumns);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(38));
		else if(typeof define === 'function' && define.amd)
			define("iview", ["vue"], factory);
		else if(typeof exports === 'object')
			exports["iview"] = factory(require("vue"));
		else
			root["iview"] = factory(root["Vue"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_12__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 339);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports) {
	
	// this module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle
	
	module.exports = function normalizeComponent (
	  rawScriptExports,
	  compiledTemplate,
	  scopeId,
	  cssModules
	) {
	  var esModule
	  var scriptExports = rawScriptExports = rawScriptExports || {}
	
	  // ES6 modules interop
	  var type = typeof rawScriptExports.default
	  if (type === 'object' || type === 'function') {
	    esModule = rawScriptExports
	    scriptExports = rawScriptExports.default
	  }
	
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (compiledTemplate) {
	    options.render = compiledTemplate.render
	    options.staticRenderFns = compiledTemplate.staticRenderFns
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = scopeId
	  }
	
	  // inject cssModules
	  if (cssModules) {
	    var computed = Object.create(options.computed || null)
	    Object.keys(cssModules).forEach(function (key) {
	      var module = cssModules[key]
	      computed[key] = function () { return module }
	    })
	    options.computed = computed
	  }
	
	  return {
	    esModule: esModule,
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(348);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2.default)(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};
	
	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.findComponentsDownward = exports.findComponentDownward = exports.findComponentUpward = exports.deepCopy = exports.firstUpperCase = exports.MutationObserver = undefined;
	exports.oneOf = oneOf;
	exports.camelcaseToHyphen = camelcaseToHyphen;
	exports.getScrollBarSize = getScrollBarSize;
	exports.getStyle = getStyle;
	exports.warnProp = warnProp;
	exports.scrollTop = scrollTop;
	exports.hasClass = hasClass;
	exports.addClass = addClass;
	exports.removeClass = removeClass;
	
	var _vue = __webpack_require__(12);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isServer = _vue2.default.prototype.$isServer;
	function oneOf(value, validList) {
	    for (var i = 0; i < validList.length; i++) {
	        if (value === validList[i]) {
	            return true;
	        }
	    }
	    return false;
	}
	
	function camelcaseToHyphen(str) {
	    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
	}
	
	var cached = void 0;
	function getScrollBarSize(fresh) {
	    if (isServer) return 0;
	    if (fresh || cached === undefined) {
	        var inner = document.createElement('div');
	        inner.style.width = '100%';
	        inner.style.height = '200px';
	
	        var outer = document.createElement('div');
	        var outerStyle = outer.style;
	
	        outerStyle.position = 'absolute';
	        outerStyle.top = 0;
	        outerStyle.left = 0;
	        outerStyle.pointerEvents = 'none';
	        outerStyle.visibility = 'hidden';
	        outerStyle.width = '200px';
	        outerStyle.height = '150px';
	        outerStyle.overflow = 'hidden';
	
	        outer.appendChild(inner);
	
	        document.body.appendChild(outer);
	
	        var widthContained = inner.offsetWidth;
	        outer.style.overflow = 'scroll';
	        var widthScroll = inner.offsetWidth;
	
	        if (widthContained === widthScroll) {
	            widthScroll = outer.clientWidth;
	        }
	
	        document.body.removeChild(outer);
	
	        cached = widthContained - widthScroll;
	    }
	    return cached;
	}
	
	var MutationObserver = exports.MutationObserver = isServer ? false : window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver || false;
	
	var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
	var MOZ_HACK_REGEXP = /^moz([A-Z])/;
	
	function camelCase(name) {
	    return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
	        return offset ? letter.toUpperCase() : letter;
	    }).replace(MOZ_HACK_REGEXP, 'Moz$1');
	}
	function getStyle(element, styleName) {
	    if (!element || !styleName) return null;
	    styleName = camelCase(styleName);
	    if (styleName === 'float') {
	        styleName = 'cssFloat';
	    }
	    try {
	        var computed = document.defaultView.getComputedStyle(element, '');
	        return element.style[styleName] || computed ? computed[styleName] : null;
	    } catch (e) {
	        return element.style[styleName];
	    }
	}
	
	function firstUpperCase(str) {
	    return str.toString()[0].toUpperCase() + str.toString().slice(1);
	}
	exports.firstUpperCase = firstUpperCase;
	function warnProp(component, prop, correctType, wrongType) {
	    correctType = firstUpperCase(correctType);
	    wrongType = firstUpperCase(wrongType);
	    console.error('[iView warn]: Invalid prop: type check failed for prop ' + prop + '. Expected ' + correctType + ', got ' + wrongType + '. (found in component: ' + component + ')');
	}
	
	function typeOf(obj) {
	    var toString = Object.prototype.toString;
	    var map = {
	        '[object Boolean]': 'boolean',
	        '[object Number]': 'number',
	        '[object String]': 'string',
	        '[object Function]': 'function',
	        '[object Array]': 'array',
	        '[object Date]': 'date',
	        '[object RegExp]': 'regExp',
	        '[object Undefined]': 'undefined',
	        '[object Null]': 'null',
	        '[object Object]': 'object'
	    };
	    return map[toString.call(obj)];
	}
	
	function deepCopy(data) {
	    var t = typeOf(data);
	    var o = void 0;
	
	    if (t === 'array') {
	        o = [];
	    } else if (t === 'object') {
	        o = {};
	    } else {
	        return data;
	    }
	
	    if (t === 'array') {
	        for (var i = 0; i < data.length; i++) {
	            o.push(deepCopy(data[i]));
	        }
	    } else if (t === 'object') {
	        for (var _i in data) {
	            o[_i] = deepCopy(data[_i]);
	        }
	    }
	    return o;
	}
	
	exports.deepCopy = deepCopy;
	function scrollTop(el) {
	    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    var to = arguments[2];
	    var duration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 500;
	
	    if (!window.requestAnimationFrame) {
	        window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
	            return window.setTimeout(callback, 1000 / 60);
	        };
	    }
	    var difference = Math.abs(from - to);
	    var step = Math.ceil(difference / duration * 50);
	
	    function scroll(start, end, step) {
	        if (start === end) return;
	
	        var d = start + step > end ? end : start + step;
	        if (start > end) {
	            d = start - step < end ? end : start - step;
	        }
	
	        if (el === window) {
	            window.scrollTo(d, d);
	        } else {
	            el.scrollTop = d;
	        }
	        window.requestAnimationFrame(function () {
	            return scroll(d, end, step);
	        });
	    }
	    scroll(from, to, step);
	}
	
	function findComponentUpward(context, componentName, componentNames) {
	    if (typeof componentName === 'string') {
	        componentNames = [componentName];
	    } else {
	        componentNames = componentName;
	    }
	
	    var parent = context.$parent;
	    var name = parent.$options.name;
	    while (parent && (!name || componentNames.indexOf(name) < 0)) {
	        parent = parent.$parent;
	        if (parent) name = parent.$options.name;
	    }
	    return parent;
	}
	exports.findComponentUpward = findComponentUpward;
	
	function findComponentDownward(context, componentName) {
	    var childrens = context.$children;
	    var children = null;
	
	    if (childrens.length) {
	        childrens.forEach(function (child) {
	            var name = child.$options.name;
	            if (name === componentName) {
	                children = child;
	            }
	        });
	
	        for (var i = 0; i < childrens.length; i++) {
	            var child = childrens[i];
	            var name = child.$options.name;
	            if (name === componentName) {
	                children = child;
	                break;
	            } else {
	                children = findComponentDownward(child, componentName);
	                if (children) break;
	            }
	        }
	    }
	    return children;
	}
	exports.findComponentDownward = findComponentDownward;
	
	function findComponentsDownward(context, componentName) {
	    var components = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
	
	    var childrens = context.$children;
	
	    if (childrens.length) {
	        childrens.forEach(function (child) {
	            var name = child.$options.name;
	            var childs = child.$children;
	
	            if (name === componentName) components.push(child);
	            if (childs.length) {
	                var findChilds = findComponentsDownward(child, componentName, components);
	                if (findChilds) components.concat(findChilds);
	            }
	        });
	    }
	    return components;
	}
	exports.findComponentsDownward = findComponentsDownward;
	
	var trim = function trim(string) {
	    return (string || '').replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, '');
	};
	
	function hasClass(el, cls) {
	    if (!el || !cls) return false;
	    if (cls.indexOf(' ') !== -1) throw new Error('className should not contain space.');
	    if (el.classList) {
	        return el.classList.contains(cls);
	    } else {
	        return (' ' + el.className + ' ').indexOf(' ' + cls + ' ') > -1;
	    }
	}
	
	function addClass(el, cls) {
	    if (!el) return;
	    var curClass = el.className;
	    var classes = (cls || '').split(' ');
	
	    for (var i = 0, j = classes.length; i < j; i++) {
	        var clsName = classes[i];
	        if (!clsName) continue;
	
	        if (el.classList) {
	            el.classList.add(clsName);
	        } else {
	            if (!hasClass(el, clsName)) {
	                curClass += ' ' + clsName;
	            }
	        }
	    }
	    if (!el.classList) {
	        el.className = curClass;
	    }
	}
	
	function removeClass(el, cls) {
	    if (!el || !cls) return;
	    var classes = cls.split(' ');
	    var curClass = ' ' + el.className + ' ';
	
	    for (var i = 0, j = classes.length; i < j; i++) {
	        var clsName = classes[i];
	        if (!clsName) continue;
	
	        if (el.classList) {
	            el.classList.remove(clsName);
	        } else {
	            if (hasClass(el, clsName)) {
	                curClass = curClass.replace(' ' + clsName + ' ', ' ');
	            }
	        }
	    }
	    if (!el.classList) {
	        el.className = trim(curClass);
	    }
	}
	
	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function _broadcast(componentName, eventName, params) {
	    this.$children.forEach(function (child) {
	        var name = child.$options.name;
	
	        if (name === componentName) {
	            child.$emit.apply(child, [eventName].concat(params));
	        } else {
	            _broadcast.apply(child, [componentName, eventName].concat([params]));
	        }
	    });
	}
	exports.default = {
	    methods: {
	        dispatch: function dispatch(componentName, eventName, params) {
	            var parent = this.$parent || this.$root;
	            var name = parent.$options.name;
	
	            while (parent && (!name || name !== componentName)) {
	                parent = parent.$parent;
	
	                if (parent) {
	                    name = parent.$options.name;
	                }
	            }
	            if (parent) {
	                parent.$emit.apply(parent, [eventName].concat(params));
	            }
	        },
	        broadcast: function broadcast(componentName, eventName, params) {
	            _broadcast.call(this, componentName, eventName, params);
	        }
	    }
	};
	
	/***/ }),
	/* 4 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return warning; });
	/* harmony export (immutable) */ __webpack_exports__["e"] = format;
	/* harmony export (immutable) */ __webpack_exports__["f"] = isEmptyValue;
	/* unused harmony export isEmptyObject */
	/* harmony export (immutable) */ __webpack_exports__["b"] = asyncMap;
	/* harmony export (immutable) */ __webpack_exports__["d"] = complementError;
	/* harmony export (immutable) */ __webpack_exports__["a"] = deepMerge;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(68);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_typeof__ = __webpack_require__(11);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_typeof___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_typeof__);
	
	
	var formatRegExp = /%[sdj%]/g;
	
	var warning = function warning() {};
	
	// don't print warning message when in production env or node runtime
	if (false) {
	  warning = function warning(type, errors) {
	    if (typeof console !== 'undefined' && console.warn) {
	      if (errors.every(function (e) {
	        return typeof e === 'string';
	      })) {
	        console.warn(type, errors);
	      }
	    }
	  };
	}
	
	function format() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	
	  var i = 1;
	  var f = args[0];
	  var len = args.length;
	  if (typeof f === 'function') {
	    return f.apply(null, args.slice(1));
	  }
	  if (typeof f === 'string') {
	    var str = String(f).replace(formatRegExp, function (x) {
	      if (x === '%%') {
	        return '%';
	      }
	      if (i >= len) {
	        return x;
	      }
	      switch (x) {
	        case '%s':
	          return String(args[i++]);
	        case '%d':
	          return Number(args[i++]);
	        case '%j':
	          try {
	            return JSON.stringify(args[i++]);
	          } catch (_) {
	            return '[Circular]';
	          }
	          break;
	        default:
	          return x;
	      }
	    });
	    for (var arg = args[i]; i < len; arg = args[++i]) {
	      str += ' ' + arg;
	    }
	    return str;
	  }
	  return f;
	}
	
	function isNativeStringType(type) {
	  return type === 'string' || type === 'url' || type === 'hex' || type === 'email' || type === 'pattern';
	}
	
	function isEmptyValue(value, type) {
	  if (value === undefined || value === null) {
	    return true;
	  }
	  if (type === 'array' && Array.isArray(value) && !value.length) {
	    return true;
	  }
	  if (isNativeStringType(type) && typeof value === 'string' && !value) {
	    return true;
	  }
	  return false;
	}
	
	function isEmptyObject(obj) {
	  return Object.keys(obj).length === 0;
	}
	
	function asyncParallelArray(arr, func, callback) {
	  var results = [];
	  var total = 0;
	  var arrLength = arr.length;
	
	  function count(errors) {
	    results.push.apply(results, errors);
	    total++;
	    if (total === arrLength) {
	      callback(results);
	    }
	  }
	
	  arr.forEach(function (a) {
	    func(a, count);
	  });
	}
	
	function asyncSerialArray(arr, func, callback) {
	  var index = 0;
	  var arrLength = arr.length;
	
	  function next(errors) {
	    if (errors && errors.length) {
	      callback(errors);
	      return;
	    }
	    var original = index;
	    index = index + 1;
	    if (original < arrLength) {
	      func(arr[original], next);
	    } else {
	      callback([]);
	    }
	  }
	
	  next([]);
	}
	
	function flattenObjArr(objArr) {
	  var ret = [];
	  Object.keys(objArr).forEach(function (k) {
	    ret.push.apply(ret, objArr[k]);
	  });
	  return ret;
	}
	
	function asyncMap(objArr, option, func, callback) {
	  if (option.first) {
	    var flattenArr = flattenObjArr(objArr);
	    return asyncSerialArray(flattenArr, func, callback);
	  }
	  var firstFields = option.firstFields || [];
	  if (firstFields === true) {
	    firstFields = Object.keys(objArr);
	  }
	  var objArrKeys = Object.keys(objArr);
	  var objArrLength = objArrKeys.length;
	  var total = 0;
	  var results = [];
	  var next = function next(errors) {
	    results.push.apply(results, errors);
	    total++;
	    if (total === objArrLength) {
	      callback(results);
	    }
	  };
	  objArrKeys.forEach(function (key) {
	    var arr = objArr[key];
	    if (firstFields.indexOf(key) !== -1) {
	      asyncSerialArray(arr, func, next);
	    } else {
	      asyncParallelArray(arr, func, next);
	    }
	  });
	}
	
	function complementError(rule) {
	  return function (oe) {
	    if (oe && oe.message) {
	      oe.field = oe.field || rule.fullField;
	      return oe;
	    }
	    return {
	      message: oe,
	      field: oe.field || rule.fullField
	    };
	  };
	}
	
	function deepMerge(target, source) {
	  if (source) {
	    for (var s in source) {
	      if (source.hasOwnProperty(s)) {
	        var value = source[s];
	        if ((typeof value === 'undefined' ? 'undefined' : __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_typeof___default()(value)) === 'object' && __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_typeof___default()(target[s]) === 'object') {
	          target[s] = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, target[s], value);
	        } else {
	          target[s] = value;
	        }
	      }
	    }
	  }
	  return target;
	}
	
	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _locale = __webpack_require__(60);
	
	exports.default = {
	    methods: {
	        t: function t() {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }
	
	            return _locale.t.apply(this, args);
	        }
	    }
	};
	
	/***/ }),
	/* 6 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__required__ = __webpack_require__(61);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__whitespace__ = __webpack_require__(152);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__type__ = __webpack_require__(151);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__range__ = __webpack_require__(150);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__enum__ = __webpack_require__(148);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__pattern__ = __webpack_require__(149);
	
	
	
	
	
	
	
	/* harmony default export */ __webpack_exports__["a"] = ({
	  required: __WEBPACK_IMPORTED_MODULE_0__required__["a" /* default */],
	  whitespace: __WEBPACK_IMPORTED_MODULE_1__whitespace__["a" /* default */],
	  type: __WEBPACK_IMPORTED_MODULE_2__type__["a" /* default */],
	  range: __WEBPACK_IMPORTED_MODULE_3__range__["a" /* default */],
	  'enum': __WEBPACK_IMPORTED_MODULE_4__enum__["a" /* default */],
	  pattern: __WEBPACK_IMPORTED_MODULE_5__pattern__["a" /* default */]
	});
	
	/***/ }),
	/* 7 */
	/***/ (function(module, exports) {
	
	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	
	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(206),
	  /* template */
	  __webpack_require__(310),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var store      = __webpack_require__(51)('wks')
	  , uid        = __webpack_require__(38)
	  , Symbol     = __webpack_require__(13).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;
	
	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(356), __esModule: true };
	
	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(351);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(350);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};
	
	/***/ }),
	/* 12 */
	/***/ (function(module, exports) {
	
	module.exports = __WEBPACK_EXTERNAL_MODULE_12__;
	
	/***/ }),
	/* 13 */
	/***/ (function(module, exports) {
	
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	
	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var anObject       = __webpack_require__(22)
	  , IE8_DOM_DEFINE = __webpack_require__(71)
	  , toPrimitive    = __webpack_require__(53)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(16) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};
	
	/***/ }),
	/* 15 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _icon = __webpack_require__(8);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _icon2.default;
	
	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(23)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});
	
	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global    = __webpack_require__(13)
	  , core      = __webpack_require__(7)
	  , ctx       = __webpack_require__(69)
	  , hide      = __webpack_require__(24)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;
	
	/***/ }),
	/* 18 */
	/***/ (function(module, exports) {
	
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};
	
	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(72)
	  , defined = __webpack_require__(45);
	module.exports = function(it){
	  return IObject(defined(it));
	};
	
	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(177),
	  /* template */
	  __webpack_require__(305),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.initTimeDate = exports.nextMonth = exports.prevMonth = exports.getFirstDayOfMonth = exports.getDayCountOfMonth = exports.parseDate = exports.formatDate = exports.toDate = undefined;
	
	var _date = __webpack_require__(344);
	
	var _date2 = _interopRequireDefault(_date);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var toDate = exports.toDate = function toDate(date) {
	    date = new Date(date);
	    if (isNaN(date.getTime())) return null;
	    return date;
	};
	
	var formatDate = exports.formatDate = function formatDate(date, format) {
	    date = toDate(date);
	    if (!date) return '';
	    return _date2.default.format(date, format || 'yyyy-MM-dd');
	};
	
	var parseDate = exports.parseDate = function parseDate(string, format) {
	    return _date2.default.parse(string, format || 'yyyy-MM-dd');
	};
	
	var getDayCountOfMonth = exports.getDayCountOfMonth = function getDayCountOfMonth(year, month) {
	    if (month === 3 || month === 5 || month === 8 || month === 10) {
	        return 30;
	    }
	
	    if (month === 1) {
	        if (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0) {
	            return 29;
	        } else {
	            return 28;
	        }
	    }
	
	    return 31;
	};
	
	var getFirstDayOfMonth = exports.getFirstDayOfMonth = function getFirstDayOfMonth(date) {
	    var temp = new Date(date.getTime());
	    temp.setDate(1);
	    return temp.getDay();
	};
	
	var prevMonth = exports.prevMonth = function prevMonth(src) {
	    var year = src.getFullYear();
	    var month = src.getMonth();
	    var date = src.getDate();
	
	    var newYear = month === 0 ? year - 1 : year;
	    var newMonth = month === 0 ? 11 : month - 1;
	
	    var newMonthDayCount = getDayCountOfMonth(newYear, newMonth);
	    if (newMonthDayCount < date) {
	        src.setDate(newMonthDayCount);
	    }
	
	    src.setMonth(newMonth);
	    src.setFullYear(newYear);
	
	    return new Date(src.getTime());
	};
	
	var nextMonth = exports.nextMonth = function nextMonth(src) {
	    var year = src.getFullYear();
	    var month = src.getMonth();
	    var date = src.getDate();
	
	    var newYear = month === 11 ? year + 1 : year;
	    var newMonth = month === 11 ? 0 : month + 1;
	
	    var newMonthDayCount = getDayCountOfMonth(newYear, newMonth);
	    if (newMonthDayCount < date) {
	        src.setDate(newMonthDayCount);
	    }
	
	    src.setMonth(newMonth);
	    src.setFullYear(newYear);
	
	    return new Date(src.getTime());
	};
	
	var initTimeDate = exports.initTimeDate = function initTimeDate() {
	    var date = new Date();
	    date.setHours(0);
	    date.setMinutes(0);
	    date.setSeconds(0);
	    return date;
	};
	
	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(36);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};
	
	/***/ }),
	/* 23 */
	/***/ (function(module, exports) {
	
	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};
	
	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var dP         = __webpack_require__(14)
	  , createDesc = __webpack_require__(29);
	module.exports = __webpack_require__(16) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};
	
	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(77)
	  , enumBugKeys = __webpack_require__(46);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};
	
	/***/ }),
	/* 26 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    bind: function bind(el, binding, vnode) {
	        function documentHandler(e) {
	            if (el.contains(e.target)) {
	                return false;
	            }
	            if (binding.expression) {
	                binding.value(e);
	            }
	        }
	        el.__vueClickOutside__ = documentHandler;
	        document.addEventListener('click', documentHandler);
	    },
	    update: function update() {},
	    unbind: function unbind(el, binding) {
	        document.removeEventListener('click', el.__vueClickOutside__);
	        delete el.__vueClickOutside__;
	    }
	};
	
	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.off = exports.on = undefined;
	
	var _vue = __webpack_require__(12);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isServer = _vue2.default.prototype.$isServer;
	
	var on = exports.on = function () {
	    if (!isServer && document.addEventListener) {
	        return function (element, event, handler) {
	            if (element && event && handler) {
	                element.addEventListener(event, handler, false);
	            }
	        };
	    } else {
	        return function (element, event, handler) {
	            if (element && event && handler) {
	                element.attachEvent('on' + event, handler);
	            }
	        };
	    }
	}();
	
	var off = exports.off = function () {
	    if (!isServer && document.removeEventListener) {
	        return function (element, event, handler) {
	            if (element && event) {
	                element.removeEventListener(event, handler, false);
	            }
	        };
	    } else {
	        return function (element, event, handler) {
	            if (element && event) {
	                element.detachEvent('on' + event, handler);
	            }
	        };
	    }
	}();
	
	/***/ }),
	/* 28 */
	/***/ (function(module, exports) {
	
	module.exports = {};
	
	/***/ }),
	/* 29 */
	/***/ (function(module, exports) {
	
	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};
	
	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(45);
	module.exports = function(it){
	  return Object(defined(it));
	};
	
	/***/ }),
	/* 31 */
	/***/ (function(module, exports) {
	
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	
	/***/ }),
	/* 32 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(185),
	  /* template */
	  __webpack_require__(309),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 33 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(222),
	  /* template */
	  __webpack_require__(301),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 34 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(359), __esModule: true };
	
	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var prefixCls = 'ivu-picker-panel';
	var datePrefixCls = 'ivu-date-picker';
	
	exports.default = {
	    methods: {
	        iconBtnCls: function iconBtnCls(direction) {
	            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	            return [prefixCls + '-icon-btn', datePrefixCls + '-' + direction + '-btn', datePrefixCls + '-' + direction + '-btn-arrow' + type];
	        },
	        handleShortcutClick: function handleShortcutClick(shortcut) {
	            if (shortcut.value) this.$emit('on-pick', shortcut.value());
	            if (shortcut.onClick) shortcut.onClick(this);
	        },
	        handlePickClear: function handlePickClear() {
	            this.$emit('on-pick-clear');
	        },
	        handlePickSuccess: function handlePickSuccess() {
	            this.$emit('on-pick-success');
	        },
	        handlePickClick: function handlePickClick() {
	            this.$emit('on-pick-click');
	        }
	    }
	};
	
	/***/ }),
	/* 36 */
	/***/ (function(module, exports) {
	
	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};
	
	/***/ }),
	/* 37 */
	/***/ (function(module, exports) {
	
	exports.f = {}.propertyIsEnumerable;
	
	/***/ }),
	/* 38 */
	/***/ (function(module, exports) {
	
	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};
	
	/***/ }),
	/* 39 */
	/***/ (function(module, exports) {
	
	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};
	
	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(189),
	  /* template */
	  __webpack_require__(315),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 41 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(208),
	  /* template */
	  __webpack_require__(269),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 42 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _assist = __webpack_require__(2);
	
	var Transition = {
	    beforeEnter: function beforeEnter(el) {
	        (0, _assist.addClass)(el, 'collapse-transition');
	        if (!el.dataset) el.dataset = {};
	
	        el.dataset.oldPaddingTop = el.style.paddingTop;
	        el.dataset.oldPaddingBottom = el.style.paddingBottom;
	
	        el.style.height = '0';
	        el.style.paddingTop = 0;
	        el.style.paddingBottom = 0;
	    },
	    enter: function enter(el) {
	        el.dataset.oldOverflow = el.style.overflow;
	        if (el.scrollHeight !== 0) {
	            el.style.height = el.scrollHeight + 'px';
	            el.style.paddingTop = el.dataset.oldPaddingTop;
	            el.style.paddingBottom = el.dataset.oldPaddingBottom;
	        } else {
	            el.style.height = '';
	            el.style.paddingTop = el.dataset.oldPaddingTop;
	            el.style.paddingBottom = el.dataset.oldPaddingBottom;
	        }
	
	        el.style.overflow = 'hidden';
	    },
	    afterEnter: function afterEnter(el) {
	        (0, _assist.removeClass)(el, 'collapse-transition');
	        el.style.height = '';
	        el.style.overflow = el.dataset.oldOverflow;
	    },
	    beforeLeave: function beforeLeave(el) {
	        if (!el.dataset) el.dataset = {};
	        el.dataset.oldPaddingTop = el.style.paddingTop;
	        el.dataset.oldPaddingBottom = el.style.paddingBottom;
	        el.dataset.oldOverflow = el.style.overflow;
	
	        el.style.height = el.scrollHeight + 'px';
	        el.style.overflow = 'hidden';
	    },
	    leave: function leave(el) {
	        if (el.scrollHeight !== 0) {
	            (0, _assist.addClass)(el, 'collapse-transition');
	            el.style.height = 0;
	            el.style.paddingTop = 0;
	            el.style.paddingBottom = 0;
	        }
	    },
	    afterLeave: function afterLeave(el) {
	        (0, _assist.removeClass)(el, 'collapse-transition');
	        el.style.height = '';
	        el.style.overflow = el.dataset.oldOverflow;
	        el.style.paddingTop = el.dataset.oldPaddingTop;
	        el.style.paddingBottom = el.dataset.oldPaddingBottom;
	    }
	};
	
	exports.default = {
	    name: 'CollapseTransition',
	    functional: true,
	    render: function render(h, _ref) {
	        var children = _ref.children;
	
	        var data = {
	            on: Transition
	        };
	
	        return h('transition', data, children);
	    }
	};
	
	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _from = __webpack_require__(345);
	
	var _from2 = _interopRequireDefault(_from);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }
	
	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};
	
	/***/ }),
	/* 44 */
	/***/ (function(module, exports) {
	
	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};
	
	/***/ }),
	/* 45 */
	/***/ (function(module, exports) {
	
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};
	
	/***/ }),
	/* 46 */
	/***/ (function(module, exports) {
	
	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');
	
	/***/ }),
	/* 47 */
	/***/ (function(module, exports) {
	
	module.exports = true;
	
	/***/ }),
	/* 48 */
	/***/ (function(module, exports) {
	
	exports.f = Object.getOwnPropertySymbols;
	
	/***/ }),
	/* 49 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var def = __webpack_require__(14).f
	  , has = __webpack_require__(18)
	  , TAG = __webpack_require__(9)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};
	
	/***/ }),
	/* 50 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var shared = __webpack_require__(51)('keys')
	  , uid    = __webpack_require__(38);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};
	
	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global = __webpack_require__(13)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};
	
	/***/ }),
	/* 52 */
	/***/ (function(module, exports) {
	
	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};
	
	/***/ }),
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(36);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};
	
	/***/ }),
	/* 54 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global         = __webpack_require__(13)
	  , core           = __webpack_require__(7)
	  , LIBRARY        = __webpack_require__(47)
	  , wksExt         = __webpack_require__(55)
	  , defineProperty = __webpack_require__(14).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};
	
	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {
	
	exports.f = __webpack_require__(9);
	
	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var $at  = __webpack_require__(381)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(73)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});
	
	/***/ }),
	/* 57 */
	/***/ (function(module, exports) {
	
	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	
	/***/ }),
	/* 58 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(85)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});
	
	/***/ }),
	/* 59 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var dP         = __webpack_require__(408)
	  , createDesc = __webpack_require__(409);
	module.exports = __webpack_require__(58) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};
	
	/***/ }),
	/* 60 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.i18n = exports.use = exports.t = undefined;
	
	var _getPrototypeOf = __webpack_require__(349);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _zhCN = __webpack_require__(341);
	
	var _zhCN2 = _interopRequireDefault(_zhCN);
	
	var _vue = __webpack_require__(12);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _deepmerge = __webpack_require__(417);
	
	var _deepmerge2 = _interopRequireDefault(_deepmerge);
	
	var _format = __webpack_require__(340);
	
	var _format2 = _interopRequireDefault(_format);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var format = (0, _format2.default)(_vue2.default);
	var lang = _zhCN2.default;
	var merged = false;
	var i18nHandler = function i18nHandler() {
	    var vuei18n = (0, _getPrototypeOf2.default)(this || _vue2.default).$t;
	    if (typeof vuei18n === 'function') {
	        if (!merged) {
	            merged = true;
	            _vue2.default.locale(_vue2.default.config.lang, (0, _deepmerge2.default)(lang, _vue2.default.locale(_vue2.default.config.lang) || {}, { clone: true }));
	        }
	        return vuei18n.apply(this, arguments);
	    }
	};
	
	var t = exports.t = function t(path, options) {
	    var value = i18nHandler.apply(this, arguments);
	    if (value !== null && value !== undefined) return value;
	
	    var array = path.split('.');
	    var current = lang;
	
	    for (var i = 0, j = array.length; i < j; i++) {
	        var property = array[i];
	        value = current[property];
	        if (i === j - 1) return format(value, options);
	        if (!value) return '';
	        current = value;
	    }
	    return '';
	};
	
	var use = exports.use = function use(l) {
	    lang = l || lang;
	};
	
	var i18n = exports.i18n = function i18n(fn) {
	    i18nHandler = fn || i18nHandler;
	};
	
	exports.default = { use: use, t: t, i18n: i18n };
	
	/***/ }),
	/* 61 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(4);
	
	
	/**
	 *  Rule for validating required fields.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function required(rule, value, source, errors, options, type) {
	  if (rule.required && (!source.hasOwnProperty(rule.field) || __WEBPACK_IMPORTED_MODULE_0__util__["f" /* isEmptyValue */](value, type || rule.type))) {
	    errors.push(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* format */](options.messages.required, rule.fullField));
	  }
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (required);
	
	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _notification = __webpack_require__(423);
	
	var _notification2 = _interopRequireDefault(_notification);
	
	var _vue = __webpack_require__(12);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_notification2.default.newInstance = function (properties) {
	    var _props = properties || {};
	
	    var Instance = new _vue2.default({
	        data: _props,
	        render: function render(h) {
	            return h(_notification2.default, {
	                props: _props
	            });
	        }
	    });
	
	    var component = Instance.$mount();
	    document.body.appendChild(component.$el);
	    var notification = Instance.$children[0];
	
	    return {
	        notice: function notice(noticeProps) {
	            notification.add(noticeProps);
	        },
	        remove: function remove(name) {
	            notification.close(name);
	        },
	
	        component: notification,
	        destroy: function destroy(element) {
	            notification.closeAll();
	            setTimeout(function () {
	                document.body.removeChild(document.getElementsByClassName(element)[0]);
	            }, 500);
	        }
	    };
	};
	
	exports.default = _notification2.default;
	
	/***/ }),
	/* 63 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _vue = __webpack_require__(12);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isServer = _vue2.default.prototype.$isServer;
	var Popper = isServer ? function () {} : __webpack_require__(88);exports.default = {
	    props: {
	        placement: {
	            type: String,
	            default: 'bottom'
	        },
	        boundariesPadding: {
	            type: Number,
	            default: 5
	        },
	        reference: Object,
	        popper: Object,
	        offset: {
	            default: 0
	        },
	        value: {
	            type: Boolean,
	            default: false
	        },
	        transition: String,
	        options: {
	            type: Object,
	            default: function _default() {
	                return {
	                    gpuAcceleration: false,
	                    boundariesElement: 'body' };
	            }
	        }
	    },
	    data: function data() {
	        return {
	            visible: this.value
	        };
	    },
	
	    watch: {
	        value: {
	            immediate: true,
	            handler: function handler(val) {
	                this.visible = val;
	                this.$emit('input', val);
	            }
	        },
	        visible: function visible(val) {
	            if (val) {
	                this.updatePopper();
	            } else {
	                this.destroyPopper();
	                this.$emit('on-popper-hide');
	            }
	            this.$emit('input', val);
	        }
	    },
	    methods: {
	        createPopper: function createPopper() {
	            var _this = this;
	
	            if (isServer) return;
	            if (!/^(top|bottom|left|right)(-start|-end)?$/g.test(this.placement)) {
	                return;
	            }
	
	            var options = this.options;
	            var popper = this.popper || this.$refs.popper;
	            var reference = this.reference || this.$refs.reference;
	
	            if (!popper || !reference) return;
	
	            if (this.popperJS && this.popperJS.hasOwnProperty('destroy')) {
	                this.popperJS.destroy();
	            }
	
	            options.placement = this.placement;
	            options.offset = this.offset;
	
	            this.popperJS = new Popper(reference, popper, options);
	            this.popperJS.onCreate(function (popper) {
	                _this.resetTransformOrigin(popper);
	                _this.$nextTick(_this.updatePopper);
	                _this.$emit('created', _this);
	            });
	        },
	        updatePopper: function updatePopper() {
	            if (isServer) return;
	            this.popperJS ? this.popperJS.update() : this.createPopper();
	        },
	        doDestroy: function doDestroy() {
	            if (isServer) return;
	            if (this.visible) return;
	            this.popperJS.destroy();
	            this.popperJS = null;
	        },
	        destroyPopper: function destroyPopper() {
	            if (isServer) return;
	            if (this.popperJS) {
	                this.resetTransformOrigin(this.popperJS);
	            }
	        },
	        resetTransformOrigin: function resetTransformOrigin(popper) {
	            if (isServer) return;
	            var placementMap = { top: 'bottom', bottom: 'top', left: 'right', right: 'left' };
	            var placement = popper._popper.getAttribute('x-placement').split('-')[0];
	            var origin = placementMap[placement];
	            popper._popper.style.transformOrigin = ['top', 'bottom'].indexOf(placement) > -1 ? 'center ' + origin : origin + ' center';
	        }
	    },
	    beforeDestroy: function beforeDestroy() {
	        if (isServer) return;
	        if (this.popperJS) {
	            this.popperJS.destroy();
	        }
	    }
	};
	
	/***/ }),
	/* 64 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    props: {
	        disabledHours: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        disabledMinutes: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        disabledSeconds: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        hideDisabledOptions: {
	            type: Boolean,
	            default: false
	        }
	    }
	};
	
	/***/ }),
	/* 65 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    name: 'TableExpand',
	    functional: true,
	    props: {
	        row: Object,
	        render: Function,
	        index: Number,
	        column: {
	            type: Object,
	            default: null
	        }
	    },
	    render: function render(h, ctx) {
	        var params = {
	            row: ctx.props.row,
	            index: ctx.props.index
	        };
	        if (ctx.props.column) params.column = ctx.props.column;
	        return ctx.props.render(h, params);
	    }
	};
	
	/***/ }),
	/* 66 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    methods: {
	        alignCls: function alignCls(column) {
	            var _ref;
	
	            var row = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	            var cellClassName = '';
	            if (row.cellClassName && column.key && row.cellClassName[column.key]) {
	                cellClassName = row.cellClassName[column.key];
	            }
	            return [(_ref = {}, (0, _defineProperty3.default)(_ref, '' + cellClassName, cellClassName), (0, _defineProperty3.default)(_ref, '' + column.className, column.className), (0, _defineProperty3.default)(_ref, this.prefixCls + '-column-' + column.align, column.align), (0, _defineProperty3.default)(_ref, this.prefixCls + '-hidden', this.fixed === 'left' && column.fixed !== 'left' || this.fixed === 'right' && column.fixed !== 'right' || !this.fixed && column.fixed && (column.fixed === 'left' || column.fixed === 'right')), _ref)];
	        },
	        isPopperShow: function isPopperShow(column) {
	            return column.filters && (!this.fixed && !column.fixed || this.fixed === 'left' && column.fixed === 'left' || this.fixed === 'right' && column.fixed === 'right');
	        },
	        setCellWidth: function setCellWidth(column, index, top) {
	            var width = '';
	            if (column.width) {
	                width = column.width;
	            } else if (this.columnsWidth[column._index]) {
	                width = this.columnsWidth[column._index].width;
	            }
	
	            if (this.columns.length === index + 1 && top && this.$parent.bodyHeight !== 0) {
	                width += this.$parent.scrollBarWidth;
	            }
	
	            if (this.fixed === 'right') {
	                var firstFixedIndex = this.columns.findIndex(function (col) {
	                    return col.fixed === 'right';
	                });
	                if (firstFixedIndex === index) width += this.$parent.scrollBarWidth;
	            }
	            return width;
	        }
	    }
	};
	
	/***/ }),
	/* 67 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(354), __esModule: true };
	
	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _assign = __webpack_require__(10);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};
	
	/***/ }),
	/* 69 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// optional / simple context binding
	var aFunction = __webpack_require__(362);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};
	
	/***/ }),
	/* 70 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(36)
	  , document = __webpack_require__(13).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};
	
	/***/ }),
	/* 71 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = !__webpack_require__(16) && !__webpack_require__(23)(function(){
	  return Object.defineProperty(__webpack_require__(70)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});
	
	/***/ }),
	/* 72 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(44);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};
	
	/***/ }),
	/* 73 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var LIBRARY        = __webpack_require__(47)
	  , $export        = __webpack_require__(17)
	  , redefine       = __webpack_require__(79)
	  , hide           = __webpack_require__(24)
	  , has            = __webpack_require__(18)
	  , Iterators      = __webpack_require__(28)
	  , $iterCreate    = __webpack_require__(372)
	  , setToStringTag = __webpack_require__(49)
	  , getPrototypeOf = __webpack_require__(76)
	  , ITERATOR       = __webpack_require__(9)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};
	
	/***/ }),
	/* 74 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(22)
	  , dPs         = __webpack_require__(378)
	  , enumBugKeys = __webpack_require__(46)
	  , IE_PROTO    = __webpack_require__(50)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(70)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(368).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};
	
	
	/***/ }),
	/* 75 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(77)
	  , hiddenKeys = __webpack_require__(46).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};
	
	/***/ }),
	/* 76 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(18)
	  , toObject    = __webpack_require__(30)
	  , IE_PROTO    = __webpack_require__(50)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};
	
	/***/ }),
	/* 77 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var has          = __webpack_require__(18)
	  , toIObject    = __webpack_require__(19)
	  , arrayIndexOf = __webpack_require__(364)(false)
	  , IE_PROTO     = __webpack_require__(50)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};
	
	/***/ }),
	/* 78 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(17)
	  , core    = __webpack_require__(7)
	  , fails   = __webpack_require__(23);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};
	
	/***/ }),
	/* 79 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = __webpack_require__(24);
	
	/***/ }),
	/* 80 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.15 ToLength
	var toInteger = __webpack_require__(52)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};
	
	/***/ }),
	/* 81 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var classof   = __webpack_require__(365)
	  , ITERATOR  = __webpack_require__(9)('iterator')
	  , Iterators = __webpack_require__(28);
	module.exports = __webpack_require__(7).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};
	
	/***/ }),
	/* 82 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(385);
	var global        = __webpack_require__(13)
	  , hide          = __webpack_require__(24)
	  , Iterators     = __webpack_require__(28)
	  , TO_STRING_TAG = __webpack_require__(9)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}
	
	/***/ }),
	/* 83 */
	/***/ (function(module, exports) {
	
	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};
	
	/***/ }),
	/* 84 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// optional / simple context binding
	var aFunction = __webpack_require__(395);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};
	
	/***/ }),
	/* 85 */
	/***/ (function(module, exports) {
	
	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};
	
	/***/ }),
	/* 86 */
	/***/ (function(module, exports) {
	
	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};
	
	/***/ }),
	/* 87 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var store      = __webpack_require__(411)('wks')
	  , uid        = __webpack_require__(86)
	  , Symbol     = __webpack_require__(31).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;
	
	/***/ }),
	/* 88 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * @fileOverview Kickass library to create and place poppers near their reference elements.
	 * @version {{version}}
	 * @license
	 * Copyright (c) 2016 Federico Zivolo and contributors
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 */
	
	//
	// Cross module loader
	// Supported: Node, AMD, Browser globals
	//
	;(function (root, factory) {
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
					__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
					(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
					__WEBPACK_AMD_DEFINE_FACTORY__),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module === 'object' && module.exports) {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like environments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals (root is window)
	        root.Popper = factory();
	    }
	}(this, function () {
	
	    'use strict';
	
	    var root = window;
	
	    // default options
	    var DEFAULTS = {
	        // placement of the popper
	        placement: 'bottom',
	
	        gpuAcceleration: true,
	
	        // shift popper from its origin by the given amount of pixels (can be negative)
	        offset: 0,
	
	        // the element which will act as boundary of the popper
	        boundariesElement: 'viewport',
	
	        // amount of pixel used to define a minimum distance between the boundaries and the popper
	        boundariesPadding: 5,
	
	        // popper will try to prevent overflow following this order,
	        // by default, then, it could overflow on the left and on top of the boundariesElement
	        preventOverflowOrder: ['left', 'right', 'top', 'bottom'],
	
	        // the behavior used by flip to change the placement of the popper
	        flipBehavior: 'flip',
	
	        arrowElement: '[x-arrow]',
	
	        // list of functions used to modify the offsets before they are applied to the popper
	        modifiers: [ 'shift', 'offset', 'preventOverflow', 'keepTogether', 'arrow', 'flip', 'applyStyle'],
	
	        modifiersIgnored: [],
	    };
	
	    /**
	     * Create a new Popper.js instance
	     * @constructor Popper
	     * @param {HTMLElement} reference - The reference element used to position the popper
	     * @param {HTMLElement|Object} popper
	     *      The HTML element used as popper, or a configuration used to generate the popper.
	     * @param {String} [popper.tagName='div'] The tag name of the generated popper.
	     * @param {Array} [popper.classNames=['popper']] Array of classes to apply to the generated popper.
	     * @param {Array} [popper.attributes] Array of attributes to apply, specify `attr:value` to assign a value to it.
	     * @param {HTMLElement|String} [popper.parent=window.document.body] The parent element, given as HTMLElement or as query string.
	     * @param {String} [popper.content=''] The content of the popper, it can be text, html, or node; if it is not text, set `contentType` to `html` or `node`.
	     * @param {String} [popper.contentType='text'] If `html`, the `content` will be parsed as HTML. If `node`, it will be appended as-is.
	     * @param {String} [popper.arrowTagName='div'] Same as `popper.tagName` but for the arrow element.
	     * @param {Array} [popper.arrowClassNames='popper__arrow'] Same as `popper.classNames` but for the arrow element.
	     * @param {String} [popper.arrowAttributes=['x-arrow']] Same as `popper.attributes` but for the arrow element.
	     * @param {Object} options
	     * @param {String} [options.placement=bottom]
	     *      Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -right),
	     *      left(-start, -end)`
	     *
	     * @param {HTMLElement|String} [options.arrowElement='[x-arrow]']
	     *      The DOM Node used as arrow for the popper, or a CSS selector used to get the DOM node. It must be child of
	     *      its parent Popper. Popper.js will apply to the given element the style required to align the arrow with its
	     *      reference element.
	     *      By default, it will look for a child node of the popper with the `x-arrow` attribute.
	     *
	     * @param {Boolean} [options.gpuAcceleration=true]
	     *      When this property is set to true, the popper position will be applied using CSS3 translate3d, allowing the
	     *      browser to use the GPU to accelerate the rendering.
	     *      If set to false, the popper will be placed using `top` and `left` properties, not using the GPU.
	     *
	     * @param {Number} [options.offset=0]
	     *      Amount of pixels the popper will be shifted (can be negative).
	     *
	     * @param {String|Element} [options.boundariesElement='viewport']
	     *      The element which will define the boundaries of the popper position, the popper will never be placed outside
	     *      of the defined boundaries (except if `keepTogether` is enabled)
	     *
	     * @param {Number} [options.boundariesPadding=5]
	     *      Additional padding for the boundaries
	     *
	     * @param {Array} [options.preventOverflowOrder=['left', 'right', 'top', 'bottom']]
	     *      Order used when Popper.js tries to avoid overflows from the boundaries, they will be checked in order,
	     *      this means that the last ones will never overflow
	     *
	     * @param {String|Array} [options.flipBehavior='flip']
	     *      The behavior used by the `flip` modifier to change the placement of the popper when the latter is trying to
	     *      overlap its reference element. Defining `flip` as value, the placement will be flipped on
	     *      its axis (`right - left`, `top - bottom`).
	     *      You can even pass an array of placements (eg: `['right', 'left', 'top']` ) to manually specify
	     *      how alter the placement when a flip is needed. (eg. in the above example, it would first flip from right to left,
	     *      then, if even in its new placement, the popper is overlapping its reference element, it will be moved to top)
	     *
	     * @param {Array} [options.modifiers=[ 'shift', 'offset', 'preventOverflow', 'keepTogether', 'arrow', 'flip', 'applyStyle']]
	     *      List of functions used to modify the data before they are applied to the popper, add your custom functions
	     *      to this array to edit the offsets and placement.
	     *      The function should reflect the @params and @returns of preventOverflow
	     *
	     * @param {Array} [options.modifiersIgnored=[]]
	     *      Put here any built-in modifier name you want to exclude from the modifiers list
	     *      The function should reflect the @params and @returns of preventOverflow
	     *
	     * @param {Boolean} [options.removeOnDestroy=false]
	     *      Set to true if you want to automatically remove the popper when you call the `destroy` method.
	     */
	    function Popper(reference, popper, options) {
	        this._reference = reference.jquery ? reference[0] : reference;
	        this.state = { onCreateCalled: false };
	
	        // if the popper variable is a configuration object, parse it to generate an HTMLElement
	        // generate a default popper if is not defined
	        var isNotDefined = typeof popper === 'undefined' || popper === null;
	        var isConfig = popper && Object.prototype.toString.call(popper) === '[object Object]';
	        if (isNotDefined || isConfig) {
	            this._popper = this.parse(isConfig ? popper : {});
	        }
	        // otherwise, use the given HTMLElement as popper
	        else {
	            this._popper = popper.jquery ? popper[0] : popper;
	        }
	
	        // with {} we create a new object with the options inside it
	        this._options = Object.assign({}, DEFAULTS, options);
	
	        // refactoring modifiers' list
	        this._options.modifiers = this._options.modifiers.map(function(modifier){
	            // remove ignored modifiers
	            if (this._options.modifiersIgnored.indexOf(modifier) !== -1) return;
	
	            // set the x-placement attribute before everything else because it could be used to add margins to the popper
	            // margins needs to be calculated to get the correct popper offsets
	            if (modifier === 'applyStyle') {
	                this._popper.setAttribute('x-placement', this._options.placement);
	            }
	
	            // return predefined modifier identified by string or keep the custom one
	            return this.modifiers[modifier] || modifier;
	        }.bind(this));
	
	        // make sure to apply the popper position before any computation
	        this.state.position = this._getPosition(this._popper, this._reference);
	        setStyle(this._popper, { position: this.state.position});
	
	        // determine how we should set the origin of offsets
	        this.state.isParentTransformed = this._getIsParentTransformed(this._popper);
	
	        // fire the first update to position the popper in the right place
	        this.update();
	
	        // setup event listeners, they will take care of update the position in specific situations
	        this._setupEventListeners();
	        return this;
	    }
	
	
	    //
	    // Methods
	    //
	    /**
	     * Destroy the popper
	     * @method
	     * @memberof Popper
	     */
	    Popper.prototype.destroy = function() {
	        this._popper.removeAttribute('x-placement');
	        this._popper.style.left = '';
	        this._popper.style.position = '';
	        this._popper.style.top = '';
	        this._popper.style[getSupportedPropertyName('transform')] = '';
	        this._removeEventListeners();
	
	        // remove the popper if user explicity asked for the deletion on destroy
	        if (this._options.removeOnDestroy) {
	            this._popper.parentNode.removeChild(this._popper);
	        }
	        return this;
	    };
	
	    /**
	     * Updates the position of the popper, computing the new offsets and applying the new style
	     * @method
	     * @memberof Popper
	     */
	    Popper.prototype.update = function() {
	        var data = { instance: this, styles: {} };
	
	        // make sure to apply the popper position before any computation
	        this.state.position = this._getPosition(this._popper, this._reference);
	        setStyle(this._popper, { position: this.state.position});
	
	        // to avoid useless computations we throttle the popper position refresh to 60fps
	        root.requestAnimationFrame(function() {
	            var now = root.performance.now();
	            if(now - this.state.lastFrame <= 16) {
	                // this update fired to early! drop it
	                return;
	            }
	            this.state.lastFrame = now;
	
	            // store placement inside the data object, modifiers will be able to edit `placement` if needed
	            // and refer to _originalPlacement to know the original value
	            data.placement = this._options.placement;
	            data._originalPlacement = this._options.placement;
	
	            // compute the popper and trigger offsets and put them inside data.offsets
	            data.offsets = this._getOffsets(this._popper, this._reference, data.placement);
	
	            // get boundaries
	            data.boundaries = this._getBoundaries(data, this._options.boundariesPadding, this._options.boundariesElement);
	
	            data = this.runModifiers(data, this._options.modifiers);
	
	            if (!isFunction(this.state.createCalback)) {
	                this.state.onCreateCalled = true;
	            }
	            if (!this.state.onCreateCalled) {
	                this.state.onCreateCalled = true;
	                if (isFunction(this.state.createCalback)) {
	                    this.state.createCalback(this);
	                }
	            } else if (isFunction(this.state.updateCallback)) {
	                this.state.updateCallback(data);
	            }
	        }.bind(this));
	    };
	
	    /**
	     * If a function is passed, it will be executed after the initialization of popper with as first argument the Popper instance.
	     * @method
	     * @memberof Popper
	     * @param {Function} callback
	     */
	    Popper.prototype.onCreate = function(callback) {
	        // the createCallbacks return as first argument the popper instance
	        this.state.createCalback = callback;
	        return this;
	    };
	
	    /**
	     * If a function is passed, it will be executed after each update of popper with as first argument the set of coordinates and informations
	     * used to style popper and its arrow.
	     * NOTE: it doesn't get fired on the first call of the `Popper.update()` method inside the `Popper` constructor!
	     * @method
	     * @memberof Popper
	     * @param {Function} callback
	     */
	    Popper.prototype.onUpdate = function(callback) {
	        this.state.updateCallback = callback;
	        return this;
	    };
	
	    /**
	     * Helper used to generate poppers from a configuration file
	     * @method
	     * @memberof Popper
	     * @param config {Object} configuration
	     * @returns {HTMLElement} popper
	     */
	    Popper.prototype.parse = function(config) {
	        var defaultConfig = {
	            tagName: 'div',
	            classNames: [ 'popper' ],
	            attributes: [],
	            parent: root.document.body,
	            content: '',
	            contentType: 'text',
	            arrowTagName: 'div',
	            arrowClassNames: [ 'popper__arrow' ],
	            arrowAttributes: [ 'x-arrow']
	        };
	        config = Object.assign({}, defaultConfig, config);
	
	        var d = root.document;
	
	        var popper = d.createElement(config.tagName);
	        addClassNames(popper, config.classNames);
	        addAttributes(popper, config.attributes);
	        if (config.contentType === 'node') {
	            popper.appendChild(config.content.jquery ? config.content[0] : config.content);
	        }else if (config.contentType === 'html') {
	            popper.innerHTML = config.content;
	        } else {
	            popper.textContent = config.content;
	        }
	
	        if (config.arrowTagName) {
	            var arrow = d.createElement(config.arrowTagName);
	            addClassNames(arrow, config.arrowClassNames);
	            addAttributes(arrow, config.arrowAttributes);
	            popper.appendChild(arrow);
	        }
	
	        var parent = config.parent.jquery ? config.parent[0] : config.parent;
	
	        // if the given parent is a string, use it to match an element
	        // if more than one element is matched, the first one will be used as parent
	        // if no elements are matched, the script will throw an error
	        if (typeof parent === 'string') {
	            parent = d.querySelectorAll(config.parent);
	            if (parent.length > 1) {
	                console.warn('WARNING: the given `parent` query(' + config.parent + ') matched more than one element, the first one will be used');
	            }
	            if (parent.length === 0) {
	                throw 'ERROR: the given `parent` doesn\'t exists!';
	            }
	            parent = parent[0];
	        }
	        // if the given parent is a DOM nodes list or an array of nodes with more than one element,
	        // the first one will be used as parent
	        if (parent.length > 1 && parent instanceof Element === false) {
	            console.warn('WARNING: you have passed as parent a list of elements, the first one will be used');
	            parent = parent[0];
	        }
	
	        // append the generated popper to its parent
	        parent.appendChild(popper);
	
	        return popper;
	
	        /**
	         * Adds class names to the given element
	         * @function
	         * @ignore
	         * @param {HTMLElement} target
	         * @param {Array} classes
	         */
	        function addClassNames(element, classNames) {
	            classNames.forEach(function(className) {
	                element.classList.add(className);
	            });
	        }
	
	        /**
	         * Adds attributes to the given element
	         * @function
	         * @ignore
	         * @param {HTMLElement} target
	         * @param {Array} attributes
	         * @example
	         * addAttributes(element, [ 'data-info:foobar' ]);
	         */
	        function addAttributes(element, attributes) {
	            attributes.forEach(function(attribute) {
	                element.setAttribute(attribute.split(':')[0], attribute.split(':')[1] || '');
	            });
	        }
	
	    };
	
	    /**
	     * Helper used to get the position which will be applied to the popper
	     * @method
	     * @memberof Popper
	     * @param config {HTMLElement} popper element
	     * @returns {HTMLElement} reference element
	     */
	    Popper.prototype._getPosition = function(popper, reference) {
	        var container = getOffsetParent(reference);
	
	        // Decide if the popper will be fixed
	        // If the reference element is inside a fixed context, the popper will be fixed as well to allow them to scroll together
	        var isParentFixed = isFixed(container);
	        return isParentFixed ? 'fixed' : 'absolute';
	    };
	
	    /**
	     * Helper used to determine if the popper's parent is transformed.
	     * @param  {[type]} popper [description]
	     * @return {[type]}        [description]
	     */
	    Popper.prototype._getIsParentTransformed = function(popper) {
	      return isTransformed(popper.parentNode);
	    };
	
	    /**
	     * Get offsets to the popper
	     * @method
	     * @memberof Popper
	     * @access private
	     * @param {Element} popper - the popper element
	     * @param {Element} reference - the reference element (the popper will be relative to this)
	     * @returns {Object} An object containing the offsets which will be applied to the popper
	     */
	    Popper.prototype._getOffsets = function(popper, reference, placement) {
	        placement = placement.split('-')[0];
	        var popperOffsets = {};
	
	        popperOffsets.position = this.state.position;
	        var isParentFixed = popperOffsets.position === 'fixed';
	
	        var isParentTransformed = this.state.isParentTransformed;
	
	        //
	        // Get reference element position
	        //
	        var offsetParent = (isParentFixed && isParentTransformed) ? getOffsetParent(reference) : getOffsetParent(popper);
	        var referenceOffsets = getOffsetRectRelativeToCustomParent(reference, offsetParent, isParentFixed, isParentTransformed);
	
	        //
	        // Get popper sizes
	        //
	        var popperRect = getOuterSizes(popper);
	
	        //
	        // Compute offsets of popper
	        //
	
	        // depending by the popper placement we have to compute its offsets slightly differently
	        if (['right', 'left'].indexOf(placement) !== -1) {
	            popperOffsets.top = referenceOffsets.top + referenceOffsets.height / 2 - popperRect.height / 2;
	            if (placement === 'left') {
	                popperOffsets.left = referenceOffsets.left - popperRect.width;
	            } else {
	                popperOffsets.left = referenceOffsets.right;
	            }
	        } else {
	            popperOffsets.left = referenceOffsets.left + referenceOffsets.width / 2 - popperRect.width / 2;
	            if (placement === 'top') {
	                popperOffsets.top = referenceOffsets.top - popperRect.height;
	            } else {
	                popperOffsets.top = referenceOffsets.bottom;
	            }
	        }
	
	        // Add width and height to our offsets object
	        popperOffsets.width   = popperRect.width;
	        popperOffsets.height  = popperRect.height;
	
	
	        return {
	            popper: popperOffsets,
	            reference: referenceOffsets
	        };
	    };
	
	
	    /**
	     * Setup needed event listeners used to update the popper position
	     * @method
	     * @memberof Popper
	     * @access private
	     */
	    Popper.prototype._setupEventListeners = function() {
	        // NOTE: 1 DOM access here
	        this.state.updateBound = this.update.bind(this);
	        root.addEventListener('resize', this.state.updateBound);
	        // if the boundariesElement is window we don't need to listen for the scroll event
	        if (this._options.boundariesElement !== 'window') {
	            var target = getScrollParent(this._reference);
	            // here it could be both `body` or `documentElement` thanks to Firefox, we then check both
	            if (target === root.document.body || target === root.document.documentElement) {
	                target = root;
	            }
	            target.addEventListener('scroll', this.state.updateBound);
	        }
	    };
	
	    /**
	     * Remove event listeners used to update the popper position
	     * @method
	     * @memberof Popper
	     * @access private
	     */
	    Popper.prototype._removeEventListeners = function() {
	        // NOTE: 1 DOM access here
	        root.removeEventListener('resize', this.state.updateBound);
	        if (this._options.boundariesElement !== 'window') {
	            var target = getScrollParent(this._reference);
	            // here it could be both `body` or `documentElement` thanks to Firefox, we then check both
	            if (target === root.document.body || target === root.document.documentElement) {
	                target = root;
	            }
	            target.removeEventListener('scroll', this.state.updateBound);
	        }
	        this.state.updateBound = null;
	    };
	
	    /**
	     * Computed the boundaries limits and return them
	     * @method
	     * @memberof Popper
	     * @access private
	     * @param {Object} data - Object containing the property "offsets" generated by `_getOffsets`
	     * @param {Number} padding - Boundaries padding
	     * @param {Element} boundariesElement - Element used to define the boundaries
	     * @returns {Object} Coordinates of the boundaries
	     */
	    Popper.prototype._getBoundaries = function(data, padding, boundariesElement) {
	        // NOTE: 1 DOM access here
	        var boundaries = {};
	        var width, height;
	        if (boundariesElement === 'window') {
	            var body = root.document.body,
	                html = root.document.documentElement;
	
	            height = Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight );
	            width = Math.max( body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth );
	
	            boundaries = {
	                top: 0,
	                right: width,
	                bottom: height,
	                left: 0
	            };
	        } else if (boundariesElement === 'viewport') {
	            var offsetParent = getOffsetParent(this._popper);
	            var scrollParent = getScrollParent(this._popper);
	            var offsetParentRect = getOffsetRect(offsetParent);
	
	            // if the popper is fixed we don't have to substract scrolling from the boundaries
	            var scrollTop = data.offsets.popper.position === 'fixed' ? 0 : scrollParent.scrollTop;
	            var scrollLeft = data.offsets.popper.position === 'fixed' ? 0 : scrollParent.scrollLeft;
	
	            boundaries = {
	                top: 0 - (offsetParentRect.top - scrollTop),
	                right: root.document.documentElement.clientWidth - (offsetParentRect.left - scrollLeft),
	                bottom: root.document.documentElement.clientHeight - (offsetParentRect.top - scrollTop),
	                left: 0 - (offsetParentRect.left - scrollLeft)
	            };
	        } else {
	            if (getOffsetParent(this._popper) === boundariesElement) {
	                boundaries = {
	                    top: 0,
	                    left: 0,
	                    right: boundariesElement.clientWidth,
	                    bottom: boundariesElement.clientHeight
	                };
	            } else {
	                boundaries = getOffsetRect(boundariesElement);
	            }
	        }
	        boundaries.left += padding;
	        boundaries.right -= padding;
	        boundaries.top = boundaries.top + padding;
	        boundaries.bottom = boundaries.bottom - padding;
	        return boundaries;
	    };
	
	
	    /**
	     * Loop trough the list of modifiers and run them in order, each of them will then edit the data object
	     * @method
	     * @memberof Popper
	     * @access public
	     * @param {Object} data
	     * @param {Array} modifiers
	     * @param {Function} ends
	     */
	    Popper.prototype.runModifiers = function(data, modifiers, ends) {
	        var modifiersToRun = modifiers.slice();
	        if (ends !== undefined) {
	            modifiersToRun = this._options.modifiers.slice(0, getArrayKeyIndex(this._options.modifiers, ends));
	        }
	
	        modifiersToRun.forEach(function(modifier) {
	            if (isFunction(modifier)) {
	                data = modifier.call(this, data);
	            }
	        }.bind(this));
	
	        return data;
	    };
	
	    /**
	     * Helper used to know if the given modifier depends from another one.
	     * @method
	     * @memberof Popper
	     * @returns {Boolean}
	     */
	
	    Popper.prototype.isModifierRequired = function(requesting, requested) {
	        var index = getArrayKeyIndex(this._options.modifiers, requesting);
	        return !!this._options.modifiers.slice(0, index).filter(function(modifier) {
	            return modifier === requested;
	        }).length;
	    };
	
	    //
	    // Modifiers
	    //
	
	    /**
	     * Modifiers list
	     * @namespace Popper.modifiers
	     * @memberof Popper
	     * @type {Object}
	     */
	    Popper.prototype.modifiers = {};
	
	    /**
	     * Apply the computed styles to the popper element
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by `update` method
	     * @returns {Object} The same data object
	     */
	    Popper.prototype.modifiers.applyStyle = function(data) {
	        // apply the final offsets to the popper
	        // NOTE: 1 DOM access here
	        var styles = {
	            position: data.offsets.popper.position
	        };
	
	        // round top and left to avoid blurry text
	        var left = Math.round(data.offsets.popper.left);
	        var top = Math.round(data.offsets.popper.top);
	
	        // if gpuAcceleration is set to true and transform is supported, we use `translate3d` to apply the position to the popper
	        // we automatically use the supported prefixed version if needed
	        var prefixedProperty;
	        if (this._options.gpuAcceleration && (prefixedProperty = getSupportedPropertyName('transform'))) {
	            styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
	            styles.top = 0;
	            styles.left = 0;
	        }
	        // othwerise, we use the standard `left` and `top` properties
	        else {
	            styles.left =left;
	            styles.top = top;
	        }
	
	        // any property present in `data.styles` will be applied to the popper,
	        // in this way we can make the 3rd party modifiers add custom styles to it
	        // Be aware, modifiers could override the properties defined in the previous
	        // lines of this modifier!
	        Object.assign(styles, data.styles);
	
	        setStyle(this._popper, styles);
	
	        // set an attribute which will be useful to style the tooltip (use it to properly position its arrow)
	        // NOTE: 1 DOM access here
	        this._popper.setAttribute('x-placement', data.placement);
	
	        // if the arrow style has been computed, apply the arrow style
	        if (data.offsets.arrow) {
	            setStyle(data.arrowElement, data.offsets.arrow);
	        }
	
	        // return the data object to allow chaining of other modifiers
	        return data;
	    };
	
	    /**
	     * Modifier used to shift the popper on the start or end of its reference element side
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by `update` method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.shift = function(data) {
	        var placement = data.placement;
	        var basePlacement = placement.split('-')[0];
	        var shiftVariation = placement.split('-')[1];
	
	        // if shift shiftVariation is specified, run the modifier
	        if (shiftVariation) {
	            var reference = data.offsets.reference;
	            var popper = getPopperClientRect(data.offsets.popper);
	
	            var shiftOffsets = {
	                y: {
	                    start:  { top: reference.top },
	                    end:    { top: reference.top + reference.height - popper.height }
	                },
	                x: {
	                    start:  { left: reference.left },
	                    end:    { left: reference.left + reference.width - popper.width }
	                }
	            };
	
	            var axis = ['bottom', 'top'].indexOf(basePlacement) !== -1 ? 'x' : 'y';
	
	            data.offsets.popper = Object.assign(popper, shiftOffsets[axis][shiftVariation]);
	        }
	
	        return data;
	    };
	
	
	    /**
	     * Modifier used to make sure the popper does not overflows from it's boundaries
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by `update` method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.preventOverflow = function(data) {
	        var order = this._options.preventOverflowOrder;
	        var popper = getPopperClientRect(data.offsets.popper);
	
	        var check = {
	            left: function() {
	                var left = popper.left;
	                if (popper.left < data.boundaries.left) {
	                    left = Math.max(popper.left, data.boundaries.left);
	                }
	                return { left: left };
	            },
	            right: function() {
	                var left = popper.left;
	                if (popper.right > data.boundaries.right) {
	                    left = Math.min(popper.left, data.boundaries.right - popper.width);
	                }
	                return { left: left };
	            },
	            top: function() {
	                var top = popper.top;
	                if (popper.top < data.boundaries.top) {
	                    top = Math.max(popper.top, data.boundaries.top);
	                }
	                return { top: top };
	            },
	            bottom: function() {
	                var top = popper.top;
	                if (popper.bottom > data.boundaries.bottom) {
	                    top = Math.min(popper.top, data.boundaries.bottom - popper.height);
	                }
	                return { top: top };
	            }
	        };
	
	        order.forEach(function(direction) {
	            data.offsets.popper = Object.assign(popper, check[direction]());
	        });
	
	        return data;
	    };
	
	    /**
	     * Modifier used to make sure the popper is always near its reference
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by _update method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.keepTogether = function(data) {
	        var popper  = getPopperClientRect(data.offsets.popper);
	        var reference = data.offsets.reference;
	        var f = Math.floor;
	
	        if (popper.right < f(reference.left)) {
	            data.offsets.popper.left = f(reference.left) - popper.width;
	        }
	        if (popper.left > f(reference.right)) {
	            data.offsets.popper.left = f(reference.right);
	        }
	        if (popper.bottom < f(reference.top)) {
	            data.offsets.popper.top = f(reference.top) - popper.height;
	        }
	        if (popper.top > f(reference.bottom)) {
	            data.offsets.popper.top = f(reference.bottom);
	        }
	
	        return data;
	    };
	
	    /**
	     * Modifier used to flip the placement of the popper when the latter is starting overlapping its reference element.
	     * Requires the `preventOverflow` modifier before it in order to work.
	     * **NOTE:** This modifier will run all its previous modifiers everytime it tries to flip the popper!
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by _update method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.flip = function(data) {
	        // check if preventOverflow is in the list of modifiers before the flip modifier.
	        // otherwise flip would not work as expected.
	        if (!this.isModifierRequired(this.modifiers.flip, this.modifiers.preventOverflow)) {
	            console.warn('WARNING: preventOverflow modifier is required by flip modifier in order to work, be sure to include it before flip!');
	            return data;
	        }
	
	        if (data.flipped && data.placement === data._originalPlacement) {
	            // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
	            return data;
	        }
	
	        var placement = data.placement.split('-')[0];
	        var placementOpposite = getOppositePlacement(placement);
	        var variation = data.placement.split('-')[1] || '';
	
	        var flipOrder = [];
	        if(this._options.flipBehavior === 'flip') {
	            flipOrder = [
	                placement,
	                placementOpposite
	            ];
	        } else {
	            flipOrder = this._options.flipBehavior;
	        }
	
	        flipOrder.forEach(function(step, index) {
	            if (placement !== step || flipOrder.length === index + 1) {
	                return;
	            }
	
	            placement = data.placement.split('-')[0];
	            placementOpposite = getOppositePlacement(placement);
	
	            var popperOffsets = getPopperClientRect(data.offsets.popper);
	
	            // this boolean is used to distinguish right and bottom from top and left
	            // they need different computations to get flipped
	            var a = ['right', 'bottom'].indexOf(placement) !== -1;
	
	            // using Math.floor because the reference offsets may contain decimals we are not going to consider here
	            if (
	                a && Math.floor(data.offsets.reference[placement]) > Math.floor(popperOffsets[placementOpposite]) ||
	                !a && Math.floor(data.offsets.reference[placement]) < Math.floor(popperOffsets[placementOpposite])
	            ) {
	                // we'll use this boolean to detect any flip loop
	                data.flipped = true;
	                data.placement = flipOrder[index + 1];
	                if (variation) {
	                    data.placement += '-' + variation;
	                }
	                data.offsets.popper = this._getOffsets(this._popper, this._reference, data.placement).popper;
	
	                data = this.runModifiers(data, this._options.modifiers, this._flip);
	            }
	        }.bind(this));
	        return data;
	    };
	
	    /**
	     * Modifier used to add an offset to the popper, useful if you more granularity positioning your popper.
	     * The offsets will shift the popper on the side of its reference element.
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by _update method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.offset = function(data) {
	        var offset = this._options.offset;
	        var popper  = data.offsets.popper;
	
	        if (data.placement.indexOf('left') !== -1) {
	            popper.top -= offset;
	        }
	        else if (data.placement.indexOf('right') !== -1) {
	            popper.top += offset;
	        }
	        else if (data.placement.indexOf('top') !== -1) {
	            popper.left -= offset;
	        }
	        else if (data.placement.indexOf('bottom') !== -1) {
	            popper.left += offset;
	        }
	        return data;
	    };
	
	    /**
	     * Modifier used to move the arrows on the edge of the popper to make sure them are always between the popper and the reference element
	     * It will use the CSS outer size of the arrow element to know how many pixels of conjuction are needed
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by _update method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.arrow = function(data) {
	        var arrow  = this._options.arrowElement;
	
	        // if the arrowElement is a string, suppose it's a CSS selector
	        if (typeof arrow === 'string') {
	            arrow = this._popper.querySelector(arrow);
	        }
	
	        // if arrow element is not found, don't run the modifier
	        if (!arrow) {
	            return data;
	        }
	
	        // the arrow element must be child of its popper
	        if (!this._popper.contains(arrow)) {
	            console.warn('WARNING: `arrowElement` must be child of its popper element!');
	            return data;
	        }
	
	        // arrow depends on keepTogether in order to work
	        if (!this.isModifierRequired(this.modifiers.arrow, this.modifiers.keepTogether)) {
	            console.warn('WARNING: keepTogether modifier is required by arrow modifier in order to work, be sure to include it before arrow!');
	            return data;
	        }
	
	        var arrowStyle  = {};
	        var placement   = data.placement.split('-')[0];
	        var popper      = getPopperClientRect(data.offsets.popper);
	        var reference   = data.offsets.reference;
	        var isVertical  = ['left', 'right'].indexOf(placement) !== -1;
	
	        var len         = isVertical ? 'height' : 'width';
	        var side        = isVertical ? 'top' : 'left';
	        var altSide     = isVertical ? 'left' : 'top';
	        var opSide      = isVertical ? 'bottom' : 'right';
	        var arrowSize   = getOuterSizes(arrow)[len];
	
	        //
	        // extends keepTogether behavior making sure the popper and its reference have enough pixels in conjuction
	        //
	
	        // top/left side
	        if (reference[opSide] - arrowSize < popper[side]) {
	            data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowSize);
	        }
	        // bottom/right side
	        if (reference[side] + arrowSize > popper[opSide]) {
	            data.offsets.popper[side] += (reference[side] + arrowSize) - popper[opSide];
	        }
	
	        // compute center of the popper
	        var center = reference[side] + (reference[len] / 2) - (arrowSize / 2);
	
	        // Compute the sideValue using the updated popper offsets
	        var sideValue = center - getPopperClientRect(data.offsets.popper)[side];
	
	        // prevent arrow from being placed not contiguously to its popper
	        sideValue = Math.max(Math.min(popper[len] - arrowSize, sideValue), 0);
	        arrowStyle[side] = sideValue;
	        arrowStyle[altSide] = ''; // make sure to remove any old style from the arrow
	
	        data.offsets.arrow = arrowStyle;
	        data.arrowElement = arrow;
	
	        return data;
	    };
	
	
	    //
	    // Helpers
	    //
	
	    /**
	     * Get the outer sizes of the given element (offset size + margins)
	     * @function
	     * @ignore
	     * @argument {Element} element
	     * @returns {Object} object containing width and height properties
	     */
	    function getOuterSizes(element) {
	        // NOTE: 1 DOM access here
	        var _display = element.style.display, _visibility = element.style.visibility;
	        element.style.display = 'block'; element.style.visibility = 'hidden';
	        var calcWidthToForceRepaint = element.offsetWidth;
	
	        // original method
	        var styles = root.getComputedStyle(element);
	        var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
	        var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
	        var result = { width: element.offsetWidth + y, height: element.offsetHeight + x };
	
	        // reset element styles
	        element.style.display = _display; element.style.visibility = _visibility;
	        return result;
	    }
	
	    /**
	     * Get the opposite placement of the given one/
	     * @function
	     * @ignore
	     * @argument {String} placement
	     * @returns {String} flipped placement
	     */
	    function getOppositePlacement(placement) {
	        var hash = {left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
	        return placement.replace(/left|right|bottom|top/g, function(matched){
	            return hash[matched];
	        });
	    }
	
	    /**
	     * Given the popper offsets, generate an output similar to getBoundingClientRect
	     * @function
	     * @ignore
	     * @argument {Object} popperOffsets
	     * @returns {Object} ClientRect like output
	     */
	    function getPopperClientRect(popperOffsets) {
	        var offsets = Object.assign({}, popperOffsets);
	        offsets.right = offsets.left + offsets.width;
	        offsets.bottom = offsets.top + offsets.height;
	        return offsets;
	    }
	
	    /**
	     * Given an array and the key to find, returns its index
	     * @function
	     * @ignore
	     * @argument {Array} arr
	     * @argument keyToFind
	     * @returns index or null
	     */
	    function getArrayKeyIndex(arr, keyToFind) {
	        var i = 0, key;
	        for (key in arr) {
	            if (arr[key] === keyToFind) {
	                return i;
	            }
	            i++;
	        }
	        return null;
	    }
	
	    /**
	     * Get CSS computed property of the given element
	     * @function
	     * @ignore
	     * @argument {Eement} element
	     * @argument {String} property
	     */
	    function getStyleComputedProperty(element, property) {
	        // NOTE: 1 DOM access here
	        var css = root.getComputedStyle(element, null);
	        return css[property];
	    }
	
	    /**
	     * Returns the offset parent of the given element
	     * @function
	     * @ignore
	     * @argument {Element} element
	     * @returns {Element} offset parent
	     */
	    function getOffsetParent(element) {
	        // NOTE: 1 DOM access here
	        var offsetParent = element.offsetParent;
	        return offsetParent === root.document.body || !offsetParent ? root.document.documentElement : offsetParent;
	    }
	
	    /**
	     * Returns the scrolling parent of the given element
	     * @function
	     * @ignore
	     * @argument {Element} element
	     * @returns {Element} offset parent
	     */
	    function getScrollParent(element) {
	        if (element === root.document) {
	            // Firefox puts the scrollTOp value on `documentElement` instead of `body`, we then check which of them is
	            // greater than 0 and return the proper element
	            if (root.document.body.scrollTop) {
	                return root.document.body;
	            } else {
	                return root.document.documentElement;
	            }
	        }
	
	        // Firefox want us to check `-x` and `-y` variations as well
	        if (
	            ['scroll', 'auto'].indexOf(getStyleComputedProperty(element, 'overflow')) !== -1 ||
	            ['scroll', 'auto'].indexOf(getStyleComputedProperty(element, 'overflow-x')) !== -1 ||
	            ['scroll', 'auto'].indexOf(getStyleComputedProperty(element, 'overflow-y')) !== -1
	        ) {
	            // If the detected scrollParent is body, we perform an additional check on its parentNode
	            // in this way we'll get body if the browser is Chrome-ish, or documentElement otherwise
	            // fixes issue #65
	            return element === root.document.body ? getScrollParent(element.parentNode) : element;
	        }
	        return element.parentNode ? getScrollParent(element.parentNode) : element;
	    }
	
	    /**
	     * Check if the given element is fixed or is inside a fixed parent
	     * @function
	     * @ignore
	     * @argument {Element} element
	     * @argument {Element} customContainer
	     * @returns {Boolean} answer to "isFixed?"
	     */
	    function isFixed(element) {
	        if (element === root.document.body || element.nodeName === 'HTML') {
	            return false;
	        }
	        if (getStyleComputedProperty(element, 'position') === 'fixed') {
	            return true;
	        }
	        return element.parentNode ? isFixed(element.parentNode) : element;
	    }
	
	    /**
	     * Check if the given element has transforms applied to itself or a parent
	     * @param  {Element} element
	     * @return {Boolean} answer to "isTransformed?"
	     */
	    function isTransformed(element) {
	      if (element === root.document.body) {
	          return false;
	      }
	      if (getStyleComputedProperty(element, 'transform') !== 'none') {
	          return true;
	      }
	      return element.parentNode ? isTransformed(element.parentNode) : element;
	    }
	
	    /**
	     * Set the style to the given popper
	     * @function
	     * @ignore
	     * @argument {Element} element - Element to apply the style to
	     * @argument {Object} styles - Object with a list of properties and values which will be applied to the element
	     */
	    function setStyle(element, styles) {
	        function is_numeric(n) {
	            return (n !== '' && !isNaN(parseFloat(n)) && isFinite(n));
	        }
	        Object.keys(styles).forEach(function(prop) {
	            var unit = '';
	            // add unit if the value is numeric and is one of the following
	            if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && is_numeric(styles[prop])) {
	                unit = 'px';
	            }
	            element.style[prop] = styles[prop] + unit;
	        });
	    }
	
	    /**
	     * Check if the given variable is a function
	     * @function
	     * @ignore
	     * @argument {Element} element - Element to check
	     * @returns {Boolean} answer to: is a function?
	     */
	    function isFunction(functionToCheck) {
	        var getType = {};
	        return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	    }
	
	    /**
	     * Get the position of the given element, relative to its offset parent
	     * @function
	     * @ignore
	     * @param {Element} element
	     * @return {Object} position - Coordinates of the element and its `scrollTop`
	     */
	    function getOffsetRect(element) {
	        var elementRect = {
	            width: element.offsetWidth,
	            height: element.offsetHeight,
	            left: element.offsetLeft,
	            top: element.offsetTop
	        };
	
	        elementRect.right = elementRect.left + elementRect.width;
	        elementRect.bottom = elementRect.top + elementRect.height;
	
	        // position
	        return elementRect;
	    }
	
	    /**
	     * Get bounding client rect of given element
	     * @function
	     * @ignore
	     * @param {HTMLElement} element
	     * @return {Object} client rect
	     */
	    function getBoundingClientRect(element) {
	        var rect = element.getBoundingClientRect();
	        return {
	            left: rect.left,
	            top: rect.top,
	            right: rect.right,
	            bottom: rect.bottom,
	            width: rect.right - rect.left,
	            height: rect.bottom - rect.top
	        };
	    }
	
	    /**
	     * Given an element and one of its parents, return the offset
	     * @function
	     * @ignore
	     * @param {HTMLElement} element
	     * @param {HTMLElement} parent
	     * @return {Object} rect
	     */
	    function getOffsetRectRelativeToCustomParent(element, parent, fixed, transformed) {
	        var elementRect = getBoundingClientRect(element);
	        var parentRect = getBoundingClientRect(parent);
	
	        if (fixed && !transformed) {
	            var scrollParent = getScrollParent(parent);
	            parentRect.top += scrollParent.scrollTop;
	            parentRect.bottom += scrollParent.scrollTop;
	            parentRect.left += scrollParent.scrollLeft;
	            parentRect.right += scrollParent.scrollLeft;
	        }
	
	        var rect = {
	            top: elementRect.top - parentRect.top ,
	            left: elementRect.left - parentRect.left ,
	            bottom: (elementRect.top - parentRect.top) + elementRect.height,
	            right: (elementRect.left - parentRect.left) + elementRect.width,
	            width: elementRect.width,
	            height: elementRect.height
	        };
	        return rect;
	    }
	
	    /**
	     * Get the prefixed supported property name
	     * @function
	     * @ignore
	     * @argument {String} property (camelCase)
	     * @returns {String} prefixed property (camelCase)
	     */
	    function getSupportedPropertyName(property) {
	        var prefixes = ['', 'ms', 'webkit', 'moz', 'o'];
	
	        for (var i = 0; i < prefixes.length; i++) {
	            var toCheck = prefixes[i] ? prefixes[i] + property.charAt(0).toUpperCase() + property.slice(1) : property;
	            if (typeof root.document.body.style[toCheck] !== 'undefined') {
	                return toCheck;
	            }
	        }
	        return null;
	    }
	
	    /**
	     * The Object.assign() method is used to copy the values of all enumerable own properties from one or more source
	     * objects to a target object. It will return the target object.
	     * This polyfill doesn't support symbol properties, since ES5 doesn't have symbols anyway
	     * Source: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	     * @function
	     * @ignore
	     */
	    if (!Object.assign) {
	        Object.defineProperty(Object, 'assign', {
	            enumerable: false,
	            configurable: true,
	            writable: true,
	            value: function(target) {
	                if (target === undefined || target === null) {
	                    throw new TypeError('Cannot convert first argument to object');
	                }
	
	                var to = Object(target);
	                for (var i = 1; i < arguments.length; i++) {
	                    var nextSource = arguments[i];
	                    if (nextSource === undefined || nextSource === null) {
	                        continue;
	                    }
	                    nextSource = Object(nextSource);
	
	                    var keysArray = Object.keys(nextSource);
	                    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
	                        var nextKey = keysArray[nextIndex];
	                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
	                        if (desc !== undefined && desc.enumerable) {
	                            to[nextKey] = nextSource[nextKey];
	                        }
	                    }
	                }
	                return to;
	            }
	        });
	    }
	
	    if (!root.requestAnimationFrame) {
	        /* jshint ignore:start */
	        var lastTime = 0;
	        var vendors = ['ms', 'moz', 'webkit', 'o'];
	        for(var x = 0; x < vendors.length && !root.requestAnimationFrame; ++x) {
	            root.requestAnimationFrame = root[vendors[x]+'RequestAnimationFrame'];
	            root.cancelAnimationFrame = root[vendors[x]+'CancelAnimationFrame'] || root[vendors[x]+'CancelRequestAnimationFrame'];
	        }
	
	        if (!root.requestAnimationFrame) {
	            root.requestAnimationFrame = function(callback, element) {
	                var currTime = new Date().getTime();
	                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
	                var id = root.setTimeout(function() { callback(currTime + timeToCall); },
	                                           timeToCall);
	                lastTime = currTime + timeToCall;
	                return id;
	            };
	        }
	
	        if (!root.cancelAnimationFrame) {
	            root.cancelAnimationFrame = function(id) {
	                clearTimeout(id);
	            };
	        }
	        /* jshint ignore:end */
	    }
	
	    return Popper;
	}));
	
	
	/***/ }),
	/* 89 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(184),
	  /* template */
	  __webpack_require__(285),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 90 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(190),
	  /* template */
	  __webpack_require__(287),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 91 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(191),
	  /* template */
	  __webpack_require__(329),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 92 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(192),
	  /* template */
	  __webpack_require__(262),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 93 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(193),
	  /* template */
	  __webpack_require__(258),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 94 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(196),
	  /* template */
	  __webpack_require__(303),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 95 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(197),
	  /* template */
	  __webpack_require__(306),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 96 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(198),
	  /* template */
	  __webpack_require__(318),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 97 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(207),
	  /* template */
	  __webpack_require__(308),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 98 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(217),
	  /* template */
	  __webpack_require__(290),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 99 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(218),
	  /* template */
	  __webpack_require__(321),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 100 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(224),
	  /* template */
	  __webpack_require__(276),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 101 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(225),
	  /* template */
	  __webpack_require__(267),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 102 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(241),
	  /* template */
	  __webpack_require__(299),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 103 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _affix = __webpack_require__(418);
	
	var _affix2 = _interopRequireDefault(_affix);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _affix2.default;
	
	/***/ }),
	/* 104 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _alert = __webpack_require__(419);
	
	var _alert2 = _interopRequireDefault(_alert);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _alert2.default;
	
	/***/ }),
	/* 105 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _backTop = __webpack_require__(420);
	
	var _backTop2 = _interopRequireDefault(_backTop);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _backTop2.default;
	
	/***/ }),
	/* 106 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _badge = __webpack_require__(421);
	
	var _badge2 = _interopRequireDefault(_badge);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _badge2.default;
	
	/***/ }),
	/* 107 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _breadcrumb = __webpack_require__(425);
	
	var _breadcrumb2 = _interopRequireDefault(_breadcrumb);
	
	var _breadcrumbItem = __webpack_require__(424);
	
	var _breadcrumbItem2 = _interopRequireDefault(_breadcrumbItem);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_breadcrumb2.default.Item = _breadcrumbItem2.default;
	exports.default = _breadcrumb2.default;
	
	/***/ }),
	/* 108 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _button = __webpack_require__(20);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _buttonGroup = __webpack_require__(426);
	
	var _buttonGroup2 = _interopRequireDefault(_buttonGroup);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_button2.default.Group = _buttonGroup2.default;
	exports.default = _button2.default;
	
	/***/ }),
	/* 109 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _card = __webpack_require__(427);
	
	var _card2 = _interopRequireDefault(_card);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _card2.default;
	
	/***/ }),
	/* 110 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _carousel = __webpack_require__(429);
	
	var _carousel2 = _interopRequireDefault(_carousel);
	
	var _carouselItem = __webpack_require__(428);
	
	var _carouselItem2 = _interopRequireDefault(_carouselItem);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_carousel2.default.Item = _carouselItem2.default;
	exports.default = _carousel2.default;
	
	/***/ }),
	/* 111 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _cascader = __webpack_require__(430);
	
	var _cascader2 = _interopRequireDefault(_cascader);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _cascader2.default;
	
	/***/ }),
	/* 112 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _checkbox = __webpack_require__(32);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	var _checkboxGroup = __webpack_require__(89);
	
	var _checkboxGroup2 = _interopRequireDefault(_checkboxGroup);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_checkbox2.default.Group = _checkboxGroup2.default;
	exports.default = _checkbox2.default;
	
	/***/ }),
	/* 113 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _circle = __webpack_require__(433);
	
	var _circle2 = _interopRequireDefault(_circle);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _circle2.default;
	
	/***/ }),
	/* 114 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _collapse = __webpack_require__(434);
	
	var _collapse2 = _interopRequireDefault(_collapse);
	
	var _panel = __webpack_require__(435);
	
	var _panel2 = _interopRequireDefault(_panel);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_collapse2.default.Panel = _panel2.default;
	exports.default = _collapse2.default;
	
	/***/ }),
	/* 115 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _datePicker = __webpack_require__(332);
	
	var _datePicker2 = _interopRequireDefault(_datePicker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _datePicker2.default;
	
	/***/ }),
	/* 116 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _dropdown = __webpack_require__(440);
	
	var _dropdown2 = _interopRequireDefault(_dropdown);
	
	var _dropdownMenu = __webpack_require__(439);
	
	var _dropdownMenu2 = _interopRequireDefault(_dropdownMenu);
	
	var _dropdownItem = __webpack_require__(438);
	
	var _dropdownItem2 = _interopRequireDefault(_dropdownItem);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_dropdown2.default.Menu = _dropdownMenu2.default;
	_dropdown2.default.Item = _dropdownItem2.default;
	exports.default = _dropdown2.default;
	
	/***/ }),
	/* 117 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _form = __webpack_require__(442);
	
	var _form2 = _interopRequireDefault(_form);
	
	var _formItem = __webpack_require__(441);
	
	var _formItem2 = _interopRequireDefault(_formItem);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_form2.default.Item = _formItem2.default;
	exports.default = _form2.default;
	
	/***/ }),
	/* 118 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Col = exports.Row = undefined;
	
	var _row = __webpack_require__(444);
	
	var _row2 = _interopRequireDefault(_row);
	
	var _col = __webpack_require__(443);
	
	var _col2 = _interopRequireDefault(_col);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.Row = _row2.default;
	exports.Col = _col2.default;
	
	/***/ }),
	/* 119 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _inputNumber = __webpack_require__(97);
	
	var _inputNumber2 = _interopRequireDefault(_inputNumber);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _inputNumber2.default;
	
	/***/ }),
	/* 120 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _input = __webpack_require__(41);
	
	var _input2 = _interopRequireDefault(_input);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _input2.default;
	
	/***/ }),
	/* 121 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _loadingBar = __webpack_require__(334);
	
	var _loadingBar2 = _interopRequireDefault(_loadingBar);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var loadingBarInstance = void 0;
	var color = 'primary';
	var failedColor = 'error';
	var height = 2;
	var timer = void 0;
	
	function getLoadingBarInstance() {
	    loadingBarInstance = loadingBarInstance || _loadingBar2.default.newInstance({
	        color: color,
	        failedColor: failedColor,
	        height: height
	    });
	
	    return loadingBarInstance;
	}
	
	function _update(options) {
	    var instance = getLoadingBarInstance();
	
	    instance.update(options);
	}
	
	function hide() {
	    setTimeout(function () {
	        _update({
	            show: false
	        });
	        setTimeout(function () {
	            _update({
	                percent: 0
	            });
	        }, 200);
	    }, 800);
	}
	
	function clearTimer() {
	    if (timer) {
	        clearInterval(timer);
	        timer = null;
	    }
	}
	
	exports.default = {
	    start: function start() {
	        if (timer) return;
	
	        var percent = 0;
	
	        _update({
	            percent: percent,
	            status: 'success',
	            show: true
	        });
	
	        timer = setInterval(function () {
	            percent += Math.floor(Math.random() * 3 + 5);
	            if (percent > 95) {
	                clearTimer();
	            }
	            _update({
	                percent: percent,
	                status: 'success',
	                show: true
	            });
	        }, 200);
	    },
	    update: function update(percent) {
	        clearTimer();
	        _update({
	            percent: percent,
	            status: 'success',
	            show: true
	        });
	    },
	    finish: function finish() {
	        clearTimer();
	        _update({
	            percent: 100,
	            status: 'success',
	            show: true
	        });
	        hide();
	    },
	    error: function error() {
	        clearTimer();
	        _update({
	            percent: 100,
	            status: 'error',
	            show: true
	        });
	        hide();
	    },
	    config: function config(options) {
	        if (options.color) {
	            color = options.color;
	        }
	        if (options.failedColor) {
	            failedColor = options.failedColor;
	        }
	        if (options.height) {
	            height = options.height;
	        }
	    },
	    destroy: function destroy() {
	        clearTimer();
	        var instance = getLoadingBarInstance();
	        loadingBarInstance = null;
	        instance.destroy();
	    }
	};
	
	/***/ }),
	/* 122 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _menu = __webpack_require__(448);
	
	var _menu2 = _interopRequireDefault(_menu);
	
	var _menuGroup = __webpack_require__(446);
	
	var _menuGroup2 = _interopRequireDefault(_menuGroup);
	
	var _menuItem = __webpack_require__(447);
	
	var _menuItem2 = _interopRequireDefault(_menuItem);
	
	var _submenu = __webpack_require__(449);
	
	var _submenu2 = _interopRequireDefault(_submenu);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_menu2.default.Group = _menuGroup2.default;
	_menu2.default.Item = _menuItem2.default;
	_menu2.default.Sub = _submenu2.default;
	
	exports.default = _menu2.default;
	
	/***/ }),
	/* 123 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof2 = __webpack_require__(11);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _notification = __webpack_require__(62);
	
	var _notification2 = _interopRequireDefault(_notification);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-message';
	var iconPrefixCls = 'ivu-icon';
	var prefixKey = 'ivu_message_key_';
	
	var defaultDuration = 1.5;
	var top = void 0;
	var messageInstance = void 0;
	var name = 1;
	
	var iconTypes = {
	    'info': 'information-circled',
	    'success': 'checkmark-circled',
	    'warning': 'android-alert',
	    'error': 'close-circled',
	    'loading': 'load-c'
	};
	
	function getMessageInstance() {
	    messageInstance = messageInstance || _notification2.default.newInstance({
	        prefixCls: prefixCls,
	        styles: {
	            top: top + 'px'
	        }
	    });
	
	    return messageInstance;
	}
	
	function notice() {
	    var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDuration;
	    var type = arguments[2];
	    var onClose = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};
	    var closable = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
	
	    var iconType = iconTypes[type];
	
	    var loadCls = type === 'loading' ? ' ivu-load-loop' : '';
	
	    var instance = getMessageInstance();
	
	    instance.notice({
	        name: '' + prefixKey + name,
	        duration: duration,
	        styles: {},
	        transitionName: 'move-up',
	        content: '\n            <div class="' + prefixCls + '-custom-content ' + prefixCls + '-' + type + '">\n                <i class="' + iconPrefixCls + ' ' + iconPrefixCls + '-' + iconType + loadCls + '"></i>\n                <span>' + content + '</span>\n            </div>\n        ',
	        onClose: onClose,
	        closable: closable,
	        type: 'message'
	    });
	
	    return function () {
	        var target = name++;
	
	        return function () {
	            instance.remove('' + prefixKey + target);
	        };
	    }();
	}
	
	exports.default = {
	    name: 'Message',
	
	    info: function info(options) {
	        var type = typeof options === 'undefined' ? 'undefined' : (0, _typeof3.default)(options);
	        if (type === 'string') {
	            options = {
	                content: options
	            };
	        }
	        return notice(options.content, options.duration, 'info', options.onClose, options.closable);
	    },
	    success: function success(options) {
	        var type = typeof options === 'undefined' ? 'undefined' : (0, _typeof3.default)(options);
	        if (type === 'string') {
	            options = {
	                content: options
	            };
	        }
	        return notice(options.content, options.duration, 'success', options.onClose, options.closable);
	    },
	    warning: function warning(options) {
	        var type = typeof options === 'undefined' ? 'undefined' : (0, _typeof3.default)(options);
	        if (type === 'string') {
	            options = {
	                content: options
	            };
	        }
	        return notice(options.content, options.duration, 'warning', options.onClose, options.closable);
	    },
	    error: function error(options) {
	        var type = typeof options === 'undefined' ? 'undefined' : (0, _typeof3.default)(options);
	        if (type === 'string') {
	            options = {
	                content: options
	            };
	        }
	        return notice(options.content, options.duration, 'error', options.onClose, options.closable);
	    },
	    loading: function loading(options) {
	        var type = typeof options === 'undefined' ? 'undefined' : (0, _typeof3.default)(options);
	        if (type === 'string') {
	            options = {
	                content: options
	            };
	        }
	        return notice(options.content, options.duration, 'loading', options.onClose, options.closable);
	    },
	    config: function config(options) {
	        if (options.top) {
	            top = options.top;
	        }
	        if (options.duration) {
	            defaultDuration = options.duration;
	        }
	    },
	    destroy: function destroy() {
	        var instance = getMessageInstance();
	        messageInstance = null;
	        instance.destroy('ivu-message');
	    }
	};
	
	/***/ }),
	/* 124 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _confirm = __webpack_require__(335);
	
	var _confirm2 = _interopRequireDefault(_confirm);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var modalInstance = void 0;
	
	function getModalInstance() {
	    var render = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
	
	    modalInstance = modalInstance || _confirm2.default.newInstance({
	        closable: false,
	        maskClosable: false,
	        footerHide: true,
	        render: render
	    });
	
	    return modalInstance;
	}
	
	function confirm(options) {
	    var render = 'render' in options ? options.render : undefined;
	    var instance = getModalInstance(render);
	
	    options.onRemove = function () {
	        modalInstance = null;
	    };
	
	    instance.show(options);
	}
	
	_confirm2.default.info = function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    props.icon = 'info';
	    props.showCancel = false;
	    return confirm(props);
	};
	
	_confirm2.default.success = function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    props.icon = 'success';
	    props.showCancel = false;
	    return confirm(props);
	};
	
	_confirm2.default.warning = function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    props.icon = 'warning';
	    props.showCancel = false;
	    return confirm(props);
	};
	
	_confirm2.default.error = function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    props.icon = 'error';
	    props.showCancel = false;
	    return confirm(props);
	};
	
	_confirm2.default.confirm = function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    props.icon = 'confirm';
	    props.showCancel = true;
	    return confirm(props);
	};
	
	_confirm2.default.remove = function () {
	    if (!modalInstance) {
	        return false;
	    }
	
	    var instance = getModalInstance();
	
	    instance.remove();
	};
	
	exports.default = _confirm2.default;
	
	/***/ }),
	/* 125 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _notification = __webpack_require__(62);
	
	var _notification2 = _interopRequireDefault(_notification);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-notice';
	var iconPrefixCls = 'ivu-icon';
	var prefixKey = 'ivu_notice_key_';
	
	var top = 24;
	var defaultDuration = 4.5;
	var noticeInstance = void 0;
	var name = 1;
	
	var iconTypes = {
	    'info': 'information-circled',
	    'success': 'checkmark-circled',
	    'warning': 'android-alert',
	    'error': 'close-circled'
	};
	
	function getNoticeInstance() {
	    noticeInstance = noticeInstance || _notification2.default.newInstance({
	        prefixCls: prefixCls,
	        styles: {
	            top: top + 'px',
	            right: 0
	        }
	    });
	
	    return noticeInstance;
	}
	
	function notice(type, options) {
	    var title = options.title || '';
	    var desc = options.desc || '';
	    var noticeKey = options.name || '' + prefixKey + name;
	    var onClose = options.onClose || function () {};
	
	    var duration = options.duration === 0 ? 0 : options.duration || defaultDuration;
	
	    name++;
	
	    var instance = getNoticeInstance();
	
	    var content = void 0;
	
	    var with_desc = desc === '' ? '' : ' ' + prefixCls + '-with-desc';
	
	    if (type == 'normal') {
	        content = '\n            <div class="' + prefixCls + '-custom-content ' + prefixCls + '-with-normal' + with_desc + '">\n                <div class="' + prefixCls + '-title">' + title + '</div>\n                <div class="' + prefixCls + '-desc">' + desc + '</div>\n            </div>\n        ';
	    } else {
	        var iconType = iconTypes[type];
	        content = '\n            <div class="' + prefixCls + '-custom-content ' + prefixCls + '-with-icon ' + prefixCls + '-with-' + type + with_desc + '">\n                <span class="' + prefixCls + '-icon ' + prefixCls + '-icon-' + type + '">\n                    <i class="' + iconPrefixCls + ' ' + iconPrefixCls + '-' + iconType + '"></i>\n                </span>\n                <div class="' + prefixCls + '-title">' + title + '</div>\n                <div class="' + prefixCls + '-desc">' + desc + '</div>\n            </div>\n        ';
	    }
	
	    instance.notice({
	        name: noticeKey.toString(),
	        duration: duration,
	        styles: {},
	        transitionName: 'move-notice',
	        content: content,
	        onClose: onClose,
	        closable: true,
	        type: 'notice'
	    });
	}
	
	exports.default = {
	    open: function open(options) {
	        return notice('normal', options);
	    },
	    info: function info(options) {
	        return notice('info', options);
	    },
	    success: function success(options) {
	        return notice('success', options);
	    },
	    warning: function warning(options) {
	        return notice('warning', options);
	    },
	    error: function error(options) {
	        return notice('error', options);
	    },
	    config: function config(options) {
	        if (options.top) {
	            top = options.top;
	        }
	        if (options.duration || options.duration === 0) {
	            defaultDuration = options.duration;
	        }
	    },
	    close: function close(name) {
	        if (name) {
	            name = name.toString();
	            if (noticeInstance) {
	                noticeInstance.remove(name);
	            }
	        } else {
	            return false;
	        }
	    },
	    destroy: function destroy() {
	        var instance = getNoticeInstance();
	        noticeInstance = null;
	        instance.destroy('ivu-notice');
	    }
	};
	
	/***/ }),
	/* 126 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _page = __webpack_require__(452);
	
	var _page2 = _interopRequireDefault(_page);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _page2.default;
	
	/***/ }),
	/* 127 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _poptip = __webpack_require__(98);
	
	var _poptip2 = _interopRequireDefault(_poptip);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _poptip2.default;
	
	/***/ }),
	/* 128 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _progress = __webpack_require__(99);
	
	var _progress2 = _interopRequireDefault(_progress);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _progress2.default;
	
	/***/ }),
	/* 129 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _radio = __webpack_require__(454);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	var _radioGroup = __webpack_require__(453);
	
	var _radioGroup2 = _interopRequireDefault(_radioGroup);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_radio2.default.Group = _radioGroup2.default;
	exports.default = _radio2.default;
	
	/***/ }),
	/* 130 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rate = __webpack_require__(455);
	
	var _rate2 = _interopRequireDefault(_rate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _rate2.default;
	
	/***/ }),
	/* 131 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.OptionGroup = exports.Option = exports.Select = undefined;
	
	var _select = __webpack_require__(101);
	
	var _select2 = _interopRequireDefault(_select);
	
	var _option = __webpack_require__(100);
	
	var _option2 = _interopRequireDefault(_option);
	
	var _optionGroup = __webpack_require__(456);
	
	var _optionGroup2 = _interopRequireDefault(_optionGroup);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.Select = _select2.default;
	exports.Option = _option2.default;
	exports.OptionGroup = _optionGroup2.default;
	
	/***/ }),
	/* 132 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _slider = __webpack_require__(457);
	
	var _slider2 = _interopRequireDefault(_slider);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _slider2.default;
	
	/***/ }),
	/* 133 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _spin = __webpack_require__(458);
	
	var _spin2 = _interopRequireDefault(_spin);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _spin2.default;
	
	/***/ }),
	/* 134 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _steps = __webpack_require__(460);
	
	var _steps2 = _interopRequireDefault(_steps);
	
	var _step = __webpack_require__(459);
	
	var _step2 = _interopRequireDefault(_step);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_steps2.default.Step = _step2.default;
	exports.default = _steps2.default;
	
	/***/ }),
	/* 135 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _switch = __webpack_require__(461);
	
	var _switch2 = _interopRequireDefault(_switch);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _switch2.default;
	
	/***/ }),
	/* 136 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _table = __webpack_require__(466);
	
	var _table2 = _interopRequireDefault(_table);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _table2.default;
	
	/***/ }),
	/* 137 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _tabs = __webpack_require__(468);
	
	var _tabs2 = _interopRequireDefault(_tabs);
	
	var _pane = __webpack_require__(467);
	
	var _pane2 = _interopRequireDefault(_pane);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_tabs2.default.Pane = _pane2.default;
	exports.default = _tabs2.default;
	
	/***/ }),
	/* 138 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _tag = __webpack_require__(469);
	
	var _tag2 = _interopRequireDefault(_tag);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _tag2.default;
	
	/***/ }),
	/* 139 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _timePicker = __webpack_require__(333);
	
	var _timePicker2 = _interopRequireDefault(_timePicker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _timePicker2.default;
	
	/***/ }),
	/* 140 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _timeline = __webpack_require__(471);
	
	var _timeline2 = _interopRequireDefault(_timeline);
	
	var _timelineItem = __webpack_require__(470);
	
	var _timelineItem2 = _interopRequireDefault(_timelineItem);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_timeline2.default.Item = _timelineItem2.default;
	exports.default = _timeline2.default;
	
	/***/ }),
	/* 141 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _tooltip = __webpack_require__(102);
	
	var _tooltip2 = _interopRequireDefault(_tooltip);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _tooltip2.default;
	
	/***/ }),
	/* 142 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _transfer = __webpack_require__(475);
	
	var _transfer2 = _interopRequireDefault(_transfer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _transfer2.default;
	
	/***/ }),
	/* 143 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _tree = __webpack_require__(477);
	
	var _tree2 = _interopRequireDefault(_tree);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _tree2.default;
	
	/***/ }),
	/* 144 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _upload = __webpack_require__(479);
	
	var _upload2 = _interopRequireDefault(_upload);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _upload2.default;
	
	/***/ }),
	/* 145 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(416);
	module.exports = __webpack_require__(57).Array.findIndex;
	
	/***/ }),
	/* 146 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(68);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_typeof__ = __webpack_require__(11);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_typeof___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_typeof__);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(4);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__validator___ = __webpack_require__(158);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__messages__ = __webpack_require__(147);
	
	
	
	
	
	
	/**
	 *  Encapsulates a validation schema.
	 *
	 *  @param descriptor An object declaring validation rules
	 *  for this schema.
	 */
	function Schema(descriptor) {
	  this.rules = null;
	  this._messages = __WEBPACK_IMPORTED_MODULE_4__messages__["a" /* messages */];
	  this.define(descriptor);
	}
	
	Schema.prototype = {
	  messages: function messages(_messages) {
	    if (_messages) {
	      this._messages = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__["a" /* deepMerge */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__messages__["b" /* newMessages */])(), _messages);
	    }
	    return this._messages;
	  },
	  define: function define(rules) {
	    if (!rules) {
	      throw new Error('Cannot configure a schema with no rules');
	    }
	    if ((typeof rules === 'undefined' ? 'undefined' : __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_typeof___default()(rules)) !== 'object' || Array.isArray(rules)) {
	      throw new Error('Rules must be an object');
	    }
	    this.rules = {};
	    var z = void 0;
	    var item = void 0;
	    for (z in rules) {
	      if (rules.hasOwnProperty(z)) {
	        item = rules[z];
	        this.rules[z] = Array.isArray(item) ? item : [item];
	      }
	    }
	  },
	  validate: function validate(source_) {
	    var _this = this;
	
	    var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var oc = arguments[2];
	
	    var source = source_;
	    var options = o;
	    var callback = oc;
	    if (typeof options === 'function') {
	      callback = options;
	      options = {};
	    }
	    if (!this.rules || Object.keys(this.rules).length === 0) {
	      if (callback) {
	        callback();
	      }
	      return;
	    }
	    function complete(results) {
	      var i = void 0;
	      var field = void 0;
	      var errors = [];
	      var fields = {};
	
	      function add(e) {
	        if (Array.isArray(e)) {
	          errors = errors.concat.apply(errors, e);
	        } else {
	          errors.push(e);
	        }
	      }
	
	      for (i = 0; i < results.length; i++) {
	        add(results[i]);
	      }
	      if (!errors.length) {
	        errors = null;
	        fields = null;
	      } else {
	        for (i = 0; i < errors.length; i++) {
	          field = errors[i].field;
	          fields[field] = fields[field] || [];
	          fields[field].push(errors[i]);
	        }
	      }
	      callback(errors, fields);
	    }
	
	    if (options.messages) {
	      var messages = this.messages();
	      if (messages === __WEBPACK_IMPORTED_MODULE_4__messages__["a" /* messages */]) {
	        messages = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__messages__["b" /* newMessages */])();
	      }
	      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__["a" /* deepMerge */])(messages, options.messages);
	      options.messages = messages;
	    } else {
	      options.messages = this.messages();
	    }
	    var arr = void 0;
	    var value = void 0;
	    var series = {};
	    var keys = options.keys || Object.keys(this.rules);
	    keys.forEach(function (z) {
	      arr = _this.rules[z];
	      value = source[z];
	      arr.forEach(function (r) {
	        var rule = r;
	        if (typeof rule.transform === 'function') {
	          if (source === source_) {
	            source = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, source);
	          }
	          value = source[z] = rule.transform(value);
	        }
	        if (typeof rule === 'function') {
	          rule = {
	            validator: rule
	          };
	        } else {
	          rule = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, rule);
	        }
	        rule.validator = _this.getValidationMethod(rule);
	        rule.field = z;
	        rule.fullField = rule.fullField || z;
	        rule.type = _this.getType(rule);
	        if (!rule.validator) {
	          return;
	        }
	        series[z] = series[z] || [];
	        series[z].push({
	          rule: rule,
	          value: value,
	          source: source,
	          field: z
	        });
	      });
	    });
	    var errorFields = {};
	    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__["b" /* asyncMap */])(series, options, function (data, doIt) {
	      var rule = data.rule;
	      var deep = (rule.type === 'object' || rule.type === 'array') && (__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_typeof___default()(rule.fields) === 'object' || __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_typeof___default()(rule.defaultField) === 'object');
	      deep = deep && (rule.required || !rule.required && data.value);
	      rule.field = data.field;
	      function addFullfield(key, schema) {
	        return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, schema, {
	          fullField: rule.fullField + '.' + key
	        });
	      }
	
	      function cb() {
	        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	        var errors = e;
	        if (!Array.isArray(errors)) {
	          errors = [errors];
	        }
	        if (errors.length) {
	          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__["c" /* warning */])('async-validator:', errors);
	        }
	        if (errors.length && rule.message) {
	          errors = [].concat(rule.message);
	        }
	
	        errors = errors.map(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__["d" /* complementError */])(rule));
	
	        if ((options.first || options.fieldFirst) && errors.length) {
	          errorFields[rule.field] = 1;
	          return doIt(errors);
	        }
	        if (!deep) {
	          doIt(errors);
	        } else {
	          // if rule is required but the target object
	          // does not exist fail at the rule level and don't
	          // go deeper
	          if (rule.required && !data.value) {
	            if (rule.message) {
	              errors = [].concat(rule.message).map(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__["d" /* complementError */])(rule));
	            } else if (options.error) {
	              errors = [options.error(rule, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__["e" /* format */])(options.messages.required, rule.field))];
	            } else {
	              errors = [];
	            }
	            return doIt(errors);
	          }
	
	          var fieldsSchema = {};
	          if (rule.defaultField) {
	            for (var k in data.value) {
	              if (data.value.hasOwnProperty(k)) {
	                fieldsSchema[k] = rule.defaultField;
	              }
	            }
	          }
	          fieldsSchema = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, fieldsSchema, data.rule.fields);
	          for (var f in fieldsSchema) {
	            if (fieldsSchema.hasOwnProperty(f)) {
	              var fieldSchema = Array.isArray(fieldsSchema[f]) ? fieldsSchema[f] : [fieldsSchema[f]];
	              fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));
	            }
	          }
	          var schema = new Schema(fieldsSchema);
	          schema.messages(options.messages);
	          if (data.rule.options) {
	            data.rule.options.messages = options.messages;
	            data.rule.options.error = options.error;
	          }
	          schema.validate(data.value, data.rule.options || options, function (errs) {
	            doIt(errs && errs.length ? errors.concat(errs) : errs);
	          });
	        }
	      }
	
	      rule.validator(rule, data.value, cb, data.source, options);
	    }, function (results) {
	      complete(results);
	    });
	  },
	  getType: function getType(rule) {
	    if (rule.type === undefined && rule.pattern instanceof RegExp) {
	      rule.type = 'pattern';
	    }
	    if (typeof rule.validator !== 'function' && rule.type && !__WEBPACK_IMPORTED_MODULE_3__validator___["a" /* default */].hasOwnProperty(rule.type)) {
	      throw new Error(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__["e" /* format */])('Unknown rule type %s', rule.type));
	    }
	    return rule.type || 'string';
	  },
	  getValidationMethod: function getValidationMethod(rule) {
	    if (typeof rule.validator === 'function') {
	      return rule.validator;
	    }
	    var keys = Object.keys(rule);
	    var messageIndex = keys.indexOf('message');
	    if (messageIndex !== -1) {
	      keys.splice(messageIndex, 1);
	    }
	    if (keys.length === 1 && keys[0] === 'required') {
	      return __WEBPACK_IMPORTED_MODULE_3__validator___["a" /* default */].required;
	    }
	    return __WEBPACK_IMPORTED_MODULE_3__validator___["a" /* default */][this.getType(rule)] || false;
	  }
	};
	
	Schema.register = function register(type, validator) {
	  if (typeof validator !== 'function') {
	    throw new Error('Cannot register a validator by type, validator is not a function');
	  }
	  __WEBPACK_IMPORTED_MODULE_3__validator___["a" /* default */][type] = validator;
	};
	
	Schema.messages = __WEBPACK_IMPORTED_MODULE_4__messages__["a" /* messages */];
	
	/* harmony default export */ __webpack_exports__["default"] = (Schema);
	
	/***/ }),
	/* 147 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["b"] = newMessages;
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return messages; });
	function newMessages() {
	  return {
	    'default': 'Validation error on field %s',
	    required: '%s is required',
	    'enum': '%s must be one of %s',
	    whitespace: '%s cannot be empty',
	    date: {
	      format: '%s date %s is invalid for format %s',
	      parse: '%s date could not be parsed, %s is invalid ',
	      invalid: '%s date %s is invalid'
	    },
	    types: {
	      string: '%s is not a %s',
	      method: '%s is not a %s (function)',
	      array: '%s is not an %s',
	      object: '%s is not an %s',
	      number: '%s is not a %s',
	      date: '%s is not a %s',
	      boolean: '%s is not a %s',
	      integer: '%s is not an %s',
	      float: '%s is not a %s',
	      regexp: '%s is not a valid %s',
	      email: '%s is not a valid %s',
	      url: '%s is not a valid %s',
	      hex: '%s is not a valid %s'
	    },
	    string: {
	      len: '%s must be exactly %s characters',
	      min: '%s must be at least %s characters',
	      max: '%s cannot be longer than %s characters',
	      range: '%s must be between %s and %s characters'
	    },
	    number: {
	      len: '%s must equal %s',
	      min: '%s cannot be less than %s',
	      max: '%s cannot be greater than %s',
	      range: '%s must be between %s and %s'
	    },
	    array: {
	      len: '%s must be exactly %s in length',
	      min: '%s cannot be less than %s in length',
	      max: '%s cannot be greater than %s in length',
	      range: '%s must be between %s and %s in length'
	    },
	    pattern: {
	      mismatch: '%s value %s does not match pattern %s'
	    },
	    clone: function clone() {
	      var cloned = JSON.parse(JSON.stringify(this));
	      cloned.clone = this.clone;
	      return cloned;
	    }
	  };
	}
	
	var messages = newMessages();
	
	/***/ }),
	/* 148 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(4);
	
	var ENUM = 'enum';
	
	/**
	 *  Rule for validating a value exists in an enumerable list.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function enumerable(rule, value, source, errors, options) {
	  rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];
	  if (rule[ENUM].indexOf(value) === -1) {
	    errors.push(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* format */](options.messages[ENUM], rule.fullField, rule[ENUM].join(', ')));
	  }
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (enumerable);
	
	/***/ }),
	/* 149 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(4);
	
	
	/**
	 *  Rule for validating a regular expression pattern.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function pattern(rule, value, source, errors, options) {
	  if (rule.pattern) {
	    if (rule.pattern instanceof RegExp) {
	      if (!rule.pattern.test(value)) {
	        errors.push(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* format */](options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
	      }
	    } else if (typeof rule.pattern === 'string') {
	      var _pattern = new RegExp(rule.pattern);
	      if (!_pattern.test(value)) {
	        errors.push(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* format */](options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
	      }
	    }
	  }
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (pattern);
	
	/***/ }),
	/* 150 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(4);
	
	
	/**
	 *  Rule for validating minimum and maximum allowed values.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function range(rule, value, source, errors, options) {
	  var len = typeof rule.len === 'number';
	  var min = typeof rule.min === 'number';
	  var max = typeof rule.max === 'number';
	  var val = value;
	  var key = null;
	  var num = typeof value === 'number';
	  var str = typeof value === 'string';
	  var arr = Array.isArray(value);
	  if (num) {
	    key = 'number';
	  } else if (str) {
	    key = 'string';
	  } else if (arr) {
	    key = 'array';
	  }
	  // if the value is not of a supported type for range validation
	  // the validation rule rule should use the
	  // type property to also test for a particular type
	  if (!key) {
	    return false;
	  }
	  if (str || arr) {
	    val = value.length;
	  }
	  if (len) {
	    if (val !== rule.len) {
	      errors.push(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* format */](options.messages[key].len, rule.fullField, rule.len));
	    }
	  } else if (min && !max && val < rule.min) {
	    errors.push(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* format */](options.messages[key].min, rule.fullField, rule.min));
	  } else if (max && !min && val > rule.max) {
	    errors.push(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* format */](options.messages[key].max, rule.fullField, rule.max));
	  } else if (min && max && (val < rule.min || val > rule.max)) {
	    errors.push(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* format */](options.messages[key].range, rule.fullField, rule.min, rule.max));
	  }
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (range);
	
	/***/ }),
	/* 151 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof__ = __webpack_require__(11);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof__);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__required__ = __webpack_require__(61);
	
	
	
	
	/* eslint max-len:0 */
	
	var pattern = {
	  // http://emailregex.com/
	  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
	  url: new RegExp('^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$', 'i'),
	  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
	};
	
	var types = {
	  integer: function integer(value) {
	    return types.number(value) && parseInt(value, 10) === value;
	  },
	  float: function float(value) {
	    return types.number(value) && !types.integer(value);
	  },
	  array: function array(value) {
	    return Array.isArray(value);
	  },
	  regexp: function regexp(value) {
	    if (value instanceof RegExp) {
	      return true;
	    }
	    try {
	      return !!new RegExp(value);
	    } catch (e) {
	      return false;
	    }
	  },
	  date: function date(value) {
	    return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function';
	  },
	  number: function number(value) {
	    if (isNaN(value)) {
	      return false;
	    }
	    return typeof value === 'number';
	  },
	  object: function object(value) {
	    return (typeof value === 'undefined' ? 'undefined' : __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default()(value)) === 'object' && !types.array(value);
	  },
	  method: function method(value) {
	    return typeof value === 'function';
	  },
	  email: function email(value) {
	    return typeof value === 'string' && !!value.match(pattern.email);
	  },
	  url: function url(value) {
	    return typeof value === 'string' && !!value.match(pattern.url);
	  },
	  hex: function hex(value) {
	    return typeof value === 'string' && !!value.match(pattern.hex);
	  }
	};
	
	/**
	 *  Rule for validating the type of a value.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function type(rule, value, source, errors, options) {
	  if (rule.required && value === undefined) {
	    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__required__["a" /* default */])(rule, value, source, errors, options);
	    return;
	  }
	  var custom = ['integer', 'float', 'array', 'regexp', 'object', 'method', 'email', 'number', 'date', 'url', 'hex'];
	  var ruleType = rule.type;
	  if (custom.indexOf(ruleType) > -1) {
	    if (!types[ruleType](value)) {
	      errors.push(__WEBPACK_IMPORTED_MODULE_1__util__["e" /* format */](options.messages.types[ruleType], rule.fullField, rule.type));
	    }
	    // straight typeof check
	  } else if (ruleType && (typeof value === 'undefined' ? 'undefined' : __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default()(value)) !== rule.type) {
	    errors.push(__WEBPACK_IMPORTED_MODULE_1__util__["e" /* format */](options.messages.types[ruleType], rule.fullField, rule.type));
	  }
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (type);
	
	/***/ }),
	/* 152 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(4);
	
	
	/**
	 *  Rule for validating whitespace.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function whitespace(rule, value, source, errors, options) {
	  if (/^\s+$/.test(value) || value === '') {
	    errors.push(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* format */](options.messages.whitespace, rule.fullField));
	  }
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (whitespace);
	
	/***/ }),
	/* 153 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	
	
	/**
	 *  Validates an array.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function array(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value, 'array') && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].required(rule, value, source, errors, options, 'array');
	    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value, 'array')) {
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].type(rule, value, source, errors, options);
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].range(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (array);
	
	/***/ }),
	/* 154 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(4);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rule___ = __webpack_require__(6);
	
	
	
	/**
	 *  Validates a boolean.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function boolean(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["f" /* isEmptyValue */])(value) && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_1__rule___["a" /* default */].required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      __WEBPACK_IMPORTED_MODULE_1__rule___["a" /* default */].type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (boolean);
	
	/***/ }),
	/* 155 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	
	
	
	function date(rule, value, callback, source, options) {
	  // console.log('integer rule called %j', rule);
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  // console.log('validate on %s value', value);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value) && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].required(rule, value, source, errors, options);
	    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value)) {
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].type(rule, value, source, errors, options);
	      if (value) {
	        __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].range(rule, value.getTime(), source, errors, options);
	      }
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (date);
	
	/***/ }),
	/* 156 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	
	
	var ENUM = 'enum';
	
	/**
	 *  Validates an enumerable list.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function enumerable(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value) && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].required(rule, value, source, errors, options);
	    if (value) {
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */][ENUM](rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (enumerable);
	
	/***/ }),
	/* 157 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	
	
	
	/**
	 *  Validates a number is a floating point number.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function floatFn(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value) && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].type(rule, value, source, errors, options);
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].range(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (floatFn);
	
	/***/ }),
	/* 158 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__string__ = __webpack_require__(166);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__method__ = __webpack_require__(160);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__number__ = __webpack_require__(161);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__boolean__ = __webpack_require__(154);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__regexp__ = __webpack_require__(164);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__integer__ = __webpack_require__(159);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__float__ = __webpack_require__(157);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__array__ = __webpack_require__(153);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__object__ = __webpack_require__(162);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__enum__ = __webpack_require__(156);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__pattern__ = __webpack_require__(163);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__date__ = __webpack_require__(155);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__required__ = __webpack_require__(165);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__type__ = __webpack_require__(167);
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/* harmony default export */ __webpack_exports__["a"] = ({
	  string: __WEBPACK_IMPORTED_MODULE_0__string__["a" /* default */],
	  method: __WEBPACK_IMPORTED_MODULE_1__method__["a" /* default */],
	  number: __WEBPACK_IMPORTED_MODULE_2__number__["a" /* default */],
	  boolean: __WEBPACK_IMPORTED_MODULE_3__boolean__["a" /* default */],
	  regexp: __WEBPACK_IMPORTED_MODULE_4__regexp__["a" /* default */],
	  integer: __WEBPACK_IMPORTED_MODULE_5__integer__["a" /* default */],
	  float: __WEBPACK_IMPORTED_MODULE_6__float__["a" /* default */],
	  array: __WEBPACK_IMPORTED_MODULE_7__array__["a" /* default */],
	  object: __WEBPACK_IMPORTED_MODULE_8__object__["a" /* default */],
	  'enum': __WEBPACK_IMPORTED_MODULE_9__enum__["a" /* default */],
	  pattern: __WEBPACK_IMPORTED_MODULE_10__pattern__["a" /* default */],
	  date: __WEBPACK_IMPORTED_MODULE_11__date__["a" /* default */],
	  url: __WEBPACK_IMPORTED_MODULE_13__type__["a" /* default */],
	  hex: __WEBPACK_IMPORTED_MODULE_13__type__["a" /* default */],
	  email: __WEBPACK_IMPORTED_MODULE_13__type__["a" /* default */],
	  required: __WEBPACK_IMPORTED_MODULE_12__required__["a" /* default */]
	});
	
	/***/ }),
	/* 159 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	
	
	
	/**
	 *  Validates a number is an integer.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function integer(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value) && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].type(rule, value, source, errors, options);
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].range(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (integer);
	
	/***/ }),
	/* 160 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	
	
	
	/**
	 *  Validates a function.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function method(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value) && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (method);
	
	/***/ }),
	/* 161 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	
	
	
	/**
	 *  Validates a number.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function number(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value) && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].type(rule, value, source, errors, options);
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].range(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (number);
	
	/***/ }),
	/* 162 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	
	
	
	/**
	 *  Validates an object.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function object(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value) && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (object);
	
	/***/ }),
	/* 163 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	
	
	
	/**
	 *  Validates a regular expression pattern.
	 *
	 *  Performs validation when a rule only contains
	 *  a pattern property but is not declared as a string type.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function pattern(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value, 'string') && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].required(rule, value, source, errors, options);
	    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value, 'string')) {
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].pattern(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (pattern);
	
	/***/ }),
	/* 164 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	
	
	
	/**
	 *  Validates the regular expression type.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function regexp(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value) && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].required(rule, value, source, errors, options);
	    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value)) {
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (regexp);
	
	/***/ }),
	/* 165 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof__ = __webpack_require__(11);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof__);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rule___ = __webpack_require__(6);
	
	
	
	function required(rule, value, callback, source, options) {
	  var errors = [];
	  var type = Array.isArray(value) ? 'array' : typeof value === 'undefined' ? 'undefined' : __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default()(value);
	  __WEBPACK_IMPORTED_MODULE_1__rule___["a" /* default */].required(rule, value, source, errors, options, type);
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (required);
	
	/***/ }),
	/* 166 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	
	
	
	/**
	 *  Performs validation for string types.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function string(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value, 'string') && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].required(rule, value, source, errors, options, 'string');
	    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value, 'string')) {
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].type(rule, value, source, errors, options);
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].range(rule, value, source, errors, options);
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].pattern(rule, value, source, errors, options);
	      if (rule.whitespace === true) {
	        __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].whitespace(rule, value, source, errors, options);
	      }
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (string);
	
	/***/ }),
	/* 167 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(4);
	
	
	
	function type(rule, value, callback, source, options) {
	  var ruleType = rule.type;
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value, ruleType) && !rule.required) {
	      return callback();
	    }
	    __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].required(rule, value, source, errors, options, ruleType);
	    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util__["f" /* isEmptyValue */])(value, ruleType)) {
	      __WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */].type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (type);
	
	/***/ }),
	/* 168 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _dom = __webpack_require__(27);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-affix';
	
	function getScroll(target, top) {
	    var prop = top ? 'pageYOffset' : 'pageXOffset';
	    var method = top ? 'scrollTop' : 'scrollLeft';
	
	    var ret = target[prop];
	
	    if (typeof ret !== 'number') {
	        ret = window.document.documentElement[method];
	    }
	
	    return ret;
	}
	
	function getOffset(element) {
	    var rect = element.getBoundingClientRect();
	
	    var scrollTop = getScroll(window, true);
	    var scrollLeft = getScroll(window);
	
	    var docEl = window.document.body;
	    var clientTop = docEl.clientTop || 0;
	    var clientLeft = docEl.clientLeft || 0;
	
	    return {
	        top: rect.top + scrollTop - clientTop,
	        left: rect.left + scrollLeft - clientLeft
	    };
	}
	
	exports.default = {
	    name: 'Affix',
	    props: {
	        offsetTop: {
	            type: Number,
	            default: 0
	        },
	        offsetBottom: {
	            type: Number
	        }
	    },
	    data: function data() {
	        return {
	            affix: false,
	            styles: {}
	        };
	    },
	
	    computed: {
	        offsetType: function offsetType() {
	            var type = 'top';
	            if (this.offsetBottom >= 0) {
	                type = 'bottom';
	            }
	
	            return type;
	        },
	        classes: function classes() {
	            return [(0, _defineProperty3.default)({}, '' + prefixCls, this.affix)];
	        }
	    },
	    mounted: function mounted() {
	        (0, _dom.on)(window, 'scroll', this.handleScroll);
	        (0, _dom.on)(window, 'resize', this.handleScroll);
	    },
	    beforeDestroy: function beforeDestroy() {
	        (0, _dom.off)(window, 'scroll', this.handleScroll);
	        (0, _dom.off)(window, 'resize', this.handleScroll);
	    },
	
	    methods: {
	        handleScroll: function handleScroll() {
	            var affix = this.affix;
	            var scrollTop = getScroll(window, true);
	            var elOffset = getOffset(this.$el);
	            var windowHeight = window.innerHeight;
	            var elHeight = this.$el.getElementsByTagName('div')[0].offsetHeight;
	
	            if (elOffset.top - this.offsetTop < scrollTop && this.offsetType == 'top' && !affix) {
	                this.affix = true;
	                this.styles = {
	                    top: this.offsetTop + 'px',
	                    left: elOffset.left + 'px',
	                    width: this.$el.offsetWidth + 'px'
	                };
	
	                this.$emit('on-change', true);
	            } else if (elOffset.top - this.offsetTop > scrollTop && this.offsetType == 'top' && affix) {
	                this.affix = false;
	                this.styles = null;
	
	                this.$emit('on-change', false);
	            }
	
	            if (elOffset.top + this.offsetBottom + elHeight > scrollTop + windowHeight && this.offsetType == 'bottom' && !affix) {
	                this.affix = true;
	                this.styles = {
	                    bottom: this.offsetBottom + 'px',
	                    left: elOffset.left + 'px',
	                    width: this.$el.offsetWidth + 'px'
	                };
	
	                this.$emit('on-change', true);
	            } else if (elOffset.top + this.offsetBottom + elHeight < scrollTop + windowHeight && this.offsetType == 'bottom' && affix) {
	                this.affix = false;
	                this.styles = null;
	
	                this.$emit('on-change', false);
	            }
	        }
	    }
	};
	
	/***/ }),
	/* 169 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _icon = __webpack_require__(15);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-alert';
	
	exports.default = {
	    name: 'Alert',
	    components: { Icon: _icon2.default },
	    props: {
	        type: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['success', 'info', 'warning', 'error']);
	            },
	
	            default: 'info'
	        },
	        closable: {
	            type: Boolean,
	            default: false
	        },
	        showIcon: {
	            type: Boolean,
	            default: false
	        },
	        banner: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            closed: false,
	            desc: false
	        };
	    },
	
	    computed: {
	        wrapClasses: function wrapClasses() {
	            var _ref;
	
	            return ['' + prefixCls, prefixCls + '-' + this.type, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-with-icon', this.showIcon), (0, _defineProperty3.default)(_ref, prefixCls + '-with-desc', this.desc), (0, _defineProperty3.default)(_ref, prefixCls + '-with-banner', this.banner), _ref)];
	        },
	        messageClasses: function messageClasses() {
	            return prefixCls + '-message';
	        },
	        descClasses: function descClasses() {
	            return prefixCls + '-desc';
	        },
	        closeClasses: function closeClasses() {
	            return prefixCls + '-close';
	        },
	        iconClasses: function iconClasses() {
	            return prefixCls + '-icon';
	        },
	        iconType: function iconType() {
	            var type = '';
	
	            switch (this.type) {
	                case 'success':
	                    type = 'checkmark-circled';
	                    break;
	                case 'info':
	                    type = 'information-circled';
	                    break;
	                case 'warning':
	                    type = 'android-alert';
	                    break;
	                case 'error':
	                    type = 'close-circled';
	                    break;
	            }
	
	            return type;
	        }
	    },
	    methods: {
	        close: function close(e) {
	            this.closed = true;
	            this.$emit('on-close', e);
	        }
	    },
	    mounted: function mounted() {
	        this.desc = this.$slots.desc !== undefined;
	    }
	};
	
	/***/ }),
	/* 170 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	var _dom = __webpack_require__(27);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-back-top';
	
	exports.default = {
	    props: {
	        height: {
	            type: Number,
	            default: 400
	        },
	        bottom: {
	            type: Number,
	            default: 30
	        },
	        right: {
	            type: Number,
	            default: 30
	        },
	        duration: {
	            type: Number,
	            default: 1000
	        }
	    },
	    data: function data() {
	        return {
	            backTop: false
	        };
	    },
	    mounted: function mounted() {
	        (0, _dom.on)(window, 'scroll', this.handleScroll);
	        (0, _dom.on)(window, 'resize', this.handleScroll);
	    },
	    beforeDestroy: function beforeDestroy() {
	        (0, _dom.off)(window, 'scroll', this.handleScroll);
	        (0, _dom.off)(window, 'resize', this.handleScroll);
	    },
	
	    computed: {
	        classes: function classes() {
	            return ['' + prefixCls, (0, _defineProperty3.default)({}, prefixCls + '-show', this.backTop)];
	        },
	        styles: function styles() {
	            return {
	                bottom: this.bottom + 'px',
	                right: this.right + 'px'
	            };
	        },
	        innerClasses: function innerClasses() {
	            return prefixCls + '-inner';
	        }
	    },
	    methods: {
	        handleScroll: function handleScroll() {
	            this.backTop = window.pageYOffset >= this.height;
	        },
	        back: function back() {
	            var sTop = document.documentElement.scrollTop || document.body.scrollTop;
	            (0, _assist.scrollTop)(window, sTop, 0, this.duration);
	            this.$emit('on-click');
	        }
	    }
	};
	
	/***/ }),
	/* 171 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-badge';
	
	exports.default = {
	    name: 'Badge',
	    props: {
	        count: [Number, String],
	        dot: {
	            type: Boolean,
	            default: false
	        },
	        overflowCount: {
	            type: [Number, String],
	            default: 99
	        },
	        className: String
	    },
	    computed: {
	        classes: function classes() {
	            return '' + prefixCls;
	        },
	        dotClasses: function dotClasses() {
	            return prefixCls + '-dot';
	        },
	        countClasses: function countClasses() {
	            var _ref;
	
	            return [prefixCls + '-count', (_ref = {}, (0, _defineProperty3.default)(_ref, '' + this.className, !!this.className), (0, _defineProperty3.default)(_ref, prefixCls + '-count-alone', this.alone), _ref)];
	        },
	        finalCount: function finalCount() {
	            return parseInt(this.count) >= parseInt(this.overflowCount) ? this.overflowCount + '+' : this.count;
	        },
	        badge: function badge() {
	            var status = false;
	
	            if (this.count) {
	                status = !(parseInt(this.count) === 0);
	            }
	
	            if (this.dot) {
	                status = true;
	                if (this.count) {
	                    if (parseInt(this.count) === 0) {
	                        status = false;
	                    }
	                }
	            }
	
	            return status;
	        },
	        alone: function alone() {
	            return this.$slots.default === undefined;
	        }
	    }
	};
	
	/***/ }),
	/* 172 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    props: {
	        prefixCls: {
	            type: String,
	            default: ''
	        },
	        duration: {
	            type: Number,
	            default: 1.5
	        },
	        type: {
	            type: String
	        },
	        content: {
	            type: String,
	            default: ''
	        },
	        styles: {
	            type: Object,
	            default: function _default() {
	                return {
	                    right: '50%'
	                };
	            }
	        },
	        closable: {
	            type: Boolean,
	            default: false
	        },
	        className: {
	            type: String
	        },
	        name: {
	            type: String,
	            required: true
	        },
	        onClose: {
	            type: Function
	        },
	        transitionName: {
	            type: String
	        }
	    },
	    data: function data() {
	        return {
	            withDesc: false
	        };
	    },
	
	    computed: {
	        baseClass: function baseClass() {
	            return this.prefixCls + '-notice';
	        },
	        classes: function classes() {
	            var _ref;
	
	            return [this.baseClass, (_ref = {}, (0, _defineProperty3.default)(_ref, '' + this.className, !!this.className), (0, _defineProperty3.default)(_ref, this.baseClass + '-closable', this.closable), (0, _defineProperty3.default)(_ref, this.baseClass + '-with-desc', this.withDesc), _ref)];
	        },
	        contentClasses: function contentClasses() {
	            return this.baseClass + '-content';
	        }
	    },
	    methods: {
	        clearCloseTimer: function clearCloseTimer() {
	            if (this.closeTimer) {
	                clearTimeout(this.closeTimer);
	                this.closeTimer = null;
	            }
	        },
	        close: function close() {
	            this.clearCloseTimer();
	            this.onClose();
	            this.$parent.close(this.name);
	        }
	    },
	    mounted: function mounted() {
	        var _this = this;
	
	        this.clearCloseTimer();
	
	        if (this.duration !== 0) {
	            this.closeTimer = setTimeout(function () {
	                _this.close();
	            }, this.duration * 1000);
	        }
	
	        if (this.prefixCls === 'ivu-notice') {
	            this.withDesc = this.$refs.content.querySelectorAll('.' + this.prefixCls + '-desc')[0].innerHTML !== '';
	        }
	    },
	    beforeDestroy: function beforeDestroy() {
	        this.clearCloseTimer();
	    }
	};
	
	/***/ }),
	/* 173 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _assign = __webpack_require__(10);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _notice2 = __webpack_require__(422);
	
	var _notice3 = _interopRequireDefault(_notice2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-notification';
	var seed = 0;
	var now = Date.now();
	
	function getUuid() {
	    return 'ivuNotification_' + now + '_' + seed++;
	}
	
	exports.default = {
	    components: { Notice: _notice3.default },
	    props: {
	        prefixCls: {
	            type: String,
	            default: prefixCls
	        },
	        styles: {
	            type: Object,
	            default: function _default() {
	                return {
	                    top: '65px',
	                    left: '50%'
	                };
	            }
	        },
	        content: {
	            type: String
	        },
	        className: {
	            type: String
	        }
	    },
	    data: function data() {
	        return {
	            notices: []
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return ['' + this.prefixCls, (0, _defineProperty3.default)({}, '' + this.className, !!this.className)];
	        }
	    },
	    methods: {
	        add: function add(notice) {
	            var name = notice.name || getUuid();
	
	            var _notice = (0, _assign2.default)({
	                styles: {
	                    right: '50%'
	                },
	                content: '',
	                duration: 1.5,
	                closable: false,
	                name: name
	            }, notice);
	
	            this.notices.push(_notice);
	        },
	        close: function close(name) {
	            var notices = this.notices;
	            for (var i = 0; i < notices.length; i++) {
	                if (notices[i].name === name) {
	                    this.notices.splice(i, 1);
	                    break;
	                }
	            }
	        },
	        closeAll: function closeAll() {
	            this.notices = [];
	        }
	    }
	};
	
	/***/ }),
	/* 174 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	
	var prefixCls = 'ivu-breadcrumb-item';
	
	exports.default = {
	    name: 'BreadcrumbItem',
	    props: {
	        href: {
	            type: String
	        },
	        replace: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            separator: '',
	            showSeparator: false
	        };
	    },
	
	    computed: {
	        linkClasses: function linkClasses() {
	            return prefixCls + '-link';
	        },
	        separatorClasses: function separatorClasses() {
	            return prefixCls + '-separator';
	        }
	    },
	    mounted: function mounted() {
	        this.showSeparator = this.$slots.separator !== undefined;
	    },
	
	    methods: {
	        handleClick: function handleClick() {
	            var isRoute = this.$router;
	            if (isRoute) {
	                this.replace ? this.$router.replace(this.href) : this.$router.push(this.href);
	            } else {
	                window.location.href = this.href;
	            }
	        }
	    }
	};
	
	/***/ }),
	/* 175 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	
	var prefixCls = 'ivu-breadcrumb';
	
	exports.default = {
	    name: 'Breadcrumb',
	    props: {
	        separator: {
	            type: String,
	            default: '/'
	        }
	    },
	    computed: {
	        classes: function classes() {
	            return '' + prefixCls;
	        }
	    },
	    mounted: function mounted() {
	        this.updateChildren();
	    },
	    updated: function updated() {
	        var _this = this;
	
	        this.$nextTick(function () {
	            _this.updateChildren();
	        });
	    },
	
	    methods: {
	        updateChildren: function updateChildren() {
	            var _this2 = this;
	
	            this.$children.forEach(function (child) {
	                child.separator = _this2.separator;
	            });
	        }
	    },
	    watch: {
	        separator: function separator() {
	            this.updateChildren();
	        }
	    }
	};
	
	/***/ }),
	/* 176 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-btn-group';
	
	exports.default = {
	    name: 'ButtonGroup',
	    props: {
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small', 'large']);
	            }
	        },
	        shape: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['circle', 'circle-outline']);
	            }
	        },
	        vertical: {
	            type: Boolean,
	            default: false
	        }
	    },
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.size, !!this.size), (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.shape, !!this.shape), (0, _defineProperty3.default)(_ref, prefixCls + '-vertical', this.vertical), _ref)];
	        }
	    }
	};
	
	/***/ }),
	/* 177 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _icon = __webpack_require__(15);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-btn';
	
	exports.default = {
	    name: 'Button',
	    components: { Icon: _icon2.default },
	    props: {
	        type: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['primary', 'ghost', 'dashed', 'text', 'info', 'success', 'warning', 'error']);
	            }
	        },
	        shape: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['circle', 'circle-outline']);
	            }
	        },
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small', 'large']);
	            }
	        },
	        loading: Boolean,
	        disabled: Boolean,
	        htmlType: {
	            default: 'button',
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['button', 'submit', 'reset']);
	            }
	        },
	        icon: String,
	        long: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            showSlot: true
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.type, !!this.type), (0, _defineProperty3.default)(_ref, prefixCls + '-long', this.long), (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.shape, !!this.shape), (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.size, !!this.size), (0, _defineProperty3.default)(_ref, prefixCls + '-loading', this.loading != null && this.loading), (0, _defineProperty3.default)(_ref, prefixCls + '-icon-only', !this.showSlot && (!!this.icon || this.loading)), _ref)];
	        }
	    },
	    methods: {
	        handleClick: function handleClick(event) {
	            this.$emit('click', event);
	        }
	    },
	    mounted: function mounted() {
	        this.showSlot = this.$slots.default !== undefined;
	    }
	};
	
	/***/ }),
	/* 178 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-card';
	var defaultPadding = 16;
	
	exports.default = {
	    name: 'Card',
	
	    props: {
	        bordered: {
	            type: Boolean,
	            default: true
	        },
	        disHover: {
	            type: Boolean,
	            default: false
	        },
	        shadow: {
	            type: Boolean,
	            default: false
	        },
	        padding: {
	            type: Number,
	            default: defaultPadding
	        }
	    },
	    data: function data() {
	        return {
	            showHead: true,
	            showExtra: true
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-bordered', this.bordered && !this.shadow), (0, _defineProperty3.default)(_ref, prefixCls + '-dis-hover', this.disHover || this.shadow), (0, _defineProperty3.default)(_ref, prefixCls + '-shadow', this.shadow), _ref)];
	        },
	        headClasses: function headClasses() {
	            return prefixCls + '-head';
	        },
	        extraClasses: function extraClasses() {
	            return prefixCls + '-extra';
	        },
	        bodyClasses: function bodyClasses() {
	            return prefixCls + '-body';
	        },
	        bodyStyles: function bodyStyles() {
	            if (this.padding !== defaultPadding) {
	                return {
	                    padding: this.padding + 'px'
	                };
	            } else {
	                return '';
	            }
	        }
	    },
	    mounted: function mounted() {
	        this.showHead = this.$slots.title !== undefined;
	        this.showExtra = this.$slots.extra !== undefined;
	    }
	};
	
	/***/ }),
	/* 179 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	
	var prefixCls = 'ivu-carousel-item';
	
	exports.default = {
	    componentName: 'carousel-item',
	    name: 'CarouselItem',
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            width: 0,
	            height: 'auto',
	            left: 0
	        };
	    },
	
	    computed: {
	        styles: function styles() {
	            return {
	                width: this.width + 'px',
	                height: '' + this.height,
	                left: this.left + 'px'
	            };
	        }
	    },
	    mounted: function mounted() {
	        this.$parent.slotChange();
	    },
	    beforeDestroy: function beforeDestroy() {
	        this.$parent.slotChange();
	    }
	};
	
	/***/ }),
	/* 180 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _icon = __webpack_require__(8);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _assist = __webpack_require__(2);
	
	var _dom = __webpack_require__(27);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-carousel';
	
	exports.default = {
	    name: 'Carousel',
	    components: { Icon: _icon2.default },
	    props: {
	        arrow: {
	            type: String,
	            default: 'hover',
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['hover', 'always', 'never']);
	            }
	        },
	        autoplay: {
	            type: Boolean,
	            default: false
	        },
	        autoplaySpeed: {
	            type: Number,
	            default: 2000
	        },
	        easing: {
	            type: String,
	            default: 'ease'
	        },
	        dots: {
	            type: String,
	            default: 'inside',
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['inside', 'outside', 'none']);
	            }
	        },
	        trigger: {
	            type: String,
	            default: 'click',
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['click', 'hover']);
	            }
	        },
	        value: {
	            type: Number,
	            default: 0
	        },
	        height: {
	            type: [String, Number],
	            default: 'auto',
	            validator: function validator(value) {
	                return value === 'auto' || Object.prototype.toString.call(value) === '[object Number]';
	            }
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            listWidth: 0,
	            trackWidth: 0,
	            trackOffset: 0,
	            slides: [],
	            slideInstances: [],
	            timer: null,
	            ready: false,
	            currentIndex: this.value
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return ['' + prefixCls];
	        },
	        trackStyles: function trackStyles() {
	            return {
	                width: this.trackWidth + 'px',
	                transform: 'translate3d(-' + this.trackOffset + 'px, 0px, 0px)',
	                transition: 'transform 500ms ' + this.easing
	            };
	        },
	        arrowClasses: function arrowClasses() {
	            return [prefixCls + '-arrow', prefixCls + '-arrow-' + this.arrow];
	        },
	        dotsClasses: function dotsClasses() {
	            return [prefixCls + '-dots', prefixCls + '-dots-' + this.dots];
	        }
	    },
	    methods: {
	        findChild: function findChild(cb) {
	            var find = function find(child) {
	                var name = child.$options.componentName;
	
	                if (name) {
	                    cb(child);
	                } else if (child.$children.length) {
	                    child.$children.forEach(function (innerChild) {
	                        find(innerChild, cb);
	                    });
	                }
	            };
	
	            if (this.slideInstances.length || !this.$children) {
	                this.slideInstances.forEach(function (child) {
	                    find(child);
	                });
	            } else {
	                this.$children.forEach(function (child) {
	                    find(child);
	                });
	            }
	        },
	        updateSlides: function updateSlides(init) {
	            var _this = this;
	
	            var slides = [];
	            var index = 1;
	
	            this.findChild(function (child) {
	                slides.push({
	                    $el: child.$el
	                });
	                child.index = index++;
	
	                if (init) {
	                    _this.slideInstances.push(child);
	                }
	            });
	
	            this.slides = slides;
	
	            this.updatePos();
	        },
	        updatePos: function updatePos() {
	            var _this2 = this;
	
	            this.findChild(function (child) {
	                child.width = _this2.listWidth;
	                child.height = typeof _this2.height === 'number' ? _this2.height + 'px' : _this2.height;
	            });
	
	            this.trackWidth = (this.slides.length || 0) * this.listWidth;
	        },
	        slotChange: function slotChange() {
	            var _this3 = this;
	
	            this.$nextTick(function () {
	                _this3.slides = [];
	                _this3.slideInstances = [];
	
	                _this3.updateSlides(true, true);
	                _this3.updatePos();
	                _this3.updateOffset();
	            });
	        },
	        handleResize: function handleResize() {
	            this.listWidth = parseInt((0, _assist.getStyle)(this.$el, 'width'));
	            this.updatePos();
	            this.updateOffset();
	        },
	        add: function add(offset) {
	            var index = this.currentIndex;
	            index += offset;
	            while (index < 0) {
	                index += this.slides.length;
	            }index = index % this.slides.length;
	            this.currentIndex = index;
	            this.$emit('input', index);
	        },
	        arrowEvent: function arrowEvent(offset) {
	            this.setAutoplay();
	            this.add(offset);
	        },
	        dotsEvent: function dotsEvent(event, n) {
	            if (event === this.trigger && this.currentIndex !== n) {
	                this.currentIndex = n;
	                this.$emit('input', n);
	
	                this.setAutoplay();
	            }
	        },
	        setAutoplay: function setAutoplay() {
	            var _this4 = this;
	
	            window.clearInterval(this.timer);
	            if (this.autoplay) {
	                this.timer = window.setInterval(function () {
	                    _this4.add(1);
	                }, this.autoplaySpeed);
	            }
	        },
	        updateOffset: function updateOffset() {
	            var _this5 = this;
	
	            this.$nextTick(function () {
	                _this5.trackOffset = _this5.currentIndex * _this5.listWidth;
	            });
	        }
	    },
	    watch: {
	        autoplay: function autoplay() {
	            this.setAutoplay();
	        },
	        autoplaySpeed: function autoplaySpeed() {
	            this.setAutoplay();
	        },
	        currentIndex: function currentIndex(val, oldVal) {
	            this.$emit('on-change', oldVal, val);
	            this.updateOffset();
	        },
	        height: function height() {
	            this.updatePos();
	        },
	        value: function value(val) {
	            this.currentIndex = val;
	        }
	    },
	    mounted: function mounted() {
	        this.updateSlides(true);
	        this.handleResize();
	        this.setAutoplay();
	
	        (0, _dom.on)(window, 'resize', this.handleResize);
	    },
	    beforeDestroy: function beforeDestroy() {
	        (0, _dom.off)(window, 'resize', this.handleResize);
	    }
	};
	
	/***/ }),
	/* 181 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _assign = __webpack_require__(10);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _stringify = __webpack_require__(67);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _input = __webpack_require__(41);
	
	var _input2 = _interopRequireDefault(_input);
	
	var _dropdown = __webpack_require__(33);
	
	var _dropdown2 = _interopRequireDefault(_dropdown);
	
	var _icon = __webpack_require__(8);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _caspanel = __webpack_require__(432);
	
	var _caspanel2 = _interopRequireDefault(_caspanel);
	
	var _clickoutside = __webpack_require__(26);
	
	var _clickoutside2 = _interopRequireDefault(_clickoutside);
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-cascader';
	var selectPrefixCls = 'ivu-select';
	
	exports.default = {
	    name: 'Cascader',
	    mixins: [_emitter2.default, _locale2.default],
	    components: { iInput: _input2.default, Drop: _dropdown2.default, Icon: _icon2.default, Caspanel: _caspanel2.default },
	    directives: { clickoutside: _clickoutside2.default },
	    props: {
	        data: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        value: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        clearable: {
	            type: Boolean,
	            default: true
	        },
	        placeholder: {
	            type: String
	        },
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small', 'large']);
	            }
	        },
	        trigger: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['click', 'hover']);
	            },
	
	            default: 'click'
	        },
	        changeOnSelect: {
	            type: Boolean,
	            default: false
	        },
	        renderFormat: {
	            type: Function,
	            default: function _default(label) {
	                return label.join(' / ');
	            }
	        },
	        loadData: {
	            type: Function
	        },
	        filterable: {
	            type: Boolean,
	            default: false
	        },
	        notFoundText: {
	            type: String
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            selectPrefixCls: selectPrefixCls,
	            visible: false,
	            selected: [],
	            tmpSelected: [],
	            updatingValue: false,
	            currentValue: this.value,
	            query: '',
	            validDataStr: '',
	            isLoadedChildren: false };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-show-clear', this.showCloseIcon), (0, _defineProperty3.default)(_ref, prefixCls + '-size-' + this.size, !!this.size), (0, _defineProperty3.default)(_ref, prefixCls + '-visible', this.visible), (0, _defineProperty3.default)(_ref, prefixCls + '-disabled', this.disabled), (0, _defineProperty3.default)(_ref, prefixCls + '-not-found', this.filterable && this.query !== '' && !this.querySelections.length), _ref)];
	        },
	        showCloseIcon: function showCloseIcon() {
	            return this.currentValue && this.currentValue.length && this.clearable && !this.disabled;
	        },
	        displayRender: function displayRender() {
	            var label = [];
	            for (var i = 0; i < this.selected.length; i++) {
	                label.push(this.selected[i].label);
	            }
	
	            return this.renderFormat(label, this.selected);
	        },
	        displayInputRender: function displayInputRender() {
	            return this.filterable ? '' : this.displayRender;
	        },
	        localePlaceholder: function localePlaceholder() {
	            if (this.placeholder === undefined) {
	                return this.t('i.select.placeholder');
	            } else {
	                return this.placeholder;
	            }
	        },
	        inputPlaceholder: function inputPlaceholder() {
	            return this.filterable && this.currentValue.length ? null : this.localePlaceholder;
	        },
	        localeNotFoundText: function localeNotFoundText() {
	            if (this.notFoundText === undefined) {
	                return this.t('i.select.noMatch');
	            } else {
	                return this.notFoundText;
	            }
	        },
	        querySelections: function querySelections() {
	            var _this = this;
	
	            var selections = [];
	            function getSelections(arr, label, value) {
	                for (var i = 0; i < arr.length; i++) {
	                    var item = arr[i];
	                    item.__label = label ? label + ' / ' + item.label : item.label;
	                    item.__value = value ? value + ',' + item.value : item.value;
	
	                    if (item.children && item.children.length) {
	                        getSelections(item.children, item.__label, item.__value);
	                        delete item.__label;
	                        delete item.__value;
	                    } else {
	                        selections.push({
	                            label: item.__label,
	                            value: item.__value,
	                            display: item.__label,
	                            item: item,
	                            disabled: !!item.disabled
	                        });
	                    }
	                }
	            }
	            getSelections(this.data);
	            selections = selections.filter(function (item) {
	                return item.label.indexOf(_this.query) > -1;
	            }).map(function (item) {
	                item.display = item.display.replace(new RegExp(_this.query, 'g'), '<span>' + _this.query + '</span>');
	                return item;
	            });
	            return selections;
	        }
	    },
	    methods: {
	        clearSelect: function clearSelect() {
	            if (this.disabled) return false;
	            var oldVal = (0, _stringify2.default)(this.currentValue);
	            this.currentValue = this.selected = this.tmpSelected = [];
	            this.handleClose();
	            this.emitValue(this.currentValue, oldVal);
	
	            this.broadcast('Caspanel', 'on-clear');
	        },
	        handleClose: function handleClose() {
	            this.visible = false;
	        },
	        toggleOpen: function toggleOpen() {
	            if (this.disabled) return false;
	            if (this.visible) {
	                if (!this.filterable) this.handleClose();
	            } else {
	                this.onFocus();
	            }
	        },
	        onFocus: function onFocus() {
	            this.visible = true;
	            if (!this.currentValue.length) {
	                this.broadcast('Caspanel', 'on-clear');
	            }
	        },
	        updateResult: function updateResult(result) {
	            this.tmpSelected = result;
	        },
	        updateSelected: function updateSelected() {
	            var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	            if (!this.changeOnSelect || init) {
	                this.broadcast('Caspanel', 'on-find-selected', {
	                    value: this.currentValue
	                });
	            }
	        },
	        emitValue: function emitValue(val, oldVal) {
	            var _this2 = this;
	
	            if ((0, _stringify2.default)(val) !== oldVal) {
	                this.$emit('on-change', this.currentValue, JSON.parse((0, _stringify2.default)(this.selected)));
	                this.$nextTick(function () {
	                    _this2.dispatch('FormItem', 'on-form-change', {
	                        value: _this2.currentValue,
	                        selected: JSON.parse((0, _stringify2.default)(_this2.selected))
	                    });
	                });
	            }
	        },
	        handleInput: function handleInput(event) {
	            this.query = event.target.value;
	        },
	        handleSelectItem: function handleSelectItem(index) {
	            var item = this.querySelections[index];
	
	            if (item.item.disabled) return false;
	            this.query = '';
	            this.$refs.input.currentValue = '';
	            var oldVal = (0, _stringify2.default)(this.currentValue);
	            this.currentValue = item.value.split(',');
	            this.emitValue(this.currentValue, oldVal);
	            this.handleClose();
	        },
	        handleFocus: function handleFocus() {
	            this.$refs.input.focus();
	        },
	        getValidData: function getValidData(data) {
	            function deleteData(item) {
	                var new_item = (0, _assign2.default)({}, item);
	                if ('loading' in new_item) {
	                    delete new_item.loading;
	                }
	                if ('__value' in new_item) {
	                    delete new_item.__value;
	                }
	                if ('__label' in new_item) {
	                    delete new_item.__label;
	                }
	                if ('children' in new_item && new_item.children.length) {
	                    new_item.children = new_item.children.map(function (i) {
	                        return deleteData(i);
	                    });
	                }
	                return new_item;
	            }
	
	            return data.map(function (item) {
	                return deleteData(item);
	            });
	        }
	    },
	    created: function created() {
	        var _this3 = this;
	
	        this.validDataStr = (0, _stringify2.default)(this.getValidData(this.data));
	        this.$on('on-result-change', function (params) {
	            var lastValue = params.lastValue;
	            var changeOnSelect = params.changeOnSelect;
	            var fromInit = params.fromInit;
	
	            if (lastValue || changeOnSelect) {
	                var oldVal = (0, _stringify2.default)(_this3.currentValue);
	                _this3.selected = _this3.tmpSelected;
	
	                var newVal = [];
	                _this3.selected.forEach(function (item) {
	                    newVal.push(item.value);
	                });
	
	                if (!fromInit) {
	                    _this3.updatingValue = true;
	                    _this3.currentValue = newVal;
	                    _this3.emitValue(_this3.currentValue, oldVal);
	                }
	            }
	            if (lastValue && !fromInit) {
	                _this3.handleClose();
	            }
	        });
	    },
	    mounted: function mounted() {
	        this.updateSelected(true);
	    },
	
	    watch: {
	        visible: function visible(val) {
	            if (val) {
	                if (this.currentValue.length) {
	                    this.updateSelected();
	                }
	            } else {
	                if (this.filterable) {
	                    this.query = '';
	                    this.$refs.input.currentValue = '';
	                }
	            }
	            this.$emit('on-visible-change', val);
	        },
	        value: function value(val) {
	            this.currentValue = val;
	            if (!val.length) this.selected = [];
	        },
	        currentValue: function currentValue() {
	            this.$emit('input', this.currentValue);
	            if (this.updatingValue) {
	                this.updatingValue = false;
	                return;
	            }
	            this.updateSelected(true);
	        },
	
	        data: {
	            deep: true,
	            handler: function handler() {
	                var _this4 = this;
	
	                var validDataStr = (0, _stringify2.default)(this.getValidData(this.data));
	                if (validDataStr !== this.validDataStr) {
	                    this.validDataStr = validDataStr;
	                    if (!this.isLoadedChildren) {
	                        this.$nextTick(function () {
	                            return _this4.updateSelected();
	                        });
	                    }
	                    this.isLoadedChildren = false;
	                }
	            }
	        }
	    }
	};
	
	/***/ }),
	/* 182 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'Casitem',
	    props: {
	        data: Object,
	        prefixCls: String,
	        tmpItem: Object
	    },
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return [this.prefixCls + '-menu-item', (_ref = {}, (0, _defineProperty3.default)(_ref, this.prefixCls + '-menu-item-active', this.tmpItem.value === this.data.value), (0, _defineProperty3.default)(_ref, this.prefixCls + '-menu-item-disabled', this.data.disabled), _ref)];
	        },
	        showArrow: function showArrow() {
	            return this.data.children && this.data.children.length || 'loading' in this.data && !this.data.loading;
	        },
	        showLoading: function showLoading() {
	            return 'loading' in this.data && this.data.loading;
	        }
	    }
	};
	
	/***/ }),
	/* 183 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _toConsumableArray2 = __webpack_require__(43);
	
	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);
	
	var _assign = __webpack_require__(10);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _casitem = __webpack_require__(431);
	
	var _casitem2 = _interopRequireDefault(_casitem);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var key = 1;
	
	exports.default = {
	    name: 'Caspanel',
	    mixins: [_emitter2.default],
	    components: { Casitem: _casitem2.default },
	    props: {
	        data: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        disabled: Boolean,
	        changeOnSelect: Boolean,
	        trigger: String,
	        prefixCls: String
	    },
	    data: function data() {
	        return {
	            tmpItem: {},
	            result: [],
	            sublist: []
	        };
	    },
	
	    watch: {
	        data: function data() {
	            this.sublist = [];
	        }
	    },
	    methods: {
	        handleClickItem: function handleClickItem(item) {
	            if (this.trigger !== 'click' && item.children) return;
	            this.handleTriggerItem(item, false, true);
	        },
	        handleHoverItem: function handleHoverItem(item) {
	            if (this.trigger !== 'hover' || !item.children) return;
	            this.handleTriggerItem(item, false, true);
	        },
	        handleTriggerItem: function handleTriggerItem(item) {
	            var _this = this;
	
	            var fromInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	            var fromUser = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	            if (item.disabled) return;
	
	            if (item.loading !== undefined && !item.children.length) {
	                var cascader = (0, _assist.findComponentUpward)(this, 'Cascader');
	                if (cascader && cascader.loadData) {
	                    cascader.loadData(item, function () {
	                        if (fromUser) {
	                            cascader.isLoadedChildren = true;
	                        }
	                        _this.handleTriggerItem(item);
	                    });
	                    return;
	                }
	            }
	
	            var backItem = this.getBaseItem(item);
	            this.tmpItem = backItem;
	            this.emitUpdate([backItem]);
	            if (item.children && item.children.length) {
	                this.sublist = item.children;
	                this.dispatch('Cascader', 'on-result-change', {
	                    lastValue: false,
	                    changeOnSelect: this.changeOnSelect,
	                    fromInit: fromInit
	                });
	            } else {
	                this.sublist = [];
	                this.dispatch('Cascader', 'on-result-change', {
	                    lastValue: true,
	                    changeOnSelect: this.changeOnSelect,
	                    fromInit: fromInit
	                });
	            }
	        },
	        updateResult: function updateResult(item) {
	            this.result = [this.tmpItem].concat(item);
	            this.emitUpdate(this.result);
	        },
	        getBaseItem: function getBaseItem(item) {
	            var backItem = (0, _assign2.default)({}, item);
	            if (backItem.children) {
	                delete backItem.children;
	            }
	
	            return backItem;
	        },
	        emitUpdate: function emitUpdate(result) {
	            if (this.$parent.$options.name === 'Caspanel') {
	                this.$parent.updateResult(result);
	            } else {
	                this.$parent.$parent.updateResult(result);
	            }
	        },
	        getKey: function getKey() {
	            return key++;
	        }
	    },
	    mounted: function mounted() {
	        var _this2 = this;
	
	        this.$on('on-find-selected', function (params) {
	            var val = params.value;
	            var value = [].concat((0, _toConsumableArray3.default)(val));
	            for (var i = 0; i < value.length; i++) {
	                for (var j = 0; j < _this2.data.length; j++) {
	                    if (value[i] === _this2.data[j].value) {
	                        _this2.handleTriggerItem(_this2.data[j], true);
	                        value.splice(0, 1);
	                        _this2.$nextTick(function () {
	                            _this2.broadcast('Caspanel', 'on-find-selected', {
	                                value: value
	                            });
	                        });
	                        return false;
	                    }
	                }
	            }
	        });
	        this.$on('on-clear', function () {
	            _this2.sublist = [];
	            _this2.tmpItem = {};
	        });
	    }
	};
	
	/***/ }),
	/* 184 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-checkbox-group';
	
	exports.default = {
	    name: 'CheckboxGroup',
	    mixins: [_emitter2.default],
	    props: {
	        value: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        }
	    },
	    data: function data() {
	        return {
	            currentValue: this.value,
	            childrens: []
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return '' + prefixCls;
	        }
	    },
	    mounted: function mounted() {
	        this.updateModel(true);
	    },
	
	    methods: {
	        updateModel: function updateModel(update) {
	            var value = this.value;
	            this.childrens = (0, _assist.findComponentsDownward)(this, 'Checkbox');
	
	            if (this.childrens) {
	                this.childrens.forEach(function (child) {
	                    child.model = value;
	
	                    if (update) {
	                        child.currentValue = value.indexOf(child.label) >= 0;
	                        child.group = true;
	                    }
	                });
	            }
	        },
	        change: function change(data) {
	            this.currentValue = data;
	            this.$emit('input', data);
	            this.$emit('on-change', data);
	            this.dispatch('FormItem', 'on-form-change', data);
	        }
	    },
	    watch: {
	        value: function value() {
	            this.updateModel(true);
	        }
	    }
	};
	
	/***/ }),
	/* 185 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-checkbox';
	
	exports.default = {
	    name: 'Checkbox',
	    mixins: [_emitter2.default],
	    props: {
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        value: {
	            type: Boolean,
	            default: false
	        },
	        label: {
	            type: [String, Number, Boolean]
	        },
	        indeterminate: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            model: [],
	            currentValue: this.value,
	            group: false,
	            showSlot: true,
	            parent: (0, _assist.findComponentUpward)(this, 'CheckboxGroup')
	        };
	    },
	
	    computed: {
	        wrapClasses: function wrapClasses() {
	            var _ref;
	
	            return [prefixCls + '-wrapper', (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-group-item', this.group), (0, _defineProperty3.default)(_ref, prefixCls + '-wrapper-checked', this.currentValue), (0, _defineProperty3.default)(_ref, prefixCls + '-wrapper-disabled', this.disabled), _ref)];
	        },
	        checkboxClasses: function checkboxClasses() {
	            var _ref2;
	
	            return ['' + prefixCls, (_ref2 = {}, (0, _defineProperty3.default)(_ref2, prefixCls + '-checked', this.currentValue), (0, _defineProperty3.default)(_ref2, prefixCls + '-disabled', this.disabled), (0, _defineProperty3.default)(_ref2, prefixCls + '-indeterminate', this.indeterminate), _ref2)];
	        },
	        innerClasses: function innerClasses() {
	            return prefixCls + '-inner';
	        },
	        inputClasses: function inputClasses() {
	            return prefixCls + '-input';
	        }
	    },
	    mounted: function mounted() {
	        this.parent = (0, _assist.findComponentUpward)(this, 'CheckboxGroup');
	        if (this.parent) this.group = true;
	        if (!this.group) {
	            this.updateModel();
	            this.showSlot = this.$slots.default !== undefined;
	        } else {
	            this.parent.updateModel(true);
	        }
	    },
	
	    methods: {
	        change: function change(event) {
	            if (this.disabled) {
	                return false;
	            }
	
	            var checked = event.target.checked;
	            this.currentValue = checked;
	            this.$emit('input', checked);
	
	            if (this.group) {
	                this.parent.change(this.model);
	            } else {
	                this.$emit('on-change', checked);
	                this.dispatch('FormItem', 'on-form-change', checked);
	            }
	        },
	        updateModel: function updateModel() {
	            this.currentValue = this.value;
	        }
	    },
	    watch: {
	        value: function value() {
	            this.updateModel();
	        }
	    }
	};
	
	/***/ }),
	/* 186 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _assist = __webpack_require__(2);
	
	var prefixCls = 'ivu-chart-circle';
	
	exports.default = {
	    name: 'Circle',
	    props: {
	        percent: {
	            type: Number,
	            default: 0
	        },
	        size: {
	            type: Number,
	            default: 120
	        },
	        strokeWidth: {
	            type: Number,
	            default: 6
	        },
	        strokeColor: {
	            type: String,
	            default: '#2db7f5'
	        },
	        strokeLinecap: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['square', 'round']);
	            },
	
	            default: 'round'
	        },
	        trailWidth: {
	            type: Number,
	            default: 5
	        },
	        trailColor: {
	            type: String,
	            default: '#eaeef2'
	        }
	    },
	    computed: {
	        circleSize: function circleSize() {
	            return {
	                width: this.size + 'px',
	                height: this.size + 'px'
	            };
	        },
	        radius: function radius() {
	            return 50 - this.strokeWidth / 2;
	        },
	        pathString: function pathString() {
	            return 'M 50,50 m 0,-' + this.radius + '\n            a ' + this.radius + ',' + this.radius + ' 0 1 1 0,' + 2 * this.radius + '\n            a ' + this.radius + ',' + this.radius + ' 0 1 1 0,-' + 2 * this.radius;
	        },
	        len: function len() {
	            return Math.PI * 2 * this.radius;
	        },
	        pathStyle: function pathStyle() {
	            return {
	                'stroke-dasharray': this.len + 'px ' + this.len + 'px',
	                'stroke-dashoffset': (100 - this.percent) / 100 * this.len + 'px',
	                'transition': 'stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease'
	            };
	        },
	        wrapClasses: function wrapClasses() {
	            return '' + prefixCls;
	        },
	        innerClasses: function innerClasses() {
	            return prefixCls + '-inner';
	        }
	    }
	};
	
	/***/ }),
	/* 187 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	
	var prefixCls = 'ivu-collapse';
	
	exports.default = {
	    name: 'Collapse',
	    props: {
	        accordion: {
	            type: Boolean,
	            default: false
	        },
	        value: {
	            type: [Array, String]
	        }
	    },
	    data: function data() {
	        return {
	            currentValue: this.value
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return '' + prefixCls;
	        }
	    },
	    mounted: function mounted() {
	        this.setActive();
	    },
	
	    methods: {
	        setActive: function setActive() {
	            var activeKey = this.getActiveKey();
	
	            this.$children.forEach(function (child, index) {
	                var name = child.name || index.toString();
	                var isActive = false;
	
	                if (self.accordion) {
	                    isActive = activeKey === name;
	                } else {
	                    isActive = activeKey.indexOf(name) > -1;
	                }
	
	                child.isActive = isActive;
	                child.index = index;
	            });
	        },
	        getActiveKey: function getActiveKey() {
	            var activeKey = this.currentValue || [];
	            var accordion = this.accordion;
	
	            if (!Array.isArray(activeKey)) {
	                activeKey = [activeKey];
	            }
	
	            if (accordion && activeKey.length > 1) {
	                activeKey = [activeKey[0]];
	            }
	
	            for (var i = 0; i < activeKey.length; i++) {
	                activeKey[i] = activeKey[i].toString();
	            }
	
	            return activeKey;
	        },
	        toggle: function toggle(data) {
	            var name = data.name.toString();
	            var newActiveKey = [];
	
	            if (this.accordion) {
	                if (!data.isActive) {
	                    newActiveKey.push(name);
	                }
	            } else {
	                var activeKey = this.getActiveKey();
	                var nameIndex = activeKey.indexOf(name);
	
	                if (data.isActive) {
	                    if (nameIndex > -1) {
	                        activeKey.splice(nameIndex, 1);
	                    }
	                } else {
	                    if (nameIndex < 0) {
	                        activeKey.push(name);
	                    }
	                }
	
	                newActiveKey = activeKey;
	            }
	
	            this.currentValue = newActiveKey;
	            this.$emit('input', newActiveKey);
	            this.$emit('on-change', newActiveKey);
	        }
	    },
	    watch: {
	        value: function value(val) {
	            this.currentValue = val;
	        },
	        currentValue: function currentValue() {
	            this.setActive();
	        }
	    }
	};
	
	/***/ }),
	/* 188 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _icon = __webpack_require__(8);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _collapseTransition = __webpack_require__(42);
	
	var _collapseTransition2 = _interopRequireDefault(_collapseTransition);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-collapse';
	
	exports.default = {
	    name: 'Panel',
	    components: { Icon: _icon2.default, CollapseTransition: _collapseTransition2.default },
	    props: {
	        name: {
	            type: String
	        }
	    },
	    data: function data() {
	        return {
	            index: 0,
	            isActive: false
	        };
	    },
	
	    computed: {
	        itemClasses: function itemClasses() {
	            return [prefixCls + '-item', (0, _defineProperty3.default)({}, prefixCls + '-item-active', this.isActive)];
	        },
	        headerClasses: function headerClasses() {
	            return prefixCls + '-header';
	        },
	        contentClasses: function contentClasses() {
	            return prefixCls + '-content';
	        },
	        boxClasses: function boxClasses() {
	            return prefixCls + '-content-box';
	        }
	    },
	    methods: {
	        toggle: function toggle() {
	            this.$parent.toggle({
	                name: this.name || this.index,
	                isActive: this.isActive
	            });
	        }
	    }
	};
	
	/***/ }),
	/* 189 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _button = __webpack_require__(20);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-picker';
	
	exports.default = {
	    mixins: [_locale2.default],
	    components: { iButton: _button2.default },
	    props: {
	        showTime: false,
	        isTime: false,
	        timeDisabled: false
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls
	        };
	    },
	
	    computed: {
	        timeClasses: function timeClasses() {
	            return (0, _defineProperty3.default)({}, prefixCls + '-confirm-time-disabled', this.timeDisabled);
	        }
	    },
	    methods: {
	        handleClear: function handleClear() {
	            this.$emit('on-pick-clear');
	        },
	        handleSuccess: function handleSuccess() {
	            this.$emit('on-pick-success');
	        },
	        handleToggleTime: function handleToggleTime() {
	            if (this.timeDisabled) return;
	            this.$emit('on-pick-toggle-time');
	        }
	    }
	};
	
	/***/ }),
	/* 190 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _util = __webpack_require__(21);
	
	var _assist = __webpack_require__(2);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-date-picker-cells';
	
	var clearHours = function clearHours(time) {
	    var cloneDate = new Date(time);
	    cloneDate.setHours(0, 0, 0, 0);
	    return cloneDate.getTime();
	};
	
	exports.default = {
	    mixins: [_locale2.default],
	    props: {
	        date: {},
	        year: {},
	        month: {},
	        selectionMode: {
	            default: 'day'
	        },
	        disabledDate: {},
	        minDate: {},
	        maxDate: {},
	        rangeState: {
	            default: function _default() {
	                return {
	                    endDate: null,
	                    selecting: false
	                };
	            }
	        },
	        value: ''
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            readCells: []
	        };
	    },
	
	    watch: {
	        'rangeState.endDate': function rangeStateEndDate(newVal) {
	            this.markRange(newVal);
	        },
	        minDate: function minDate(newVal, oldVal) {
	            if (newVal && !oldVal) {
	                this.rangeState.selecting = true;
	                this.markRange(newVal);
	            } else if (!newVal) {
	                this.rangeState.selecting = false;
	                this.markRange(newVal);
	            } else {
	                this.markRange();
	            }
	        },
	        maxDate: function maxDate(newVal, oldVal) {
	            if (newVal && !oldVal) {
	                this.rangeState.selecting = false;
	                this.markRange(newVal);
	            }
	        },
	
	        cells: {
	            handler: function handler(cells) {
	                this.readCells = cells;
	            },
	
	            immediate: true
	        }
	    },
	    computed: {
	        classes: function classes() {
	            return ['' + prefixCls];
	        },
	        cells: function cells() {
	            var date = new Date(this.year, this.month, 1);
	            var day = (0, _util.getFirstDayOfMonth)(date);
	            day = day === 0 ? 7 : day;
	            var today = clearHours(new Date());
	            var selectDay = clearHours(new Date(this.value));
	            var minDay = clearHours(new Date(this.minDate));
	            var maxDay = clearHours(new Date(this.maxDate));
	
	            var dateCountOfMonth = (0, _util.getDayCountOfMonth)(date.getFullYear(), date.getMonth());
	            var dateCountOfLastMonth = (0, _util.getDayCountOfMonth)(date.getFullYear(), date.getMonth() === 0 ? 11 : date.getMonth() - 1);
	
	            var disabledDate = this.disabledDate;
	
	            var cells = [];
	            var cell_tmpl = {
	                text: '',
	                type: '',
	                selected: false,
	                disabled: false,
	                range: false,
	                start: false,
	                end: false
	            };
	            if (day !== 7) {
	                for (var i = 0; i < day; i++) {
	                    var cell = (0, _assist.deepCopy)(cell_tmpl);
	                    cell.type = 'prev-month';
	                    cell.text = dateCountOfLastMonth - (day - 1) + i;
	
	                    var prevMonth = this.month - 1;
	                    var prevYear = this.year;
	                    if (this.month === 0) {
	                        prevMonth = 11;
	                        prevYear -= 1;
	                    }
	                    var time = clearHours(new Date(prevYear, prevMonth, cell.text));
	                    cell.disabled = typeof disabledDate === 'function' && disabledDate(new Date(time));
	                    cells.push(cell);
	                }
	            }
	
	            for (var _i = 1; _i <= dateCountOfMonth; _i++) {
	                var _cell = (0, _assist.deepCopy)(cell_tmpl);
	                var _time = clearHours(new Date(this.year, this.month, _i));
	                _cell.type = _time === today ? 'today' : 'normal';
	                _cell.text = _i;
	                _cell.selected = _time === selectDay;
	                _cell.disabled = typeof disabledDate === 'function' && disabledDate(new Date(_time));
	                _cell.range = _time >= minDay && _time <= maxDay;
	                _cell.start = this.minDate && _time === minDay;
	                _cell.end = this.maxDate && _time === maxDay;
	
	                cells.push(_cell);
	            }
	
	            var nextMonthCount = 42 - cells.length;
	            for (var _i2 = 1; _i2 <= nextMonthCount; _i2++) {
	                var _cell2 = (0, _assist.deepCopy)(cell_tmpl);
	                _cell2.type = 'next-month';
	                _cell2.text = _i2;
	
	                var nextMonth = this.month + 1;
	                var nextYear = this.year;
	                if (this.month === 11) {
	                    nextMonth = 0;
	                    nextYear += 1;
	                }
	                var _time2 = clearHours(new Date(nextYear, nextMonth, _cell2.text));
	                _cell2.disabled = typeof disabledDate === 'function' && disabledDate(new Date(_time2));
	                cells.push(_cell2);
	            }
	
	            return cells;
	        }
	    },
	    methods: {
	        getDateOfCell: function getDateOfCell(cell) {
	            var year = this.year;
	            var month = this.month;
	            var day = cell.text;
	
	            var date = this.date;
	            var hours = date.getHours();
	            var minutes = date.getMinutes();
	            var seconds = date.getSeconds();
	
	            if (cell.type === 'prev-month') {
	                if (month === 0) {
	                    month = 11;
	                    year--;
	                } else {
	                    month--;
	                }
	            } else if (cell.type === 'next-month') {
	                if (month === 11) {
	                    month = 0;
	                    year++;
	                } else {
	                    month++;
	                }
	            }
	
	            return new Date(year, month, day, hours, minutes, seconds);
	        },
	        handleClick: function handleClick(event) {
	            var target = event.target;
	            if (target.tagName === 'EM') {
	                var cell = this.cells[parseInt(event.target.getAttribute('index'))];
	                if (cell.disabled) return;
	
	                var newDate = this.getDateOfCell(cell);
	
	                if (this.selectionMode === 'range') {
	                    if (this.minDate && this.maxDate) {
	                        var minDate = new Date(newDate.getTime());
	                        var maxDate = null;
	                        this.rangeState.selecting = true;
	                        this.markRange(this.minDate);
	
	                        this.$emit('on-pick', { minDate: minDate, maxDate: maxDate }, false);
	                    } else if (this.minDate && !this.maxDate) {
	                        if (newDate >= this.minDate) {
	                            var _maxDate = new Date(newDate.getTime());
	                            this.rangeState.selecting = false;
	
	                            this.$emit('on-pick', { minDate: this.minDate, maxDate: _maxDate });
	                        } else {
	                            var _minDate = new Date(newDate.getTime());
	
	                            this.$emit('on-pick', { minDate: _minDate, maxDate: this.maxDate }, false);
	                        }
	                    } else if (!this.minDate) {
	                        var _minDate2 = new Date(newDate.getTime());
	                        this.rangeState.selecting = true;
	                        this.markRange(this.minDate);
	
	                        this.$emit('on-pick', { minDate: _minDate2, maxDate: this.maxDate }, false);
	                    }
	                } else {
	                    this.$emit('on-pick', newDate);
	                }
	            }
	            this.$emit('on-pick-click');
	        },
	        handleMouseMove: function handleMouseMove(event) {
	            if (!this.rangeState.selecting) return;
	
	            this.$emit('on-changerange', {
	                minDate: this.minDate,
	                maxDate: this.maxDate,
	                rangeState: this.rangeState
	            });
	
	            var target = event.target;
	            if (target.tagName === 'EM') {
	                var cell = this.cells[parseInt(event.target.getAttribute('index'))];
	
	                this.rangeState.endDate = this.getDateOfCell(cell);
	            }
	        },
	        markRange: function markRange(maxDate) {
	            var _this = this;
	
	            var minDate = this.minDate;
	            if (!maxDate) maxDate = this.maxDate;
	
	            var minDay = clearHours(new Date(minDate));
	            var maxDay = clearHours(new Date(maxDate));
	
	            this.cells.forEach(function (cell) {
	                if (cell.type === 'today' || cell.type === 'normal') {
	                    var time = clearHours(new Date(_this.year, _this.month, cell.text));
	                    cell.range = time >= minDay && time <= maxDay;
	                    cell.start = minDate && time === minDay;
	                    cell.end = maxDate && time === maxDay;
	                }
	            });
	        },
	        getCellCls: function getCellCls(cell) {
	            var _ref;
	
	            return [prefixCls + '-cell', (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-cell-selected', cell.selected || cell.start || cell.end), (0, _defineProperty3.default)(_ref, prefixCls + '-cell-disabled', cell.disabled), (0, _defineProperty3.default)(_ref, prefixCls + '-cell-today', cell.type === 'today'), (0, _defineProperty3.default)(_ref, prefixCls + '-cell-prev-month', cell.type === 'prev-month'), (0, _defineProperty3.default)(_ref, prefixCls + '-cell-next-month', cell.type === 'next-month'), (0, _defineProperty3.default)(_ref, prefixCls + '-cell-range', cell.range && !cell.start && !cell.end), _ref)];
	        }
	    }
	};
	
	/***/ }),
	/* 191 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-date-picker-cells';
	
	exports.default = {
	    mixins: [_locale2.default],
	    props: {
	        date: {},
	        month: {
	            type: Number
	        },
	        disabledDate: {},
	        selectionMode: {
	            default: 'month'
	        }
	    },
	    computed: {
	        classes: function classes() {
	            return ['' + prefixCls, prefixCls + '-month'];
	        },
	        cells: function cells() {
	            var cells = [];
	            var cell_tmpl = {
	                text: '',
	                selected: false,
	                disabled: false
	            };
	
	            for (var i = 0; i < 12; i++) {
	                var cell = (0, _assist.deepCopy)(cell_tmpl);
	                cell.text = i + 1;
	
	                var date = new Date(this.date);
	                date.setMonth(i);
	                cell.disabled = typeof this.disabledDate === 'function' && this.disabledDate(date) && this.selectionMode === 'month';
	
	                cell.selected = Number(this.month) === i;
	                cells.push(cell);
	            }
	
	            return cells;
	        }
	    },
	    methods: {
	        getCellCls: function getCellCls(cell) {
	            var _ref;
	
	            return [prefixCls + '-cell', (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-cell-selected', cell.selected), (0, _defineProperty3.default)(_ref, prefixCls + '-cell-disabled', cell.disabled), _ref)];
	        },
	        handleClick: function handleClick(event) {
	            var target = event.target;
	            if (target.tagName === 'EM') {
	                var index = parseInt(event.target.getAttribute('index'));
	                var cell = this.cells[index];
	                if (cell.disabled) return;
	
	                this.$emit('on-pick', index);
	            }
	            this.$emit('on-pick-click');
	        },
	        tCell: function tCell(cell) {
	            return this.t('i.datepicker.months.m' + cell);
	        }
	    }
	};
	
	/***/ }),
	/* 192 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _timeMixins = __webpack_require__(64);
	
	var _timeMixins2 = _interopRequireDefault(_timeMixins);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-time-picker-cells';
	
	exports.default = {
	    mixins: [_timeMixins2.default],
	    props: {
	        hours: {
	            type: [Number, String],
	            default: 0
	        },
	        minutes: {
	            type: [Number, String],
	            default: 0
	        },
	        seconds: {
	            type: [Number, String],
	            default: 0
	        },
	        showSeconds: {
	            type: Boolean,
	            default: true
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            compiled: false
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return ['' + prefixCls, (0, _defineProperty3.default)({}, prefixCls + '-with-seconds', this.showSeconds)];
	        },
	        hoursList: function hoursList() {
	            var hours = [];
	            var hour_tmpl = {
	                text: 0,
	                selected: false,
	                disabled: false,
	                hide: false
	            };
	
	            for (var i = 0; i < 24; i++) {
	                var hour = (0, _assist.deepCopy)(hour_tmpl);
	                hour.text = i;
	
	                if (this.disabledHours.length && this.disabledHours.indexOf(i) > -1) {
	                    hour.disabled = true;
	                    if (this.hideDisabledOptions) hour.hide = true;
	                }
	                if (this.hours === i) hour.selected = true;
	                hours.push(hour);
	            }
	
	            return hours;
	        },
	        minutesList: function minutesList() {
	            var minutes = [];
	            var minute_tmpl = {
	                text: 0,
	                selected: false,
	                disabled: false,
	                hide: false
	            };
	
	            for (var i = 0; i < 60; i++) {
	                var minute = (0, _assist.deepCopy)(minute_tmpl);
	                minute.text = i;
	
	                if (this.disabledMinutes.length && this.disabledMinutes.indexOf(i) > -1) {
	                    minute.disabled = true;
	                    if (this.hideDisabledOptions) minute.hide = true;
	                }
	                if (this.minutes === i) minute.selected = true;
	                minutes.push(minute);
	            }
	
	            return minutes;
	        },
	        secondsList: function secondsList() {
	            var seconds = [];
	            var second_tmpl = {
	                text: 0,
	                selected: false,
	                disabled: false,
	                hide: false
	            };
	
	            for (var i = 0; i < 60; i++) {
	                var second = (0, _assist.deepCopy)(second_tmpl);
	                second.text = i;
	
	                if (this.disabledSeconds.length && this.disabledSeconds.indexOf(i) > -1) {
	                    second.disabled = true;
	                    if (this.hideDisabledOptions) second.hide = true;
	                }
	                if (this.seconds === i) second.selected = true;
	                seconds.push(second);
	            }
	
	            return seconds;
	        }
	    },
	    methods: {
	        getCellCls: function getCellCls(cell) {
	            var _ref2;
	
	            return [prefixCls + '-cell', (_ref2 = {}, (0, _defineProperty3.default)(_ref2, prefixCls + '-cell-selected', cell.selected), (0, _defineProperty3.default)(_ref2, prefixCls + '-cell-disabled', cell.disabled), _ref2)];
	        },
	        handleClickHours: function handleClickHours(event) {
	            this.handleClick('hours', event);
	        },
	        handleClickMinutes: function handleClickMinutes(event) {
	            this.handleClick('minutes', event);
	        },
	        handleClickSeconds: function handleClickSeconds(event) {
	            this.handleClick('seconds', event);
	        },
	        handleClick: function handleClick(type, event) {
	            var target = event.target;
	            if (target.tagName === 'LI') {
	                var cell = this[type + 'List'][parseInt(event.target.getAttribute('index'))];
	                if (cell.disabled) return;
	                var data = {};
	                data[type] = cell.text;
	                this.$emit('on-change', data);
	            }
	            this.$emit('on-pick-click');
	        },
	        scroll: function scroll(type, index) {
	            var from = this.$refs[type].scrollTop;
	            var to = 24 * this.getScrollIndex(type, index);
	            (0, _assist.scrollTop)(this.$refs[type], from, to, 500);
	        },
	        getScrollIndex: function getScrollIndex(type, index) {
	            var Type = (0, _assist.firstUpperCase)(type);
	            var disabled = this['disabled' + Type];
	            if (disabled.length && this.hideDisabledOptions) {
	                var _count = 0;
	                disabled.forEach(function (item) {
	                    return item <= index ? _count++ : '';
	                });
	                index -= _count;
	            }
	            return index;
	        },
	        updateScroll: function updateScroll() {
	            var _this = this;
	
	            var times = ['hours', 'minutes', 'seconds'];
	            this.$nextTick(function () {
	                times.forEach(function (type) {
	                    _this.$refs[type].scrollTop = 24 * _this.getScrollIndex(type, _this[type]);
	                });
	            });
	        },
	        formatTime: function formatTime(text) {
	            return text < 10 ? '0' + text : text;
	        }
	    },
	    watch: {
	        hours: function hours(val) {
	            if (!this.compiled) return;
	            this.scroll('hours', val);
	        },
	        minutes: function minutes(val) {
	            if (!this.compiled) return;
	            this.scroll('minutes', val);
	        },
	        seconds: function seconds(val) {
	            if (!this.compiled) return;
	            this.scroll('seconds', val);
	        }
	    },
	    mounted: function mounted() {
	        var _this2 = this;
	
	        this.updateScroll();
	        this.$nextTick(function () {
	            return _this2.compiled = true;
	        });
	    }
	};
	
	/***/ }),
	/* 193 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-date-picker-cells';
	
	exports.default = {
	    props: {
	        date: {},
	        year: {},
	        disabledDate: {},
	        selectionMode: {
	            default: 'year'
	        }
	    },
	    computed: {
	        classes: function classes() {
	            return ['' + prefixCls, prefixCls + '-year'];
	        },
	        startYear: function startYear() {
	            return Math.floor(this.year / 10) * 10;
	        },
	        cells: function cells() {
	            var cells = [];
	            var cell_tmpl = {
	                text: '',
	                selected: false,
	                disabled: false
	            };
	
	            for (var i = 0; i < 10; i++) {
	                var cell = (0, _assist.deepCopy)(cell_tmpl);
	                cell.text = this.startYear + i;
	
	                var date = new Date(this.date);
	                date.setFullYear(cell.text);
	                cell.disabled = typeof this.disabledDate === 'function' && this.disabledDate(date) && this.selectionMode === 'year';
	
	                cell.selected = Number(this.year) === cell.text;
	                cells.push(cell);
	            }
	
	            return cells;
	        }
	    },
	    methods: {
	        getCellCls: function getCellCls(cell) {
	            var _ref;
	
	            return [prefixCls + '-cell', (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-cell-selected', cell.selected), (0, _defineProperty3.default)(_ref, prefixCls + '-cell-disabled', cell.disabled), _ref)];
	        },
	        nextTenYear: function nextTenYear() {
	            this.$emit('on-pick', Number(this.year) + 10, false);
	        },
	        prevTenYear: function prevTenYear() {
	            this.$emit('on-pick', Number(this.year) - 10, false);
	        },
	        handleClick: function handleClick(event) {
	            var target = event.target;
	            if (target.tagName === 'EM') {
	                var cell = this.cells[parseInt(event.target.getAttribute('index'))];
	                if (cell.disabled) return;
	
	                this.$emit('on-pick', cell.text);
	            }
	            this.$emit('on-pick-click');
	        }
	    }
	};
	
	/***/ }),
	/* 194 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _icon = __webpack_require__(8);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _dateTable = __webpack_require__(90);
	
	var _dateTable2 = _interopRequireDefault(_dateTable);
	
	var _yearTable = __webpack_require__(93);
	
	var _yearTable2 = _interopRequireDefault(_yearTable);
	
	var _monthTable = __webpack_require__(91);
	
	var _monthTable2 = _interopRequireDefault(_monthTable);
	
	var _timeRange = __webpack_require__(94);
	
	var _timeRange2 = _interopRequireDefault(_timeRange);
	
	var _confirm = __webpack_require__(40);
	
	var _confirm2 = _interopRequireDefault(_confirm);
	
	var _util = __webpack_require__(21);
	
	var _mixin = __webpack_require__(35);
	
	var _mixin2 = _interopRequireDefault(_mixin);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-picker-panel';
	var datePrefixCls = 'ivu-date-picker';
	
	exports.default = {
	    name: 'DatePicker',
	    mixins: [_mixin2.default, _locale2.default],
	    components: { Icon: _icon2.default, DateTable: _dateTable2.default, YearTable: _yearTable2.default, MonthTable: _monthTable2.default, TimePicker: _timeRange2.default, Confirm: _confirm2.default },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            datePrefixCls: datePrefixCls,
	            shortcuts: [],
	            date: (0, _util.initTimeDate)(),
	            value: '',
	            minDate: '',
	            maxDate: '',
	            confirm: false,
	            rangeState: {
	                endDate: null,
	                selecting: false
	            },
	            showTime: false,
	            disabledDate: '',
	            leftCurrentView: 'date',
	            rightCurrentView: 'date',
	            selectionMode: 'range',
	            leftTableYear: null,
	            rightTableYear: null,
	            isTime: false,
	            format: 'yyyy-MM-dd'
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return [prefixCls + '-body-wrapper', datePrefixCls + '-with-range', (0, _defineProperty3.default)({}, prefixCls + '-with-sidebar', this.shortcuts.length)];
	        },
	        leftYear: function leftYear() {
	            return this.date.getFullYear();
	        },
	        leftTableDate: function leftTableDate() {
	            if (this.leftCurrentView === 'year' || this.leftCurrentView === 'month') {
	                return new Date(this.leftTableYear);
	            } else {
	                return this.date;
	            }
	        },
	        leftYearLabel: function leftYearLabel() {
	            var tYear = this.t('i.datepicker.year');
	            if (this.leftCurrentView === 'year') {
	                var year = this.leftTableYear;
	                if (!year) return '';
	                var startYear = Math.floor(year / 10) * 10;
	                return '' + startYear + tYear + ' - ' + (startYear + 9) + tYear;
	            } else {
	                var _year = this.leftCurrentView === 'month' ? this.leftTableYear : this.leftYear;
	                if (!_year) return '';
	                return '' + _year + tYear;
	            }
	        },
	        leftMonth: function leftMonth() {
	            return this.date.getMonth();
	        },
	        leftMonthLabel: function leftMonthLabel() {
	            var month = this.leftMonth + 1;
	            return this.t('i.datepicker.month' + month);
	        },
	        rightYear: function rightYear() {
	            return this.rightDate.getFullYear();
	        },
	        rightTableDate: function rightTableDate() {
	            if (this.rightCurrentView === 'year' || this.rightCurrentView === 'month') {
	                return new Date(this.rightTableYear);
	            } else {
	                return this.date;
	            }
	        },
	        rightYearLabel: function rightYearLabel() {
	            var tYear = this.t('i.datepicker.year');
	            if (this.rightCurrentView === 'year') {
	                var year = this.rightTableYear;
	                if (!year) return '';
	                var startYear = Math.floor(year / 10) * 10;
	                return '' + startYear + tYear + ' - ' + (startYear + 9) + tYear;
	            } else {
	                var _year2 = this.rightCurrentView === 'month' ? this.rightTableYear : this.rightYear;
	                if (!_year2) return '';
	                return '' + _year2 + tYear;
	            }
	        },
	        rightMonth: function rightMonth() {
	            return this.rightDate.getMonth();
	        },
	        rightMonthLabel: function rightMonthLabel() {
	            var month = this.rightMonth + 1;
	            return this.t('i.datepicker.month' + month);
	        },
	        rightDate: function rightDate() {
	            var newDate = new Date(this.date);
	            var month = newDate.getMonth();
	            newDate.setDate(1);
	
	            if (month === 11) {
	                newDate.setFullYear(newDate.getFullYear() + 1);
	                newDate.setMonth(0);
	            } else {
	                newDate.setMonth(month + 1);
	            }
	            return newDate;
	        },
	        timeDisabled: function timeDisabled() {
	            return !(this.minDate && this.maxDate);
	        }
	    },
	    watch: {
	        value: function value(newVal) {
	            if (!newVal) {
	                this.minDate = null;
	                this.maxDate = null;
	            } else if (Array.isArray(newVal)) {
	                this.minDate = newVal[0] ? (0, _util.toDate)(newVal[0]) : null;
	                this.maxDate = newVal[1] ? (0, _util.toDate)(newVal[1]) : null;
	                if (this.minDate) this.date = new Date(this.minDate);
	            }
	            if (this.showTime) this.$refs.timePicker.value = newVal;
	        },
	        minDate: function minDate(val) {
	            if (this.showTime) this.$refs.timePicker.date = val;
	        },
	        maxDate: function maxDate(val) {
	            if (this.showTime) this.$refs.timePicker.dateEnd = val;
	        },
	        format: function format(val) {
	            if (this.showTime) this.$refs.timePicker.format = val;
	        },
	        isTime: function isTime(val) {
	            if (val) this.$refs.timePicker.updateScroll();
	        }
	    },
	    methods: {
	        resetDate: function resetDate() {
	            this.date = new Date(this.date);
	            this.leftTableYear = this.date.getFullYear();
	            this.rightTableYear = this.rightDate.getFullYear();
	        },
	        handleClear: function handleClear() {
	            this.minDate = null;
	            this.maxDate = null;
	            this.date = new Date();
	            this.handleConfirm();
	            if (this.showTime) this.$refs.timePicker.handleClear();
	        },
	        resetView: function resetView() {
	            var reset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	            this.leftCurrentView = 'date';
	            this.rightCurrentView = 'date';
	
	            this.leftTableYear = this.leftYear;
	            this.rightTableYear = this.rightYear;
	
	            if (reset) this.isTime = false;
	        },
	        prevYear: function prevYear(direction) {
	            if (this[direction + 'CurrentView'] === 'year') {
	                this.$refs[direction + 'YearTable'].prevTenYear();
	            } else if (this[direction + 'CurrentView'] === 'month') {
	                this[direction + 'TableYear']--;
	            } else {
	                var date = this.date;
	                date.setFullYear(date.getFullYear() - 1);
	                this.resetDate();
	            }
	        },
	        nextYear: function nextYear(direction) {
	            if (this[direction + 'CurrentView'] === 'year') {
	                this.$refs[direction + 'YearTable'].nextTenYear();
	            } else if (this[direction + 'CurrentView'] === 'month') {
	                this[direction + 'TableYear']++;
	            } else {
	                var date = this.date;
	                date.setFullYear(date.getFullYear() + 1);
	                this.resetDate();
	            }
	        },
	        prevMonth: function prevMonth() {
	            this.date = (0, _util.prevMonth)(this.date);
	        },
	        nextMonth: function nextMonth() {
	            this.date = (0, _util.nextMonth)(this.date);
	        },
	        handleLeftYearPick: function handleLeftYearPick(year) {
	            var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	            this.handleYearPick(year, close, 'left');
	        },
	        handleRightYearPick: function handleRightYearPick(year) {
	            var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	            this.handleYearPick(year, close, 'right');
	        },
	        handleYearPick: function handleYearPick(year, close, direction) {
	            this[direction + 'TableYear'] = year;
	            if (!close) return;
	
	            this[direction + 'CurrentView'] = 'month';
	        },
	        handleLeftMonthPick: function handleLeftMonthPick(month) {
	            this.handleMonthPick(month, 'left');
	        },
	        handleRightMonthPick: function handleRightMonthPick(month) {
	            this.handleMonthPick(month, 'right');
	        },
	        handleMonthPick: function handleMonthPick(month, direction) {
	            var year = this[direction + 'TableYear'];
	            if (direction === 'right') {
	                if (month === 0) {
	                    month = 11;
	                    year--;
	                } else {
	                    month--;
	                }
	            }
	
	            this.date.setYear(year);
	            this.date.setMonth(month);
	            this[direction + 'CurrentView'] = 'date';
	            this.resetDate();
	        },
	        showYearPicker: function showYearPicker(direction) {
	            this[direction + 'CurrentView'] = 'year';
	            this[direction + 'TableYear'] = this[direction + 'Year'];
	        },
	        showMonthPicker: function showMonthPicker(direction) {
	            this[direction + 'CurrentView'] = 'month';
	        },
	        handleConfirm: function handleConfirm(visible) {
	            this.$emit('on-pick', [this.minDate, this.maxDate], visible);
	        },
	        handleRangePick: function handleRangePick(val) {
	            var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	            if (this.maxDate === val.maxDate && this.minDate === val.minDate) return;
	
	            this.minDate = val.minDate;
	            this.maxDate = val.maxDate;
	
	            if (!close) return;
	
	            this.handleConfirm(false);
	        },
	        handleChangeRange: function handleChangeRange(val) {
	            this.minDate = val.minDate;
	            this.maxDate = val.maxDate;
	            this.rangeState = val.rangeState;
	        },
	        handleToggleTime: function handleToggleTime() {
	            this.isTime = !this.isTime;
	        },
	        handleTimePick: function handleTimePick(date) {
	            this.minDate = date[0];
	            this.maxDate = date[1];
	            this.handleConfirm(false);
	        }
	    },
	    mounted: function mounted() {
	        if (this.showTime) {
	            this.$refs.timePicker.date = this.minDate;
	            this.$refs.timePicker.dateEnd = this.maxDate;
	            this.$refs.timePicker.value = this.value;
	            this.$refs.timePicker.format = this.format;
	            this.$refs.timePicker.showDate = true;
	        }
	    }
	};
	
	/***/ }),
	/* 195 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _icon = __webpack_require__(8);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _dateTable = __webpack_require__(90);
	
	var _dateTable2 = _interopRequireDefault(_dateTable);
	
	var _yearTable = __webpack_require__(93);
	
	var _yearTable2 = _interopRequireDefault(_yearTable);
	
	var _monthTable = __webpack_require__(91);
	
	var _monthTable2 = _interopRequireDefault(_monthTable);
	
	var _time = __webpack_require__(95);
	
	var _time2 = _interopRequireDefault(_time);
	
	var _confirm = __webpack_require__(40);
	
	var _confirm2 = _interopRequireDefault(_confirm);
	
	var _mixin = __webpack_require__(35);
	
	var _mixin2 = _interopRequireDefault(_mixin);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	var _util = __webpack_require__(21);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-picker-panel';
	var datePrefixCls = 'ivu-date-picker';
	
	exports.default = {
	    name: 'DatePicker',
	    mixins: [_mixin2.default, _locale2.default],
	    components: { Icon: _icon2.default, DateTable: _dateTable2.default, YearTable: _yearTable2.default, MonthTable: _monthTable2.default, TimePicker: _time2.default, Confirm: _confirm2.default },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            datePrefixCls: datePrefixCls,
	            shortcuts: [],
	            currentView: 'date',
	            date: (0, _util.initTimeDate)(),
	            value: '',
	            showTime: false,
	            selectionMode: 'day',
	            disabledDate: '',
	            year: null,
	            month: null,
	            confirm: false,
	            isTime: false,
	            format: 'yyyy-MM-dd'
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return [prefixCls + '-body-wrapper', (0, _defineProperty3.default)({}, prefixCls + '-with-sidebar', this.shortcuts.length)];
	        },
	        yearLabel: function yearLabel() {
	            var tYear = this.t('i.datepicker.year');
	            var year = this.year;
	            if (!year) return '';
	            if (this.currentView === 'year') {
	                var startYear = Math.floor(year / 10) * 10;
	                return '' + startYear + tYear + ' - ' + (startYear + 9) + tYear;
	            }
	            return '' + year + tYear;
	        },
	        monthLabel: function monthLabel() {
	            var month = this.month + 1;
	            return this.t('i.datepicker.month' + month);
	        }
	    },
	    watch: {
	        value: function value(newVal) {
	            if (!newVal) return;
	            newVal = new Date(newVal);
	            if (!isNaN(newVal)) {
	                this.date = newVal;
	                this.year = newVal.getFullYear();
	                this.month = newVal.getMonth();
	            }
	            if (this.showTime) this.$refs.timePicker.value = newVal;
	        },
	        date: function date(val) {
	            if (this.showTime) this.$refs.timePicker.date = val;
	        },
	        format: function format(val) {
	            if (this.showTime) this.$refs.timePicker.format = val;
	        },
	        currentView: function currentView(val) {
	            if (val === 'time') this.$refs.timePicker.updateScroll();
	        }
	    },
	    methods: {
	        resetDate: function resetDate() {
	            this.date = new Date(this.date);
	        },
	        handleClear: function handleClear() {
	            this.date = new Date();
	            this.$emit('on-pick', '');
	            if (this.showTime) this.$refs.timePicker.handleClear();
	        },
	        resetView: function resetView() {
	            var reset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	            if (this.currentView !== 'time' || reset) {
	                if (this.selectionMode === 'month') {
	                    this.currentView = 'month';
	                } else if (this.selectionMode === 'year') {
	                    this.currentView = 'year';
	                } else {
	                    this.currentView = 'date';
	                }
	            }
	
	            this.year = this.date.getFullYear();
	            this.month = this.date.getMonth();
	            if (reset) this.isTime = false;
	        },
	        prevYear: function prevYear() {
	            if (this.currentView === 'year') {
	                this.$refs.yearTable.prevTenYear();
	            } else {
	                this.year--;
	                this.date.setFullYear(this.year);
	                this.resetDate();
	            }
	        },
	        nextYear: function nextYear() {
	            if (this.currentView === 'year') {
	                this.$refs.yearTable.nextTenYear();
	            } else {
	                this.year++;
	                this.date.setFullYear(this.year);
	                this.resetDate();
	            }
	        },
	        prevMonth: function prevMonth() {
	            this.month--;
	            if (this.month < 0) {
	                this.month = 11;
	                this.year--;
	            }
	        },
	        nextMonth: function nextMonth() {
	            this.month++;
	            if (this.month > 11) {
	                this.month = 0;
	                this.year++;
	            }
	        },
	        showYearPicker: function showYearPicker() {
	            this.currentView = 'year';
	        },
	        showMonthPicker: function showMonthPicker() {
	            this.currentView = 'month';
	        },
	        handleToggleTime: function handleToggleTime() {
	            if (this.currentView === 'date') {
	                this.currentView = 'time';
	                this.isTime = true;
	            } else if (this.currentView === 'time') {
	                this.currentView = 'date';
	                this.isTime = false;
	            }
	        },
	        handleYearPick: function handleYearPick(year) {
	            var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	            this.year = year;
	            if (!close) return;
	
	            this.date.setFullYear(year);
	            if (this.selectionMode === 'year') {
	                this.$emit('on-pick', new Date(year, 0, 1));
	            } else {
	                this.currentView = 'month';
	            }
	
	            this.resetDate();
	        },
	        handleMonthPick: function handleMonthPick(month) {
	            this.month = month;
	            var selectionMode = this.selectionMode;
	            if (selectionMode !== 'month') {
	                this.date.setMonth(month);
	                this.currentView = 'date';
	                this.resetDate();
	            } else {
	                this.date.setMonth(month);
	                this.year && this.date.setFullYear(this.year);
	                this.resetDate();
	                var value = new Date(this.date.getFullYear(), month, 1);
	                this.$emit('on-pick', value);
	            }
	        },
	        handleDatePick: function handleDatePick(value) {
	            if (this.selectionMode === 'day') {
	                this.$emit('on-pick', new Date(value.getTime()));
	                this.date.setFullYear(value.getFullYear());
	                this.date.setMonth(value.getMonth());
	                this.date.setDate(value.getDate());
	            }
	
	            this.resetDate();
	        },
	        handleTimePick: function handleTimePick(date) {
	            this.handleDatePick(date);
	        }
	    },
	    mounted: function mounted() {
	        if (this.selectionMode === 'month') {
	            this.currentView = 'month';
	        }
	
	        if (this.date && !this.year) {
	            this.year = this.date.getFullYear();
	            this.month = this.date.getMonth();
	        }
	        if (this.showTime) {
	            this.$refs.timePicker.date = this.date;
	            this.$refs.timePicker.value = this.value;
	            this.$refs.timePicker.format = this.format;
	            this.$refs.timePicker.showDate = true;
	        }
	    }
	};
	
	/***/ }),
	/* 196 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _timeSpinner = __webpack_require__(92);
	
	var _timeSpinner2 = _interopRequireDefault(_timeSpinner);
	
	var _confirm = __webpack_require__(40);
	
	var _confirm2 = _interopRequireDefault(_confirm);
	
	var _mixin = __webpack_require__(35);
	
	var _mixin2 = _interopRequireDefault(_mixin);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	var _util = __webpack_require__(21);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-picker-panel';
	var timePrefixCls = 'ivu-time-picker';
	
	exports.default = {
	    name: 'TimePicker',
	    mixins: [_mixin2.default, _locale2.default],
	    components: { TimeSpinner: _timeSpinner2.default, Confirm: _confirm2.default },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            timePrefixCls: timePrefixCls,
	            format: 'HH:mm:ss',
	            showDate: false,
	            date: (0, _util.initTimeDate)(),
	            dateEnd: (0, _util.initTimeDate)(),
	            value: '',
	            hours: '',
	            minutes: '',
	            seconds: '',
	            hoursEnd: '',
	            minutesEnd: '',
	            secondsEnd: '',
	            disabledHours: [],
	            disabledMinutes: [],
	            disabledSeconds: [],
	            hideDisabledOptions: false,
	            confirm: false
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return [prefixCls + '-body-wrapper', timePrefixCls + '-with-range', (0, _defineProperty3.default)({}, timePrefixCls + '-with-seconds', this.showSeconds)];
	        },
	        showSeconds: function showSeconds() {
	            return (this.format || '').indexOf('ss') !== -1;
	        },
	        visibleDate: function visibleDate() {
	            var date = this.date || (0, _util.initTimeDate)();
	            var tYear = this.t('i.datepicker.year');
	            var month = date.getMonth() + 1;
	            var tMonth = this.t('i.datepicker.month' + month);
	            return '' + date.getFullYear() + tYear + ' ' + tMonth;
	        },
	        visibleDateEnd: function visibleDateEnd() {
	            var date = this.dateEnd || (0, _util.initTimeDate)();
	            var tYear = this.t('i.datepicker.year');
	            var month = date.getMonth() + 1;
	            var tMonth = this.t('i.datepicker.month' + month);
	            return '' + date.getFullYear() + tYear + ' ' + tMonth;
	        }
	    },
	    watch: {
	        value: function value(newVal) {
	            if (!newVal) return;
	            if (Array.isArray(newVal)) {
	                var valStart = newVal[0] ? (0, _util.toDate)(newVal[0]) : false;
	                var valEnd = newVal[1] ? (0, _util.toDate)(newVal[1]) : false;
	
	                if (valStart && valEnd) {
	                    this.handleChange({
	                        hours: valStart.getHours(),
	                        minutes: valStart.getMinutes(),
	                        seconds: valStart.getSeconds()
	                    }, {
	                        hours: valEnd.getHours(),
	                        minutes: valEnd.getMinutes(),
	                        seconds: valEnd.getSeconds()
	                    }, false);
	                }
	            }
	        }
	    },
	    methods: {
	        handleClear: function handleClear() {
	            this.date = (0, _util.initTimeDate)();
	            this.dateEnd = (0, _util.initTimeDate)();
	            this.hours = '';
	            this.minutes = '';
	            this.seconds = '';
	            this.hoursEnd = '';
	            this.minutesEnd = '';
	            this.secondsEnd = '';
	        },
	        handleChange: function handleChange(date, dateEnd) {
	            var _this = this;
	
	            var emit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	
	            var oldDateEnd = new Date(this.dateEnd);
	
	            if (date.hours !== undefined) {
	                this.date.setHours(date.hours);
	                this.hours = this.date.getHours();
	            }
	            if (date.minutes !== undefined) {
	                this.date.setMinutes(date.minutes);
	                this.minutes = this.date.getMinutes();
	            }
	            if (date.seconds !== undefined) {
	                this.date.setSeconds(date.seconds);
	                this.seconds = this.date.getSeconds();
	            }
	            if (dateEnd.hours !== undefined) {
	                this.dateEnd.setHours(dateEnd.hours);
	                this.hoursEnd = this.dateEnd.getHours();
	            }
	            if (dateEnd.minutes !== undefined) {
	                this.dateEnd.setMinutes(dateEnd.minutes);
	                this.minutesEnd = this.dateEnd.getMinutes();
	            }
	            if (dateEnd.seconds !== undefined) {
	                this.dateEnd.setSeconds(dateEnd.seconds);
	                this.secondsEnd = this.dateEnd.getSeconds();
	            }
	
	            if (this.dateEnd < this.date) {
	                this.$nextTick(function () {
	                    _this.dateEnd = new Date(_this.date);
	                    _this.hoursEnd = _this.dateEnd.getHours();
	                    _this.minutesEnd = _this.dateEnd.getMinutes();
	                    _this.secondsEnd = _this.dateEnd.getSeconds();
	
	                    var format = 'yyyy-MM-dd HH:mm:ss';
	                    if ((0, _util.formatDate)(oldDateEnd, format) !== (0, _util.formatDate)(_this.dateEnd, format)) {
	                        if (emit) _this.$emit('on-pick', [_this.date, _this.dateEnd], true);
	                    }
	                });
	            } else {
	                if (emit) this.$emit('on-pick', [this.date, this.dateEnd], true);
	            }
	        },
	        handleStartChange: function handleStartChange(date) {
	            this.handleChange(date, {});
	        },
	        handleEndChange: function handleEndChange(date) {
	            this.handleChange({}, date);
	        },
	        updateScroll: function updateScroll() {
	            this.$refs.timeSpinner.updateScroll();
	            this.$refs.timeSpinnerEnd.updateScroll();
	        }
	    },
	    mounted: function mounted() {
	        if (this.$parent && this.$parent.$options.name === 'DatePicker') this.showDate = true;
	    }
	};
	
	/***/ }),
	/* 197 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _timeSpinner = __webpack_require__(92);
	
	var _timeSpinner2 = _interopRequireDefault(_timeSpinner);
	
	var _confirm = __webpack_require__(40);
	
	var _confirm2 = _interopRequireDefault(_confirm);
	
	var _mixin = __webpack_require__(35);
	
	var _mixin2 = _interopRequireDefault(_mixin);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	var _util = __webpack_require__(21);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-picker-panel';
	var timePrefixCls = 'ivu-time-picker';
	
	exports.default = {
	    name: 'TimePicker',
	    mixins: [_mixin2.default, _locale2.default],
	    components: { TimeSpinner: _timeSpinner2.default, Confirm: _confirm2.default },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            timePrefixCls: timePrefixCls,
	            date: (0, _util.initTimeDate)(),
	            value: '',
	            showDate: false,
	            format: 'HH:mm:ss',
	            hours: '',
	            minutes: '',
	            seconds: '',
	            disabledHours: [],
	            disabledMinutes: [],
	            disabledSeconds: [],
	            hideDisabledOptions: false,
	            confirm: false
	        };
	    },
	
	    computed: {
	        showSeconds: function showSeconds() {
	            return (this.format || '').indexOf('ss') !== -1;
	        },
	        visibleDate: function visibleDate() {
	            var date = this.date;
	            var month = date.getMonth() + 1;
	            var tYear = this.t('i.datepicker.year');
	            var tMonth = this.t('i.datepicker.month' + month);
	            return '' + date.getFullYear() + tYear + ' ' + tMonth;
	        }
	    },
	    watch: {
	        value: function value(newVal) {
	            if (!newVal) return;
	            newVal = new Date(newVal);
	            if (!isNaN(newVal)) {
	                this.date = newVal;
	                this.handleChange({
	                    hours: newVal.getHours(),
	                    minutes: newVal.getMinutes(),
	                    seconds: newVal.getSeconds()
	                }, false);
	            }
	        }
	    },
	    methods: {
	        handleClear: function handleClear() {
	            this.date = (0, _util.initTimeDate)();
	            this.hours = '';
	            this.minutes = '';
	            this.seconds = '';
	        },
	        handleChange: function handleChange(date) {
	            var emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	            if (date.hours !== undefined) {
	                this.date.setHours(date.hours);
	                this.hours = this.date.getHours();
	            }
	            if (date.minutes !== undefined) {
	                this.date.setMinutes(date.minutes);
	                this.minutes = this.date.getMinutes();
	            }
	            if (date.seconds !== undefined) {
	                this.date.setSeconds(date.seconds);
	                this.seconds = this.date.getSeconds();
	            }
	            if (emit) this.$emit('on-pick', this.date, true);
	        },
	        updateScroll: function updateScroll() {
	            this.$refs.timeSpinner.updateScroll();
	        }
	    },
	    mounted: function mounted() {
	        if (this.$parent && this.$parent.$options.name === 'DatePicker') this.showDate = true;
	    }
	};
	
	/***/ }),
	/* 198 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _vue = __webpack_require__(12);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _input = __webpack_require__(41);
	
	var _input2 = _interopRequireDefault(_input);
	
	var _dropdown = __webpack_require__(33);
	
	var _dropdown2 = _interopRequireDefault(_dropdown);
	
	var _clickoutside = __webpack_require__(26);
	
	var _clickoutside2 = _interopRequireDefault(_clickoutside);
	
	var _assist = __webpack_require__(2);
	
	var _util = __webpack_require__(21);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-date-picker';
	
	var DEFAULT_FORMATS = {
	    date: 'yyyy-MM-dd',
	    month: 'yyyy-MM',
	    year: 'yyyy',
	    datetime: 'yyyy-MM-dd HH:mm:ss',
	    time: 'HH:mm:ss',
	    timerange: 'HH:mm:ss',
	    daterange: 'yyyy-MM-dd',
	    datetimerange: 'yyyy-MM-dd HH:mm:ss'
	};
	
	var RANGE_SEPARATOR = ' - ';
	
	var DATE_FORMATTER = function DATE_FORMATTER(value, format) {
	    return (0, _util.formatDate)(value, format);
	};
	var DATE_PARSER = function DATE_PARSER(text, format) {
	    return (0, _util.parseDate)(text, format);
	};
	var RANGE_FORMATTER = function RANGE_FORMATTER(value, format) {
	    if (Array.isArray(value) && value.length === 2) {
	        var start = value[0];
	        var end = value[1];
	
	        if (start && end) {
	            return (0, _util.formatDate)(start, format) + RANGE_SEPARATOR + (0, _util.formatDate)(end, format);
	        }
	    }
	    return '';
	};
	var RANGE_PARSER = function RANGE_PARSER(text, format) {
	    var array = text.split(RANGE_SEPARATOR);
	    if (array.length === 2) {
	        var range1 = array[0];
	        var range2 = array[1];
	
	        return [(0, _util.parseDate)(range1, format), (0, _util.parseDate)(range2, format)];
	    }
	    return [];
	};
	
	var TYPE_VALUE_RESOLVER_MAP = {
	    default: {
	        formatter: function formatter(value) {
	            if (!value) return '';
	            return '' + value;
	        },
	        parser: function parser(text) {
	            if (text === undefined || text === '') return null;
	            return text;
	        }
	    },
	    date: {
	        formatter: DATE_FORMATTER,
	        parser: DATE_PARSER
	    },
	    datetime: {
	        formatter: DATE_FORMATTER,
	        parser: DATE_PARSER
	    },
	    daterange: {
	        formatter: RANGE_FORMATTER,
	        parser: RANGE_PARSER
	    },
	    datetimerange: {
	        formatter: RANGE_FORMATTER,
	        parser: RANGE_PARSER
	    },
	    timerange: {
	        formatter: RANGE_FORMATTER,
	        parser: RANGE_PARSER
	    },
	    time: {
	        formatter: DATE_FORMATTER,
	        parser: DATE_PARSER
	    },
	    month: {
	        formatter: DATE_FORMATTER,
	        parser: DATE_PARSER
	    },
	    year: {
	        formatter: DATE_FORMATTER,
	        parser: DATE_PARSER
	    },
	    number: {
	        formatter: function formatter(value) {
	            if (!value) return '';
	            return '' + value;
	        },
	        parser: function parser(text) {
	            var result = Number(text);
	
	            if (!isNaN(text)) {
	                return result;
	            } else {
	                return null;
	            }
	        }
	    }
	};
	
	exports.default = {
	    name: 'CalendarPicker',
	    mixins: [_emitter2.default],
	    components: { iInput: _input2.default, Drop: _dropdown2.default },
	    directives: { clickoutside: _clickoutside2.default },
	    props: {
	        format: {
	            type: String
	        },
	        readonly: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        editable: {
	            type: Boolean,
	            default: true
	        },
	        clearable: {
	            type: Boolean,
	            default: true
	        },
	        confirm: {
	            type: Boolean,
	            default: false
	        },
	        open: {
	            type: Boolean,
	            default: null
	        },
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small', 'large']);
	            }
	        },
	        placeholder: {
	            type: String,
	            default: ''
	        },
	        placement: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end']);
	            },
	
	            default: 'bottom-start'
	        },
	        options: {
	            type: Object
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            showClose: false,
	            visible: false,
	            picker: null,
	            internalValue: '',
	            disableClickOutSide: false,
	            currentValue: this.value
	        };
	    },
	
	    computed: {
	        opened: function opened() {
	            return this.open === null ? this.visible : this.open;
	        },
	        iconType: function iconType() {
	            var icon = 'ios-calendar-outline';
	            if (this.type === 'time' || this.type === 'timerange') icon = 'ios-clock-outline';
	            if (this.showClose) icon = 'ios-close';
	            return icon;
	        },
	        transition: function transition() {
	            if (this.placement === 'bottom-start' || this.placement === 'bottom' || this.placement === 'bottom-end') {
	                return 'slide-up';
	            } else {
	                return 'slide-down';
	            }
	        },
	        selectionMode: function selectionMode() {
	            if (this.type === 'month') {
	                return 'month';
	            } else if (this.type === 'year') {
	                return 'year';
	            }
	
	            return 'day';
	        },
	
	        visualValue: {
	            get: function get() {
	                var value = this.internalValue;
	                if (!value) return;
	                var formatter = (TYPE_VALUE_RESOLVER_MAP[this.type] || TYPE_VALUE_RESOLVER_MAP['default']).formatter;
	                var format = DEFAULT_FORMATS[this.type];
	
	                return formatter(value, this.format || format);
	            },
	            set: function set(value) {
	                if (value) {
	                    var type = this.type;
	                    var parser = (TYPE_VALUE_RESOLVER_MAP[type] || TYPE_VALUE_RESOLVER_MAP['default']).parser;
	                    var parsedValue = parser(value, this.format || DEFAULT_FORMATS[type]);
	                    if (parsedValue) {
	                        if (this.picker) this.picker.value = parsedValue;
	                    }
	                    return;
	                }
	                if (this.picker) this.picker.value = value;
	            }
	        }
	    },
	    methods: {
	        handleClose: function handleClose() {
	            if (this.open !== null) return;
	
	            this.visible = false;
	            this.disableClickOutSide = false;
	        },
	        handleFocus: function handleFocus() {
	            if (this.readonly) return;
	            this.visible = true;
	        },
	        handleInputChange: function handleInputChange(event) {
	            var oldValue = this.visualValue;
	            var value = event.target.value;
	
	            var correctValue = '';
	            var correctDate = '';
	            var type = this.type;
	            var format = this.format || DEFAULT_FORMATS[type];
	
	            if (type === 'daterange' || type === 'timerange' || type === 'datetimerange') {
	                var parser = (TYPE_VALUE_RESOLVER_MAP[type] || TYPE_VALUE_RESOLVER_MAP['default']).parser;
	
	                var formatter = (TYPE_VALUE_RESOLVER_MAP[type] || TYPE_VALUE_RESOLVER_MAP['default']).formatter;
	
	                var parsedValue = parser(value, format);
	
	                if (parsedValue[0] instanceof Date && parsedValue[1] instanceof Date) {
	                    if (parsedValue[0].getTime() > parsedValue[1].getTime()) {
	                        correctValue = oldValue;
	                    } else {
	                        correctValue = formatter(parsedValue, format);
	                    }
	                } else {
	                    correctValue = oldValue;
	                }
	
	                correctDate = parser(correctValue, format);
	            } else if (type === 'time') {
	                var parsedDate = (0, _util.parseDate)(value, format);
	
	                if (parsedDate instanceof Date) {
	                    if (this.disabledHours.length || this.disabledMinutes.length || this.disabledSeconds.length) {
	                        var hours = parsedDate.getHours();
	                        var minutes = parsedDate.getMinutes();
	                        var seconds = parsedDate.getSeconds();
	
	                        if (this.disabledHours.length && this.disabledHours.indexOf(hours) > -1 || this.disabledMinutes.length && this.disabledMinutes.indexOf(minutes) > -1 || this.disabledSeconds.length && this.disabledSeconds.indexOf(seconds) > -1) {
	                            correctValue = oldValue;
	                        } else {
	                            correctValue = (0, _util.formatDate)(parsedDate, format);
	                        }
	                    } else {
	                        correctValue = (0, _util.formatDate)(parsedDate, format);
	                    }
	                } else {
	                    correctValue = oldValue;
	                }
	
	                correctDate = (0, _util.parseDate)(correctValue, format);
	            } else {
	                var _parsedDate = (0, _util.parseDate)(value, format);
	
	                if (_parsedDate instanceof Date) {
	                    var options = this.options || false;
	                    if (options && options.disabledDate && typeof options.disabledDate === 'function' && options.disabledDate(new Date(_parsedDate))) {
	                        correctValue = oldValue;
	                    } else {
	                        correctValue = (0, _util.formatDate)(_parsedDate, format);
	                    }
	                } else {
	                    correctValue = oldValue;
	                }
	
	                correctDate = (0, _util.parseDate)(correctValue, format);
	            }
	
	            this.visualValue = correctValue;
	            event.target.value = correctValue;
	            this.internalValue = correctDate;
	            this.currentValue = correctDate;
	
	            if (correctValue !== oldValue) this.emitChange(correctDate);
	        },
	        handleInputMouseenter: function handleInputMouseenter() {
	            if (this.readonly || this.disabled) return;
	            if (this.visualValue && this.clearable) {
	                this.showClose = true;
	            }
	        },
	        handleInputMouseleave: function handleInputMouseleave() {
	            this.showClose = false;
	        },
	        handleIconClick: function handleIconClick() {
	            if (this.showClose) {
	                this.handleClear();
	            } else if (!this.disabled) {
	                this.handleFocus();
	            }
	        },
	        handleClear: function handleClear() {
	            this.visible = false;
	            this.internalValue = '';
	            this.currentValue = '';
	            this.$emit('on-clear');
	            this.dispatch('FormItem', 'on-form-change', '');
	        },
	        showPicker: function showPicker() {
	            var _this = this;
	
	            if (!this.picker) {
	                var isConfirm = this.confirm;
	                var type = this.type;
	
	                this.picker = new _vue2.default(this.panel).$mount(this.$refs.picker);
	                if (type === 'datetime' || type === 'datetimerange') {
	                    isConfirm = true;
	                    this.picker.showTime = true;
	                }
	                this.picker.value = this.internalValue;
	                this.picker.confirm = isConfirm;
	                this.picker.selectionMode = this.selectionMode;
	                if (this.format) this.picker.format = this.format;
	
	                if (this.disabledHours) this.picker.disabledHours = this.disabledHours;
	                if (this.disabledMinutes) this.picker.disabledMinutes = this.disabledMinutes;
	                if (this.disabledSeconds) this.picker.disabledSeconds = this.disabledSeconds;
	                if (this.hideDisabledOptions) this.picker.hideDisabledOptions = this.hideDisabledOptions;
	
	                var options = this.options;
	                for (var option in options) {
	                    this.picker[option] = options[option];
	                }
	
	                this.picker.$on('on-pick', function (date) {
	                    var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	                    if (!isConfirm) _this.visible = visible;
	                    _this.currentValue = date;
	                    _this.picker.value = date;
	                    _this.picker.resetView && _this.picker.resetView();
	                    _this.emitChange(date);
	                });
	
	                this.picker.$on('on-pick-clear', function () {
	                    _this.handleClear();
	                });
	                this.picker.$on('on-pick-success', function () {
	                    _this.visible = false;
	                    _this.$emit('on-ok');
	                });
	                this.picker.$on('on-pick-click', function () {
	                    return _this.disableClickOutSide = true;
	                });
	            }
	            if (this.internalValue instanceof Date) {
	                this.picker.date = new Date(this.internalValue.getTime());
	            } else {
	                this.picker.value = this.internalValue;
	            }
	            this.picker.resetView && this.picker.resetView();
	        },
	        emitChange: function emitChange(date) {
	            var _this2 = this;
	
	            var newDate = this.formattingDate(date);
	
	            this.$emit('on-change', newDate);
	            this.$nextTick(function () {
	                _this2.dispatch('FormItem', 'on-form-change', newDate);
	            });
	        },
	        formattingDate: function formattingDate(date) {
	            var type = this.type;
	            var format = this.format || DEFAULT_FORMATS[type];
	            var formatter = (TYPE_VALUE_RESOLVER_MAP[type] || TYPE_VALUE_RESOLVER_MAP['default']).formatter;
	
	            var newDate = formatter(date, format);
	            if (type === 'daterange' || type === 'timerange') {
	                newDate = [newDate.split(RANGE_SEPARATOR)[0], newDate.split(RANGE_SEPARATOR)[1]];
	            }
	            return newDate;
	        }
	    },
	    watch: {
	        visible: function visible(val) {
	            if (val) {
	                this.showPicker();
	                this.$refs.drop.update();
	                if (this.open === null) this.$emit('on-open-change', true);
	            } else {
	                if (this.picker) this.picker.resetView && this.picker.resetView(true);
	                this.$refs.drop.destroy();
	                if (this.open === null) this.$emit('on-open-change', false);
	            }
	        },
	        internalValue: function internalValue(val) {
	            if (!val && this.picker && typeof this.picker.handleClear === 'function') {
	                this.picker.handleClear();
	            }
	        },
	        value: function value(val) {
	            this.currentValue = val;
	        },
	
	        currentValue: {
	            immediate: true,
	            handler: function handler(val) {
	                var type = this.type;
	                var parser = (TYPE_VALUE_RESOLVER_MAP[type] || TYPE_VALUE_RESOLVER_MAP['default']).parser;
	
	                if (val && type === 'time' && !(val instanceof Date)) {
	                    val = parser(val, this.format || DEFAULT_FORMATS[type]);
	                } else if (val && type === 'timerange' && Array.isArray(val) && val.length === 2 && !(val[0] instanceof Date) && !(val[1] instanceof Date)) {
	                    val = val.join(RANGE_SEPARATOR);
	                    val = parser(val, this.format || DEFAULT_FORMATS[type]);
	                }
	
	                this.internalValue = val;
	                this.$emit('input', val);
	            }
	        },
	        open: function open(val) {
	            if (val === true) {
	                this.visible = val;
	                this.$emit('on-open-change', true);
	            } else if (val === false) {
	                this.$emit('on-open-change', false);
	            }
	        }
	    },
	    beforeDestroy: function beforeDestroy() {
	        if (this.picker) {
	            this.picker.$destroy();
	        }
	    },
	    mounted: function mounted() {
	        if (this.open !== null) this.visible = this.open;
	    }
	};
	
	/***/ }),
	/* 199 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-dropdown-item';
	
	exports.default = {
	    name: 'DropdownItem',
	    props: {
	        name: {
	            type: [String, Number]
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        selected: {
	            type: Boolean,
	            default: false
	        },
	        divided: {
	            type: Boolean,
	            default: false
	        }
	    },
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-disabled', this.disabled), (0, _defineProperty3.default)(_ref, prefixCls + '-selected', this.selected), (0, _defineProperty3.default)(_ref, prefixCls + '-divided', this.divided), _ref)];
	        }
	    },
	    methods: {
	        handleClick: function handleClick() {
	            var $parent = this.$parent.$parent.$parent;
	            var hasChildren = this.$parent && this.$parent.$options.name === 'Dropdown';
	
	            if (this.disabled) {
	                this.$nextTick(function () {
	                    $parent.currentVisible = true;
	                });
	            } else if (hasChildren) {
	                this.$parent.$emit('on-haschild-click');
	            } else {
	                if ($parent && $parent.$options.name === 'Dropdown') {
	                    $parent.$emit('on-hover-click');
	                }
	            }
	            $parent.$emit('on-click', this.name);
	        }
	    }
	};
	
	/***/ }),
	/* 200 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {};
	
	/***/ }),
	/* 201 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _dropdown = __webpack_require__(33);
	
	var _dropdown2 = _interopRequireDefault(_dropdown);
	
	var _clickoutside = __webpack_require__(26);
	
	var _clickoutside2 = _interopRequireDefault(_clickoutside);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-dropdown';
	
	exports.default = {
	    name: 'Dropdown',
	    directives: { clickoutside: _clickoutside2.default },
	    components: { Drop: _dropdown2.default },
	    props: {
	        trigger: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['click', 'hover', 'custom']);
	            },
	
	            default: 'hover'
	        },
	        placement: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end']);
	            },
	
	            default: 'bottom'
	        },
	        visible: {
	            type: Boolean,
	            default: false
	        }
	    },
	    computed: {
	        transition: function transition() {
	            return ['bottom-start', 'bottom', 'bottom-end'].indexOf(this.placement) > -1 ? 'slide-up' : 'fade';
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            currentVisible: this.visible
	        };
	    },
	
	    watch: {
	        visible: function visible(val) {
	            this.currentVisible = val;
	        },
	        currentVisible: function currentVisible(val) {
	            if (val) {
	                this.$refs.drop.update();
	            } else {
	                this.$refs.drop.destroy();
	            }
	            this.$emit('on-visible-change', val);
	        }
	    },
	    methods: {
	        handleClick: function handleClick() {
	            if (this.trigger === 'custom') return false;
	            if (this.trigger !== 'click') {
	                return false;
	            }
	            this.currentVisible = !this.currentVisible;
	        },
	        handleMouseenter: function handleMouseenter() {
	            var _this = this;
	
	            if (this.trigger === 'custom') return false;
	            if (this.trigger !== 'hover') {
	                return false;
	            }
	            clearTimeout(this.timeout);
	            this.timeout = setTimeout(function () {
	                _this.currentVisible = true;
	            }, 250);
	        },
	        handleMouseleave: function handleMouseleave() {
	            var _this2 = this;
	
	            if (this.trigger === 'custom') return false;
	            if (this.trigger !== 'hover') {
	                return false;
	            }
	            clearTimeout(this.timeout);
	            this.timeout = setTimeout(function () {
	                _this2.currentVisible = false;
	            }, 150);
	        },
	        handleClose: function handleClose() {
	            if (this.trigger === 'custom') return false;
	            if (this.trigger !== 'click') {
	                return false;
	            }
	            this.currentVisible = false;
	        },
	        hasParent: function hasParent() {
	            var $parent = (0, _assist.findComponentUpward)(this, 'Dropdown');
	            if ($parent) {
	                return $parent;
	            } else {
	                return false;
	            }
	        }
	    },
	    mounted: function mounted() {
	        var _this3 = this;
	
	        this.$on('on-click', function (key) {
	            var $parent = _this3.hasParent();
	            if ($parent) $parent.$emit('on-click', key);
	        });
	        this.$on('on-hover-click', function () {
	            var $parent = _this3.hasParent();
	            if ($parent) {
	                _this3.$nextTick(function () {
	                    if (_this3.trigger === 'custom') return false;
	                    _this3.currentVisible = false;
	                });
	                $parent.$emit('on-hover-click');
	            } else {
	                _this3.$nextTick(function () {
	                    if (_this3.trigger === 'custom') return false;
	                    _this3.currentVisible = false;
	                });
	            }
	        });
	        this.$on('on-haschild-click', function () {
	            _this3.$nextTick(function () {
	                if (_this3.trigger === 'custom') return false;
	                _this3.currentVisible = true;
	            });
	            var $parent = _this3.hasParent();
	            if ($parent) $parent.$emit('on-haschild-click');
	        });
	    }
	};
	
	/***/ }),
	/* 202 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _asyncValidator = __webpack_require__(146);
	
	var _asyncValidator2 = _interopRequireDefault(_asyncValidator);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-form-item';
	
	function getPropByPath(obj, path) {
	    var tempObj = obj;
	    path = path.replace(/\[(\w+)\]/g, '.$1');
	    path = path.replace(/^\./, '');
	
	    var keyArr = path.split('.');
	    var i = 0;
	
	    for (var len = keyArr.length; i < len - 1; ++i) {
	        var key = keyArr[i];
	        if (key in tempObj) {
	            tempObj = tempObj[key];
	        } else {
	            throw new Error('[iView warn]: please transfer a valid prop path to form item!');
	        }
	    }
	    return {
	        o: tempObj,
	        k: keyArr[i],
	        v: tempObj[keyArr[i]]
	    };
	}
	
	exports.default = {
	    name: 'FormItem',
	    mixins: [_emitter2.default],
	    props: {
	        label: {
	            type: String,
	            default: ''
	        },
	        labelWidth: {
	            type: Number
	        },
	        prop: {
	            type: String
	        },
	        required: {
	            type: Boolean,
	            default: false
	        },
	        rules: {
	            type: [Object, Array]
	        },
	        error: {
	            type: String
	        },
	        validateStatus: {
	            type: Boolean
	        },
	        showMessage: {
	            type: Boolean,
	            default: true
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            isRequired: false,
	            validateState: '',
	            validateMessage: '',
	            validateDisabled: false,
	            validator: {}
	        };
	    },
	
	    watch: {
	        error: function error(val) {
	            this.validateMessage = val;
	            this.validateState = 'error';
	        },
	        validateStatus: function validateStatus(val) {
	            this.validateState = val;
	        }
	    },
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-required', this.required || this.isRequired), (0, _defineProperty3.default)(_ref, prefixCls + '-error', this.validateState === 'error'), (0, _defineProperty3.default)(_ref, prefixCls + '-validating', this.validateState === 'validating'), _ref)];
	        },
	        form: function form() {
	            var parent = this.$parent;
	            while (parent.$options.name !== 'iForm') {
	                parent = parent.$parent;
	            }
	            return parent;
	        },
	
	        fieldValue: {
	            cache: false,
	            get: function get() {
	                var model = this.form.model;
	                if (!model || !this.prop) {
	                    return;
	                }
	
	                var path = this.prop;
	                if (path.indexOf(':') !== -1) {
	                    path = path.replace(/:/, '.');
	                }
	
	                return getPropByPath(model, path).v;
	            }
	        },
	        labelStyles: function labelStyles() {
	            var style = {};
	            var labelWidth = this.labelWidth || this.form.labelWidth;
	            if (labelWidth) {
	                style.width = labelWidth + 'px';
	            }
	            return style;
	        },
	        contentStyles: function contentStyles() {
	            var style = {};
	            var labelWidth = this.labelWidth || this.form.labelWidth;
	            if (labelWidth) {
	                style.marginLeft = labelWidth + 'px';
	            }
	            return style;
	        }
	    },
	    methods: {
	        getRules: function getRules() {
	            var formRules = this.form.rules;
	            var selfRules = this.rules;
	
	            formRules = formRules ? formRules[this.prop] : [];
	
	            return [].concat(selfRules || formRules || []);
	        },
	        getFilteredRule: function getFilteredRule(trigger) {
	            var rules = this.getRules();
	
	            return rules.filter(function (rule) {
	                return !rule.trigger || rule.trigger.indexOf(trigger) !== -1;
	            });
	        },
	        validate: function validate(trigger) {
	            var _this = this;
	
	            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
	
	            var rules = this.getFilteredRule(trigger);
	            if (!rules || rules.length === 0) {
	                callback();
	                return true;
	            }
	
	            this.validateState = 'validating';
	
	            var descriptor = {};
	            descriptor[this.prop] = rules;
	
	            var validator = new _asyncValidator2.default(descriptor);
	            var model = {};
	
	            model[this.prop] = this.fieldValue;
	
	            validator.validate(model, { firstFields: true }, function (errors) {
	                _this.validateState = !errors ? 'success' : 'error';
	                _this.validateMessage = errors ? errors[0].message : '';
	
	                callback(_this.validateMessage);
	            });
	        },
	        resetField: function resetField() {
	            this.validateState = '';
	            this.validateMessage = '';
	
	            var model = this.form.model;
	            var value = this.fieldValue;
	            var path = this.prop;
	            if (path.indexOf(':') !== -1) {
	                path = path.replace(/:/, '.');
	            }
	
	            var prop = getPropByPath(model, path);
	
	            if (Array.isArray(value)) {
	                this.validateDisabled = true;
	                prop.o[prop.k] = [].concat(this.initialValue);
	            } else {
	                this.validateDisabled = true;
	                prop.o[prop.k] = this.initialValue;
	            }
	        },
	        onFieldBlur: function onFieldBlur() {
	            this.validate('blur');
	        },
	        onFieldChange: function onFieldChange() {
	            if (this.validateDisabled) {
	                this.validateDisabled = false;
	                return;
	            }
	
	            this.validate('change');
	        }
	    },
	    mounted: function mounted() {
	        var _this2 = this;
	
	        if (this.prop) {
	            this.dispatch('iForm', 'on-form-item-add', this);
	
	            Object.defineProperty(this, 'initialValue', {
	                value: this.fieldValue
	            });
	
	            var rules = this.getRules();
	
	            if (rules.length) {
	                rules.every(function (rule) {
	                    if (rule.required) {
	                        _this2.isRequired = true;
	                        return false;
	                    }
	                });
	                this.$on('on-form-blur', this.onFieldBlur);
	                this.$on('on-form-change', this.onFieldChange);
	            }
	        }
	    },
	    beforeDestroy: function beforeDestroy() {
	        this.dispatch('iForm', 'on-form-item-remove', this);
	    }
	};
	
	/***/ }),
	/* 203 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-form';
	
	exports.default = {
	    name: 'iForm',
	    props: {
	        model: {
	            type: Object
	        },
	        rules: {
	            type: Object
	        },
	        labelWidth: {
	            type: Number
	        },
	        labelPosition: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['left', 'right', 'top']);
	            },
	
	            default: 'right'
	        },
	        inline: {
	            type: Boolean,
	            default: false
	        },
	        showMessage: {
	            type: Boolean,
	            default: true
	        }
	    },
	    data: function data() {
	        return {
	            fields: []
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return ['' + prefixCls, prefixCls + '-label-' + this.labelPosition, (0, _defineProperty3.default)({}, prefixCls + '-inline', this.inline)];
	        }
	    },
	    methods: {
	        resetFields: function resetFields() {
	            this.fields.forEach(function (field) {
	                field.resetField();
	            });
	        },
	        validate: function validate(callback) {
	            var _this = this;
	
	            var valid = true;
	            var count = 0;
	            this.fields.forEach(function (field) {
	                field.validate('', function (errors) {
	                    if (errors) {
	                        valid = false;
	                    }
	                    if (typeof callback === 'function' && ++count === _this.fields.length) {
	                        callback(valid);
	                    }
	                });
	            });
	        },
	        validateField: function validateField(prop, cb) {
	            var field = this.fields.filter(function (field) {
	                return field.prop === prop;
	            })[0];
	            if (!field) {
	                throw new Error('[iView warn]: must call validateField with valid prop string!');
	            }
	
	            field.validate('', cb);
	        },
	        formSubmit: function formSubmit(event) {
	            event.preventDefault();
	        }
	    },
	    watch: {
	        rules: function rules() {
	            this.validate();
	        }
	    },
	    created: function created() {
	        var _this2 = this;
	
	        this.$on('on-form-item-add', function (field) {
	            if (field) _this2.fields.push(field);
	            return false;
	        });
	        this.$on('on-form-item-remove', function (field) {
	            if (field.prop) _this2.fields.splice(_this2.fields.indexOf(field), 1);
	            return false;
	        });
	    }
	};
	
	/***/ }),
	/* 204 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _keys = __webpack_require__(34);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	var _typeof2 = __webpack_require__(11);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-col';
	
	exports.default = {
	    name: 'iCol',
	    props: {
	        span: [Number, String],
	        order: [Number, String],
	        offset: [Number, String],
	        push: [Number, String],
	        pull: [Number, String],
	        className: String,
	        xs: [Number, Object],
	        sm: [Number, Object],
	        md: [Number, Object],
	        lg: [Number, Object]
	    },
	    data: function data() {
	        return {
	            gutter: 0
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref,
	                _this = this;
	
	            var classList = ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-span-' + this.span, this.span), (0, _defineProperty3.default)(_ref, prefixCls + '-order-' + this.order, this.order), (0, _defineProperty3.default)(_ref, prefixCls + '-offset-' + this.offset, this.offset), (0, _defineProperty3.default)(_ref, prefixCls + '-push-' + this.push, this.push), (0, _defineProperty3.default)(_ref, prefixCls + '-pull-' + this.pull, this.pull), (0, _defineProperty3.default)(_ref, '' + this.className, !!this.className), _ref)];
	
	            ['xs', 'sm', 'md', 'lg'].forEach(function (size) {
	                if (typeof _this[size] === 'number') {
	                    classList.push(prefixCls + '-span-' + size + '-' + _this[size]);
	                } else if ((0, _typeof3.default)(_this[size]) === 'object') {
	                    var props = _this[size];
	                    (0, _keys2.default)(props).forEach(function (prop) {
	                        classList.push(prop !== 'span' ? prefixCls + '-' + size + '-' + prop + '-' + props[prop] : prefixCls + '-span-' + size + '-' + props[prop]);
	                    });
	                }
	            });
	
	            return classList;
	        },
	        styles: function styles() {
	            var style = {};
	            if (this.gutter !== 0) {
	                style = {
	                    paddingLeft: this.gutter / 2 + 'px',
	                    paddingRight: this.gutter / 2 + 'px'
	                };
	            }
	
	            return style;
	        }
	    },
	    methods: {
	        updateGutter: function updateGutter() {
	            this.$parent.updateGutter(this.$parent.gutter);
	        }
	    },
	    mounted: function mounted() {
	        this.updateGutter();
	    },
	    beforeDestroy: function beforeDestroy() {
	        this.updateGutter();
	    }
	};
	
	/***/ }),
	/* 205 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-row';
	
	exports.default = {
	    name: 'Row',
	    props: {
	        type: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['flex']);
	            }
	        },
	        align: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['top', 'middle', 'bottom']);
	            }
	        },
	        justify: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['start', 'end', 'center', 'space-around', 'space-between']);
	            }
	        },
	        gutter: {
	            type: Number,
	            default: 0
	        },
	        className: String
	    },
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return [(_ref = {}, (0, _defineProperty3.default)(_ref, '' + prefixCls, !this.type), (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.type, !!this.type), (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.type + '-' + this.align, !!this.align), (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.type + '-' + this.justify, !!this.justify), (0, _defineProperty3.default)(_ref, '' + this.className, !!this.className), _ref)];
	        },
	        styles: function styles() {
	            var style = {};
	            if (this.gutter !== 0) {
	                style = {
	                    marginLeft: this.gutter / -2 + 'px',
	                    marginRight: this.gutter / -2 + 'px'
	                };
	            }
	
	            return style;
	        }
	    },
	    methods: {
	        updateGutter: function updateGutter(val) {
	            this.$children.forEach(function (child) {
	                if (val !== 0) {
	                    child.gutter = val;
	                }
	            });
	        }
	    },
	    watch: {
	        gutter: function gutter(val) {
	            this.updateGutter(val);
	        }
	    }
	};
	
	/***/ }),
	/* 206 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	
	var prefixCls = 'ivu-icon';
	
	exports.default = {
	    name: 'Icon',
	    props: {
	        type: String,
	        size: [Number, String],
	        color: String
	    },
	    computed: {
	        classes: function classes() {
	            return prefixCls + ' ' + prefixCls + '-' + this.type;
	        },
	        styles: function styles() {
	            var style = {};
	
	            if (this.size) {
	                style['font-size'] = this.size + 'px';
	            }
	
	            if (this.color) {
	                style.color = this.color;
	            }
	
	            return style;
	        }
	    }
	};
	
	/***/ }),
	/* 207 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-input-number';
	var iconPrefixCls = 'ivu-icon';
	
	function isValueNumber(value) {
	    return (/(^-?[0-9]+\.{1}\d+$)|(^-?[1-9][0-9]*$)|(^-?0{1}$)/.test(value + '')
	    );
	}
	function addNum(num1, num2) {
	    var sq1 = void 0,
	        sq2 = void 0,
	        m = void 0;
	    try {
	        sq1 = num1.toString().split('.')[1].length;
	    } catch (e) {
	        sq1 = 0;
	    }
	    try {
	        sq2 = num2.toString().split('.')[1].length;
	    } catch (e) {
	        sq2 = 0;
	    }
	
	    m = Math.pow(10, Math.max(sq1, sq2));
	    return (num1 * m + num2 * m) / m;
	}
	
	exports.default = {
	    name: 'InputNumber',
	    mixins: [_emitter2.default],
	    props: {
	        max: {
	            type: Number,
	            default: Infinity
	        },
	        min: {
	            type: Number,
	            default: -Infinity
	        },
	        step: {
	            type: Number,
	            default: 1
	        },
	        value: {
	            type: Number,
	            default: 1
	        },
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small', 'large']);
	            }
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        autofocus: {
	            type: Boolean,
	            default: false
	        },
	        name: {
	            type: String
	        }
	    },
	    data: function data() {
	        return {
	            focused: false,
	            upDisabled: false,
	            downDisabled: false,
	            currentValue: this.value
	        };
	    },
	
	    computed: {
	        wrapClasses: function wrapClasses() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.size, !!this.size), (0, _defineProperty3.default)(_ref, prefixCls + '-disabled', this.disabled), (0, _defineProperty3.default)(_ref, prefixCls + '-focused', this.focused), _ref)];
	        },
	        handlerClasses: function handlerClasses() {
	            return prefixCls + '-handler-wrap';
	        },
	        upClasses: function upClasses() {
	            return [prefixCls + '-handler', prefixCls + '-handler-up', (0, _defineProperty3.default)({}, prefixCls + '-handler-up-disabled', this.upDisabled)];
	        },
	        innerUpClasses: function innerUpClasses() {
	            return prefixCls + '-handler-up-inner ' + iconPrefixCls + ' ' + iconPrefixCls + '-ios-arrow-up';
	        },
	        downClasses: function downClasses() {
	            return [prefixCls + '-handler', prefixCls + '-handler-down', (0, _defineProperty3.default)({}, prefixCls + '-handler-down-disabled', this.downDisabled)];
	        },
	        innerDownClasses: function innerDownClasses() {
	            return prefixCls + '-handler-down-inner ' + iconPrefixCls + ' ' + iconPrefixCls + '-ios-arrow-down';
	        },
	        inputWrapClasses: function inputWrapClasses() {
	            return prefixCls + '-input-wrap';
	        },
	        inputClasses: function inputClasses() {
	            return prefixCls + '-input';
	        }
	    },
	    methods: {
	        preventDefault: function preventDefault(e) {
	            e.preventDefault();
	        },
	        up: function up(e) {
	            var targetVal = Number(e.target.value);
	            if (this.upDisabled && isNaN(targetVal)) {
	                return false;
	            }
	            this.changeStep('up', e);
	        },
	        down: function down(e) {
	            var targetVal = Number(e.target.value);
	            if (this.downDisabled && isNaN(targetVal)) {
	                return false;
	            }
	            this.changeStep('down', e);
	        },
	        changeStep: function changeStep(type, e) {
	            if (this.disabled) {
	                return false;
	            }
	
	            var targetVal = Number(e.target.value);
	            var val = Number(this.currentValue);
	            var step = Number(this.step);
	            if (isNaN(val)) {
	                return false;
	            }
	
	            if (!isNaN(targetVal)) {
	                if (type === 'up') {
	                    if (addNum(targetVal, step) <= this.max) {
	                        val = targetVal;
	                    } else {
	                        return false;
	                    }
	                } else if (type === 'down') {
	                    if (addNum(targetVal, -step) >= this.min) {
	                        val = targetVal;
	                    } else {
	                        return false;
	                    }
	                }
	            }
	
	            if (type === 'up') {
	                val = addNum(val, step);
	            } else if (type === 'down') {
	                val = addNum(val, -step);
	            }
	            this.setValue(val);
	        },
	        setValue: function setValue(val) {
	            var _this = this;
	
	            this.$nextTick(function () {
	                _this.currentValue = val;
	                _this.$emit('input', val);
	                _this.$emit('on-change', val);
	                _this.dispatch('FormItem', 'on-form-change', val);
	            });
	        },
	        focus: function focus() {
	            this.focused = true;
	        },
	        blur: function blur() {
	            this.focused = false;
	        },
	        keyDown: function keyDown(e) {
	            if (e.keyCode === 38) {
	                e.preventDefault();
	                this.up(e);
	            } else if (e.keyCode === 40) {
	                e.preventDefault();
	                this.down(e);
	            }
	        },
	        change: function change(event) {
	            var val = event.target.value.trim();
	
	            var max = this.max;
	            var min = this.min;
	
	            if (isValueNumber(val)) {
	                val = Number(val);
	                this.currentValue = val;
	
	                if (val > max) {
	                    this.setValue(max);
	                } else if (val < min) {
	                    this.setValue(min);
	                } else {
	                    this.setValue(val);
	                }
	            } else {
	                event.target.value = this.currentValue;
	            }
	        },
	        changeVal: function changeVal(val) {
	            if (isValueNumber(val) || val === 0) {
	                val = Number(val);
	                var step = this.step;
	
	                this.upDisabled = val + step > this.max;
	                this.downDisabled = val - step < this.min;
	            } else {
	                this.upDisabled = true;
	                this.downDisabled = true;
	            }
	        }
	    },
	    mounted: function mounted() {
	        this.changeVal(this.currentValue);
	    },
	
	    watch: {
	        value: function value(val) {
	            this.currentValue = val;
	        },
	        currentValue: function currentValue(val) {
	            this.changeVal(val);
	        }
	    }
	};
	
	/***/ }),
	/* 208 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _isNan = __webpack_require__(347);
	
	var _isNan2 = _interopRequireDefault(_isNan);
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	var _calcTextareaHeight = __webpack_require__(342);
	
	var _calcTextareaHeight2 = _interopRequireDefault(_calcTextareaHeight);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-input';
	
	exports.default = {
	    name: 'Input',
	    mixins: [_emitter2.default],
	    props: {
	        type: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['text', 'textarea', 'password']);
	            },
	
	            default: 'text'
	        },
	        value: {
	            type: [String, Number],
	            default: ''
	        },
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small', 'large']);
	            }
	        },
	        placeholder: {
	            type: String,
	            default: ''
	        },
	        maxlength: {
	            type: Number
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        icon: String,
	        autosize: {
	            type: [Boolean, Object],
	            default: false
	        },
	        rows: {
	            type: Number,
	            default: 2
	        },
	        readonly: {
	            type: Boolean,
	            default: false
	        },
	        name: {
	            type: String
	        },
	        number: {
	            type: Boolean,
	            default: false
	        },
	        autofocus: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            currentValue: this.value,
	            prefixCls: prefixCls,
	            prepend: true,
	            append: true,
	            slotReady: false,
	            textareaStyles: {}
	        };
	    },
	
	    computed: {
	        wrapClasses: function wrapClasses() {
	            var _ref;
	
	            return [prefixCls + '-wrapper', (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-wrapper-' + this.size, !!this.size), (0, _defineProperty3.default)(_ref, prefixCls + '-type', this.type), (0, _defineProperty3.default)(_ref, prefixCls + '-group', this.prepend || this.append), (0, _defineProperty3.default)(_ref, prefixCls + '-group-' + this.size, (this.prepend || this.append) && !!this.size), (0, _defineProperty3.default)(_ref, prefixCls + '-group-with-prepend', this.prepend), (0, _defineProperty3.default)(_ref, prefixCls + '-group-with-append', this.append), (0, _defineProperty3.default)(_ref, prefixCls + '-hide-icon', this.append), _ref)];
	        },
	        inputClasses: function inputClasses() {
	            var _ref2;
	
	            return ['' + prefixCls, (_ref2 = {}, (0, _defineProperty3.default)(_ref2, prefixCls + '-' + this.size, !!this.size), (0, _defineProperty3.default)(_ref2, prefixCls + '-disabled', this.disabled), _ref2)];
	        },
	        textareaClasses: function textareaClasses() {
	            return ['' + prefixCls, (0, _defineProperty3.default)({}, prefixCls + '-disabled', this.disabled)];
	        }
	    },
	    methods: {
	        handleEnter: function handleEnter(event) {
	            this.$emit('on-enter', event);
	        },
	        handleIconClick: function handleIconClick(event) {
	            this.$emit('on-click', event);
	        },
	        handleFocus: function handleFocus(event) {
	            this.$emit('on-focus', event);
	        },
	        handleBlur: function handleBlur(event) {
	            this.$emit('on-blur', event);
	            if (!(0, _assist.findComponentUpward)(this, ['DatePicker', 'TimePicker', 'Cascader', 'Search'])) {
	                this.dispatch('FormItem', 'on-form-blur', this.currentValue);
	            }
	        },
	        handleInput: function handleInput(event) {
	            var value = event.target.value;
	            if (this.number) value = (0, _isNan2.default)(Number(value)) ? value : Number(value);
	            this.$emit('input', value);
	            this.setCurrentValue(value);
	            this.$emit('on-change', event);
	        },
	        handleChange: function handleChange(event) {
	            this.$emit('on-input-change', event);
	        },
	        setCurrentValue: function setCurrentValue(value) {
	            var _this = this;
	
	            if (value === this.currentValue) return;
	            this.$nextTick(function () {
	                _this.resizeTextarea();
	            });
	            this.currentValue = value;
	            if (!(0, _assist.findComponentUpward)(this, ['DatePicker', 'TimePicker', 'Cascader', 'Search'])) {
	                this.dispatch('FormItem', 'on-form-change', value);
	            }
	        },
	        resizeTextarea: function resizeTextarea() {
	            var autosize = this.autosize;
	            if (!autosize || this.type !== 'textarea') {
	                return false;
	            }
	
	            var minRows = autosize.minRows;
	            var maxRows = autosize.maxRows;
	
	            this.textareaStyles = (0, _calcTextareaHeight2.default)(this.$refs.textarea, minRows, maxRows);
	        },
	        focus: function focus() {
	            if (this.type === 'textarea') {
	                this.$refs.textarea.focus();
	            } else {
	                this.$refs.input.focus();
	            }
	        }
	    },
	    watch: {
	        value: function value(val) {
	            this.setCurrentValue(val);
	        }
	    },
	    mounted: function mounted() {
	        if (this.type !== 'textarea') {
	            this.prepend = this.$slots.prepend !== undefined;
	            this.append = this.$slots.append !== undefined;
	        } else {
	            this.prepend = false;
	            this.append = false;
	        }
	        this.slotReady = true;
	        this.resizeTextarea();
	    }
	};
	
	/***/ }),
	/* 209 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-loading-bar';
	
	exports.default = {
	    props: {
	        color: {
	            type: String,
	            default: 'primary'
	        },
	        failedColor: {
	            type: String,
	            default: 'error'
	        },
	        height: {
	            type: Number,
	            default: 2
	        }
	    },
	    data: function data() {
	        return {
	            percent: 0,
	
	            status: 'success',
	            show: false
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return '' + prefixCls;
	        },
	        innerClasses: function innerClasses() {
	            var _ref;
	
	            return [prefixCls + '-inner', (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-inner-color-primary', this.color === 'primary' && this.status === 'success'), (0, _defineProperty3.default)(_ref, prefixCls + '-inner-failed-color-error', this.failedColor === 'error' && this.status === 'error'), _ref)];
	        },
	        outerStyles: function outerStyles() {
	            return {
	                height: this.height + 'px'
	            };
	        },
	        styles: function styles() {
	            var style = {
	                width: this.percent + '%',
	                height: this.height + 'px'
	            };
	
	            if (this.color !== 'primary' && this.status === 'success') {
	                style.backgroundColor = this.color;
	            }
	
	            if (this.failedColor !== 'error' && this.status === 'error') {
	                style.backgroundColor = this.failedColor;
	            }
	
	            return style;
	        }
	    }
	};
	
	/***/ }),
	/* 210 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	
	var prefixCls = 'ivu-menu';
	
	exports.default = {
	    name: 'MenuGroup',
	    props: {
	        title: {
	            type: String,
	            default: ''
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls
	        };
	    }
	};
	
	/***/ }),
	/* 211 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-menu';
	
	exports.default = {
	    name: 'MenuItem',
	    mixins: [_emitter2.default],
	    props: {
	        name: {
	            type: [String, Number],
	            required: true
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            active: false
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return [prefixCls + '-item', (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-item-active', this.active), (0, _defineProperty3.default)(_ref, prefixCls + '-item-selected', this.active), (0, _defineProperty3.default)(_ref, prefixCls + '-item-disabled', this.disabled), _ref)];
	        }
	    },
	    methods: {
	        handleClick: function handleClick() {
	            if (this.disabled) return;
	
	            var parent = this.$parent;
	            var name = parent.$options.name;
	            while (parent && (!name || name !== 'Submenu')) {
	                parent = parent.$parent;
	                if (parent) name = parent.$options.name;
	            }
	
	            if (parent) {
	                this.dispatch('Submenu', 'on-menu-item-select', this.name);
	            } else {
	                this.dispatch('Menu', 'on-menu-item-select', this.name);
	            }
	        }
	    },
	    mounted: function mounted() {
	        var _this = this;
	
	        this.$on('on-update-active-name', function (name) {
	            if (_this.name === name) {
	                _this.active = true;
	                _this.dispatch('Submenu', 'on-update-active-name', true);
	            } else {
	                _this.active = false;
	            }
	        });
	    }
	};
	
	/***/ }),
	/* 212 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-menu';
	
	exports.default = {
	    name: 'Menu',
	    mixins: [_emitter2.default],
	    props: {
	        mode: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['horizontal', 'vertical']);
	            },
	
	            default: 'vertical'
	        },
	        theme: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['light', 'dark', 'primary']);
	            },
	
	            default: 'light'
	        },
	        activeName: {
	            type: [String, Number]
	        },
	        openNames: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        accordion: {
	            type: Boolean,
	            default: false
	        },
	        width: {
	            type: String,
	            default: '240px'
	        }
	    },
	    data: function data() {
	        return {
	            currentActiveName: this.activeName
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            var theme = this.theme;
	            if (this.mode === 'vertical' && this.theme === 'primary') theme = 'light';
	
	            return ['' + prefixCls, prefixCls + '-' + theme, (0, _defineProperty3.default)({}, prefixCls + '-' + this.mode, this.mode)];
	        },
	        styles: function styles() {
	            var style = {};
	
	            if (this.mode === 'vertical') style.width = this.width;
	
	            return style;
	        }
	    },
	    methods: {
	        updateActiveName: function updateActiveName() {
	            if (this.currentActiveName === undefined) {
	                this.currentActiveName = -1;
	            }
	            this.broadcast('Submenu', 'on-update-active-name', false);
	            this.broadcast('MenuItem', 'on-update-active-name', this.currentActiveName);
	        },
	        updateOpenKeys: function updateOpenKeys(name) {
	            var index = this.openNames.indexOf(name);
	            if (index > -1) {
	                this.openNames.splice(index, 1);
	            } else {
	                this.openNames.push(name);
	                if (this.accordion) {
	                    this.openNames.splice(0, this.openNames.length);
	                    this.openNames.push(name);
	                }
	            }
	        },
	        updateOpened: function updateOpened() {
	            var _this = this;
	
	            var items = (0, _assist.findComponentsDownward)(this, 'Submenu');
	
	            if (items.length) {
	                items.forEach(function (item) {
	                    if (_this.openNames.indexOf(item.name) > -1) item.opened = true;
	                });
	            }
	        }
	    },
	    mounted: function mounted() {
	        var _this2 = this;
	
	        this.updateActiveName();
	        this.updateOpened();
	        this.$on('on-menu-item-select', function (name) {
	            _this2.currentActiveName = name;
	            _this2.$emit('on-select', name);
	        });
	    },
	
	    watch: {
	        openNames: function openNames() {
	            this.$emit('on-open-change', this.openNames);
	        },
	        activeName: function activeName(val) {
	            this.currentActiveName = val;
	        },
	        currentActiveName: function currentActiveName() {
	            this.updateActiveName();
	        }
	    }
	};
	
	/***/ }),
	/* 213 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _dropdown = __webpack_require__(33);
	
	var _dropdown2 = _interopRequireDefault(_dropdown);
	
	var _icon = __webpack_require__(8);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _collapseTransition = __webpack_require__(42);
	
	var _collapseTransition2 = _interopRequireDefault(_collapseTransition);
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-menu';
	
	exports.default = {
	    name: 'Submenu',
	    mixins: [_emitter2.default],
	    components: { Icon: _icon2.default, Drop: _dropdown2.default, CollapseTransition: _collapseTransition2.default },
	    props: {
	        name: {
	            type: [String, Number],
	            required: true
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            active: false,
	            opened: false,
	            dropWidth: parseFloat((0, _assist.getStyle)(this.$el, 'width')),
	            parent: (0, _assist.findComponentUpward)(this, 'Menu')
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return [prefixCls + '-submenu', (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-item-active', this.active), (0, _defineProperty3.default)(_ref, prefixCls + '-opened', this.opened), (0, _defineProperty3.default)(_ref, prefixCls + '-submenu-disabled', this.disabled), _ref)];
	        },
	        mode: function mode() {
	            return this.parent.mode;
	        },
	        accordion: function accordion() {
	            return this.parent.accordion;
	        },
	        dropStyle: function dropStyle() {
	            var style = {};
	
	            if (this.dropWidth) style.minWidth = this.dropWidth + 'px';
	            return style;
	        }
	    },
	    methods: {
	        handleMouseenter: function handleMouseenter() {
	            var _this = this;
	
	            if (this.disabled) return;
	            if (this.mode === 'vertical') return;
	
	            clearTimeout(this.timeout);
	            this.timeout = setTimeout(function () {
	                _this.parent.updateOpenKeys(_this.name);
	                _this.opened = true;
	            }, 250);
	        },
	        handleMouseleave: function handleMouseleave() {
	            var _this2 = this;
	
	            if (this.disabled) return;
	            if (this.mode === 'vertical') return;
	
	            clearTimeout(this.timeout);
	            this.timeout = setTimeout(function () {
	                _this2.parent.updateOpenKeys(_this2.name);
	                _this2.opened = false;
	            }, 150);
	        },
	        handleClick: function handleClick() {
	            if (this.disabled) return;
	            if (this.mode === 'horizontal') return;
	            var opened = this.opened;
	            if (this.accordion) {
	                this.parent.$children.forEach(function (item) {
	                    if (item.$options.name === 'Submenu') item.opened = false;
	                });
	            }
	            this.opened = !opened;
	            this.parent.updateOpenKeys(this.name);
	        }
	    },
	    watch: {
	        mode: function mode(val) {
	            if (val === 'horizontal') {
	                this.$refs.drop.update();
	            }
	        },
	        opened: function opened(val) {
	            if (this.mode === 'vertical') return;
	            if (val) {
	                this.dropWidth = parseFloat((0, _assist.getStyle)(this.$el, 'width'));
	                this.$refs.drop.update();
	            } else {
	                this.$refs.drop.destroy();
	            }
	        }
	    },
	    mounted: function mounted() {
	        var _this3 = this;
	
	        this.$on('on-menu-item-select', function (name) {
	            if (_this3.mode === 'horizontal') _this3.opened = false;
	            _this3.dispatch('Menu', 'on-menu-item-select', name);
	            return true;
	        });
	        this.$on('on-update-active-name', function (status) {
	            _this3.active = status;
	        });
	    }
	};
	
	/***/ }),
	/* 214 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _assign = __webpack_require__(10);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _icon = __webpack_require__(15);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _button = __webpack_require__(20);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _transferDom = __webpack_require__(338);
	
	var _transferDom2 = _interopRequireDefault(_transferDom);
	
	var _assist = __webpack_require__(2);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-modal';
	
	exports.default = {
	    name: 'Modal',
	    mixins: [_locale2.default, _emitter2.default],
	    components: { Icon: _icon2.default, iButton: _button2.default },
	    directives: { TransferDom: _transferDom2.default },
	    props: {
	        value: {
	            type: Boolean,
	            default: false
	        },
	        closable: {
	            type: Boolean,
	            default: true
	        },
	        maskClosable: {
	            type: Boolean,
	            default: true
	        },
	        title: {
	            type: String
	        },
	        width: {
	            type: [Number, String],
	            default: 520
	        },
	        okText: {
	            type: String
	        },
	        cancelText: {
	            type: String
	        },
	        loading: {
	            type: Boolean,
	            default: false
	        },
	        styles: {
	            type: Object
	        },
	        className: {
	            type: String
	        },
	
	        footerHide: {
	            type: Boolean,
	            default: false
	        },
	        scrollable: {
	            type: Boolean,
	            default: false
	        },
	        transitionNames: {
	            type: Array,
	            default: function _default() {
	                return ['ease', 'fade'];
	            }
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            wrapShow: false,
	            showHead: true,
	            buttonLoading: false,
	            visible: this.value
	        };
	    },
	
	    computed: {
	        wrapClasses: function wrapClasses() {
	            var _ref;
	
	            return [prefixCls + '-wrap', (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-hidden', !this.wrapShow), (0, _defineProperty3.default)(_ref, '' + this.className, !!this.className), _ref)];
	        },
	        maskClasses: function maskClasses() {
	            return prefixCls + '-mask';
	        },
	        classes: function classes() {
	            return '' + prefixCls;
	        },
	        mainStyles: function mainStyles() {
	            var style = {};
	
	            var styleWidth = {
	                width: this.width + 'px'
	            };
	
	            var customStyle = this.styles ? this.styles : {};
	
	            (0, _assign2.default)(style, styleWidth, customStyle);
	
	            return style;
	        },
	        localeOkText: function localeOkText() {
	            if (this.okText === undefined) {
	                return this.t('i.modal.okText');
	            } else {
	                return this.okText;
	            }
	        },
	        localeCancelText: function localeCancelText() {
	            if (this.cancelText === undefined) {
	                return this.t('i.modal.cancelText');
	            } else {
	                return this.cancelText;
	            }
	        }
	    },
	    methods: {
	        close: function close() {
	            this.visible = false;
	            this.$emit('input', false);
	            this.$emit('on-cancel');
	        },
	        mask: function mask() {
	            if (this.maskClosable) {
	                this.close();
	            }
	        },
	        handleWrapClick: function handleWrapClick(event) {
	            var className = event.target.getAttribute('class');
	            if (className && className.indexOf(prefixCls + '-wrap') > -1) this.mask();
	        },
	        cancel: function cancel() {
	            this.close();
	        },
	        ok: function ok() {
	            if (this.loading) {
	                this.buttonLoading = true;
	            } else {
	                this.visible = false;
	                this.$emit('input', false);
	            }
	            this.$emit('on-ok');
	        },
	        EscClose: function EscClose(e) {
	            if (this.visible && this.closable) {
	                if (e.keyCode === 27) {
	                    this.close();
	                }
	            }
	        },
	        checkScrollBar: function checkScrollBar() {
	            var fullWindowWidth = window.innerWidth;
	            if (!fullWindowWidth) {
	                var documentElementRect = document.documentElement.getBoundingClientRect();
	                fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
	            }
	            this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
	            if (this.bodyIsOverflowing) {
	                this.scrollBarWidth = (0, _assist.getScrollBarSize)();
	            }
	        },
	        setScrollBar: function setScrollBar() {
	            if (this.bodyIsOverflowing && this.scrollBarWidth !== undefined) {
	                document.body.style.paddingRight = this.scrollBarWidth + 'px';
	            }
	        },
	        resetScrollBar: function resetScrollBar() {
	            document.body.style.paddingRight = '';
	        },
	        addScrollEffect: function addScrollEffect() {
	            this.checkScrollBar();
	            this.setScrollBar();
	            document.body.style.overflow = 'hidden';
	        },
	        removeScrollEffect: function removeScrollEffect() {
	            document.body.style.overflow = '';
	            this.resetScrollBar();
	        },
	        animationFinish: function animationFinish() {
	            this.$emit('on-hidden');
	        }
	    },
	    mounted: function mounted() {
	        if (this.visible) {
	            this.wrapShow = true;
	        }
	
	        var showHead = true;
	
	        if (this.$slots.header === undefined && !this.title) {
	            showHead = false;
	        }
	
	        this.showHead = showHead;
	
	        document.addEventListener('keydown', this.EscClose);
	    },
	    beforeDestroy: function beforeDestroy() {
	        document.removeEventListener('keydown', this.EscClose);
	        this.removeScrollEffect();
	    },
	
	    watch: {
	        value: function value(val) {
	            this.visible = val;
	        },
	        visible: function visible(val) {
	            var _this = this;
	
	            if (val === false) {
	                this.buttonLoading = false;
	                this.timer = setTimeout(function () {
	                    _this.wrapShow = false;
	                    _this.removeScrollEffect();
	                }, 300);
	            } else {
	                if (this.timer) clearTimeout(this.timer);
	                this.wrapShow = true;
	                if (!this.scrollable) {
	                    this.addScrollEffect();
	                }
	            }
	            this.broadcast('Table', 'on-visible-change', val);
	        },
	        loading: function loading(val) {
	            if (!val) {
	                this.buttonLoading = false;
	            }
	        },
	        scrollable: function scrollable(val) {
	            if (!val) {
	                this.addScrollEffect();
	            } else {
	                this.removeScrollEffect();
	            }
	        },
	        title: function title(val) {
	            if (this.$slots.header === undefined) {
	                this.showHead = !!val;
	            }
	        }
	    }
	};
	
	/***/ }),
	/* 215 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _select = __webpack_require__(101);
	
	var _select2 = _interopRequireDefault(_select);
	
	var _option = __webpack_require__(100);
	
	var _option2 = _interopRequireDefault(_option);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-page';
	
	function isValueNumber(value) {
	    return (/^[1-9][0-9]*$/.test(value + '')
	    );
	}
	
	exports.default = {
	    name: 'PageOption',
	    mixins: [_locale2.default],
	    components: { iSelect: _select2.default, iOption: _option2.default },
	    props: {
	        pageSizeOpts: Array,
	        showSizer: Boolean,
	        showElevator: Boolean,
	        current: Number,
	        _current: Number,
	        pageSize: Number,
	        allPages: Number,
	        isSmall: Boolean,
	        placement: String
	    },
	    data: function data() {
	        return {
	            currentPageSize: this.pageSize
	        };
	    },
	
	    watch: {
	        pageSize: function pageSize(val) {
	            this.currentPageSize = val;
	        }
	    },
	    computed: {
	        size: function size() {
	            return this.isSmall ? 'small' : 'default';
	        },
	        optsClasses: function optsClasses() {
	            return [prefixCls + '-options'];
	        },
	        sizerClasses: function sizerClasses() {
	            return [prefixCls + '-options-sizer'];
	        },
	        ElevatorClasses: function ElevatorClasses() {
	            return [prefixCls + '-options-elevator'];
	        }
	    },
	    methods: {
	        changeSize: function changeSize() {
	            this.$emit('on-size', this.currentPageSize);
	        },
	        changePage: function changePage(event) {
	            var val = event.target.value.trim();
	            var page = 0;
	
	            if (isValueNumber(val)) {
	                val = Number(val);
	                if (val != this.current) {
	                    var allPages = this.allPages;
	
	                    if (val > allPages) {
	                        page = allPages;
	                    } else {
	                        page = val;
	                    }
	                }
	            } else {
	                page = 1;
	            }
	
	            if (page) {
	                this.$emit('on-page', page);
	                event.target.value = page;
	            }
	        }
	    }
	};
	
	/***/ }),
	/* 216 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	var _options = __webpack_require__(451);
	
	var _options2 = _interopRequireDefault(_options);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-page';
	
	exports.default = {
	    name: 'Page',
	    mixins: [_locale2.default],
	    components: { Options: _options2.default },
	    props: {
	        current: {
	            type: Number,
	            default: 1
	        },
	        total: {
	            type: Number,
	            default: 0
	        },
	        pageSize: {
	            type: Number,
	            default: 10
	        },
	        pageSizeOpts: {
	            type: Array,
	            default: function _default() {
	                return [10, 20, 30, 40];
	            }
	        },
	        placement: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['top', 'bottom']);
	            },
	
	            default: 'bottom'
	        },
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small']);
	            }
	        },
	        simple: {
	            type: Boolean,
	            default: false
	        },
	        showTotal: {
	            type: Boolean,
	            default: false
	        },
	        showElevator: {
	            type: Boolean,
	            default: false
	        },
	        showSizer: {
	            type: Boolean,
	            default: false
	        },
	        className: {
	            type: String
	        },
	        styles: {
	            type: Object
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            currentPage: this.current,
	            currentPageSize: this.pageSize
	        };
	    },
	
	    watch: {
	        current: function current(val) {
	            this.currentPage = val;
	        },
	        pageSize: function pageSize(val) {
	            this.currentPageSize = val;
	        }
	    },
	    computed: {
	        isSmall: function isSmall() {
	            return !!this.size;
	        },
	        allPages: function allPages() {
	            var allPage = Math.ceil(this.total / this.currentPageSize);
	            return allPage === 0 ? 1 : allPage;
	        },
	        simpleWrapClasses: function simpleWrapClasses() {
	            return ['' + prefixCls, prefixCls + '-simple', (0, _defineProperty3.default)({}, '' + this.className, !!this.className)];
	        },
	        simplePagerClasses: function simplePagerClasses() {
	            return prefixCls + '-simple-pager';
	        },
	        wrapClasses: function wrapClasses() {
	            var _ref2;
	
	            return ['' + prefixCls, (_ref2 = {}, (0, _defineProperty3.default)(_ref2, '' + this.className, !!this.className), (0, _defineProperty3.default)(_ref2, 'mini', !!this.size), _ref2)];
	        },
	        prevClasses: function prevClasses() {
	            return [prefixCls + '-prev', (0, _defineProperty3.default)({}, prefixCls + '-disabled', this.currentPage === 1)];
	        },
	        nextClasses: function nextClasses() {
	            return [prefixCls + '-next', (0, _defineProperty3.default)({}, prefixCls + '-disabled', this.currentPage === this.allPages)];
	        },
	        firstPageClasses: function firstPageClasses() {
	            return [prefixCls + '-item', (0, _defineProperty3.default)({}, prefixCls + '-item-active', this.currentPage === 1)];
	        },
	        lastPageClasses: function lastPageClasses() {
	            return [prefixCls + '-item', (0, _defineProperty3.default)({}, prefixCls + '-item-active', this.currentPage === this.allPages)];
	        }
	    },
	    methods: {
	        changePage: function changePage(page) {
	            if (this.currentPage != page) {
	                this.currentPage = page;
	                this.$emit('on-change', page);
	            }
	        },
	        prev: function prev() {
	            var current = this.currentPage;
	            if (current <= 1) {
	                return false;
	            }
	            this.changePage(current - 1);
	        },
	        next: function next() {
	            var current = this.currentPage;
	            if (current >= this.allPages) {
	                return false;
	            }
	            this.changePage(current + 1);
	        },
	        fastPrev: function fastPrev() {
	            var page = this.currentPage - 5;
	            if (page > 0) {
	                this.changePage(page);
	            } else {
	                this.changePage(1);
	            }
	        },
	        fastNext: function fastNext() {
	            var page = this.currentPage + 5;
	            if (page > this.allPages) {
	                this.changePage(this.allPages);
	            } else {
	                this.changePage(page);
	            }
	        },
	        onSize: function onSize(pageSize) {
	            this.currentPageSize = pageSize;
	            this.$emit('on-page-size-change', pageSize);
	            this.changePage(1);
	        },
	        onPage: function onPage(page) {
	            this.changePage(page);
	        },
	        keyDown: function keyDown(e) {
	            var key = e.keyCode;
	            var condition = key >= 48 && key <= 57 || key >= 96 && key <= 105 || key == 8 || key == 37 || key == 39;
	
	            if (!condition) {
	                e.preventDefault();
	            }
	        },
	        keyUp: function keyUp(e) {
	            var key = e.keyCode;
	            var val = parseInt(e.target.value);
	
	            if (key === 38) {
	                this.prev();
	            } else if (key === 40) {
	                this.next();
	            } else if (key == 13) {
	                var page = 1;
	
	                if (val > this.allPages) {
	                    page = this.allPages;
	                } else if (val <= 0) {
	                    page = 1;
	                } else {
	                    page = val;
	                }
	
	                e.target.value = page;
	                this.changePage(page);
	            }
	        }
	    }
	};
	
	/***/ }),
	/* 217 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _popper = __webpack_require__(63);
	
	var _popper2 = _interopRequireDefault(_popper);
	
	var _button = __webpack_require__(20);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _clickoutside = __webpack_require__(26);
	
	var _clickoutside2 = _interopRequireDefault(_clickoutside);
	
	var _assist = __webpack_require__(2);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-poptip';
	
	exports.default = {
	    name: 'Poptip',
	    mixins: [_popper2.default, _locale2.default],
	    directives: { clickoutside: _clickoutside2.default },
	    components: { iButton: _button2.default },
	    props: {
	        trigger: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['click', 'focus', 'hover']);
	            },
	
	            default: 'click'
	        },
	        placement: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end']);
	            },
	
	            default: 'top'
	        },
	        title: {
	            type: [String, Number]
	        },
	        content: {
	            type: [String, Number],
	            default: ''
	        },
	        width: {
	            type: [String, Number]
	        },
	        confirm: {
	            type: Boolean,
	            default: false
	        },
	        okText: {
	            type: String
	        },
	        cancelText: {
	            type: String
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            showTitle: true,
	            isInput: false
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return ['' + prefixCls, (0, _defineProperty3.default)({}, prefixCls + '-confirm', this.confirm)];
	        },
	        styles: function styles() {
	            var style = {};
	
	            if (this.width) {
	                style.width = this.width + 'px';
	            }
	            return style;
	        },
	        localeOkText: function localeOkText() {
	            if (this.okText === undefined) {
	                return this.t('i.poptip.okText');
	            } else {
	                return this.okText;
	            }
	        },
	        localeCancelText: function localeCancelText() {
	            if (this.cancelText === undefined) {
	                return this.t('i.poptip.cancelText');
	            } else {
	                return this.cancelText;
	            }
	        }
	    },
	    methods: {
	        handleClick: function handleClick() {
	            if (this.confirm) {
	                this.visible = !this.visible;
	                return true;
	            }
	            if (this.trigger !== 'click') {
	                return false;
	            }
	            this.visible = !this.visible;
	        },
	        handleClose: function handleClose() {
	            if (this.confirm) {
	                this.visible = false;
	                return true;
	            }
	            if (this.trigger !== 'click') {
	                return false;
	            }
	            this.visible = false;
	        },
	        handleFocus: function handleFocus() {
	            var fromInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	
	            if (this.trigger !== 'focus' || this.confirm || this.isInput && !fromInput) {
	                return false;
	            }
	            this.visible = true;
	        },
	        handleBlur: function handleBlur() {
	            var fromInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	
	            if (this.trigger !== 'focus' || this.confirm || this.isInput && !fromInput) {
	                return false;
	            }
	            this.visible = false;
	        },
	        handleMouseenter: function handleMouseenter() {
	            if (this.trigger !== 'hover' || this.confirm) {
	                return false;
	            }
	            this.visible = true;
	        },
	        handleMouseleave: function handleMouseleave() {
	            if (this.trigger !== 'hover' || this.confirm) {
	                return false;
	            }
	            this.visible = false;
	        },
	        cancel: function cancel() {
	            this.visible = false;
	            this.$emit('on-cancel');
	        },
	        ok: function ok() {
	            this.visible = false;
	            this.$emit('on-ok');
	        },
	        getInputChildren: function getInputChildren() {
	            var $input = this.$refs.reference.querySelectorAll('input');
	            var $textarea = this.$refs.reference.querySelectorAll('textarea');
	            var $children = null;
	
	            if ($input.length) {
	                $children = $input[0];
	            } else if ($textarea.length) {
	                $children = $textarea[0];
	            }
	
	            return $children;
	        }
	    },
	    mounted: function mounted() {
	        var _this = this;
	
	        if (!this.confirm) {
	            this.showTitle = this.$slots.title !== undefined || this.title;
	        }
	
	        if (this.trigger === 'focus') {
	            this.$nextTick(function () {
	                var $children = _this.getInputChildren();
	                if ($children) {
	                    _this.isInput = true;
	                    $children.addEventListener('focus', _this.handleFocus, false);
	                    $children.addEventListener('blur', _this.handleBlur, false);
	                }
	            });
	        }
	    },
	    beforeDestroy: function beforeDestroy() {
	        var $children = this.getInputChildren();
	        if ($children) {
	            $children.removeEventListener('focus', this.handleFocus, false);
	            $children.removeEventListener('blur', this.handleBlur, false);
	        }
	    }
	};
	
	/***/ }),
	/* 218 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _icon = __webpack_require__(15);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-progress';
	
	exports.default = {
	    components: { Icon: _icon2.default },
	    props: {
	        percent: {
	            type: Number,
	            default: 0
	        },
	        status: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['normal', 'active', 'wrong', 'success']);
	            },
	
	            default: 'normal'
	        },
	        hideInfo: {
	            type: Boolean,
	            default: false
	        },
	        strokeWidth: {
	            type: Number,
	            default: 10
	        }
	    },
	    data: function data() {
	        return {
	            currentStatus: this.status
	        };
	    },
	
	    computed: {
	        isStatus: function isStatus() {
	            return this.currentStatus == 'wrong' || this.currentStatus == 'success';
	        },
	        statusIcon: function statusIcon() {
	            var type = '';
	            switch (this.currentStatus) {
	                case 'wrong':
	                    type = 'ios-close';
	                    break;
	                case 'success':
	                    type = 'ios-checkmark';
	                    break;
	            }
	
	            return type;
	        },
	        bgStyle: function bgStyle() {
	            return {
	                width: this.percent + '%',
	                height: this.strokeWidth + 'px'
	            };
	        },
	        wrapClasses: function wrapClasses() {
	            return ['' + prefixCls, prefixCls + '-' + this.currentStatus, (0, _defineProperty3.default)({}, prefixCls + '-show-info', !this.hideInfo)];
	        },
	        textClasses: function textClasses() {
	            return prefixCls + '-text';
	        },
	        textInnerClasses: function textInnerClasses() {
	            return prefixCls + '-text-inner';
	        },
	        outerClasses: function outerClasses() {
	            return prefixCls + '-outer';
	        },
	        innerClasses: function innerClasses() {
	            return prefixCls + '-inner';
	        },
	        bgClasses: function bgClasses() {
	            return prefixCls + '-bg';
	        }
	    },
	    created: function created() {
	        this.handleStatus();
	    },
	
	    methods: {
	        handleStatus: function handleStatus(isDown) {
	            if (isDown) {
	                this.currentStatus = 'normal';
	                this.$emit('on-status-change', 'normal');
	            } else {
	                if (parseInt(this.percent, 10) == 100) {
	                    this.currentStatus = 'success';
	                    this.$emit('on-status-change', 'success');
	                }
	            }
	        }
	    },
	    watch: {
	        percent: function percent(val, oldVal) {
	            if (val < oldVal) {
	                this.handleStatus(true);
	            } else {
	                this.handleStatus();
	            }
	        },
	        status: function status(val) {
	            this.currentStatus = val;
	        }
	    }
	};
	
	/***/ }),
	/* 219 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-radio-group';
	
	exports.default = {
	    name: 'RadioGroup',
	    mixins: [_emitter2.default],
	    props: {
	        value: {
	            type: [String, Number],
	            default: ''
	        },
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small', 'large']);
	            }
	        },
	        type: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['button']);
	            }
	        },
	        vertical: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            currentValue: this.value,
	            childrens: []
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.size, !!this.size), (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.type, !!this.type), (0, _defineProperty3.default)(_ref, prefixCls + '-vertical', this.vertical), _ref)];
	        }
	    },
	    mounted: function mounted() {
	        this.updateValue();
	    },
	
	    methods: {
	        updateValue: function updateValue() {
	            var value = this.value;
	            this.childrens = (0, _assist.findComponentsDownward)(this, 'Radio');
	
	            if (this.childrens) {
	                this.childrens.forEach(function (child) {
	                    child.currentValue = value == child.label;
	                    child.group = true;
	                });
	            }
	        },
	        change: function change(data) {
	            this.currentValue = data.value;
	            this.updateValue();
	            this.$emit('input', data.value);
	            this.$emit('on-change', data.value);
	            this.dispatch('FormItem', 'on-form-change', data.value);
	        }
	    },
	    watch: {
	        value: function value() {
	            this.updateValue();
	        }
	    }
	};
	
	/***/ }),
	/* 220 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-radio';
	
	exports.default = {
	    name: 'Radio',
	    mixins: [_emitter2.default],
	    props: {
	        value: {
	            type: Boolean,
	            default: false
	        },
	        label: {
	            type: [String, Number]
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            currentValue: this.value,
	            group: false,
	            parent: (0, _assist.findComponentUpward)(this, 'RadioGroup')
	        };
	    },
	
	    computed: {
	        wrapClasses: function wrapClasses() {
	            var _ref;
	
	            return [prefixCls + '-wrapper', (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-group-item', this.group), (0, _defineProperty3.default)(_ref, prefixCls + '-wrapper-checked', this.currentValue), (0, _defineProperty3.default)(_ref, prefixCls + '-wrapper-disabled', this.disabled), _ref)];
	        },
	        radioClasses: function radioClasses() {
	            var _ref2;
	
	            return ['' + prefixCls, (_ref2 = {}, (0, _defineProperty3.default)(_ref2, prefixCls + '-checked', this.currentValue), (0, _defineProperty3.default)(_ref2, prefixCls + '-disabled', this.disabled), _ref2)];
	        },
	        innerClasses: function innerClasses() {
	            return prefixCls + '-inner';
	        },
	        inputClasses: function inputClasses() {
	            return prefixCls + '-input';
	        }
	    },
	    mounted: function mounted() {
	        if (this.parent) this.group = true;
	        if (!this.group) {
	            this.updateValue();
	        } else {
	            this.parent.updateValue();
	        }
	    },
	
	    methods: {
	        change: function change(event) {
	            if (this.disabled) {
	                return false;
	            }
	
	            var checked = event.target.checked;
	            this.currentValue = checked;
	            this.$emit('input', checked);
	
	            if (this.group && this.label !== undefined) {
	                this.parent.change({
	                    value: this.label,
	                    checked: this.value
	                });
	            }
	            if (!this.group) {
	                this.$emit('on-change', checked);
	                this.dispatch('FormItem', 'on-form-change', checked);
	            }
	        },
	        updateValue: function updateValue() {
	            this.currentValue = this.value;
	        }
	    },
	    watch: {
	        value: function value() {
	            this.updateValue();
	        }
	    }
	};
	
	/***/ }),
	/* 221 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-rate';
	
	exports.default = {
	    mixins: [_locale2.default, _emitter2.default],
	    props: {
	        count: {
	            type: Number,
	            default: 5
	        },
	        value: {
	            type: Number,
	            default: 0
	        },
	        allowHalf: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        showText: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            hoverIndex: -1,
	            isHover: false,
	            isHalf: false,
	            currentValue: this.value
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return ['' + prefixCls, (0, _defineProperty3.default)({}, prefixCls + '-disabled', this.disabled)];
	        }
	    },
	    watch: {
	        value: function value(val) {
	            this.currentValue = val;
	        },
	        currentValue: function currentValue(val) {
	            this.setHalf(val);
	        }
	    },
	    methods: {
	        starCls: function starCls(value) {
	            var _ref2;
	
	            var hoverIndex = this.hoverIndex;
	            var currentIndex = this.isHover ? hoverIndex : this.currentValue;
	
	            var full = false;
	            var isLast = false;
	
	            if (currentIndex >= value) full = true;
	
	            if (this.isHover) {
	                isLast = currentIndex === value;
	            } else {
	                isLast = Math.ceil(this.currentValue) === value;
	            }
	
	            return [prefixCls + '-star', (_ref2 = {}, (0, _defineProperty3.default)(_ref2, prefixCls + '-star-full', !isLast && full || isLast && !this.isHalf), (0, _defineProperty3.default)(_ref2, prefixCls + '-star-half', isLast && this.isHalf), (0, _defineProperty3.default)(_ref2, prefixCls + '-star-zero', !full), _ref2)];
	        },
	        handleMousemove: function handleMousemove(value, event) {
	            if (this.disabled) return;
	
	            this.isHover = true;
	            if (this.allowHalf) {
	                var type = event.target.getAttribute('type') || false;
	                this.isHalf = type === 'half';
	            } else {
	                this.isHalf = false;
	            }
	            this.hoverIndex = value;
	        },
	        handleMouseleave: function handleMouseleave() {
	            if (this.disabled) return;
	
	            this.isHover = false;
	            this.setHalf(this.currentValue);
	            this.hoverIndex = -1;
	        },
	        setHalf: function setHalf(val) {
	            this.isHalf = val.toString().indexOf('.') >= 0;
	        },
	        handleClick: function handleClick(value) {
	            if (this.disabled) return;
	
	            if (this.isHalf) value -= 0.5;
	            this.currentValue = value;
	            this.$emit('input', value);
	            this.$emit('on-change', value);
	            this.dispatch('FormItem', 'on-form-change', value);
	        }
	    }
	};
	
	/***/ }),
	/* 222 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _vue = __webpack_require__(12);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isServer = _vue2.default.prototype.$isServer;
	
	var Popper = isServer ? function () {} : __webpack_require__(88);exports.default = {
	    name: 'Drop',
	    props: {
	        placement: {
	            type: String,
	            default: 'bottom-start'
	        }
	    },
	    data: function data() {
	        return {
	            popper: null,
	            width: ''
	        };
	    },
	
	    computed: {
	        styles: function styles() {
	            var style = {};
	            if (this.width) style.width = this.width + 'px';
	            return style;
	        }
	    },
	    methods: {
	        update: function update() {
	            var _this = this;
	
	            if (isServer) return;
	            if (this.popper) {
	                this.$nextTick(function () {
	                    _this.popper.update();
	                });
	            } else {
	                this.$nextTick(function () {
	                    _this.popper = new Popper(_this.$parent.$refs.reference, _this.$el, {
	                        gpuAcceleration: false,
	                        placement: _this.placement,
	                        boundariesPadding: 0,
	                        forceAbsolute: true,
	                        boundariesElement: 'body'
	                    });
	                    _this.popper.onCreate(function (popper) {
	                        _this.resetTransformOrigin(popper);
	                    });
	                });
	            }
	
	            if (this.$parent.$options.name === 'iSelect') {
	                this.width = parseInt((0, _assist.getStyle)(this.$parent.$el, 'width'));
	            }
	        },
	        destroy: function destroy() {
	            var _this2 = this;
	
	            if (this.popper) {
	                this.resetTransformOrigin(this.popper);
	                setTimeout(function () {
	                    _this2.popper.destroy();
	                    _this2.popper = null;
	                }, 300);
	            }
	        },
	        resetTransformOrigin: function resetTransformOrigin(popper) {
	            var placementMap = { top: 'bottom', bottom: 'top' };
	            var placement = popper._popper.getAttribute('x-placement').split('-')[0];
	            var origin = placementMap[placement];
	            popper._popper.style.transformOrigin = 'center ' + origin;
	        }
	    },
	    created: function created() {
	        this.$on('on-update-popper', this.update);
	        this.$on('on-destroy-popper', this.destroy);
	    },
	    beforeDestroy: function beforeDestroy() {
	        if (this.popper) {
	            this.popper.destroy();
	        }
	    }
	};
	
	/***/ }),
	/* 223 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	
	var prefixCls = 'ivu-select-group';
	
	exports.default = {
	    name: 'OptionGroup',
	    props: {
	        label: {
	            type: String,
	            default: ''
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            hidden: false };
	    },
	
	    methods: {
	        queryChange: function queryChange() {
	            var _this = this;
	
	            this.$nextTick(function () {
	                var options = _this.$refs.options.querySelectorAll('.ivu-select-item');
	                var hasVisibleOption = false;
	                for (var i = 0; i < options.length; i++) {
	                    if (options[i].style.display !== 'none') {
	                        hasVisibleOption = true;
	                        break;
	                    }
	                }
	                _this.hidden = !hasVisibleOption;
	            });
	        }
	    },
	    mounted: function mounted() {
	        var _this2 = this;
	
	        this.$on('on-query-change', function () {
	            _this2.queryChange();
	            return true;
	        });
	    }
	};
	
	/***/ }),
	/* 224 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-select-item';
	
	exports.default = {
	    name: 'iOption',
	    componentName: 'select-item',
	    mixins: [_emitter2.default],
	    props: {
	        value: {
	            type: [String, Number],
	            required: true
	        },
	        label: {
	            type: [String, Number]
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            selected: false,
	            index: 0,
	            isFocus: false,
	            hidden: false,
	            searchLabel: '' };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-disabled', this.disabled), (0, _defineProperty3.default)(_ref, prefixCls + '-selected', this.selected), (0, _defineProperty3.default)(_ref, prefixCls + '-focus', this.isFocus), _ref)];
	        },
	        showLabel: function showLabel() {
	            return this.label ? this.label : this.value;
	        }
	    },
	    methods: {
	        select: function select() {
	            if (this.disabled) {
	                return false;
	            }
	
	            this.dispatch('iSelect', 'on-select-selected', this.value);
	        },
	        blur: function blur() {
	            this.isFocus = false;
	        },
	        queryChange: function queryChange(val) {
	            var parsedQuery = val.replace(/(\^|\(|\)|\[|\]|\$|\*|\+|\.|\?|\\|\{|\}|\|)/g, '\\$1');
	            this.hidden = !new RegExp(parsedQuery, 'i').test(this.searchLabel);
	        }
	    },
	    mounted: function mounted() {
	        var _this = this;
	
	        this.searchLabel = this.$el.innerHTML;
	        this.dispatch('iSelect', 'append');
	        this.$on('on-select-close', function () {
	            _this.isFocus = false;
	        });
	        this.$on('on-query-change', function (val) {
	            _this.queryChange(val);
	        });
	    },
	    beforeDestroy: function beforeDestroy() {
	        this.dispatch('iSelect', 'remove');
	    }
	};
	
	/***/ }),
	/* 225 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof2 = __webpack_require__(11);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _icon = __webpack_require__(15);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _dropdown = __webpack_require__(33);
	
	var _dropdown2 = _interopRequireDefault(_dropdown);
	
	var _clickoutside = __webpack_require__(26);
	
	var _clickoutside2 = _interopRequireDefault(_clickoutside);
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-select';
	
	exports.default = {
	    name: 'iSelect',
	    mixins: [_emitter2.default, _locale2.default],
	    components: { Icon: _icon2.default, Drop: _dropdown2.default },
	    directives: { clickoutside: _clickoutside2.default },
	    props: {
	        value: {
	            type: [String, Number, Array],
	            default: ''
	        },
	
	        label: {
	            type: [String, Number, Array],
	            default: ''
	        },
	        multiple: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        clearable: {
	            type: Boolean,
	            default: false
	        },
	        placeholder: {
	            type: String
	        },
	        filterable: {
	            type: Boolean,
	            default: false
	        },
	        filterMethod: {
	            type: Function
	        },
	        remote: {
	            type: Boolean,
	            default: false
	        },
	        remoteMethod: {
	            type: Function
	        },
	        loading: {
	            type: Boolean,
	            default: false
	        },
	        loadingText: {
	            type: String
	        },
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small', 'large', 'default']);
	            }
	        },
	        labelInValue: {
	            type: Boolean,
	            default: false
	        },
	        notFoundText: {
	            type: String
	        },
	        placement: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['top', 'bottom']);
	            },
	
	            default: 'bottom'
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            visible: false,
	            options: [],
	            optionInstances: [],
	            selectedSingle: '',
	            selectedMultiple: [],
	            focusIndex: 0,
	            query: '',
	            lastQuery: '',
	            selectToChangeQuery: false,
	            inputLength: 20,
	            notFound: false,
	            slotChangeDuration: false,
	            model: this.value,
	            currentLabel: this.label
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-visible', this.visible), (0, _defineProperty3.default)(_ref, prefixCls + '-disabled', this.disabled), (0, _defineProperty3.default)(_ref, prefixCls + '-multiple', this.multiple), (0, _defineProperty3.default)(_ref, prefixCls + '-single', !this.multiple), (0, _defineProperty3.default)(_ref, prefixCls + '-show-clear', this.showCloseIcon), (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.size, !!this.size), _ref)];
	        },
	        showPlaceholder: function showPlaceholder() {
	            var status = false;
	
	            if (typeof this.model === 'string') {
	                if (this.model === '') {
	                    status = true;
	                }
	            } else if (Array.isArray(this.model)) {
	                if (!this.model.length) {
	                    status = true;
	                }
	            } else if (this.model === null) {
	                status = true;
	            }
	
	            return status;
	        },
	        showCloseIcon: function showCloseIcon() {
	            return !this.multiple && this.clearable && !this.showPlaceholder;
	        },
	        inputStyle: function inputStyle() {
	            var style = {};
	
	            if (this.multiple) {
	                if (this.showPlaceholder) {
	                    style.width = '100%';
	                } else {
	                    style.width = this.inputLength + 'px';
	                }
	            }
	
	            return style;
	        },
	        localePlaceholder: function localePlaceholder() {
	            if (this.placeholder === undefined) {
	                return this.t('i.select.placeholder');
	            } else {
	                return this.placeholder;
	            }
	        },
	        localeNotFoundText: function localeNotFoundText() {
	            if (this.notFoundText === undefined) {
	                return this.t('i.select.noMatch');
	            } else {
	                return this.notFoundText;
	            }
	        },
	        localeLoadingText: function localeLoadingText() {
	            if (this.loadingText === undefined) {
	                return this.t('i.select.loading');
	            } else {
	                return this.loadingText;
	            }
	        },
	        transitionName: function transitionName() {
	            return this.placement === 'bottom' ? 'slide-up' : 'slide-down';
	        },
	        dropVisible: function dropVisible() {
	            var status = true;
	            var options = this.$slots.default || [];
	            if (!this.loading && this.remote && this.query === '' && !options.length) status = false;
	            return this.visible && status;
	        },
	        notFountShow: function notFountShow() {
	            var options = this.$slots.default || [];
	            return this.notFound && !this.remote || this.remote && !this.loading && !options.length;
	        }
	    },
	    methods: {
	        toggleMenu: function toggleMenu() {
	            if (this.disabled) {
	                return false;
	            }
	            this.visible = !this.visible;
	        },
	        hideMenu: function hideMenu() {
	            this.visible = false;
	            this.focusIndex = 0;
	            this.broadcast('iOption', 'on-select-close');
	        },
	        findChild: function findChild(cb) {
	            var find = function find(child) {
	                var name = child.$options.componentName;
	
	                if (name) {
	                    cb(child);
	                } else if (child.$children.length) {
	                    child.$children.forEach(function (innerChild) {
	                        find(innerChild, cb);
	                    });
	                }
	            };
	
	            if (this.optionInstances.length) {
	                this.optionInstances.forEach(function (child) {
	                    find(child);
	                });
	            } else {
	                this.$children.forEach(function (child) {
	                    find(child);
	                });
	            }
	        },
	        updateOptions: function updateOptions(init) {
	            var _this = this;
	
	            var slot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            var options = [];
	            var index = 1;
	
	            this.findChild(function (child) {
	                options.push({
	                    value: child.value,
	                    label: child.label === undefined ? child.$el.innerHTML : child.label
	                });
	                child.index = index++;
	
	                if (init) {
	                    _this.optionInstances.push(child);
	                }
	            });
	
	            this.options = options;
	
	            if (init) {
	                if (!this.remote) {
	                    this.updateSingleSelected(true, slot);
	                    this.updateMultipleSelected(true, slot);
	                }
	            }
	        },
	        updateSingleSelected: function updateSingleSelected() {
	            var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	            var slot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            var type = (0, _typeof3.default)(this.model);
	
	            if (type === 'string' || type === 'number') {
	                var findModel = false;
	
	                for (var i = 0; i < this.options.length; i++) {
	                    if (this.model === this.options[i].value) {
	                        this.selectedSingle = this.options[i].label;
	                        findModel = true;
	                        break;
	                    }
	                }
	
	                if (slot && !findModel) {
	                    this.model = '';
	                    this.query = '';
	                }
	            }
	
	            this.toggleSingleSelected(this.model, init);
	        },
	        clearSingleSelect: function clearSingleSelect() {
	            if (this.showCloseIcon) {
	                this.findChild(function (child) {
	                    child.selected = false;
	                });
	                this.model = '';
	
	                if (this.filterable) {
	                    this.query = '';
	                }
	            }
	        },
	        updateMultipleSelected: function updateMultipleSelected() {
	            var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	            var slot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            if (this.multiple && Array.isArray(this.model)) {
	                var selected = this.remote ? this.selectedMultiple : [];
	
	                for (var i = 0; i < this.model.length; i++) {
	                    var model = this.model[i];
	
	                    for (var j = 0; j < this.options.length; j++) {
	                        var option = this.options[j];
	
	                        if (model === option.value) {
	                            selected.push({
	                                value: option.value,
	                                label: option.label
	                            });
	                        }
	                    }
	                }
	
	                var selectedArray = [];
	                var selectedObject = {};
	                selected.forEach(function (item) {
	                    if (!selectedObject[item.value]) {
	                        selectedArray.push(item);
	                        selectedObject[item.value] = 1;
	                    }
	                });
	
	                this.selectedMultiple = this.remote ? selectedArray : selected;
	
	                if (slot) {
	                    var selectedModel = [];
	
	                    for (var _i = 0; _i < selected.length; _i++) {
	                        selectedModel.push(selected[_i].value);
	                    }
	
	                    if (this.model.length === selectedModel.length) {
	                        this.slotChangeDuration = true;
	                    }
	
	                    this.model = selectedModel;
	                }
	            }
	            this.toggleMultipleSelected(this.model, init);
	        },
	        removeTag: function removeTag(index) {
	            if (this.disabled) {
	                return false;
	            }
	
	            if (this.remote) {
	                var tag = this.model[index];
	                this.selectedMultiple = this.selectedMultiple.filter(function (item) {
	                    return item.value !== tag;
	                });
	            }
	
	            this.model.splice(index, 1);
	
	            if (this.filterable && this.visible) {
	                this.$refs.input.focus();
	            }
	
	            this.broadcast('Drop', 'on-update-popper');
	        },
	        toggleSingleSelected: function toggleSingleSelected(value) {
	            var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            if (!this.multiple) {
	                var label = '';
	
	                this.findChild(function (child) {
	                    if (child.value === value) {
	                        child.selected = true;
	                        label = child.label === undefined ? child.$el.innerHTML : child.label;
	                    } else {
	                        child.selected = false;
	                    }
	                });
	
	                this.hideMenu();
	
	                if (!init) {
	                    if (this.labelInValue) {
	                        this.$emit('on-change', {
	                            value: value,
	                            label: label
	                        });
	                        this.dispatch('FormItem', 'on-form-change', {
	                            value: value,
	                            label: label
	                        });
	                    } else {
	                        this.$emit('on-change', value);
	                        this.dispatch('FormItem', 'on-form-change', value);
	                    }
	                }
	            }
	        },
	        toggleMultipleSelected: function toggleMultipleSelected(value) {
	            var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            if (this.multiple) {
	                var hybridValue = [];
	                for (var i = 0; i < value.length; i++) {
	                    hybridValue.push({
	                        value: value[i]
	                    });
	                }
	
	                this.findChild(function (child) {
	                    var index = value.indexOf(child.value);
	
	                    if (index >= 0) {
	                        child.selected = true;
	                        hybridValue[index].label = child.label === undefined ? child.$el.innerHTML : child.label;
	                    } else {
	                        child.selected = false;
	                    }
	                });
	
	                if (!init) {
	                    if (this.labelInValue) {
	                        this.$emit('on-change', hybridValue);
	                        this.dispatch('FormItem', 'on-form-change', hybridValue);
	                    } else {
	                        this.$emit('on-change', value);
	                        this.dispatch('FormItem', 'on-form-change', value);
	                    }
	                }
	            }
	        },
	        handleClose: function handleClose() {
	            this.hideMenu();
	        },
	        handleKeydown: function handleKeydown(e) {
	            if (this.visible) {
	                var keyCode = e.keyCode;
	
	                if (keyCode === 27) {
	                    e.preventDefault();
	                    this.hideMenu();
	                }
	
	                if (keyCode === 40) {
	                    e.preventDefault();
	                    this.navigateOptions('next');
	                }
	
	                if (keyCode === 38) {
	                    e.preventDefault();
	                    this.navigateOptions('prev');
	                }
	
	                if (keyCode === 13) {
	                    e.preventDefault();
	
	                    this.findChild(function (child) {
	                        if (child.isFocus) {
	                            child.select();
	                        }
	                    });
	                }
	            }
	        },
	        navigateOptions: function navigateOptions(direction) {
	            var _this2 = this;
	
	            if (direction === 'next') {
	                var next = this.focusIndex + 1;
	                this.focusIndex = this.focusIndex === this.options.length ? 1 : next;
	            } else if (direction === 'prev') {
	                var prev = this.focusIndex - 1;
	                this.focusIndex = this.focusIndex <= 1 ? this.options.length : prev;
	            }
	
	            var child_status = {
	                disabled: false,
	                hidden: false
	            };
	
	            var find_deep = false;
	
	            this.findChild(function (child) {
	                if (child.index === _this2.focusIndex) {
	                    child_status.disabled = child.disabled;
	                    child_status.hidden = child.hidden;
	
	                    if (!child.disabled && !child.hidden) {
	                        child.isFocus = true;
	                    }
	                } else {
	                    child.isFocus = false;
	                }
	
	                if (!child.hidden && !child.disabled) {
	                    find_deep = true;
	                }
	            });
	
	            this.resetScrollTop();
	
	            if ((child_status.disabled || child_status.hidden) && find_deep) {
	                this.navigateOptions(direction);
	            }
	        },
	        resetScrollTop: function resetScrollTop() {
	            var index = this.focusIndex - 1;
	            var bottomOverflowDistance = this.optionInstances[index].$el.getBoundingClientRect().bottom - this.$refs.dropdown.$el.getBoundingClientRect().bottom;
	            var topOverflowDistance = this.optionInstances[index].$el.getBoundingClientRect().top - this.$refs.dropdown.$el.getBoundingClientRect().top;
	
	            if (bottomOverflowDistance > 0) {
	                this.$refs.dropdown.$el.scrollTop += bottomOverflowDistance;
	            }
	            if (topOverflowDistance < 0) {
	                this.$refs.dropdown.$el.scrollTop += topOverflowDistance;
	            }
	        },
	        handleBlur: function handleBlur() {
	            var _this3 = this;
	
	            setTimeout(function () {
	                var model = _this3.model;
	
	                if (_this3.multiple) {
	                    _this3.query = '';
	                } else {
	                    if (model !== '') {
	                        _this3.findChild(function (child) {
	                            if (child.value === model) {
	                                _this3.query = child.label === undefined ? child.searchLabel : child.label;
	                            }
	                        });
	
	                        if (_this3.remote && _this3.query !== _this3.lastQuery) {
	                            _this3.$nextTick(function () {
	                                _this3.query = _this3.lastQuery;
	                            });
	                        }
	                    } else {
	                        _this3.query = '';
	                    }
	                }
	            }, 300);
	        },
	        resetInputState: function resetInputState() {
	            this.inputLength = this.$refs.input.value.length * 12 + 20;
	        },
	        handleInputDelete: function handleInputDelete() {
	            if (this.multiple && this.model.length && this.query === '') {
	                this.removeTag(this.model.length - 1);
	            }
	        },
	        slotChange: function slotChange() {
	            this.options = [];
	            this.optionInstances = [];
	        },
	        setQuery: function setQuery(query) {
	            if (!this.filterable) return;
	            this.query = query;
	        },
	        modelToQuery: function modelToQuery() {
	            var _this4 = this;
	
	            if (!this.multiple && this.filterable && this.model !== undefined) {
	                this.findChild(function (child) {
	                    if (_this4.model === child.value) {
	                        if (child.label) {
	                            _this4.query = child.label;
	                        } else if (child.searchLabel) {
	                            _this4.query = child.searchLabel;
	                        } else {
	                            _this4.query = child.value;
	                        }
	                    }
	                });
	            }
	        },
	        broadcastQuery: function broadcastQuery(val) {
	            if ((0, _assist.findComponentDownward)(this, 'OptionGroup')) {
	                this.broadcast('OptionGroup', 'on-query-change', val);
	                this.broadcast('iOption', 'on-query-change', val);
	            } else {
	                this.broadcast('iOption', 'on-query-change', val);
	            }
	        },
	        updateLabel: function updateLabel() {
	            var _this5 = this;
	
	            if (this.remote) {
	                if (!this.multiple && this.model !== '') {
	                    this.selectToChangeQuery = true;
	                    if (this.currentLabel === '') this.currentLabel = this.model;
	                    this.lastQuery = this.currentLabel;
	                    this.query = this.currentLabel;
	                } else if (this.multiple && this.model.length) {
	                    if (this.currentLabel.length !== this.model.length) this.currentLabel = this.model;
	                    this.selectedMultiple = this.model.map(function (item, index) {
	                        return {
	                            value: item,
	                            label: _this5.currentLabel[index]
	                        };
	                    });
	                }
	            }
	        }
	    },
	    mounted: function mounted() {
	        var _this6 = this;
	
	        this.modelToQuery();
	
	        this.updateLabel();
	        this.$nextTick(function () {
	            _this6.broadcastQuery('');
	        });
	
	        this.updateOptions(true);
	        document.addEventListener('keydown', this.handleKeydown);
	
	        this.$on('append', function () {
	            if (!_this6.remote) {
	                _this6.modelToQuery();
	                _this6.$nextTick(function () {
	                    _this6.broadcastQuery('');
	                });
	            } else {
	                _this6.findChild(function (child) {
	                    child.selected = _this6.multiple ? _this6.model.indexOf(child.value) > -1 : _this6.model === child.value;
	                });
	            }
	            _this6.slotChange();
	            _this6.updateOptions(true, true);
	        });
	        this.$on('remove', function () {
	            if (!_this6.remote) {
	                _this6.modelToQuery();
	                _this6.$nextTick(function () {
	                    _this6.broadcastQuery('');
	                });
	            } else {
	                _this6.findChild(function (child) {
	                    child.selected = _this6.multiple ? _this6.model.indexOf(child.value) > -1 : _this6.model === child.value;
	                });
	            }
	            _this6.slotChange();
	            _this6.updateOptions(true, true);
	        });
	
	        this.$on('on-select-selected', function (value) {
	            if (_this6.model === value) {
	                _this6.hideMenu();
	            } else {
	                if (_this6.multiple) {
	                    var index = _this6.model.indexOf(value);
	                    if (index >= 0) {
	                        _this6.removeTag(index);
	                    } else {
	                        _this6.model.push(value);
	                        _this6.broadcast('Drop', 'on-update-popper');
	                    }
	
	                    if (_this6.filterable) {
	                        if (_this6.query !== '') _this6.selectToChangeQuery = true;
	                        _this6.query = '';
	                        _this6.$refs.input.focus();
	                    }
	                } else {
	                    _this6.model = value;
	
	                    if (_this6.filterable) {
	                        _this6.findChild(function (child) {
	                            if (child.value === value) {
	                                if (_this6.query !== '') _this6.selectToChangeQuery = true;
	                                _this6.lastQuery = _this6.query = child.label === undefined ? child.searchLabel : child.label;
	                            }
	                        });
	                    }
	                }
	            }
	        });
	    },
	    beforeDestroy: function beforeDestroy() {
	        document.removeEventListener('keydown', this.handleKeydown);
	    },
	
	    watch: {
	        value: function value(val) {
	            this.model = val;
	            if (val === '') this.query = '';
	        },
	        label: function label(val) {
	            this.currentLabel = val;
	            this.updateLabel();
	        },
	        model: function model() {
	            var _this7 = this;
	
	            this.$emit('input', this.model);
	            this.modelToQuery();
	            if (this.multiple) {
	                if (this.slotChangeDuration) {
	                    this.slotChangeDuration = false;
	                } else {
	                    this.updateMultipleSelected();
	                }
	            } else {
	                this.updateSingleSelected();
	            }
	
	            if (!this.visible && this.filterable) {
	                this.$nextTick(function () {
	                    _this7.broadcastQuery('');
	                });
	            }
	        },
	        visible: function visible(val) {
	            var _this8 = this;
	
	            if (val) {
	                if (this.filterable) {
	                    if (this.multiple) {
	                        this.$refs.input.focus();
	                    } else {
	                        this.$refs.input.select();
	                    }
	                    if (this.remote) {
	                        this.findChild(function (child) {
	                            child.selected = _this8.multiple ? _this8.model.indexOf(child.value) > -1 : _this8.model === child.value;
	                        });
	
	                        var options = this.$slots.default || [];
	                        if (this.query !== '' && !options.length) {
	                            this.remoteMethod(this.query);
	                        }
	                    }
	                }
	                this.broadcast('Drop', 'on-update-popper');
	            } else {
	                if (this.filterable) {
	                    this.$refs.input.blur();
	
	                    setTimeout(function () {
	                        _this8.broadcastQuery('');
	                    }, 300);
	                }
	                this.broadcast('Drop', 'on-destroy-popper');
	            }
	        },
	        query: function query(val) {
	            var _this9 = this;
	
	            if (this.remote && this.remoteMethod) {
	                if (!this.selectToChangeQuery) {
	                    this.$emit('on-query-change', val);
	                    this.remoteMethod(val);
	                }
	                this.focusIndex = 0;
	                this.findChild(function (child) {
	                    child.isFocus = false;
	                });
	            } else {
	                if (!this.selectToChangeQuery) {
	                    this.$emit('on-query-change', val);
	                }
	                this.broadcastQuery(val);
	
	                var is_hidden = true;
	
	                this.$nextTick(function () {
	                    _this9.findChild(function (child) {
	                        if (!child.hidden) {
	                            is_hidden = false;
	                        }
	                    });
	                    _this9.notFound = is_hidden;
	                });
	            }
	            this.selectToChangeQuery = false;
	            this.broadcast('Drop', 'on-update-popper');
	        }
	    }
	};
	
	/***/ }),
	/* 226 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _toConsumableArray2 = __webpack_require__(43);
	
	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _inputNumber = __webpack_require__(97);
	
	var _inputNumber2 = _interopRequireDefault(_inputNumber);
	
	var _tooltip = __webpack_require__(102);
	
	var _tooltip2 = _interopRequireDefault(_tooltip);
	
	var _assist = __webpack_require__(2);
	
	var _dom = __webpack_require__(27);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-slider';
	
	exports.default = {
	    name: 'Slider',
	    mixins: [_emitter2.default],
	    components: { InputNumber: _inputNumber2.default, Tooltip: _tooltip2.default },
	    props: {
	        min: {
	            type: Number,
	            default: 0
	        },
	        max: {
	            type: Number,
	            default: 100
	        },
	        step: {
	            type: Number,
	            default: 1
	        },
	        range: {
	            type: Boolean,
	            default: false
	        },
	        value: {
	            type: [Number, Array],
	            default: 0
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        showInput: {
	            type: Boolean,
	            default: false
	        },
	        showStops: {
	            type: Boolean,
	            default: false
	        },
	        tipFormat: {
	            type: Function,
	            default: function _default(val) {
	                return val;
	            }
	        },
	        showTip: {
	            type: String,
	            default: 'hover',
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['hover', 'always', 'never']);
	            }
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            currentValue: this.value,
	            dragging: false,
	            firstDragging: false,
	            secondDragging: false,
	            startX: 0,
	            currentX: 0,
	            startPos: 0,
	            newPos: null,
	            oldSingleValue: this.value,
	            oldFirstValue: this.value[0],
	            oldSecondValue: this.value[1],
	            singlePosition: (this.value - this.min) / (this.max - this.min) * 100,
	            firstPosition: (this.value[0] - this.min) / (this.max - this.min) * 100,
	            secondPosition: (this.value[1] - this.min) / (this.max - this.min) * 100
	        };
	    },
	
	    watch: {
	        value: function value(val) {
	            this.currentValue = val;
	        },
	        currentValue: function currentValue(val) {
	            var _this = this;
	
	            this.$nextTick(function () {
	                _this.$refs.tooltip.updatePopper();
	                if (_this.range) {
	                    _this.$refs.tooltip2.updatePopper();
	                }
	            });
	            this.updateValue(val);
	            this.$emit('input', val);
	            this.$emit('on-input', val);
	        }
	    },
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-input', this.showInput && !this.range), (0, _defineProperty3.default)(_ref, prefixCls + '-range', this.range), (0, _defineProperty3.default)(_ref, prefixCls + '-disabled', this.disabled), _ref)];
	        },
	        buttonClasses: function buttonClasses() {
	            return [prefixCls + '-button', (0, _defineProperty3.default)({}, prefixCls + '-button-dragging', this.dragging)];
	        },
	        button1Classes: function button1Classes() {
	            return [prefixCls + '-button', (0, _defineProperty3.default)({}, prefixCls + '-button-dragging', this.firstDragging)];
	        },
	        button2Classes: function button2Classes() {
	            return [prefixCls + '-button', (0, _defineProperty3.default)({}, prefixCls + '-button-dragging', this.secondDragging)];
	        },
	        barStyle: function barStyle() {
	            var style = void 0;
	
	            if (this.range) {
	                style = {
	                    width: (this.currentValue[1] - this.currentValue[0]) / (this.max - this.min) * 100 + '%',
	                    left: (this.currentValue[0] - this.min) / (this.max - this.min) * 100 + '%'
	                };
	            } else {
	                style = {
	                    width: (this.currentValue - this.min) / (this.max - this.min) * 100 + '%'
	                };
	            }
	
	            return style;
	        },
	        stops: function stops() {
	            var stopCount = (this.max - this.min) / this.step;
	            var result = [];
	            var stepWidth = 100 * this.step / (this.max - this.min);
	            for (var i = 1; i < stopCount; i++) {
	                result.push(i * stepWidth);
	            }
	            return result;
	        },
	        sliderWidth: function sliderWidth() {
	            return parseInt((0, _assist.getStyle)(this.$refs.slider, 'width'), 10);
	        },
	        tipDisabled: function tipDisabled() {
	            return this.tipFormat(this.currentValue[0]) === null || this.showTip === 'never';
	        }
	    },
	    methods: {
	        updateValue: function updateValue(val) {
	            var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            if (this.range) {
	                var value = [].concat((0, _toConsumableArray3.default)(val));
	                if (init) {
	                    if (value[0] > value[1]) {
	                        value = [this.min, this.max];
	                    }
	                } else {
	                    if (value[0] > value[1]) {
	                        value[0] = value[1];
	                    }
	                }
	                if (value[0] < this.min) {
	                    value[0] = this.min;
	                }
	                if (value[0] > this.max) {
	                    value[0] = this.max;
	                }
	                if (value[1] < this.min) {
	                    value[1] = this.min;
	                }
	                if (value[1] > this.max) {
	                    value[1] = this.max;
	                }
	                if (this.value[0] === value[0] && this.value[1] === value[1]) {
	                    this.setFirstPosition(this.currentValue[0]);
	                    this.setSecondPosition(this.currentValue[1]);
	                    return;
	                }
	
	                this.currentValue = value;
	                this.setFirstPosition(this.currentValue[0]);
	                this.setSecondPosition(this.currentValue[1]);
	            } else {
	                if (val < this.min) {
	                    this.currentValue = this.min;
	                }
	                if (val > this.max) {
	                    this.currentValue = this.max;
	                }
	                this.setSinglePosition(this.currentValue);
	            }
	        },
	        sliderClick: function sliderClick(event) {
	            if (this.disabled) return;
	            var currentX = event.clientX;
	            var sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left;
	            var newPos = (currentX - sliderOffsetLeft) / this.sliderWidth * 100;
	
	            if (this.range) {
	                var type = '';
	                if (newPos <= this.firstPosition) {
	                    type = 'First';
	                } else if (newPos >= this.secondPosition) {
	                    type = 'Second';
	                } else {
	                    if (newPos - this.firstPosition <= this.secondPosition - newPos) {
	                        type = 'First';
	                    } else {
	                        type = 'Second';
	                    }
	                }
	                this['change' + type + 'Position'](newPos);
	            } else {
	                this.changeSinglePosition(newPos);
	            }
	        },
	        onSingleButtonDown: function onSingleButtonDown(event) {
	            if (this.disabled) return;
	            event.preventDefault();
	            this.onSingleDragStart(event);
	
	            (0, _dom.on)(window, 'mousemove', this.onSingleDragging);
	            (0, _dom.on)(window, 'mouseup', this.onSingleDragEnd);
	        },
	        onSingleDragStart: function onSingleDragStart(event) {
	            this.dragging = true;
	            this.startX = event.clientX;
	            this.startPos = parseInt(this.singlePosition, 10);
	        },
	        onSingleDragging: function onSingleDragging(event) {
	            if (this.dragging) {
	                this.$refs.tooltip.visible = true;
	                this.currentX = event.clientX;
	                var diff = (this.currentX - this.startX) / this.sliderWidth * 100;
	                this.newPos = this.startPos + diff;
	                this.changeSinglePosition(this.newPos);
	            }
	        },
	        onSingleDragEnd: function onSingleDragEnd() {
	            if (this.dragging) {
	                this.dragging = false;
	                this.$refs.tooltip.visible = false;
	                this.changeSinglePosition(this.newPos);
	
	                (0, _dom.off)(window, 'mousemove', this.onSingleDragging);
	                (0, _dom.off)(window, 'mouseup', this.onSingleDragEnd);
	            }
	        },
	        changeSinglePosition: function changeSinglePosition(newPos) {
	            if (newPos < 0) {
	                newPos = 0;
	            } else if (newPos > 100) {
	                newPos = 100;
	            }
	            var lengthPerStep = 100 / ((this.max - this.min) / this.step);
	            var steps = Math.round(newPos / lengthPerStep);
	
	            this.currentValue = Math.round(steps * lengthPerStep * (this.max - this.min) * 0.01 + this.min);
	            this.setSinglePosition(this.currentValue);
	            if (!this.dragging) {
	                if (this.currentValue !== this.oldSingleValue) {
	                    this.$emit('on-change', this.currentValue);
	                    this.dispatch('FormItem', 'on-form-change', this.currentValue);
	                    this.oldSingleValue = this.currentValue;
	                }
	            }
	        },
	        setSinglePosition: function setSinglePosition(val) {
	            this.singlePosition = (val - this.min) / (this.max - this.min) * 100;
	        },
	        handleInputChange: function handleInputChange(val) {
	            this.currentValue = val;
	            this.setSinglePosition(val);
	            this.$emit('on-change', this.currentValue);
	            this.dispatch('FormItem', 'on-form-change', this.currentValue);
	        },
	        onFirstButtonDown: function onFirstButtonDown(event) {
	            if (this.disabled) return;
	            event.preventDefault();
	            this.onFirstDragStart(event);
	
	            (0, _dom.on)(window, 'mousemove', this.onFirstDragging);
	            (0, _dom.on)(window, 'mouseup', this.onFirstDragEnd);
	        },
	        onFirstDragStart: function onFirstDragStart(event) {
	            this.firstDragging = true;
	            this.startX = event.clientX;
	            this.startPos = parseInt(this.firstPosition, 10);
	        },
	        onFirstDragging: function onFirstDragging(event) {
	            if (this.firstDragging) {
	                this.$refs.tooltip.visible = true;
	                this.currentX = event.clientX;
	                var diff = (this.currentX - this.startX) / this.sliderWidth * 100;
	                this.newPos = this.startPos + diff;
	                this.changeFirstPosition(this.newPos);
	            }
	        },
	        onFirstDragEnd: function onFirstDragEnd() {
	            if (this.firstDragging) {
	                this.firstDragging = false;
	                this.$refs.tooltip.visible = false;
	                this.changeFirstPosition(this.newPos);
	
	                (0, _dom.off)(window, 'mousemove', this.onFirstDragging);
	                (0, _dom.off)(window, 'mouseup', this.onFirstDragEnd);
	            }
	        },
	        changeFirstPosition: function changeFirstPosition(newPos) {
	            if (newPos < 0) {
	                newPos = 0;
	            } else if (newPos > this.secondPosition) {
	                newPos = this.secondPosition;
	            }
	            var lengthPerStep = 100 / ((this.max - this.min) / this.step);
	            var steps = Math.round(newPos / lengthPerStep);
	
	            this.currentValue = [Math.round(steps * lengthPerStep * (this.max - this.min) * 0.01 + this.min), this.currentValue[1]];
	            this.setFirstPosition(this.currentValue[0]);
	            if (!this.firstDragging) {
	                if (this.currentValue[0] !== this.oldFirstValue) {
	                    this.$emit('on-change', this.currentValue);
	                    this.dispatch('FormItem', 'on-form-change', this.currentValue);
	                    this.oldFirstValue = this.currentValue[0];
	                }
	            }
	        },
	        setFirstPosition: function setFirstPosition(val) {
	            this.firstPosition = (val - this.min) / (this.max - this.min) * 100;
	        },
	        onSecondButtonDown: function onSecondButtonDown(event) {
	            if (this.disabled) return;
	            event.preventDefault();
	            this.onSecondDragStart(event);
	
	            (0, _dom.on)(window, 'mousemove', this.onSecondDragging);
	            (0, _dom.on)(window, 'mouseup', this.onSecondDragEnd);
	        },
	        onSecondDragStart: function onSecondDragStart(event) {
	            this.secondDragging = true;
	            this.startX = event.clientX;
	            this.startPos = parseInt(this.secondPosition, 10);
	        },
	        onSecondDragging: function onSecondDragging(event) {
	            if (this.secondDragging) {
	                this.$refs.tooltip2.visible = true;
	                this.currentX = event.clientX;
	                var diff = (this.currentX - this.startX) / this.sliderWidth * 100;
	                this.newPos = this.startPos + diff;
	                this.changeSecondPosition(this.newPos);
	            }
	        },
	        onSecondDragEnd: function onSecondDragEnd() {
	            if (this.secondDragging) {
	                this.secondDragging = false;
	                this.$refs.tooltip2.visible = false;
	                this.changeSecondPosition(this.newPos);
	
	                (0, _dom.off)(window, 'mousemove', this.onSecondDragging);
	                (0, _dom.off)(window, 'mouseup', this.onSecondDragEnd);
	            }
	        },
	        changeSecondPosition: function changeSecondPosition(newPos) {
	            if (newPos > 100) {
	                newPos = 100;
	            } else if (newPos < this.firstPosition) {
	                newPos = this.firstPosition;
	            }
	            var lengthPerStep = 100 / ((this.max - this.min) / this.step);
	            var steps = Math.round(newPos / lengthPerStep);
	
	            this.currentValue = [this.currentValue[0], Math.round(steps * lengthPerStep * (this.max - this.min) * 0.01 + this.min)];
	            this.setSecondPosition(this.currentValue[1]);
	            if (!this.secondDragging) {
	                if (this.currentValue[1] !== this.oldSecondValue) {
	                    this.$emit('on-change', this.currentValue);
	                    this.dispatch('FormItem', 'on-form-change', this.currentValue);
	                    this.oldSecondValue = this.currentValue[1];
	                }
	            }
	        },
	        setSecondPosition: function setSecondPosition(val) {
	            this.secondPosition = (val - this.min) / (this.max - this.min) * 100;
	        }
	    },
	    mounted: function mounted() {
	        if (this.range) {
	            var isArray = Array.isArray(this.currentValue);
	            if (!isArray || isArray && this.currentValue.length != 2 || isArray && (isNaN(this.currentValue[0]) || isNaN(this.currentValue[1]))) {
	                this.currentValue = [this.min, this.max];
	            } else {
	                this.updateValue(this.currentValue, true);
	            }
	        } else {
	            if (typeof this.currentValue !== 'number') {
	                this.currentValue = this.min;
	            }
	            this.updateValue(this.currentValue);
	        }
	    }
	};
	
	/***/ }),
	/* 227 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-spin';
	
	exports.default = {
	    name: 'Spin',
	    props: {
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small', 'large']);
	            }
	        },
	        fix: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            showText: false
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.size, !!this.size), (0, _defineProperty3.default)(_ref, prefixCls + '-fix', this.fix), (0, _defineProperty3.default)(_ref, prefixCls + '-show-text', this.showText), _ref)];
	        },
	        mainClasses: function mainClasses() {
	            return prefixCls + '-main';
	        },
	        dotClasses: function dotClasses() {
	            return prefixCls + '-dot';
	        },
	        textClasses: function textClasses() {
	            return prefixCls + '-text';
	        }
	    },
	    mounted: function mounted() {
	        this.showText = this.$slots.default !== undefined;
	    }
	};
	
	/***/ }),
	/* 228 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-steps';
	var iconPrefixCls = 'ivu-icon';
	
	exports.default = {
	    name: 'Step',
	    props: {
	        status: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['wait', 'process', 'finish', 'error']);
	            }
	        },
	        title: {
	            type: String,
	            default: ''
	        },
	        content: {
	            type: String
	        },
	        icon: {
	            type: String
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            stepNumber: '',
	            nextError: false,
	            total: 1,
	            currentStatus: ''
	        };
	    },
	    created: function created() {
	        this.currentStatus = this.status;
	    },
	
	    computed: {
	        wrapClasses: function wrapClasses() {
	            var _ref;
	
	            return [prefixCls + '-item', prefixCls + '-status-' + this.currentStatus, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-custom', !!this.icon), (0, _defineProperty3.default)(_ref, prefixCls + '-next-error', this.nextError), _ref)];
	        },
	        iconClasses: function iconClasses() {
	            var icon = '';
	
	            if (this.icon) {
	                icon = this.icon;
	            } else {
	                if (this.currentStatus == 'finish') {
	                    icon = 'ios-checkmark-empty';
	                } else if (this.currentStatus == 'error') {
	                    icon = 'ios-close-empty';
	                }
	            }
	
	            return [prefixCls + '-icon', '' + iconPrefixCls, (0, _defineProperty3.default)({}, iconPrefixCls + '-' + icon, icon != '')];
	        },
	        styles: function styles() {
	            return {
	                width: 1 / this.total * 100 + '%'
	            };
	        }
	    },
	    watch: {
	        status: function status(val) {
	            this.currentStatus = val;
	            if (this.currentStatus == 'error') {
	                this.$parent.setNextError();
	            }
	        }
	    }
	};
	
	/***/ }),
	/* 229 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-steps';
	
	exports.default = {
	    name: 'Steps',
	    props: {
	        current: {
	            type: Number,
	            default: 0
	        },
	        status: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['wait', 'process', 'finish', 'error']);
	            },
	
	            default: 'process'
	        },
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small']);
	            }
	        },
	        direction: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['horizontal', 'vertical']);
	            },
	
	            default: 'horizontal'
	        }
	    },
	    computed: {
	        classes: function classes() {
	            return ['' + prefixCls, prefixCls + '-' + this.direction, (0, _defineProperty3.default)({}, prefixCls + '-' + this.size, !!this.size)];
	        }
	    },
	    mounted: function mounted() {
	        this.updateChildProps(true);
	        this.setNextError();
	        this.updateCurrent(true);
	    },
	
	    methods: {
	        updateChildProps: function updateChildProps(isInit) {
	            var _this = this;
	
	            var total = this.$children.length;
	            this.$children.forEach(function (child, index) {
	                child.stepNumber = index + 1;
	
	                if (_this.direction === 'horizontal') {
	                    child.total = total;
	                }
	
	                if (!(isInit && child.currentStatus)) {
	                    if (index == _this.current) {
	                        if (_this.status != 'error') {
	                            child.currentStatus = 'process';
	                        }
	                    } else if (index < _this.current) {
	                        child.currentStatus = 'finish';
	                    } else {
	                        child.currentStatus = 'wait';
	                    }
	                }
	
	                if (child.currentStatus != 'error' && index != 0) {
	                    _this.$children[index - 1].nextError = false;
	                }
	            });
	        },
	        setNextError: function setNextError() {
	            var _this2 = this;
	
	            this.$children.forEach(function (child, index) {
	                if (child.currentStatus == 'error' && index != 0) {
	                    _this2.$children[index - 1].nextError = true;
	                }
	            });
	        },
	        updateCurrent: function updateCurrent(isInit) {
	            if (this.current < 0 || this.current >= this.$children.length) {
	                return;
	            }
	            if (isInit) {
	                var current_status = this.$children[this.current].currentStatus;
	                if (!current_status) {
	                    this.$children[this.current].currentStatus = this.status;
	                }
	            } else {
	                this.$children[this.current].currentStatus = this.status;
	            }
	        }
	    },
	    watch: {
	        current: function current() {
	            this.updateChildProps();
	        },
	        status: function status() {
	            this.updateCurrent();
	        }
	    }
	};
	
	/***/ }),
	/* 230 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-switch';
	
	exports.default = {
	    name: 'Switch',
	    mixins: [_emitter2.default],
	    props: {
	        value: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['large', 'small']);
	            }
	        }
	    },
	    data: function data() {
	        return {
	            currentValue: this.value
	        };
	    },
	
	    computed: {
	        wrapClasses: function wrapClasses() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-checked', this.currentValue), (0, _defineProperty3.default)(_ref, prefixCls + '-disabled', this.disabled), (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.size, !!this.size), _ref)];
	        },
	        innerClasses: function innerClasses() {
	            return prefixCls + '-inner';
	        }
	    },
	    methods: {
	        toggle: function toggle() {
	            if (this.disabled) {
	                return false;
	            }
	
	            var checked = !this.currentValue;
	            this.currentValue = checked;
	            this.$emit('input', checked);
	            this.$emit('on-change', checked);
	            this.dispatch('FormItem', 'on-form-change', checked);
	        }
	    },
	    watch: {
	        value: function value(val) {
	            this.currentValue = val;
	        }
	    }
	};
	
	/***/ }),
	/* 231 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _expand = __webpack_require__(65);
	
	var _expand2 = _interopRequireDefault(_expand);
	
	var _icon = __webpack_require__(8);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _checkbox = __webpack_require__(32);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'TableCell',
	    components: { Icon: _icon2.default, Checkbox: _checkbox2.default, Cell: _expand2.default },
	    props: {
	        prefixCls: String,
	        row: Object,
	        column: Object,
	        naturalIndex: Number,
	        index: Number,
	        checked: Boolean,
	        disabled: Boolean,
	        expanded: Boolean,
	        fixed: {
	            type: [Boolean, String],
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            renderType: '',
	            uid: -1,
	            context: this.$parent.$parent.$parent.currentContext
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return [this.prefixCls + '-cell', (_ref = {}, (0, _defineProperty3.default)(_ref, this.prefixCls + '-hidden', !this.fixed && this.column.fixed && (this.column.fixed === 'left' || this.column.fixed === 'right')), (0, _defineProperty3.default)(_ref, this.prefixCls + '-cell-ellipsis', this.column.ellipsis || false), (0, _defineProperty3.default)(_ref, this.prefixCls + '-cell-with-expand', this.renderType === 'expand'), _ref)];
	        },
	        expandCls: function expandCls() {
	            return [this.prefixCls + '-cell-expand', (0, _defineProperty3.default)({}, this.prefixCls + '-cell-expand-expanded', this.expanded)];
	        }
	    },
	    methods: {
	        toggleSelect: function toggleSelect() {
	            this.$parent.$parent.$parent.toggleSelect(this.index);
	        },
	        toggleExpand: function toggleExpand() {
	            this.$parent.$parent.$parent.toggleExpand(this.index);
	        }
	    },
	    created: function created() {
	        if (this.column.type === 'index') {
	            this.renderType = 'index';
	        } else if (this.column.type === 'selection') {
	            this.renderType = 'selection';
	        } else if (this.column.type === 'expand') {
	            this.renderType = 'expand';
	        } else if (this.column.render) {
	            this.renderType = 'render';
	        } else {
	            this.renderType = 'normal';
	        }
	    }
	};
	
	/***/ }),
	/* 232 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _tableTr = __webpack_require__(465);
	
	var _tableTr2 = _interopRequireDefault(_tableTr);
	
	var _cell = __webpack_require__(462);
	
	var _cell2 = _interopRequireDefault(_cell);
	
	var _expand = __webpack_require__(65);
	
	var _expand2 = _interopRequireDefault(_expand);
	
	var _mixin = __webpack_require__(66);
	
	var _mixin2 = _interopRequireDefault(_mixin);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'TableBody',
	    mixins: [_mixin2.default],
	    components: { Cell: _cell2.default, Expand: _expand2.default, TableTr: _tableTr2.default },
	    props: {
	        prefixCls: String,
	        styleObject: Object,
	        columns: Array,
	        data: Array,
	        objData: Object,
	        columnsWidth: Object,
	        fixed: {
	            type: [Boolean, String],
	            default: false
	        }
	    },
	    computed: {
	        expandRender: function expandRender() {
	            var render = function render() {
	                return '';
	            };
	            for (var i = 0; i < this.columns.length; i++) {
	                var column = this.columns[i];
	                if (column.type && column.type === 'expand') {
	                    if (column.render) render = column.render;
	                }
	            }
	            return render;
	        }
	    },
	    methods: {
	        rowChecked: function rowChecked(_index) {
	            return this.objData[_index] && this.objData[_index]._isChecked;
	        },
	        rowDisabled: function rowDisabled(_index) {
	            return this.objData[_index] && this.objData[_index]._isDisabled;
	        },
	        rowExpanded: function rowExpanded(_index) {
	            return this.objData[_index] && this.objData[_index]._isExpanded;
	        },
	        handleMouseIn: function handleMouseIn(_index) {
	            this.$parent.handleMouseIn(_index);
	        },
	        handleMouseOut: function handleMouseOut(_index) {
	            this.$parent.handleMouseOut(_index);
	        },
	        clickCurrentRow: function clickCurrentRow(_index) {
	            this.$parent.clickCurrentRow(_index);
	        },
	        dblclickCurrentRow: function dblclickCurrentRow(_index) {
	            this.$parent.dblclickCurrentRow(_index);
	        }
	    }
	};
	
	/***/ }),
	/* 233 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assign = __webpack_require__(10);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _checkboxGroup = __webpack_require__(89);
	
	var _checkboxGroup2 = _interopRequireDefault(_checkboxGroup);
	
	var _checkbox = __webpack_require__(32);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	var _poptip = __webpack_require__(98);
	
	var _poptip2 = _interopRequireDefault(_poptip);
	
	var _button = __webpack_require__(20);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _mixin = __webpack_require__(66);
	
	var _mixin2 = _interopRequireDefault(_mixin);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'TableHead',
	    mixins: [_mixin2.default, _locale2.default],
	    components: { CheckboxGroup: _checkboxGroup2.default, Checkbox: _checkbox2.default, Poptip: _poptip2.default, iButton: _button2.default },
	    props: {
	        prefixCls: String,
	        styleObject: Object,
	        columns: Array,
	        objData: Object,
	        data: Array,
	        columnsWidth: Object,
	        fixed: {
	            type: [Boolean, String],
	            default: false
	        }
	    },
	    computed: {
	        styles: function styles() {
	            var style = (0, _assign2.default)({}, this.styleObject);
	            var width = this.$parent.bodyHeight === 0 ? parseInt(this.styleObject.width) : parseInt(this.styleObject.width) + this.$parent.scrollBarWidth;
	            style.width = width + 'px';
	            return style;
	        },
	        isSelectAll: function isSelectAll() {
	            var isSelectAll = true;
	            if (!this.data.length) isSelectAll = false;
	            for (var i = 0; i < this.data.length; i++) {
	                if (!this.objData[this.data[i]._index]._isChecked && !this.objData[this.data[i]._index]._isDisabled) {
	                    isSelectAll = false;
	                    break;
	                }
	            }
	
	            return isSelectAll;
	        }
	    },
	    methods: {
	        cellClasses: function cellClasses(column) {
	            return [this.prefixCls + '-cell', (0, _defineProperty3.default)({}, this.prefixCls + '-hidden', !this.fixed && column.fixed && (column.fixed === 'left' || column.fixed === 'right'))];
	        },
	        itemClasses: function itemClasses(column, item) {
	            return [this.prefixCls + '-filter-select-item', (0, _defineProperty3.default)({}, this.prefixCls + '-filter-select-item-selected', column._filterChecked[0] === item.value)];
	        },
	        itemAllClasses: function itemAllClasses(column) {
	            return [this.prefixCls + '-filter-select-item', (0, _defineProperty3.default)({}, this.prefixCls + '-filter-select-item-selected', !column._filterChecked.length)];
	        },
	        renderHeader: function renderHeader(column, $index) {
	            if ('renderHeader' in this.columns[$index]) {
	                return this.columns[$index].renderHeader(column, $index);
	            } else {
	                return column.title || '#';
	            }
	        },
	        selectAll: function selectAll() {
	            var status = !this.isSelectAll;
	            this.$parent.selectAll(status);
	        },
	        handleSort: function handleSort(index, type) {
	            if (this.columns[index]._sortType === type) {
	                type = 'normal';
	            }
	            this.$parent.handleSort(index, type);
	        },
	        handleFilter: function handleFilter(index) {
	            this.$parent.handleFilter(index);
	        },
	        handleSelect: function handleSelect(index, value) {
	            this.$parent.handleFilterSelect(index, value);
	        },
	        handleReset: function handleReset(index) {
	            this.$parent.handleFilterReset(index);
	        },
	        handleFilterHide: function handleFilterHide(index) {
	            this.$parent.handleFilterHide(index);
	        }
	    }
	};
	
	/***/ }),
	/* 234 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    props: {
	        row: Object,
	        prefixCls: String
	    },
	    computed: {
	        objData: function objData() {
	            return this.$parent.objData;
	        }
	    },
	    methods: {
	        rowClasses: function rowClasses(_index) {
	            var _ref;
	
	            return [this.prefixCls + "-row", this.rowClsName(_index), (_ref = {}, (0, _defineProperty3.default)(_ref, this.prefixCls + "-row-highlight", this.objData[_index] && this.objData[_index]._isHighlight), (0, _defineProperty3.default)(_ref, this.prefixCls + "-row-hover", this.objData[_index] && this.objData[_index]._isHover), _ref)];
	        },
	        rowClsName: function rowClsName(_index) {
	            return this.$parent.$parent.rowClassName(this.objData[_index], _index);
	        }
	    }
	};
	
	/***/ }),
	/* 235 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _getIterator2 = __webpack_require__(346);
	
	var _getIterator3 = _interopRequireDefault(_getIterator2);
	
	var _stringify = __webpack_require__(67);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _tableHead = __webpack_require__(464);
	
	var _tableHead2 = _interopRequireDefault(_tableHead);
	
	var _tableBody = __webpack_require__(463);
	
	var _tableBody2 = _interopRequireDefault(_tableBody);
	
	var _assist = __webpack_require__(2);
	
	var _dom = __webpack_require__(27);
	
	var _csv = __webpack_require__(343);
	
	var _csv2 = _interopRequireDefault(_csv);
	
	var _exportCsv = __webpack_require__(336);
	
	var _exportCsv2 = _interopRequireDefault(_exportCsv);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-table';
	
	var rowKey = 1;
	var columnKey = 1;
	
	exports.default = {
	    name: 'Table',
	    mixins: [_locale2.default],
	    components: { tableHead: _tableHead2.default, tableBody: _tableBody2.default },
	    props: {
	        data: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        columns: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small', 'large', 'default']);
	            }
	        },
	        width: {
	            type: [Number, String]
	        },
	        height: {
	            type: [Number, String]
	        },
	        stripe: {
	            type: Boolean,
	            default: false
	        },
	        border: {
	            type: Boolean,
	            default: false
	        },
	        showHeader: {
	            type: Boolean,
	            default: true
	        },
	        highlightRow: {
	            type: Boolean,
	            default: false
	        },
	        rowClassName: {
	            type: Function,
	            default: function _default() {
	                return '';
	            }
	        },
	        context: {
	            type: Object
	        },
	        noDataText: {
	            type: String
	        },
	        noFilteredDataText: {
	            type: String
	        },
	        disabledHover: {
	            type: Boolean
	        }
	    },
	    data: function data() {
	        return {
	            ready: false,
	            tableWidth: 0,
	            columnsWidth: {},
	            prefixCls: prefixCls,
	            compiledUids: [],
	            objData: this.makeObjData(),
	            rebuildData: [],
	            cloneColumns: this.makeColumns(),
	            showSlotHeader: true,
	            showSlotFooter: true,
	            bodyHeight: 0,
	            bodyRealHeight: 0,
	            scrollBarWidth: (0, _assist.getScrollBarSize)(),
	            currentContext: this.context,
	            cloneData: (0, _assist.deepCopy)(this.data) };
	    },
	
	    computed: {
	        localeNoDataText: function localeNoDataText() {
	            if (this.noDataText === undefined) {
	                return this.t('i.table.noDataText');
	            } else {
	                return this.noDataText;
	            }
	        },
	        localeNoFilteredDataText: function localeNoFilteredDataText() {
	            if (this.noFilteredDataText === undefined) {
	                return this.t('i.table.noFilteredDataText');
	            } else {
	                return this.noFilteredDataText;
	            }
	        },
	        wrapClasses: function wrapClasses() {
	            var _ref;
	
	            return [prefixCls + '-wrapper', (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-hide', !this.ready), (0, _defineProperty3.default)(_ref, prefixCls + '-with-header', this.showSlotHeader), (0, _defineProperty3.default)(_ref, prefixCls + '-with-footer', this.showSlotFooter), _ref)];
	        },
	        classes: function classes() {
	            var _ref2;
	
	            return ['' + prefixCls, (_ref2 = {}, (0, _defineProperty3.default)(_ref2, prefixCls + '-' + this.size, !!this.size), (0, _defineProperty3.default)(_ref2, prefixCls + '-border', this.border), (0, _defineProperty3.default)(_ref2, prefixCls + '-stripe', this.stripe), (0, _defineProperty3.default)(_ref2, prefixCls + '-with-fixed-top', !!this.height), _ref2)];
	        },
	        styles: function styles() {
	            var style = {};
	            if (this.height) {
	                var height = this.isLeftFixed || this.isRightFixed ? parseInt(this.height) + this.scrollBarWidth : parseInt(this.height);
	                style.height = height + 'px';
	            }
	            if (this.width) style.width = this.width + 'px';
	            return style;
	        },
	        tableStyle: function tableStyle() {
	            var style = {};
	            if (this.tableWidth !== 0) {
	                var width = '';
	                if (this.bodyHeight === 0) {
	                    width = this.tableWidth;
	                } else {
	                    if (this.bodyHeight > this.bodyRealHeight) {
	                        width = this.tableWidth;
	                    } else {
	                        width = this.tableWidth - this.scrollBarWidth;
	                    }
	                }
	
	                style.width = width + 'px';
	            }
	            return style;
	        },
	        fixedTableStyle: function fixedTableStyle() {
	            var style = {};
	            var width = 0;
	            this.leftFixedColumns.forEach(function (col) {
	                if (col.fixed && col.fixed === 'left') width += col._width;
	            });
	            style.width = width + 'px';
	            return style;
	        },
	        fixedRightTableStyle: function fixedRightTableStyle() {
	            var style = {};
	            var width = 0;
	            this.rightFixedColumns.forEach(function (col) {
	                if (col.fixed && col.fixed === 'right') width += col._width;
	            });
	            width += this.scrollBarWidth;
	            style.width = width + 'px';
	            return style;
	        },
	        bodyStyle: function bodyStyle() {
	            var style = {};
	            if (this.bodyHeight !== 0) {
	                var height = this.isLeftFixed || this.isRightFixed ? this.bodyHeight + this.scrollBarWidth : this.bodyHeight;
	                style.height = height + 'px';
	            }
	            return style;
	        },
	        fixedBodyStyle: function fixedBodyStyle() {
	            var style = {};
	            if (this.bodyHeight !== 0) {
	                var height = this.bodyHeight + this.scrollBarWidth - 1;
	
	                if (this.width && this.width < this.tableWidth) {
	                    height = this.bodyHeight;
	                }
	
	                style.height = this.scrollBarWidth > 0 ? height + 'px' : height - 1 + 'px';
	            }
	            return style;
	        },
	        leftFixedColumns: function leftFixedColumns() {
	            var left = [];
	            var other = [];
	            this.cloneColumns.forEach(function (col) {
	                if (col.fixed && col.fixed === 'left') {
	                    left.push(col);
	                } else {
	                    other.push(col);
	                }
	            });
	            return left.concat(other);
	        },
	        rightFixedColumns: function rightFixedColumns() {
	            var right = [];
	            var other = [];
	            this.cloneColumns.forEach(function (col) {
	                if (col.fixed && col.fixed === 'right') {
	                    right.push(col);
	                } else {
	                    other.push(col);
	                }
	            });
	            return right.concat(other);
	        },
	        isLeftFixed: function isLeftFixed() {
	            return this.columns.some(function (col) {
	                return col.fixed && col.fixed === 'left';
	            });
	        },
	        isRightFixed: function isRightFixed() {
	            return this.columns.some(function (col) {
	                return col.fixed && col.fixed === 'right';
	            });
	        }
	    },
	    methods: {
	        rowClsName: function rowClsName(index) {
	            return this.rowClassName(this.data[index], index);
	        },
	        handleResize: function handleResize() {
	            var _this = this;
	
	            this.$nextTick(function () {
	                var allWidth = !_this.columns.some(function (cell) {
	                    return !cell.width;
	                });
	                if (allWidth) {
	                    _this.tableWidth = _this.columns.map(function (cell) {
	                        return cell.width;
	                    }).reduce(function (a, b) {
	                        return a + b;
	                    });
	                } else {
	                    _this.tableWidth = parseInt((0, _assist.getStyle)(_this.$el, 'width')) - 1;
	                }
	                _this.columnsWidth = {};
	                _this.$nextTick(function () {
	                    var columnsWidth = {};
	                    var autoWidthIndex = -1;
	                    if (allWidth) autoWidthIndex = _this.cloneColumns.findIndex(function (cell) {
	                        return !cell.width;
	                    });
	
	                    if (_this.data.length) {
	                        var $td = _this.$refs.tbody.$el.querySelectorAll('tbody tr')[0].querySelectorAll('td');
	                        for (var i = 0; i < $td.length; i++) {
	                            var column = _this.cloneColumns[i];
	
	                            var width = parseInt((0, _assist.getStyle)($td[i], 'width'));
	                            if (i === autoWidthIndex) {
	                                width = parseInt((0, _assist.getStyle)($td[i], 'width')) - 1;
	                            }
	                            if (column.width) width = column.width;
	
	                            _this.cloneColumns[i]._width = width;
	
	                            columnsWidth[column._index] = {
	                                width: width
	                            };
	                        }
	                        _this.columnsWidth = columnsWidth;
	                    }
	                });
	
	                _this.bodyRealHeight = parseInt((0, _assist.getStyle)(_this.$refs.tbody.$el, 'height'));
	            });
	        },
	        handleMouseIn: function handleMouseIn(_index) {
	            if (this.disabledHover) return;
	            if (this.objData[_index]._isHover) return;
	            this.objData[_index]._isHover = true;
	        },
	        handleMouseOut: function handleMouseOut(_index) {
	            if (this.disabledHover) return;
	            this.objData[_index]._isHover = false;
	        },
	        highlightCurrentRow: function highlightCurrentRow(_index) {
	            if (!this.highlightRow || this.objData[_index]._isHighlight) return;
	
	            var oldIndex = -1;
	            for (var i in this.objData) {
	                if (this.objData[i]._isHighlight) {
	                    oldIndex = parseInt(i);
	                    this.objData[i]._isHighlight = false;
	                }
	            }
	            this.objData[_index]._isHighlight = true;
	            var oldData = oldIndex < 0 ? null : JSON.parse((0, _stringify2.default)(this.cloneData[oldIndex]));
	            this.$emit('on-current-change', JSON.parse((0, _stringify2.default)(this.cloneData[_index])), oldData);
	        },
	        clickCurrentRow: function clickCurrentRow(_index) {
	            this.highlightCurrentRow(_index);
	            this.$emit('on-row-click', JSON.parse((0, _stringify2.default)(this.cloneData[_index])));
	        },
	        dblclickCurrentRow: function dblclickCurrentRow(_index) {
	            this.highlightCurrentRow(_index);
	            this.$emit('on-row-dblclick', JSON.parse((0, _stringify2.default)(this.cloneData[_index])));
	        },
	        getSelection: function getSelection() {
	            var selectionIndexes = [];
	            for (var i in this.objData) {
	                if (this.objData[i]._isChecked) selectionIndexes.push(parseInt(i));
	            }
	            return JSON.parse((0, _stringify2.default)(this.data.filter(function (data, index) {
	                return selectionIndexes.indexOf(index) > -1;
	            })));
	        },
	        toggleSelect: function toggleSelect(_index) {
	            var data = {};
	
	            for (var i in this.objData) {
	                if (parseInt(i) === _index) {
	                    data = this.objData[i];
	                }
	            }
	            var status = !data._isChecked;
	
	            this.objData[_index]._isChecked = status;
	
	            var selection = this.getSelection();
	            this.$emit(status ? 'on-select' : 'on-select-cancel', selection, JSON.parse((0, _stringify2.default)(this.data[_index])));
	            this.$emit('on-selection-change', selection);
	        },
	        toggleExpand: function toggleExpand(_index) {
	            var data = {};
	
	            for (var i in this.objData) {
	                if (parseInt(i) === _index) {
	                    data = this.objData[i];
	                }
	            }
	            var status = !data._isExpanded;
	            this.objData[_index]._isExpanded = status;
	            this.$emit('on-expand', JSON.parse((0, _stringify2.default)(this.cloneData[_index])), status);
	        },
	        selectAll: function selectAll(status) {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;
	
	            try {
	                for (var _iterator = (0, _getIterator3.default)(this.rebuildData), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var data = _step.value;
	
	                    if (this.objData[data._index]._isDisabled) {
	                        continue;
	                    } else {
	                        this.objData[data._index]._isChecked = status;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	
	            var selection = this.getSelection();
	            if (status) {
	                this.$emit('on-select-all', selection);
	            }
	            this.$emit('on-selection-change', selection);
	        },
	        fixedHeader: function fixedHeader() {
	            var _this2 = this;
	
	            if (this.height) {
	                this.$nextTick(function () {
	                    var titleHeight = parseInt((0, _assist.getStyle)(_this2.$refs.title, 'height')) || 0;
	                    var headerHeight = parseInt((0, _assist.getStyle)(_this2.$refs.header, 'height')) || 0;
	                    var footerHeight = parseInt((0, _assist.getStyle)(_this2.$refs.footer, 'height')) || 0;
	                    _this2.bodyHeight = _this2.height - titleHeight - headerHeight - footerHeight;
	                });
	            } else {
	                this.bodyHeight = 0;
	            }
	        },
	        hideColumnFilter: function hideColumnFilter() {
	            this.cloneColumns.forEach(function (col) {
	                return col._filterVisible = false;
	            });
	        },
	        handleBodyScroll: function handleBodyScroll(event) {
	            if (this.showHeader) this.$refs.header.scrollLeft = event.target.scrollLeft;
	            if (this.isLeftFixed) this.$refs.fixedBody.scrollTop = event.target.scrollTop;
	            if (this.isRightFixed) this.$refs.fixedRightBody.scrollTop = event.target.scrollTop;
	            this.hideColumnFilter();
	        },
	        handleMouseWheel: function handleMouseWheel(event) {
	            var deltaX = event.deltaX;
	            var $body = this.$refs.body;
	
	            if (deltaX > 0) {
	                $body.scrollLeft = $body.scrollLeft + 10;
	            } else {
	                $body.scrollLeft = $body.scrollLeft - 10;
	            }
	        },
	        sortData: function sortData(data, type, index) {
	            var _this3 = this;
	
	            var key = this.cloneColumns[index].key;
	            data.sort(function (a, b) {
	                if (_this3.cloneColumns[index].sortMethod) {
	                    return _this3.cloneColumns[index].sortMethod(a[key], b[key], type);
	                } else {
	                    if (type === 'asc') {
	                        return a[key] > b[key] ? 1 : -1;
	                    } else if (type === 'desc') {
	                        return a[key] < b[key] ? 1 : -1;
	                    }
	                }
	            });
	            return data;
	        },
	        handleSort: function handleSort(index, type) {
	            this.cloneColumns.forEach(function (col) {
	                return col._sortType = 'normal';
	            });
	
	            var key = this.cloneColumns[index].key;
	            if (this.cloneColumns[index].sortable !== 'custom') {
	                if (type === 'normal') {
	                    this.rebuildData = this.makeDataWithFilter();
	                } else {
	                    this.rebuildData = this.sortData(this.rebuildData, type, index);
	                }
	            }
	            this.cloneColumns[index]._sortType = type;
	
	            this.$emit('on-sort-change', {
	                column: JSON.parse((0, _stringify2.default)(this.columns[this.cloneColumns[index]._index])),
	                key: key,
	                order: type
	            });
	        },
	        handleFilterHide: function handleFilterHide(index) {
	            if (!this.cloneColumns[index]._isFiltered) this.cloneColumns[index]._filterChecked = [];
	        },
	        filterData: function filterData(data, column) {
	            return data.filter(function (row) {
	                if (typeof column.filterRemote === 'function') return true;
	
	                var status = !column._filterChecked.length;
	                for (var i = 0; i < column._filterChecked.length; i++) {
	                    status = column.filterMethod(column._filterChecked[i], row);
	                    if (status) break;
	                }
	                return status;
	            });
	        },
	        filterOtherData: function filterOtherData(data, index) {
	            var _this4 = this;
	
	            var column = this.cloneColumns[index];
	            if (typeof column.filterRemote === 'function') {
	                column.filterRemote.call(this.$parent, column._filterChecked, column.key, column);
	            }
	
	            this.cloneColumns.forEach(function (col, colIndex) {
	                if (colIndex !== index) {
	                    data = _this4.filterData(data, col);
	                }
	            });
	            return data;
	        },
	        handleFilter: function handleFilter(index) {
	            var column = this.cloneColumns[index];
	            var filterData = this.makeDataWithSort();
	
	            filterData = this.filterOtherData(filterData, index);
	            this.rebuildData = this.filterData(filterData, column);
	
	            this.cloneColumns[index]._isFiltered = true;
	            this.cloneColumns[index]._filterVisible = false;
	        },
	        handleFilterSelect: function handleFilterSelect(index, value) {
	            this.cloneColumns[index]._filterChecked = [value];
	            this.handleFilter(index);
	        },
	        handleFilterReset: function handleFilterReset(index) {
	            this.cloneColumns[index]._isFiltered = false;
	            this.cloneColumns[index]._filterVisible = false;
	            this.cloneColumns[index]._filterChecked = [];
	
	            var filterData = this.makeDataWithSort();
	            filterData = this.filterOtherData(filterData, index);
	            this.rebuildData = filterData;
	        },
	        makeData: function makeData() {
	            var data = (0, _assist.deepCopy)(this.data);
	            data.forEach(function (row, index) {
	                row._index = index;
	                row._rowKey = rowKey++;
	            });
	            return data;
	        },
	        makeDataWithSort: function makeDataWithSort() {
	            var data = this.makeData();
	            var sortType = 'normal';
	            var sortIndex = -1;
	            var isCustom = false;
	
	            for (var i = 0; i < this.cloneColumns.length; i++) {
	                if (this.cloneColumns[i]._sortType !== 'normal') {
	                    sortType = this.cloneColumns[i]._sortType;
	                    sortIndex = i;
	                    isCustom = this.cloneColumns[i].sortable === 'custom';
	                    break;
	                }
	            }
	            if (sortType !== 'normal' && !isCustom) data = this.sortData(data, sortType, sortIndex);
	            return data;
	        },
	        makeDataWithFilter: function makeDataWithFilter() {
	            var _this5 = this;
	
	            var data = this.makeData();
	            this.cloneColumns.forEach(function (col) {
	                return data = _this5.filterData(data, col);
	            });
	            return data;
	        },
	        makeDataWithSortAndFilter: function makeDataWithSortAndFilter() {
	            var _this6 = this;
	
	            var data = this.makeDataWithSort();
	            this.cloneColumns.forEach(function (col) {
	                return data = _this6.filterData(data, col);
	            });
	            return data;
	        },
	        makeObjData: function makeObjData() {
	            var data = {};
	            this.data.forEach(function (row, index) {
	                var newRow = (0, _assist.deepCopy)(row);
	                newRow._isHover = false;
	                if (newRow._disabled) {
	                    newRow._isDisabled = newRow._disabled;
	                } else {
	                    newRow._isDisabled = false;
	                }
	                if (newRow._checked) {
	                    newRow._isChecked = newRow._checked;
	                } else {
	                    newRow._isChecked = false;
	                }
	                if (newRow._expanded) {
	                    newRow._isExpanded = newRow._expanded;
	                } else {
	                    newRow._isExpanded = false;
	                }
	                if (newRow._highlight) {
	                    newRow._isHighlight = newRow._highlight;
	                } else {
	                    newRow._isHighlight = false;
	                }
	                data[index] = newRow;
	            });
	            return data;
	        },
	        makeColumns: function makeColumns() {
	            var columns = (0, _assist.deepCopy)(this.columns);
	            var left = [];
	            var right = [];
	            var center = [];
	
	            columns.forEach(function (column, index) {
	                column._index = index;
	                column._columnKey = columnKey++;
	                column._width = column.width ? column.width : '';
	                column._sortType = 'normal';
	                column._filterVisible = false;
	                column._isFiltered = false;
	                column._filterChecked = [];
	
	                if ('filterMultiple' in column) {
	                    column._filterMultiple = column.filterMultiple;
	                } else {
	                    column._filterMultiple = true;
	                }
	                if ('filteredValue' in column) {
	                    column._filterChecked = column.filteredValue;
	                    column._isFiltered = true;
	                }
	
	                if (column.fixed && column.fixed === 'left') {
	                    left.push(column);
	                } else if (column.fixed && column.fixed === 'right') {
	                    right.push(column);
	                } else {
	                    center.push(column);
	                }
	            });
	            return left.concat(center).concat(right);
	        },
	        exportCsv: function exportCsv(params) {
	            if (params.filename) {
	                if (params.filename.indexOf('.csv') === -1) {
	                    params.filename += '.csv';
	                }
	            } else {
	                params.filename = 'table.csv';
	            }
	
	            var columns = [];
	            var datas = [];
	            if (params.columns && params.data) {
	                columns = params.columns;
	                datas = params.data;
	            } else {
	                columns = this.columns;
	                if (!('original' in params)) params.original = true;
	                datas = params.original ? this.data : this.rebuildData;
	            }
	
	            var noHeader = false;
	            if ('noHeader' in params) noHeader = params.noHeader;
	
	            var data = (0, _csv2.default)(columns, datas, ',', noHeader);
	            _exportCsv2.default.download(params.filename, data);
	        }
	    },
	    created: function created() {
	        if (!this.context) this.currentContext = this.$parent;
	        this.showSlotHeader = this.$slots.header !== undefined;
	        this.showSlotFooter = this.$slots.footer !== undefined;
	        this.rebuildData = this.makeDataWithSortAndFilter();
	    },
	    mounted: function mounted() {
	        var _this7 = this;
	
	        this.handleResize();
	        this.fixedHeader();
	        this.$nextTick(function () {
	            return _this7.ready = true;
	        });
	
	        (0, _dom.on)(window, 'resize', this.handleResize);
	        this.$on('on-visible-change', function (val) {
	            if (val) {
	                _this7.handleResize();
	                _this7.fixedHeader();
	            }
	        });
	    },
	    beforeDestroy: function beforeDestroy() {
	        (0, _dom.off)(window, 'resize', this.handleResize);
	    },
	
	    watch: {
	        data: {
	            handler: function handler() {
	                var _this8 = this;
	
	                this.objData = this.makeObjData();
	                this.rebuildData = this.makeDataWithSortAndFilter();
	                this.handleResize();
	
	                setTimeout(function () {
	                    _this8.cloneData = (0, _assist.deepCopy)(_this8.data);
	                }, 0);
	            },
	
	            deep: true
	        },
	        columns: {
	            handler: function handler() {
	                this.cloneColumns = this.makeColumns();
	                this.rebuildData = this.makeDataWithSortAndFilter();
	                this.handleResize();
	            },
	
	            deep: true
	        },
	        height: function height() {
	            this.fixedHeader();
	        }
	    }
	};
	
	/***/ }),
	/* 236 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	
	var prefixCls = 'ivu-tabs-tabpane';
	
	exports.default = {
	    name: 'TabPane',
	    props: {
	        name: {
	            type: String
	        },
	        label: {
	            type: [String, Function],
	            default: ''
	        },
	        icon: {
	            type: String
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        closable: {
	            type: Boolean,
	            default: null
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            show: true,
	            currentName: this.name
	        };
	    },
	
	    methods: {
	        updateNav: function updateNav() {
	            this.$parent.updateNav();
	        }
	    },
	    watch: {
	        name: function name(val) {
	            this.currentName = val;
	            this.updateNav();
	        },
	        label: function label() {
	            this.updateNav();
	        },
	        icon: function icon() {
	            this.updateNav();
	        },
	        disabled: function disabled() {
	            this.updateNav();
	        }
	    },
	    mounted: function mounted() {
	        this.updateNav();
	    }
	};
	
	/***/ }),
	/* 237 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof2 = __webpack_require__(11);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _icon = __webpack_require__(8);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _render = __webpack_require__(331);
	
	var _render2 = _interopRequireDefault(_render);
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-tabs';
	
	exports.default = {
	    name: 'Tabs',
	    mixins: [_emitter2.default],
	    components: { Icon: _icon2.default, Render: _render2.default },
	    props: {
	        value: {
	            type: [String, Number]
	        },
	        type: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['line', 'card']);
	            },
	
	            default: 'line'
	        },
	        size: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['small', 'default']);
	            },
	
	            default: 'default'
	        },
	        animated: {
	            type: Boolean,
	            default: true
	        },
	        closable: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            navList: [],
	            barWidth: 0,
	            barOffset: 0,
	            activeKey: this.value,
	            showSlot: false
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-card', this.type === 'card'), (0, _defineProperty3.default)(_ref, prefixCls + '-mini', this.size === 'small' && this.type === 'line'), (0, _defineProperty3.default)(_ref, prefixCls + '-no-animation', !this.animated), _ref)];
	        },
	        contentClasses: function contentClasses() {
	            return [prefixCls + '-content', (0, _defineProperty3.default)({}, prefixCls + '-content-animated', this.animated)];
	        },
	        barClasses: function barClasses() {
	            return [prefixCls + '-ink-bar', (0, _defineProperty3.default)({}, prefixCls + '-ink-bar-animated', this.animated)];
	        },
	        contentStyle: function contentStyle() {
	            var _this = this;
	
	            var x = this.navList.findIndex(function (nav) {
	                return nav.name === _this.activeKey;
	            });
	            var p = x === 0 ? '0%' : '-' + x + '00%';
	
	            var style = {};
	            if (x > -1) {
	                style = {
	                    transform: 'translateX(' + p + ') translateZ(0px)'
	                };
	            }
	            return style;
	        },
	        barStyle: function barStyle() {
	            var style = {
	                display: 'none',
	                width: this.barWidth + 'px'
	            };
	            if (this.type === 'line') style.display = 'block';
	            if (this.animated) {
	                style.transform = 'translate3d(' + this.barOffset + 'px, 0px, 0px)';
	            } else {
	                style.left = this.barOffset + 'px';
	            }
	
	            return style;
	        }
	    },
	    methods: {
	        getTabs: function getTabs() {
	            return this.$children.filter(function (item) {
	                return item.$options.name === 'TabPane';
	            });
	        },
	        updateNav: function updateNav() {
	            var _this2 = this;
	
	            this.navList = [];
	            this.getTabs().forEach(function (pane, index) {
	                _this2.navList.push({
	                    labelType: (0, _typeof3.default)(pane.label),
	                    label: pane.label,
	                    icon: pane.icon || '',
	                    name: pane.currentName || index,
	                    disabled: pane.disabled,
	                    closable: pane.closable
	                });
	                if (!pane.currentName) pane.currentName = index;
	                if (index === 0) {
	                    if (!_this2.activeKey) _this2.activeKey = pane.currentName || index;
	                }
	            });
	            this.updateStatus();
	            this.updateBar();
	        },
	        updateBar: function updateBar() {
	            var _this3 = this;
	
	            this.$nextTick(function () {
	                var index = _this3.navList.findIndex(function (nav) {
	                    return nav.name === _this3.activeKey;
	                });
	                var prevTabs = _this3.$refs.nav.querySelectorAll('.' + prefixCls + '-tab');
	                var tab = prevTabs[index];
	                _this3.barWidth = parseFloat((0, _assist.getStyle)(tab, 'width'));
	
	                if (index > 0) {
	                    var offset = 0;
	                    var gutter = _this3.size === 'small' ? 0 : 16;
	                    for (var i = 0; i < index; i++) {
	                        offset += parseFloat((0, _assist.getStyle)(prevTabs[i], 'width')) + gutter;
	                    }
	
	                    _this3.barOffset = offset;
	                } else {
	                    _this3.barOffset = 0;
	                }
	            });
	        },
	        updateStatus: function updateStatus() {
	            var _this4 = this;
	
	            var tabs = this.getTabs();
	            tabs.forEach(function (tab) {
	                return tab.show = tab.currentName === _this4.activeKey || _this4.animated;
	            });
	        },
	        tabCls: function tabCls(item) {
	            var _ref4;
	
	            return [prefixCls + '-tab', (_ref4 = {}, (0, _defineProperty3.default)(_ref4, prefixCls + '-tab-disabled', item.disabled), (0, _defineProperty3.default)(_ref4, prefixCls + '-tab-active', item.name === this.activeKey), _ref4)];
	        },
	        handleChange: function handleChange(index) {
	            var nav = this.navList[index];
	            if (nav.disabled) return;
	            this.activeKey = nav.name;
	            this.$emit('input', nav.name);
	            this.$emit('on-click', nav.name);
	        },
	        handleRemove: function handleRemove(index) {
	            var tabs = this.getTabs();
	            var tab = tabs[index];
	            tab.$destroy();
	
	            if (tab.currentName === this.activeKey) {
	                var newTabs = this.getTabs();
	                var activeKey = -1;
	
	                if (newTabs.length) {
	                    var leftNoDisabledTabs = tabs.filter(function (item, itemIndex) {
	                        return !item.disabled && itemIndex < index;
	                    });
	                    var rightNoDisabledTabs = tabs.filter(function (item, itemIndex) {
	                        return !item.disabled && itemIndex > index;
	                    });
	
	                    if (rightNoDisabledTabs.length) {
	                        activeKey = rightNoDisabledTabs[0].currentName;
	                    } else if (leftNoDisabledTabs.length) {
	                        activeKey = leftNoDisabledTabs[leftNoDisabledTabs.length - 1].currentName;
	                    } else {
	                        activeKey = newTabs[0].currentName;
	                    }
	                }
	                this.activeKey = activeKey;
	                this.$emit('input', activeKey);
	            }
	            this.$emit('on-tab-remove', tab.currentName);
	            this.updateNav();
	        },
	        showClose: function showClose(item) {
	            if (this.type === 'card') {
	                if (item.closable !== null) {
	                    return item.closable;
	                } else {
	                    return this.closable;
	                }
	            } else {
	                return false;
	            }
	        }
	    },
	    watch: {
	        value: function value(val) {
	            this.activeKey = val;
	        },
	        activeKey: function activeKey() {
	            this.updateBar();
	            this.updateStatus();
	            this.broadcast('Table', 'on-visible-change', true);
	        }
	    },
	    mounted: function mounted() {
	        this.showSlot = this.$slots.extra !== undefined;
	    }
	};
	
	/***/ }),
	/* 238 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _icon = __webpack_require__(15);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-tag';
	
	exports.default = {
	    name: 'Tag',
	    components: { Icon: _icon2.default },
	    props: {
	        closable: {
	            type: Boolean,
	            default: false
	        },
	        color: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['blue', 'green', 'red', 'yellow']);
	            }
	        },
	        type: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['border', 'dot']);
	            }
	        },
	        name: {
	            type: [String, Number]
	        }
	    },
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.color, !!this.color), (0, _defineProperty3.default)(_ref, prefixCls + '-' + this.type, !!this.type), (0, _defineProperty3.default)(_ref, prefixCls + '-closable', this.closable), _ref)];
	        },
	        textClasses: function textClasses() {
	            return prefixCls + '-text';
	        },
	        dotClasses: function dotClasses() {
	            return prefixCls + '-dot-inner';
	        },
	        showDot: function showDot() {
	            return !!this.type && this.type === 'dot';
	        }
	    },
	    methods: {
	        close: function close(event) {
	            if (this.name === undefined) {
	                this.$emit('on-close', event);
	            } else {
	                this.$emit('on-close', event, this.name);
	            }
	        }
	    }
	};
	
	/***/ }),
	/* 239 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-timeline';
	
	exports.default = {
	    name: 'TimelineItem',
	    props: {
	        color: {
	            type: String,
	            default: 'blue'
	        }
	    },
	    data: function data() {
	        return {
	            dot: false
	        };
	    },
	    mounted: function mounted() {
	        this.dot = this.$refs.dot.innerHTML.length ? true : false;
	    },
	
	    computed: {
	        itemClasses: function itemClasses() {
	            return prefixCls + '-item';
	        },
	        tailClasses: function tailClasses() {
	            return prefixCls + '-item-tail';
	        },
	        headClasses: function headClasses() {
	            var _ref;
	
	            return [prefixCls + '-item-head', (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-item-head-custom', this.dot), (0, _defineProperty3.default)(_ref, prefixCls + '-item-head-' + this.color, this.headColorShow), _ref)];
	        },
	        headColorShow: function headColorShow() {
	            return this.color == 'blue' || this.color == 'red' || this.color == 'green';
	        },
	        customColor: function customColor() {
	            var style = {};
	            if (this.color) {
	                if (!this.headColorShow) {
	                    style = {
	                        'color': this.color,
	                        'border-color': this.color
	                    };
	                }
	            }
	
	            return style;
	        },
	        contentClasses: function contentClasses() {
	            return prefixCls + '-item-content';
	        }
	    }
	};
	
	/***/ }),
	/* 240 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-timeline';
	
	exports.default = {
	    name: 'Timeline',
	    props: {
	        pending: {
	            type: Boolean,
	            default: false
	        }
	    },
	    computed: {
	        classes: function classes() {
	            return ['' + prefixCls, (0, _defineProperty3.default)({}, prefixCls + '-pending', this.pending)];
	        }
	    }
	};
	
	/***/ }),
	/* 241 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _popper = __webpack_require__(63);
	
	var _popper2 = _interopRequireDefault(_popper);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-tooltip';
	
	exports.default = {
	    name: 'Tooltip',
	    mixins: [_popper2.default],
	    props: {
	        placement: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end']);
	            },
	
	            default: 'bottom'
	        },
	        content: {
	            type: [String, Number],
	            default: ''
	        },
	        delay: {
	            type: Number,
	            default: 0
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        controlled: {
	            type: Boolean,
	            default: false
	        },
	        always: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls
	        };
	    },
	
	    methods: {
	        handleShowPopper: function handleShowPopper() {
	            var _this = this;
	
	            this.timeout = setTimeout(function () {
	                _this.visible = true;
	            }, this.delay);
	        },
	        handleClosePopper: function handleClosePopper() {
	            clearTimeout(this.timeout);
	            if (!this.controlled) {
	                this.visible = false;
	            }
	        }
	    }
	};
	
	/***/ }),
	/* 242 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _search = __webpack_require__(474);
	
	var _search2 = _interopRequireDefault(_search);
	
	var _checkbox = __webpack_require__(32);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'TransferList',
	    components: { Search: _search2.default, Checkbox: _checkbox2.default },
	    props: {
	        prefixCls: String,
	        data: Array,
	        renderFormat: Function,
	        checkedKeys: Array,
	        listStyle: Object,
	        title: [String, Number],
	        filterable: Boolean,
	        filterPlaceholder: String,
	        filterMethod: Function,
	        notFoundText: String,
	        validKeysCount: Number
	    },
	    data: function data() {
	        return {
	            showItems: [],
	            query: '',
	            showFooter: true
	        };
	    },
	
	    watch: {
	        data: function data() {
	            this.updateFilteredData();
	        }
	    },
	    computed: {
	        classes: function classes() {
	            return ['' + this.prefixCls, (0, _defineProperty3.default)({}, this.prefixCls + '-with-footer', this.showFooter)];
	        },
	        bodyClasses: function bodyClasses() {
	            var _ref2;
	
	            return [this.prefixCls + '-body', (_ref2 = {}, (0, _defineProperty3.default)(_ref2, this.prefixCls + '-body-with-search', this.filterable), (0, _defineProperty3.default)(_ref2, this.prefixCls + '-body-with-footer', this.showFooter), _ref2)];
	        },
	        count: function count() {
	            var validKeysCount = this.validKeysCount;
	            return (validKeysCount > 0 ? validKeysCount + '/' : '') + ('' + this.data.length);
	        },
	        checkedAll: function checkedAll() {
	            return this.data.filter(function (data) {
	                return !data.disabled;
	            }).length === this.validKeysCount && this.validKeysCount !== 0;
	        },
	        checkedAllDisabled: function checkedAllDisabled() {
	            return this.data.filter(function (data) {
	                return !data.disabled;
	            }).length <= 0;
	        },
	        filterData: function filterData() {
	            var _this = this;
	
	            return this.showItems.filter(function (item) {
	                return _this.filterMethod(item, _this.query);
	            });
	        }
	    },
	    methods: {
	        itemClasses: function itemClasses(item) {
	            return [this.prefixCls + '-content-item', (0, _defineProperty3.default)({}, this.prefixCls + '-content-item-disabled', item.disabled)];
	        },
	        showLabel: function showLabel(item) {
	            return this.renderFormat(item);
	        },
	        isCheck: function isCheck(item) {
	            return this.checkedKeys.some(function (key) {
	                return key === item.key;
	            });
	        },
	        select: function select(item) {
	            if (item.disabled) return;
	            var index = this.checkedKeys.indexOf(item.key);
	            index > -1 ? this.checkedKeys.splice(index, 1) : this.checkedKeys.push(item.key);
	        },
	        updateFilteredData: function updateFilteredData() {
	            this.showItems = this.data;
	        },
	        toggleSelectAll: function toggleSelectAll(status) {
	            var _this2 = this;
	
	            var keys = status ? this.data.filter(function (data) {
	                return !data.disabled || _this2.checkedKeys.indexOf(data.key) > -1;
	            }).map(function (data) {
	                return data.key;
	            }) : this.data.filter(function (data) {
	                return data.disabled && _this2.checkedKeys.indexOf(data.key) > -1;
	            }).map(function (data) {
	                return data.key;
	            });
	            this.$emit('on-checked-keys-change', keys);
	        },
	        handleQueryClear: function handleQueryClear() {
	            this.query = '';
	        },
	        handleQueryChange: function handleQueryChange(val) {
	            this.query = val;
	        }
	    },
	    created: function created() {
	        this.updateFilteredData();
	    },
	    mounted: function mounted() {
	        this.showFooter = this.$slots.default !== undefined;
	    }
	};
	
	/***/ }),
	/* 243 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _button = __webpack_require__(20);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _icon = __webpack_require__(8);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'Operation',
	    components: { iButton: _button2.default, Icon: _icon2.default },
	    props: {
	        prefixCls: String,
	        operations: Array,
	        leftActive: Boolean,
	        rightActive: Boolean
	    },
	    methods: {
	        moveToLeft: function moveToLeft() {
	            this.$parent.moveTo('left');
	        },
	        moveToRight: function moveToRight() {
	            this.$parent.moveTo('right');
	        }
	    }
	};
	
	/***/ }),
	/* 244 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _input = __webpack_require__(41);
	
	var _input2 = _interopRequireDefault(_input);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    name: 'Search',
	    components: { iInput: _input2.default },
	    props: {
	        prefixCls: String,
	        placeholder: String,
	        query: String
	    },
	    data: function data() {
	        return {
	            currentQuery: this.query
	        };
	    },
	
	    watch: {
	        query: function query(val) {
	            this.currentQuery = val;
	        },
	        currentQuery: function currentQuery(val) {
	            this.$emit('on-query-change', val);
	        }
	    },
	    computed: {
	        icon: function icon() {
	            return this.query === '' ? 'ios-search' : 'ios-close';
	        }
	    },
	    methods: {
	        handleClick: function handleClick() {
	            if (this.currentQuery === '') return;
	            this.currentQuery = '';
	            this.$emit('on-query-clear');
	        }
	    }
	};
	
	/***/ }),
	/* 245 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _toConsumableArray2 = __webpack_require__(43);
	
	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);
	
	var _list = __webpack_require__(472);
	
	var _list2 = _interopRequireDefault(_list);
	
	var _operation = __webpack_require__(473);
	
	var _operation2 = _interopRequireDefault(_operation);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-transfer';
	
	exports.default = {
	    name: 'Transfer',
	    mixins: [_emitter2.default, _locale2.default],
	    render: function render(h) {
	
	        function cloneVNode(vnode) {
	            var clonedChildren = vnode.children && vnode.children.map(function (vnode) {
	                return cloneVNode(vnode);
	            });
	            var cloned = h(vnode.tag, vnode.data, clonedChildren);
	            cloned.text = vnode.text;
	            cloned.isComment = vnode.isComment;
	            cloned.componentOptions = vnode.componentOptions;
	            cloned.elm = vnode.elm;
	            cloned.context = vnode.context;
	            cloned.ns = vnode.ns;
	            cloned.isStatic = vnode.isStatic;
	            cloned.key = vnode.key;
	
	            return cloned;
	        }
	
	        var vNodes = this.$slots.default === undefined ? [] : this.$slots.default;
	        var clonedVNodes = this.$slots.default === undefined ? [] : vNodes.map(function (vnode) {
	            return cloneVNode(vnode);
	        });
	
	        return h('div', {
	            'class': this.classes
	        }, [h(_list2.default, {
	            ref: 'left',
	            props: {
	                prefixCls: this.prefixCls + '-list',
	                data: this.leftData,
	                renderFormat: this.renderFormat,
	                checkedKeys: this.leftCheckedKeys,
	                validKeysCount: this.leftValidKeysCount,
	                listStyle: this.listStyle,
	                title: this.localeTitles[0],
	                filterable: this.filterable,
	                filterPlaceholder: this.localeFilterPlaceholder,
	                filterMethod: this.filterMethod,
	                notFoundText: this.localeNotFoundText
	            },
	            on: {
	                'on-checked-keys-change': this.handleLeftCheckedKeysChange
	            }
	        }, vNodes), h(_operation2.default, {
	            props: {
	                prefixCls: this.prefixCls,
	                operations: this.operations,
	                leftActive: this.leftValidKeysCount > 0,
	                rightActive: this.rightValidKeysCount > 0
	            }
	        }), h(_list2.default, {
	            ref: 'right',
	            props: {
	                prefixCls: this.prefixCls + '-list',
	                data: this.rightData,
	                renderFormat: this.renderFormat,
	                checkedKeys: this.rightCheckedKeys,
	                validKeysCount: this.rightValidKeysCount,
	                listStyle: this.listStyle,
	                title: this.localeTitles[1],
	                filterable: this.filterable,
	                filterPlaceholder: this.localeFilterPlaceholder,
	                filterMethod: this.filterMethod,
	                notFoundText: this.localeNotFoundText
	            },
	            on: {
	                'on-checked-keys-change': this.handleRightCheckedKeysChange
	            }
	        }, clonedVNodes)]);
	    },
	
	    props: {
	        data: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        renderFormat: {
	            type: Function,
	            default: function _default(item) {
	                return item.label || item.key;
	            }
	        },
	        targetKeys: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        selectedKeys: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        listStyle: {
	            type: Object,
	            default: function _default() {
	                return {};
	            }
	        },
	        titles: {
	            type: Array
	        },
	        operations: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        filterable: {
	            type: Boolean,
	            default: false
	        },
	        filterPlaceholder: {
	            type: String
	        },
	        filterMethod: {
	            type: Function,
	            default: function _default(data, query) {
	                var type = 'label' in data ? 'label' : 'key';
	                return data[type].indexOf(query) > -1;
	            }
	        },
	        notFoundText: {
	            type: String
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            leftData: [],
	            rightData: [],
	            leftCheckedKeys: [],
	            rightCheckedKeys: []
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return ['' + prefixCls];
	        },
	        leftValidKeysCount: function leftValidKeysCount() {
	            return this.getValidKeys('left').length;
	        },
	        rightValidKeysCount: function rightValidKeysCount() {
	            return this.getValidKeys('right').length;
	        },
	        localeFilterPlaceholder: function localeFilterPlaceholder() {
	            if (this.filterPlaceholder === undefined) {
	                return this.t('i.transfer.filterPlaceholder');
	            } else {
	                return this.filterPlaceholder;
	            }
	        },
	        localeNotFoundText: function localeNotFoundText() {
	            if (this.notFoundText === undefined) {
	                return this.t('i.transfer.notFoundText');
	            } else {
	                return this.notFoundText;
	            }
	        },
	        localeTitles: function localeTitles() {
	            if (this.titles === undefined) {
	                return [this.t('i.transfer.titles.source'), this.t('i.transfer.titles.target')];
	            } else {
	                return this.titles;
	            }
	        }
	    },
	    methods: {
	        getValidKeys: function getValidKeys(direction) {
	            var _this = this;
	
	            return this[direction + 'Data'].filter(function (data) {
	                return !data.disabled && _this[direction + 'CheckedKeys'].indexOf(data.key) > -1;
	            }).map(function (data) {
	                return data.key;
	            });
	        },
	        splitData: function splitData() {
	            var _this2 = this;
	
	            var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	            this.leftData = [].concat((0, _toConsumableArray3.default)(this.data));
	            this.rightData = [];
	            if (this.targetKeys.length > 0) {
	                this.targetKeys.forEach(function (targetKey) {
	                    var filteredData = _this2.leftData.filter(function (data, index) {
	                        if (data.key === targetKey) {
	                            _this2.leftData.splice(index, 1);
	                            return true;
	                        }
	                        return false;
	                    });
	                    if (filteredData && filteredData.length > 0) _this2.rightData.push(filteredData[0]);
	                });
	            }
	            if (init) {
	                this.splitSelectedKey();
	            }
	        },
	        splitSelectedKey: function splitSelectedKey() {
	            var selectedKeys = this.selectedKeys;
	            if (selectedKeys.length > 0) {
	                this.leftCheckedKeys = this.leftData.filter(function (data) {
	                    return selectedKeys.indexOf(data.key) > -1;
	                }).map(function (data) {
	                    return data.key;
	                });
	                this.rightCheckedKeys = this.rightData.filter(function (data) {
	                    return selectedKeys.indexOf(data.key) > -1;
	                }).map(function (data) {
	                    return data.key;
	                });
	            }
	        },
	        moveTo: function moveTo(direction) {
	            var targetKeys = this.targetKeys;
	            var opposite = direction === 'left' ? 'right' : 'left';
	            var moveKeys = this.getValidKeys(opposite);
	            var newTargetKeys = direction === 'right' ? moveKeys.concat(targetKeys) : targetKeys.filter(function (targetKey) {
	                return !moveKeys.some(function (checkedKey) {
	                    return targetKey === checkedKey;
	                });
	            });
	
	            this.$refs[opposite].toggleSelectAll(false);
	            this.$emit('on-change', newTargetKeys, direction, moveKeys);
	            this.dispatch('FormItem', 'on-form-change', {
	                tarketKeys: newTargetKeys,
	                direction: direction,
	                moveKeys: moveKeys
	            });
	        },
	        handleLeftCheckedKeysChange: function handleLeftCheckedKeysChange(keys) {
	            this.leftCheckedKeys = keys;
	        },
	        handleRightCheckedKeysChange: function handleRightCheckedKeysChange(keys) {
	            this.rightCheckedKeys = keys;
	        }
	    },
	    watch: {
	        targetKeys: function targetKeys() {
	            this.splitData(false);
	        },
	        data: function data() {
	            this.splitData(false);
	        }
	    },
	    mounted: function mounted() {
	        this.splitData(true);
	    }
	};
	
	/***/ }),
	/* 246 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _checkbox = __webpack_require__(32);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	var _icon = __webpack_require__(8);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _collapseTransition = __webpack_require__(42);
	
	var _collapseTransition2 = _interopRequireDefault(_collapseTransition);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-tree';
	
	exports.default = {
	    name: 'TreeNode',
	    mixins: [_emitter2.default],
	    components: { Checkbox: _checkbox2.default, Icon: _icon2.default, CollapseTransition: _collapseTransition2.default },
	    props: {
	        data: {
	            type: Object,
	            default: function _default() {
	                return {};
	            }
	        },
	        multiple: {
	            type: Boolean,
	            default: false
	        },
	        showCheckbox: {
	            type: Boolean,
	            default: false
	        },
	        visible: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            indeterminate: false
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            return [prefixCls + '-children'];
	        },
	        selectedCls: function selectedCls() {
	            return [(0, _defineProperty3.default)({}, prefixCls + '-node-selected', this.data.selected)];
	        },
	        arrowClasses: function arrowClasses() {
	            var _ref2;
	
	            return [prefixCls + '-arrow', (_ref2 = {}, (0, _defineProperty3.default)(_ref2, prefixCls + '-arrow-disabled', this.data.disabled), (0, _defineProperty3.default)(_ref2, prefixCls + '-arrow-open', this.data.expand), (0, _defineProperty3.default)(_ref2, prefixCls + '-arrow-hidden', !(this.data.children && this.data.children.length)), _ref2)];
	        },
	        titleClasses: function titleClasses() {
	            return [prefixCls + '-title', (0, _defineProperty3.default)({}, prefixCls + '-title-selected', this.data.selected)];
	        }
	    },
	    methods: {
	        handleExpand: function handleExpand() {
	            if (this.data.disabled) return;
	            this.$set(this.data, 'expand', !this.data.expand);
	            this.dispatch('Tree', 'toggle-expand', this.data);
	        },
	        handleSelect: function handleSelect() {
	            if (this.data.disabled) return;
	            if (this.data.selected) {
	                this.data.selected = false;
	            } else if (this.multiple) {
	                this.$set(this.data, 'selected', !this.data.selected);
	            } else {
	                this.dispatch('Tree', 'selected', this.data);
	            }
	            this.dispatch('Tree', 'on-selected');
	        },
	        handleCheck: function handleCheck() {
	            if (this.disabled) return;
	            var checked = !this.data.checked;
	            if (!checked || this.indeterminate) {
	                (0, _assist.findComponentsDownward)(this, 'TreeNode').forEach(function (node) {
	                    return node.data.checked = false;
	                });
	            } else {
	                (0, _assist.findComponentsDownward)(this, 'TreeNode').forEach(function (node) {
	                    return node.data.checked = true;
	                });
	            }
	            this.data.checked = checked;
	            this.dispatch('Tree', 'checked');
	            this.dispatch('Tree', 'on-checked');
	        },
	        setIndeterminate: function setIndeterminate() {
	            this.indeterminate = this.data.checked ? false : (0, _assist.findComponentsDownward)(this, 'TreeNode').some(function (node) {
	                return node.data.checked;
	            });
	        }
	    },
	    created: function created() {
	        if (!this.data.checked) this.$set(this.data, 'checked', false);
	    },
	    mounted: function mounted() {
	        var _this = this;
	
	        this.$on('indeterminate', function () {
	            _this.broadcast('TreeNode', 'indeterminate');
	            _this.setIndeterminate();
	        });
	    }
	};
	
	/***/ }),
	/* 247 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _node = __webpack_require__(476);
	
	var _node2 = _interopRequireDefault(_node);
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-tree';
	
	var key = 1;
	
	exports.default = {
	    name: 'Tree',
	    mixins: [_emitter2.default, _locale2.default],
	    components: { TreeNode: _node2.default },
	    props: {
	        data: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        multiple: {
	            type: Boolean,
	            default: false
	        },
	        showCheckbox: {
	            type: Boolean,
	            default: false
	        },
	        emptyText: {
	            type: String
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls
	        };
	    },
	
	    computed: {
	        localeEmptyText: function localeEmptyText() {
	            if (this.emptyText === undefined) {
	                return this.t('i.tree.emptyText');
	            } else {
	                return this.emptyText;
	            }
	        }
	    },
	    methods: {
	        getSelectedNodes: function getSelectedNodes() {
	            var nodes = (0, _assist.findComponentsDownward)(this, 'TreeNode');
	            return nodes.filter(function (node) {
	                return node.data.selected;
	            }).map(function (node) {
	                return node.data;
	            });
	        },
	        getCheckedNodes: function getCheckedNodes() {
	            var nodes = (0, _assist.findComponentsDownward)(this, 'TreeNode');
	            return nodes.filter(function (node) {
	                return node.data.checked;
	            }).map(function (node) {
	                return node.data;
	            });
	        },
	        updateData: function updateData() {
	            var isInit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	
	            function reverseChecked(data) {
	                if (!data.nodeKey) data.nodeKey = key++;
	                if (data.children) {
	                    var checkedLength = 0;
	                    data.children.forEach(function (node) {
	                        if (node.children) node = reverseChecked(node);
	                        if (node.checked) checkedLength++;
	                    });
	                    if (isInit) {
	                        if (checkedLength >= data.children.length) data.checked = true;
	                    } else {
	                        data.checked = checkedLength >= data.children.length;
	                    }
	                    return data;
	                } else {
	                    return data;
	                }
	            }
	
	            function forwardChecked(data) {
	                if (data.children) {
	                    data.children.forEach(function (node) {
	                        if (data.checked) node.checked = true;
	                        if (node.children) node = forwardChecked(node);
	                    });
	                    return data;
	                } else {
	                    return data;
	                }
	            }
	            this.data.map(function (node) {
	                return reverseChecked(node);
	            }).map(function (node) {
	                return forwardChecked(node);
	            });
	            this.broadcast('TreeNode', 'indeterminate');
	        }
	    },
	    mounted: function mounted() {
	        var _this = this;
	
	        this.updateData();
	        this.$on('selected', function (ori) {
	            var nodes = (0, _assist.findComponentsDownward)(_this, 'TreeNode');
	            nodes.forEach(function (node) {
	                _this.$set(node.data, 'selected', false);
	            });
	            _this.$set(ori, 'selected', true);
	        });
	        this.$on('on-selected', function () {
	            _this.$emit('on-select-change', _this.getSelectedNodes());
	        });
	        this.$on('checked', function () {
	            _this.updateData(false);
	        });
	        this.$on('on-checked', function () {
	            _this.$emit('on-check-change', _this.getCheckedNodes());
	        });
	        this.$on('toggle-expand', function (payload) {
	            _this.$emit('on-toggle-expand', payload);
	        });
	    },
	
	    watch: {
	        data: function data() {
	            var _this2 = this;
	
	            this.$nextTick(function () {
	                _this2.updateData();
	                _this2.broadcast('TreeNode', 'indeterminate');
	            });
	        }
	    }
	};
	
	/***/ }),
	/* 248 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _icon = __webpack_require__(8);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _progress = __webpack_require__(99);
	
	var _progress2 = _interopRequireDefault(_progress);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-upload';
	
	exports.default = {
	    name: 'UploadList',
	    components: { Icon: _icon2.default, iProgress: _progress2.default },
	    props: {
	        files: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls
	        };
	    },
	
	    methods: {
	        fileCls: function fileCls(file) {
	            return [prefixCls + '-list-file', (0, _defineProperty3.default)({}, prefixCls + '-list-file-finish', file.status === 'finished')];
	        },
	        handleClick: function handleClick(file) {
	            this.$emit('on-file-click', file);
	        },
	        handlePreview: function handlePreview(file) {
	            this.$emit('on-file-preview', file);
	        },
	        handleRemove: function handleRemove(file) {
	            this.$emit('on-file-remove', file);
	        },
	        format: function format(file) {
	            var format = file.name.split('.').pop().toLocaleLowerCase() || '';
	            var type = 'document';
	
	            if (['gif', 'jpg', 'jpeg', 'png', 'bmp', 'webp'].indexOf(format) > -1) {
	                type = 'image';
	            }
	            if (['mp4', 'm3u8', 'rmvb', 'avi', 'swf', '3gp', 'mkv', 'flv'].indexOf(format) > -1) {
	                type = 'ios-film';
	            }
	            if (['mp3', 'wav', 'wma', 'ogg', 'aac', 'flac'].indexOf(format) > -1) {
	                type = 'ios-musical-notes';
	            }
	            if (['doc', 'txt', 'docx', 'pages', 'epub', 'pdf'].indexOf(format) > -1) {
	                type = 'document-text';
	            }
	            if (['numbers', 'csv', 'xls', 'xlsx'].indexOf(format) > -1) {
	                type = 'stats-bars';
	            }
	            if (['keynote', 'ppt', 'pptx'].indexOf(format) > -1) {
	                type = 'ios-videocam';
	            }
	
	            return type;
	        },
	        parsePercentage: function parsePercentage(val) {
	            return parseInt(val, 10);
	        }
	    }
	};
	
	/***/ }),
	/* 249 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(1);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _uploadList = __webpack_require__(478);
	
	var _uploadList2 = _interopRequireDefault(_uploadList);
	
	var _ajax = __webpack_require__(337);
	
	var _ajax2 = _interopRequireDefault(_ajax);
	
	var _assist = __webpack_require__(2);
	
	var _emitter = __webpack_require__(3);
	
	var _emitter2 = _interopRequireDefault(_emitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-upload';
	
	exports.default = {
	    name: 'Upload',
	    mixins: [_emitter2.default],
	    components: { UploadList: _uploadList2.default },
	    props: {
	        action: {
	            type: String,
	            required: true
	        },
	        headers: {
	            type: Object,
	            default: function _default() {
	                return {};
	            }
	        },
	        multiple: {
	            type: Boolean,
	            default: false
	        },
	        data: {
	            type: Object
	        },
	        name: {
	            type: String,
	            default: 'file'
	        },
	        withCredentials: {
	            type: Boolean,
	            default: false
	        },
	        showUploadList: {
	            type: Boolean,
	            default: true
	        },
	        type: {
	            type: String,
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['select', 'drag']);
	            },
	
	            default: 'select'
	        },
	        format: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        },
	        accept: {
	            type: String
	        },
	        maxSize: {
	            type: Number
	        },
	        beforeUpload: Function,
	        onProgress: {
	            type: Function,
	            default: function _default() {
	                return {};
	            }
	        },
	        onSuccess: {
	            type: Function,
	            default: function _default() {
	                return {};
	            }
	        },
	        onError: {
	            type: Function,
	            default: function _default() {
	                return {};
	            }
	        },
	        onRemove: {
	            type: Function,
	            default: function _default() {
	                return {};
	            }
	        },
	        onPreview: {
	            type: Function,
	            default: function _default() {
	                return {};
	            }
	        },
	        onExceededSize: {
	            type: Function,
	            default: function _default() {
	                return {};
	            }
	        },
	        onFormatError: {
	            type: Function,
	            default: function _default() {
	                return {};
	            }
	        },
	        defaultFileList: {
	            type: Array,
	            default: function _default() {
	                return [];
	            }
	        }
	    },
	    data: function data() {
	        return {
	            prefixCls: prefixCls,
	            dragOver: false,
	            fileList: [],
	            tempIndex: 1
	        };
	    },
	
	    computed: {
	        classes: function classes() {
	            var _ref;
	
	            return ['' + prefixCls, (_ref = {}, (0, _defineProperty3.default)(_ref, prefixCls + '-select', this.type === 'select'), (0, _defineProperty3.default)(_ref, prefixCls + '-drag', this.type === 'drag'), (0, _defineProperty3.default)(_ref, prefixCls + '-dragOver', this.type === 'drag' && this.dragOver), _ref)];
	        }
	    },
	    methods: {
	        handleClick: function handleClick() {
	            this.$refs.input.click();
	        },
	        handleChange: function handleChange(e) {
	            var files = e.target.files;
	
	            if (!files) {
	                return;
	            }
	            this.uploadFiles(files);
	            this.$refs.input.value = null;
	        },
	        onDrop: function onDrop(e) {
	            this.dragOver = false;
	            this.uploadFiles(e.dataTransfer.files);
	        },
	        uploadFiles: function uploadFiles(files) {
	            var _this = this;
	
	            var postFiles = Array.prototype.slice.call(files);
	            if (!this.multiple) postFiles = postFiles.slice(0, 1);
	
	            if (postFiles.length === 0) return;
	
	            postFiles.forEach(function (file) {
	                _this.upload(file);
	            });
	        },
	        upload: function upload(file) {
	            var _this2 = this;
	
	            if (!this.beforeUpload) {
	                return this.post(file);
	            }
	
	            var before = this.beforeUpload(file);
	            if (before && before.then) {
	                before.then(function (processedFile) {
	                    if (Object.prototype.toString.call(processedFile) === '[object File]') {
	                        _this2.post(processedFile);
	                    } else {
	                        _this2.post(file);
	                    }
	                }, function () {});
	            } else if (before !== false) {
	                this.post(file);
	            } else {}
	        },
	        post: function post(file) {
	            var _this3 = this;
	
	            if (this.format.length) {
	                var _file_format = file.name.split('.').pop().toLocaleLowerCase();
	                var checked = this.format.some(function (item) {
	                    return item.toLocaleLowerCase() === _file_format;
	                });
	                if (!checked) {
	                    this.onFormatError(file, this.fileList);
	                    return false;
	                }
	            }
	
	            if (this.maxSize) {
	                if (file.size > this.maxSize * 1024) {
	                    this.onExceededSize(file, this.fileList);
	                    return false;
	                }
	            }
	
	            this.handleStart(file);
	            var formData = new FormData();
	            formData.append(this.name, file);
	
	            (0, _ajax2.default)({
	                headers: this.headers,
	                withCredentials: this.withCredentials,
	                file: file,
	                data: this.data,
	                filename: this.name,
	                action: this.action,
	                onProgress: function onProgress(e) {
	                    _this3.handleProgress(e, file);
	                },
	                onSuccess: function onSuccess(res) {
	                    _this3.handleSuccess(res, file);
	                },
	                onError: function onError(err, response) {
	                    _this3.handleError(err, response, file);
	                }
	            });
	        },
	        handleStart: function handleStart(file) {
	            file.uid = Date.now() + this.tempIndex++;
	            var _file = {
	                status: 'uploading',
	                name: file.name,
	                size: file.size,
	                percentage: 0,
	                uid: file.uid,
	                showProgress: true
	            };
	
	            this.fileList.push(_file);
	        },
	        getFile: function getFile(file) {
	            var fileList = this.fileList;
	            var target = void 0;
	            fileList.every(function (item) {
	                target = file.uid === item.uid ? item : null;
	                return !target;
	            });
	            return target;
	        },
	        handleProgress: function handleProgress(e, file) {
	            var _file = this.getFile(file);
	            this.onProgress(e, _file, this.fileList);
	            _file.percentage = e.percent || 0;
	        },
	        handleSuccess: function handleSuccess(res, file) {
	            var _file = this.getFile(file);
	
	            if (_file) {
	                _file.status = 'finished';
	                _file.response = res;
	
	                this.dispatch('FormItem', 'on-form-change', _file);
	                this.onSuccess(res, _file, this.fileList);
	
	                setTimeout(function () {
	                    _file.showProgress = false;
	                }, 1000);
	            }
	        },
	        handleError: function handleError(err, response, file) {
	            var _file = this.getFile(file);
	            var fileList = this.fileList;
	
	            _file.status = 'fail';
	
	            fileList.splice(fileList.indexOf(_file), 1);
	
	            this.onError(err, response, file);
	        },
	        handleRemove: function handleRemove(file) {
	            var fileList = this.fileList;
	            fileList.splice(fileList.indexOf(file), 1);
	            this.onRemove(file, fileList);
	        },
	        handlePreview: function handlePreview(file) {
	            if (file.status === 'finished') {
	                this.onPreview(file);
	            }
	        },
	        clearFiles: function clearFiles() {
	            this.fileList = [];
	        }
	    },
	    watch: {
	        defaultFileList: {
	            immediate: true,
	            handler: function handler(fileList) {
	                var _this4 = this;
	
	                this.fileList = fileList.map(function (item) {
	                    item.status = 'finished';
	                    item.percentage = 100;
	                    item.uid = Date.now() + _this4.tempIndex++;
	                    return item;
	                });
	            }
	        }
	    }
	};
	
	/***/ }),
	/* 250 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_vm.label ? _c('label', {
	      class: [_vm.prefixCls + '-label'],
	      style: _vm.labelStyles
	    }, [_vm._t("label", [_vm._v(_vm._s(_vm.label))])], 2) : _vm._e(), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-content'],
	      style: _vm.contentStyles
	    }, [_vm._t("default"), _vm._v(" "), _c('transition', {
	      attrs: {
	        "name": "fade"
	      }
	    }, [_vm.validateState === 'error' && _vm.showMessage && _vm.form.showMessage ? _c('div', {
	      class: [_vm.prefixCls + '-error-tip']
	    }, [_vm._v(_vm._s(_vm.validateMessage))]) : _vm._e()])], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 251 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _vm.dot ? _c('span', {
	      ref: "badge",
	      class: _vm.classes
	    }, [_vm._t("default"), _vm._v(" "), _c('sup', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.badge,
	        expression: "badge"
	      }],
	      class: _vm.dotClasses
	    })], 2) : _c('span', {
	      ref: "badge",
	      class: _vm.classes
	    }, [_vm._t("default"), _vm._v(" "), _vm.count ? _c('sup', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.badge,
	        expression: "badge"
	      }],
	      class: _vm.countClasses
	    }, [_vm._v(_vm._s(_vm.finalCount))]) : _vm._e()], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 252 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('li', {
	      class: _vm.classes,
	      on: {
	        "click": function click($event) {
	          $event.stopPropagation();
	          _vm.handleClick($event);
	        }
	      }
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 253 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes,
	      style: _vm.styles,
	      on: {
	        "click": _vm.back
	      }
	    }, [_vm._t("default", [_c('div', {
	      class: _vm.innerClasses
	    }, [_c('i', {
	      staticClass: "ivu-icon ivu-icon-chevron-up"
	    })])])], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 254 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.wrapClasses,
	      style: _vm.circleSize
	    }, [_c('svg', {
	      attrs: {
	        "viewBox": "0 0 100 100"
	      }
	    }, [_c('path', {
	      attrs: {
	        "d": _vm.pathString,
	        "stroke": _vm.trailColor,
	        "stroke-width": _vm.trailWidth,
	        "fill-opacity": 0
	      }
	    }), _vm._v(" "), _c('path', {
	      style: _vm.pathStyle,
	      attrs: {
	        "d": _vm.pathString,
	        "stroke-linecap": _vm.strokeLinecap,
	        "stroke": _vm.strokeColor,
	        "stroke-width": _vm.strokeWidth,
	        "fill-opacity": "0"
	      }
	    })]), _vm._v(" "), _c('div', {
	      class: _vm.innerClasses
	    }, [_vm._t("default")], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 255 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_vm.shortcuts.length ? _c('div', {
	      class: [_vm.prefixCls + '-sidebar']
	    }, _vm._l(_vm.shortcuts, function (shortcut) {
	      return _c('div', {
	        class: [_vm.prefixCls + '-shortcut'],
	        on: {
	          "click": function click($event) {
	            _vm.handleShortcutClick(shortcut);
	          }
	        }
	      }, [_vm._v(_vm._s(shortcut.text))]);
	    })) : _vm._e(), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-body']
	    }, [_c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: !_vm.isTime,
	        expression: "!isTime"
	      }],
	      class: [_vm.prefixCls + '-content', _vm.prefixCls + '-content-left']
	    }, [_c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.leftCurrentView !== 'time',
	        expression: "leftCurrentView !== 'time'"
	      }],
	      class: [_vm.datePrefixCls + '-header']
	    }, [_c('span', {
	      class: _vm.iconBtnCls('prev', '-double'),
	      on: {
	        "click": function click($event) {
	          _vm.prevYear('left');
	        }
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "ios-arrow-left"
	      }
	    })], 1), _vm._v(" "), _c('span', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.leftCurrentView === 'date',
	        expression: "leftCurrentView === 'date'"
	      }],
	      class: _vm.iconBtnCls('prev'),
	      on: {
	        "click": _vm.prevMonth
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "ios-arrow-left"
	      }
	    })], 1), _vm._v(" "), _c('span', {
	      class: [_vm.datePrefixCls + '-header-label'],
	      on: {
	        "click": function click($event) {
	          _vm.showYearPicker('left');
	        }
	      }
	    }, [_vm._v(_vm._s(_vm.leftYearLabel))]), _vm._v(" "), _c('span', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.leftCurrentView === 'date',
	        expression: "leftCurrentView === 'date'"
	      }],
	      class: [_vm.datePrefixCls + '-header-label'],
	      on: {
	        "click": function click($event) {
	          _vm.showMonthPicker('left');
	        }
	      }
	    }, [_vm._v(_vm._s(_vm.leftMonthLabel))]), _vm._v(" "), _c('span', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.leftCurrentView === 'year' || _vm.leftCurrentView === 'month',
	        expression: "leftCurrentView === 'year' || leftCurrentView === 'month'"
	      }],
	      class: _vm.iconBtnCls('next', '-double'),
	      on: {
	        "click": function click($event) {
	          _vm.nextYear('left');
	        }
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "ios-arrow-right"
	      }
	    })], 1)]), _vm._v(" "), _c('date-table', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.leftCurrentView === 'date',
	        expression: "leftCurrentView === 'date'"
	      }],
	      attrs: {
	        "year": _vm.leftYear,
	        "month": _vm.leftMonth,
	        "date": _vm.date,
	        "min-date": _vm.minDate,
	        "max-date": _vm.maxDate,
	        "range-state": _vm.rangeState,
	        "selection-mode": "range",
	        "disabled-date": _vm.disabledDate
	      },
	      on: {
	        "on-changerange": _vm.handleChangeRange,
	        "on-pick": _vm.handleRangePick,
	        "on-pick-click": _vm.handlePickClick
	      }
	    }), _vm._v(" "), _c('year-table', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.leftCurrentView === 'year',
	        expression: "leftCurrentView === 'year'"
	      }],
	      ref: "leftYearTable",
	      attrs: {
	        "year": _vm.leftTableYear,
	        "date": _vm.leftTableDate,
	        "selection-mode": "range",
	        "disabled-date": _vm.disabledDate
	      },
	      on: {
	        "on-pick": _vm.handleLeftYearPick,
	        "on-pick-click": _vm.handlePickClick
	      }
	    }), _vm._v(" "), _c('month-table', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.leftCurrentView === 'month',
	        expression: "leftCurrentView === 'month'"
	      }],
	      ref: "leftMonthTable",
	      attrs: {
	        "month": _vm.leftMonth,
	        "date": _vm.leftTableDate,
	        "selection-mode": "range",
	        "disabled-date": _vm.disabledDate
	      },
	      on: {
	        "on-pick": _vm.handleLeftMonthPick,
	        "on-pick-click": _vm.handlePickClick
	      }
	    })], 1), _vm._v(" "), _c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: !_vm.isTime,
	        expression: "!isTime"
	      }],
	      class: [_vm.prefixCls + '-content', _vm.prefixCls + '-content-right']
	    }, [_c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.rightCurrentView !== 'time',
	        expression: "rightCurrentView !== 'time'"
	      }],
	      class: [_vm.datePrefixCls + '-header']
	    }, [_c('span', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.rightCurrentView === 'year' || _vm.rightCurrentView === 'month',
	        expression: "rightCurrentView === 'year' || rightCurrentView === 'month'"
	      }],
	      class: _vm.iconBtnCls('prev', '-double'),
	      on: {
	        "click": function click($event) {
	          _vm.prevYear('right');
	        }
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "ios-arrow-left"
	      }
	    })], 1), _vm._v(" "), _c('span', {
	      class: [_vm.datePrefixCls + '-header-label'],
	      on: {
	        "click": function click($event) {
	          _vm.showYearPicker('right');
	        }
	      }
	    }, [_vm._v(_vm._s(_vm.rightYearLabel))]), _vm._v(" "), _c('span', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.rightCurrentView === 'date',
	        expression: "rightCurrentView === 'date'"
	      }],
	      class: [_vm.datePrefixCls + '-header-label'],
	      on: {
	        "click": function click($event) {
	          _vm.showMonthPicker('right');
	        }
	      }
	    }, [_vm._v(_vm._s(_vm.rightMonthLabel))]), _vm._v(" "), _c('span', {
	      class: _vm.iconBtnCls('next', '-double'),
	      on: {
	        "click": function click($event) {
	          _vm.nextYear('right');
	        }
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "ios-arrow-right"
	      }
	    })], 1), _vm._v(" "), _c('span', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.rightCurrentView === 'date',
	        expression: "rightCurrentView === 'date'"
	      }],
	      class: _vm.iconBtnCls('next'),
	      on: {
	        "click": _vm.nextMonth
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "ios-arrow-right"
	      }
	    })], 1)]), _vm._v(" "), _c('date-table', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.rightCurrentView === 'date',
	        expression: "rightCurrentView === 'date'"
	      }],
	      attrs: {
	        "year": _vm.rightYear,
	        "month": _vm.rightMonth,
	        "date": _vm.rightDate,
	        "min-date": _vm.minDate,
	        "max-date": _vm.maxDate,
	        "range-state": _vm.rangeState,
	        "selection-mode": "range",
	        "disabled-date": _vm.disabledDate
	      },
	      on: {
	        "on-changerange": _vm.handleChangeRange,
	        "on-pick": _vm.handleRangePick,
	        "on-pick-click": _vm.handlePickClick
	      }
	    }), _vm._v(" "), _c('year-table', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.rightCurrentView === 'year',
	        expression: "rightCurrentView === 'year'"
	      }],
	      ref: "rightYearTable",
	      attrs: {
	        "year": _vm.rightTableYear,
	        "date": _vm.rightTableDate,
	        "selection-mode": "range",
	        "disabled-date": _vm.disabledDate
	      },
	      on: {
	        "on-pick": _vm.handleRightYearPick,
	        "on-pick-click": _vm.handlePickClick
	      }
	    }), _vm._v(" "), _c('month-table', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.rightCurrentView === 'month',
	        expression: "rightCurrentView === 'month'"
	      }],
	      ref: "rightMonthTable",
	      attrs: {
	        "month": _vm.rightMonth,
	        "date": _vm.rightTableDate,
	        "selection-mode": "range",
	        "disabled-date": _vm.disabledDate
	      },
	      on: {
	        "on-pick": _vm.handleRightMonthPick,
	        "on-pick-click": _vm.handlePickClick
	      }
	    })], 1), _vm._v(" "), _c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.isTime,
	        expression: "isTime"
	      }],
	      class: [_vm.prefixCls + '-content']
	    }, [_c('time-picker', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.isTime,
	        expression: "isTime"
	      }],
	      ref: "timePicker",
	      on: {
	        "on-pick": _vm.handleTimePick,
	        "on-pick-click": _vm.handlePickClick
	      }
	    })], 1), _vm._v(" "), _vm.confirm ? _c('Confirm', {
	      attrs: {
	        "show-time": _vm.showTime,
	        "is-time": _vm.isTime,
	        "time-disabled": _vm.timeDisabled
	      },
	      on: {
	        "on-pick-toggle-time": _vm.handleToggleTime,
	        "on-pick-clear": _vm.handlePickClear,
	        "on-pick-success": _vm.handlePickSuccess
	      }
	    }) : _vm._e()], 1)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 256 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _vm.simple ? _c('ul', {
	      class: _vm.simpleWrapClasses,
	      style: _vm.styles
	    }, [_c('li', {
	      class: _vm.prevClasses,
	      attrs: {
	        "title": _vm.t('i.page.prev')
	      },
	      on: {
	        "click": _vm.prev
	      }
	    }, [_vm._m(0)]), _vm._v(" "), _c('div', {
	      class: _vm.simplePagerClasses,
	      attrs: {
	        "title": _vm.currentPage + '/' + _vm.allPages
	      }
	    }, [_c('input', {
	      attrs: {
	        "type": "text"
	      },
	      domProps: {
	        "value": _vm.currentPage
	      },
	      on: {
	        "keydown": _vm.keyDown,
	        "keyup": _vm.keyUp,
	        "change": _vm.keyUp
	      }
	    }), _vm._v(" "), _c('span', [_vm._v("/")]), _vm._v("\n        " + _vm._s(_vm.allPages) + "\n    ")]), _vm._v(" "), _c('li', {
	      class: _vm.nextClasses,
	      attrs: {
	        "title": _vm.t('i.page.next')
	      },
	      on: {
	        "click": _vm.next
	      }
	    }, [_vm._m(1)])]) : _c('ul', {
	      class: _vm.wrapClasses,
	      style: _vm.styles
	    }, [_vm.showTotal ? _c('span', {
	      class: [_vm.prefixCls + '-total']
	    }, [_vm._t("default", [_vm._v(_vm._s(_vm.t('i.page.total')) + " " + _vm._s(_vm.total) + " "), _vm.total <= 1 ? [_vm._v(_vm._s(_vm.t('i.page.item')))] : [_vm._v(_vm._s(_vm.t('i.page.items')))]])], 2) : _vm._e(), _vm._v(" "), _c('li', {
	      class: _vm.prevClasses,
	      attrs: {
	        "title": _vm.t('i.page.prev')
	      },
	      on: {
	        "click": _vm.prev
	      }
	    }, [_vm._m(2)]), _vm._v(" "), _c('li', {
	      class: _vm.firstPageClasses,
	      attrs: {
	        "title": "1"
	      },
	      on: {
	        "click": function click($event) {
	          _vm.changePage(1);
	        }
	      }
	    }, [_c('a', [_vm._v("1")])]), _vm._v(" "), _vm.currentPage - 3 > 1 ? _c('li', {
	      class: [_vm.prefixCls + '-item-jump-prev'],
	      attrs: {
	        "title": _vm.t('i.page.prev5')
	      },
	      on: {
	        "click": _vm.fastPrev
	      }
	    }, [_vm._m(3)]) : _vm._e(), _vm._v(" "), _vm.currentPage - 2 > 1 ? _c('li', {
	      class: [_vm.prefixCls + '-item'],
	      attrs: {
	        "title": _vm.currentPage - 2
	      },
	      on: {
	        "click": function click($event) {
	          _vm.changePage(_vm.currentPage - 2);
	        }
	      }
	    }, [_c('a', [_vm._v(_vm._s(_vm.currentPage - 2))])]) : _vm._e(), _vm._v(" "), _vm.currentPage - 1 > 1 ? _c('li', {
	      class: [_vm.prefixCls + '-item'],
	      attrs: {
	        "title": _vm.currentPage - 1
	      },
	      on: {
	        "click": function click($event) {
	          _vm.changePage(_vm.currentPage - 1);
	        }
	      }
	    }, [_c('a', [_vm._v(_vm._s(_vm.currentPage - 1))])]) : _vm._e(), _vm._v(" "), _vm.currentPage != 1 && _vm.currentPage != _vm.allPages ? _c('li', {
	      class: [_vm.prefixCls + '-item', _vm.prefixCls + '-item-active'],
	      attrs: {
	        "title": _vm.currentPage
	      }
	    }, [_c('a', [_vm._v(_vm._s(_vm.currentPage))])]) : _vm._e(), _vm._v(" "), _vm.currentPage + 1 < _vm.allPages ? _c('li', {
	      class: [_vm.prefixCls + '-item'],
	      attrs: {
	        "title": _vm.currentPage + 1
	      },
	      on: {
	        "click": function click($event) {
	          _vm.changePage(_vm.currentPage + 1);
	        }
	      }
	    }, [_c('a', [_vm._v(_vm._s(_vm.currentPage + 1))])]) : _vm._e(), _vm._v(" "), _vm.currentPage + 2 < _vm.allPages ? _c('li', {
	      class: [_vm.prefixCls + '-item'],
	      attrs: {
	        "title": _vm.currentPage + 2
	      },
	      on: {
	        "click": function click($event) {
	          _vm.changePage(_vm.currentPage + 2);
	        }
	      }
	    }, [_c('a', [_vm._v(_vm._s(_vm.currentPage + 2))])]) : _vm._e(), _vm._v(" "), _vm.currentPage + 3 < _vm.allPages ? _c('li', {
	      class: [_vm.prefixCls + '-item-jump-next'],
	      attrs: {
	        "title": _vm.t('i.page.next5')
	      },
	      on: {
	        "click": _vm.fastNext
	      }
	    }, [_vm._m(4)]) : _vm._e(), _vm._v(" "), _vm.allPages > 1 ? _c('li', {
	      class: _vm.lastPageClasses,
	      attrs: {
	        "title": _vm.allPages
	      },
	      on: {
	        "click": function click($event) {
	          _vm.changePage(_vm.allPages);
	        }
	      }
	    }, [_c('a', [_vm._v(_vm._s(_vm.allPages))])]) : _vm._e(), _vm._v(" "), _c('li', {
	      class: _vm.nextClasses,
	      attrs: {
	        "title": _vm.t('i.page.next')
	      },
	      on: {
	        "click": _vm.next
	      }
	    }, [_vm._m(5)]), _vm._v(" "), _c('Options', {
	      attrs: {
	        "show-sizer": _vm.showSizer,
	        "page-size": _vm.currentPageSize,
	        "page-size-opts": _vm.pageSizeOpts,
	        "placement": _vm.placement,
	        "show-elevator": _vm.showElevator,
	        "_current": _vm.currentPage,
	        "current": _vm.currentPage,
	        "all-pages": _vm.allPages,
	        "is-small": _vm.isSmall
	      },
	      on: {
	        "on-size": _vm.onSize,
	        "on-page": _vm.onPage
	      }
	    })], 1);
	  }, staticRenderFns: [function () {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('a', [_c('i', {
	      staticClass: "ivu-icon ivu-icon-ios-arrow-left"
	    })]);
	  }, function () {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('a', [_c('i', {
	      staticClass: "ivu-icon ivu-icon-ios-arrow-right"
	    })]);
	  }, function () {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('a', [_c('i', {
	      staticClass: "ivu-icon ivu-icon-ios-arrow-left"
	    })]);
	  }, function () {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('a', [_c('i', {
	      staticClass: "ivu-icon ivu-icon-ios-arrow-left"
	    })]);
	  }, function () {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('a', [_c('i', {
	      staticClass: "ivu-icon ivu-icon-ios-arrow-right"
	    })]);
	  }, function () {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('a', [_c('i', {
	      staticClass: "ivu-icon ivu-icon-ios-arrow-right"
	    })]);
	  }] };
	
	/***/ }),
	/* 257 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 258 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes,
	      on: {
	        "click": _vm.handleClick
	      }
	    }, _vm._l(_vm.cells, function (cell, index) {
	      return _c('span', {
	        class: _vm.getCellCls(cell)
	      }, [_c('em', {
	        attrs: {
	          "index": index
	        }
	      }, [_vm._v(_vm._s(cell.text))])]);
	    }));
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 259 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('form', {
	      class: _vm.classes,
	      on: {
	        "submit": _vm.formSubmit
	      }
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 260 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', [_c('div', {
	      class: _vm.classes,
	      style: _vm.styles
	    }, [_vm._t("default")], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 261 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('li', {
	      class: [_vm.prefixCls + '-item-group']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-item-group-title']
	    }, [_vm._v(_vm._s(_vm.title))]), _vm._v(" "), _c('ul', [_vm._t("default")], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 262 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_c('div', {
	      ref: "hours",
	      class: [_vm.prefixCls + '-list']
	    }, [_c('ul', {
	      class: [_vm.prefixCls + '-ul'],
	      on: {
	        "click": _vm.handleClickHours
	      }
	    }, _vm._l(_vm.hoursList, function (item, index) {
	      return _c('li', {
	        directives: [{
	          name: "show",
	          rawName: "v-show",
	          value: !item.hide,
	          expression: "!item.hide"
	        }],
	        class: _vm.getCellCls(item),
	        attrs: {
	          "index": index
	        }
	      }, [_vm._v(_vm._s(_vm.formatTime(item.text)))]);
	    }))]), _vm._v(" "), _c('div', {
	      ref: "minutes",
	      class: [_vm.prefixCls + '-list']
	    }, [_c('ul', {
	      class: [_vm.prefixCls + '-ul'],
	      on: {
	        "click": _vm.handleClickMinutes
	      }
	    }, _vm._l(_vm.minutesList, function (item, index) {
	      return _c('li', {
	        directives: [{
	          name: "show",
	          rawName: "v-show",
	          value: !item.hide,
	          expression: "!item.hide"
	        }],
	        class: _vm.getCellCls(item),
	        attrs: {
	          "index": index
	        }
	      }, [_vm._v(_vm._s(_vm.formatTime(item.text)))]);
	    }))]), _vm._v(" "), _c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.showSeconds,
	        expression: "showSeconds"
	      }],
	      ref: "seconds",
	      class: [_vm.prefixCls + '-list']
	    }, [_c('ul', {
	      class: [_vm.prefixCls + '-ul'],
	      on: {
	        "click": _vm.handleClickSeconds
	      }
	    }, _vm._l(_vm.secondsList, function (item, index) {
	      return _c('li', {
	        directives: [{
	          name: "show",
	          rawName: "v-show",
	          value: !item.hide,
	          expression: "!item.hide"
	        }],
	        class: _vm.getCellCls(item),
	        attrs: {
	          "index": index
	        }
	      }, [_vm._v(_vm._s(_vm.formatTime(item.text)))]);
	    }))])]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 263 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('table', {
	      style: _vm.styleObject,
	      attrs: {
	        "cellspacing": "0",
	        "cellpadding": "0",
	        "border": "0"
	      }
	    }, [_c('colgroup', _vm._l(_vm.columns, function (column, index) {
	      return _c('col', {
	        attrs: {
	          "width": _vm.setCellWidth(column, index, false)
	        }
	      });
	    })), _vm._v(" "), _c('tbody', {
	      class: [_vm.prefixCls + '-tbody']
	    }, [_vm._l(_vm.data, function (row, index) {
	      return [_c('table-tr', {
	        key: row._rowKey,
	        attrs: {
	          "row": row,
	          "prefix-cls": _vm.prefixCls
	        },
	        nativeOn: {
	          "mouseenter": function mouseenter($event) {
	            $event.stopPropagation();
	            _vm.handleMouseIn(row._index);
	          },
	          "mouseleave": function mouseleave($event) {
	            $event.stopPropagation();
	            _vm.handleMouseOut(row._index);
	          },
	          "click": function click($event) {
	            $event.stopPropagation();
	            _vm.clickCurrentRow(row._index);
	          },
	          "dblclick": function dblclick($event) {
	            $event.stopPropagation();
	            _vm.dblclickCurrentRow(row._index);
	          }
	        }
	      }, _vm._l(_vm.columns, function (column) {
	        return _c('td', {
	          class: _vm.alignCls(column, row)
	        }, [_c('Cell', {
	          key: column._columnKey,
	          attrs: {
	            "fixed": _vm.fixed,
	            "prefix-cls": _vm.prefixCls,
	            "row": row,
	            "column": column,
	            "natural-index": index,
	            "index": row._index,
	            "checked": _vm.rowChecked(row._index),
	            "disabled": _vm.rowDisabled(row._index),
	            "expanded": _vm.rowExpanded(row._index)
	          }
	        })], 1);
	      })), _vm._v(" "), _vm.rowExpanded(row._index) ? _c('tr', [_c('td', {
	        class: _vm.prefixCls + '-expanded-cell',
	        attrs: {
	          "colspan": _vm.columns.length
	        }
	      }, [_c('Expand', {
	        key: row._rowKey,
	        attrs: {
	          "row": row,
	          "render": _vm.expandRender,
	          "index": row._index
	        }
	      })], 1)]) : _vm._e()];
	    })], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 264 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 265 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      directives: [{
	        name: "transfer-dom",
	        rawName: "v-transfer-dom"
	      }]
	    }, [_c('transition', {
	      attrs: {
	        "name": _vm.transitionNames[1]
	      }
	    }, [_c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.visible,
	        expression: "visible"
	      }],
	      class: _vm.maskClasses,
	      on: {
	        "click": _vm.mask
	      }
	    })]), _vm._v(" "), _c('div', {
	      class: _vm.wrapClasses,
	      on: {
	        "click": _vm.handleWrapClick
	      }
	    }, [_c('transition', {
	      attrs: {
	        "name": _vm.transitionNames[0]
	      },
	      on: {
	        "after-leave": _vm.animationFinish
	      }
	    }, [_c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.visible,
	        expression: "visible"
	      }],
	      class: _vm.classes,
	      style: _vm.mainStyles
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-content']
	    }, [_vm.closable ? _c('a', {
	      class: [_vm.prefixCls + '-close'],
	      on: {
	        "click": _vm.close
	      }
	    }, [_vm._t("close", [_c('Icon', {
	      attrs: {
	        "type": "ios-close-empty"
	      }
	    })])], 2) : _vm._e(), _vm._v(" "), _vm.showHead ? _c('div', {
	      class: [_vm.prefixCls + '-header']
	    }, [_vm._t("header", [_c('div', {
	      class: [_vm.prefixCls + '-header-inner']
	    }, [_vm._v(_vm._s(_vm.title))])])], 2) : _vm._e(), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-body']
	    }, [_vm._t("default")], 2), _vm._v(" "), !_vm.footerHide ? _c('div', {
	      class: [_vm.prefixCls + '-footer']
	    }, [_vm._t("footer", [_c('i-button', {
	      attrs: {
	        "type": "text",
	        "size": "large"
	      },
	      nativeOn: {
	        "click": function click($event) {
	          _vm.cancel($event);
	        }
	      }
	    }, [_vm._v(_vm._s(_vm.localeCancelText))]), _vm._v(" "), _c('i-button', {
	      attrs: {
	        "type": "primary",
	        "size": "large",
	        "loading": _vm.buttonLoading
	      },
	      nativeOn: {
	        "click": function click($event) {
	          _vm.ok($event);
	        }
	      }
	    }, [_vm._v(_vm._s(_vm.localeOkText))])])], 2) : _vm._e()])])])], 1)], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 266 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('span', {
	      class: _vm.wrapClasses,
	      on: {
	        "click": _vm.toggle
	      }
	    }, [_c('span', {
	      class: _vm.innerClasses
	    }, [_vm.currentValue ? _vm._t("open") : _vm._e(), _vm._v(" "), !_vm.currentValue ? _vm._t("close") : _vm._e()], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 267 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      directives: [{
	        name: "clickoutside",
	        rawName: "v-clickoutside",
	        value: _vm.handleClose,
	        expression: "handleClose"
	      }],
	      class: _vm.classes
	    }, [_c('div', {
	      ref: "reference",
	      class: [_vm.prefixCls + '-selection'],
	      on: {
	        "click": _vm.toggleMenu
	      }
	    }, [_vm._l(_vm.selectedMultiple, function (item, index) {
	      return _c('div', {
	        staticClass: "ivu-tag"
	      }, [_c('span', {
	        staticClass: "ivu-tag-text"
	      }, [_vm._v(_vm._s(item.label))]), _vm._v(" "), _c('Icon', {
	        attrs: {
	          "type": "ios-close-empty"
	        },
	        nativeOn: {
	          "click": function click($event) {
	            $event.stopPropagation();
	            _vm.removeTag(index);
	          }
	        }
	      })], 1);
	    }), _vm._v(" "), _c('span', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.showPlaceholder && !_vm.filterable,
	        expression: "showPlaceholder && !filterable"
	      }],
	      class: [_vm.prefixCls + '-placeholder']
	    }, [_vm._v(_vm._s(_vm.localePlaceholder))]), _vm._v(" "), _c('span', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: !_vm.showPlaceholder && !_vm.multiple && !_vm.filterable,
	        expression: "!showPlaceholder && !multiple && !filterable"
	      }],
	      class: [_vm.prefixCls + '-selected-value']
	    }, [_vm._v(_vm._s(_vm.selectedSingle))]), _vm._v(" "), _vm.filterable ? _c('input', {
	      directives: [{
	        name: "model",
	        rawName: "v-model",
	        value: _vm.query,
	        expression: "query"
	      }],
	      ref: "input",
	      class: [_vm.prefixCls + '-input'],
	      style: _vm.inputStyle,
	      attrs: {
	        "type": "text",
	        "placeholder": _vm.showPlaceholder ? _vm.localePlaceholder : ''
	      },
	      domProps: {
	        "value": _vm.query
	      },
	      on: {
	        "blur": _vm.handleBlur,
	        "keydown": [_vm.resetInputState, function ($event) {
	          if (!('button' in $event) && _vm._k($event.keyCode, "delete", [8, 46])) {
	            return null;
	          }
	          _vm.handleInputDelete($event);
	        }],
	        "input": function input($event) {
	          if ($event.target.composing) {
	            return;
	          }
	          _vm.query = $event.target.value;
	        }
	      }
	    }) : _vm._e(), _vm._v(" "), _c('Icon', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.showCloseIcon,
	        expression: "showCloseIcon"
	      }],
	      class: [_vm.prefixCls + '-arrow'],
	      attrs: {
	        "type": "ios-close"
	      },
	      nativeOn: {
	        "click": function click($event) {
	          $event.stopPropagation();
	          _vm.clearSingleSelect($event);
	        }
	      }
	    }), _vm._v(" "), !_vm.remote ? _c('Icon', {
	      class: [_vm.prefixCls + '-arrow'],
	      attrs: {
	        "type": "arrow-down-b"
	      }
	    }) : _vm._e()], 2), _vm._v(" "), _c('transition', {
	      attrs: {
	        "name": _vm.transitionName
	      }
	    }, [_c('Drop', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.dropVisible,
	        expression: "dropVisible"
	      }],
	      ref: "dropdown",
	      attrs: {
	        "placement": _vm.placement
	      }
	    }, [_c('ul', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.notFountShow,
	        expression: "notFountShow"
	      }],
	      class: [_vm.prefixCls + '-not-found']
	    }, [_c('li', [_vm._v(_vm._s(_vm.localeNotFoundText))])]), _vm._v(" "), _c('ul', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: !_vm.notFound && !_vm.remote || _vm.remote && !_vm.loading && !_vm.notFound,
	        expression: "(!notFound && !remote) || (remote && !loading && !notFound)"
	      }],
	      class: [_vm.prefixCls + '-dropdown-list']
	    }, [_vm._t("default")], 2), _vm._v(" "), _c('ul', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.loading,
	        expression: "loading"
	      }],
	      class: [_vm.prefixCls + '-loading']
	    }, [_vm._v(_vm._s(_vm.localeLoadingText))])])], 1)], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 268 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_vm.showHead ? _c('div', {
	      class: _vm.headClasses
	    }, [_vm._t("title")], 2) : _vm._e(), _vm._v(" "), _vm.showExtra ? _c('div', {
	      class: _vm.extraClasses
	    }, [_vm._t("extra")], 2) : _vm._e(), _vm._v(" "), _c('div', {
	      class: _vm.bodyClasses,
	      style: _vm.bodyStyles
	    }, [_vm._t("default")], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 269 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.wrapClasses
	    }, [_vm.type !== 'textarea' ? [_vm.prepend ? _c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.slotReady,
	        expression: "slotReady"
	      }],
	      class: [_vm.prefixCls + '-group-prepend']
	    }, [_vm._t("prepend")], 2) : _vm._e(), _vm._v(" "), _vm.icon ? _c('i', {
	      staticClass: "ivu-icon",
	      class: ['ivu-icon-' + _vm.icon, _vm.prefixCls + '-icon', _vm.prefixCls + '-icon-normal'],
	      on: {
	        "click": _vm.handleIconClick
	      }
	    }) : _vm._e(), _vm._v(" "), _c('transition', {
	      attrs: {
	        "name": "fade"
	      }
	    }, [!_vm.icon ? _c('i', {
	      staticClass: "ivu-icon ivu-icon-load-c ivu-load-loop",
	      class: [_vm.prefixCls + '-icon', _vm.prefixCls + '-icon-validate']
	    }) : _vm._e()]), _vm._v(" "), _c('input', {
	      ref: "input",
	      class: _vm.inputClasses,
	      attrs: {
	        "type": _vm.type,
	        "placeholder": _vm.placeholder,
	        "disabled": _vm.disabled,
	        "maxlength": _vm.maxlength,
	        "readonly": _vm.readonly,
	        "name": _vm.name,
	        "number": _vm.number,
	        "autofocus": _vm.autofocus
	      },
	      domProps: {
	        "value": _vm.currentValue
	      },
	      on: {
	        "keyup": function keyup($event) {
	          if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) {
	            return null;
	          }
	          _vm.handleEnter($event);
	        },
	        "focus": _vm.handleFocus,
	        "blur": _vm.handleBlur,
	        "input": _vm.handleInput,
	        "change": _vm.handleChange
	      }
	    }), _vm._v(" "), _vm.append ? _c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.slotReady,
	        expression: "slotReady"
	      }],
	      class: [_vm.prefixCls + '-group-append']
	    }, [_vm._t("append")], 2) : _vm._e()] : _c('textarea', {
	      ref: "textarea",
	      class: _vm.textareaClasses,
	      style: _vm.textareaStyles,
	      attrs: {
	        "placeholder": _vm.placeholder,
	        "disabled": _vm.disabled,
	        "rows": _vm.rows,
	        "maxlength": _vm.maxlength,
	        "readonly": _vm.readonly,
	        "name": _vm.name,
	        "autofocus": _vm.autofocus
	      },
	      domProps: {
	        "value": _vm.value
	      },
	      on: {
	        "keyup": function keyup($event) {
	          if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) {
	            return null;
	          }
	          _vm.handleEnter($event);
	        },
	        "focus": _vm.handleFocus,
	        "blur": _vm.handleBlur,
	        "input": _vm.handleInput
	      }
	    })], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 270 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('collapse-transition', [_c('ul', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.visible,
	        expression: "visible"
	      }],
	      class: _vm.classes
	    }, [_c('li', [_c('span', {
	      class: _vm.arrowClasses,
	      on: {
	        "click": _vm.handleExpand
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "arrow-right-b"
	      }
	    })], 1), _vm._v(" "), _vm.showCheckbox ? _c('Checkbox', {
	      attrs: {
	        "value": _vm.data.checked,
	        "indeterminate": _vm.indeterminate,
	        "disabled": _vm.data.disabled || _vm.data.disableCheckbox
	      },
	      nativeOn: {
	        "click": function click($event) {
	          $event.preventDefault();
	          _vm.handleCheck($event);
	        }
	      }
	    }) : _vm._e(), _vm._v(" "), _c('span', {
	      class: _vm.titleClasses,
	      domProps: {
	        "innerHTML": _vm._s(_vm.data.title)
	      },
	      on: {
	        "click": _vm.handleSelect
	      }
	    }), _vm._v(" "), _vm._l(_vm.data.children, function (item) {
	      return _c('Tree-node', {
	        key: item.nodeKey,
	        attrs: {
	          "data": item,
	          "visible": _vm.data.expand,
	          "multiple": _vm.multiple,
	          "show-checkbox": _vm.showCheckbox
	        }
	      });
	    })], 2)])]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 271 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.itemClasses
	    }, [_c('div', {
	      class: _vm.headerClasses,
	      on: {
	        "click": _vm.toggle
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "arrow-right-b"
	      }
	    }), _vm._v(" "), _vm._t("default")], 2), _vm._v(" "), _c('collapse-transition', [_c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.isActive,
	        expression: "isActive"
	      }],
	      class: _vm.contentClasses
	    }, [_c('div', {
	      class: _vm.boxClasses
	    }, [_vm._t("content")], 2)])])], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 272 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('transition', {
	      attrs: {
	        "name": "fade"
	      }
	    }, [_c('div', {
	      class: _vm.classes
	    }, [_vm.showDot ? _c('span', {
	      class: _vm.dotClasses
	    }) : _vm._e(), _c('span', {
	      class: _vm.textClasses
	    }, [_vm._t("default")], 2), _vm.closable ? _c('Icon', {
	      attrs: {
	        "type": "ios-close-empty"
	      },
	      nativeOn: {
	        "click": function click($event) {
	          $event.stopPropagation();
	          _vm.close($event);
	        }
	      }
	    }) : _vm._e()], 1)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 273 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('transition', {
	      attrs: {
	        "name": "fade"
	      }
	    }, [_c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.show,
	        expression: "show"
	      }],
	      class: _vm.classes,
	      style: _vm.outerStyles
	    }, [_c('div', {
	      class: _vm.innerClasses,
	      style: _vm.styles
	    })])]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 274 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('ul', {
	      class: _vm.classes
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 275 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.prefixCls
	    }, [_vm._l(_vm.data, function (item) {
	      return _c('Tree-node', {
	        key: item.nodeKey,
	        attrs: {
	          "data": item,
	          "visible": "",
	          "multiple": _vm.multiple,
	          "show-checkbox": _vm.showCheckbox
	        }
	      });
	    }), _vm._v(" "), !_vm.data.length ? _c('div', {
	      class: [_vm.prefixCls + '-empty']
	    }, [_vm._v(_vm._s(_vm.localeEmptyText))]) : _vm._e()], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 276 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('li', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: !_vm.hidden,
	        expression: "!hidden"
	      }],
	      class: _vm.classes,
	      on: {
	        "click": function click($event) {
	          $event.stopPropagation();
	          _vm.select($event);
	        },
	        "mouseout": function mouseout($event) {
	          $event.stopPropagation();
	          _vm.blur($event);
	        }
	      }
	    }, [_vm._t("default", [_vm._v(_vm._s(_vm.showLabel))])], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 277 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.prefixCls,
	      style: _vm.styles
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 278 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.show,
	        expression: "show"
	      }],
	      class: _vm.prefixCls
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 279 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('ul', {
	      staticClass: "ivu-dropdown-menu"
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 280 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.prefixCls + '-operation'
	    }, [_c('i-button', {
	      attrs: {
	        "type": "primary",
	        "size": "small",
	        "disabled": !_vm.rightActive
	      },
	      nativeOn: {
	        "click": function click($event) {
	          _vm.moveToLeft($event);
	        }
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "ios-arrow-left"
	      }
	    }), _vm._v(" " + _vm._s(_vm.operations[0]) + "\n    ")], 1), _vm._v(" "), _c('i-button', {
	      attrs: {
	        "type": "primary",
	        "size": "small",
	        "disabled": !_vm.leftActive
	      },
	      nativeOn: {
	        "click": function click($event) {
	          _vm.moveToRight($event);
	        }
	      }
	    }, [_vm._v("\n        " + _vm._s(_vm.operations[1]) + " "), _c('Icon', {
	      attrs: {
	        "type": "ios-arrow-right"
	      }
	    })], 1)], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 281 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes,
	      style: _vm.styles
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 282 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: [_vm.prefixCls]
	    }, [_c('div', {
	      class: _vm.classes,
	      on: {
	        "click": _vm.handleClick,
	        "drop": function drop($event) {
	          $event.preventDefault();
	          _vm.onDrop($event);
	        },
	        "dragover": function dragover($event) {
	          $event.preventDefault();
	          _vm.dragOver = true;
	        },
	        "dragleave": function dragleave($event) {
	          $event.preventDefault();
	          _vm.dragOver = false;
	        }
	      }
	    }, [_c('input', {
	      ref: "input",
	      class: [_vm.prefixCls + '-input'],
	      attrs: {
	        "type": "file",
	        "multiple": _vm.multiple,
	        "accept": _vm.accept
	      },
	      on: {
	        "change": _vm.handleChange
	      }
	    }), _vm._v(" "), _vm._t("default")], 2), _vm._v(" "), _vm._t("tip"), _vm._v(" "), _vm.showUploadList ? _c('upload-list', {
	      attrs: {
	        "files": _vm.fileList
	      },
	      on: {
	        "on-file-remove": _vm.handleRemove,
	        "on-file-preview": _vm.handlePreview
	      }
	    }) : _vm._e()], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 283 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('li', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: !_vm.hidden,
	        expression: "!hidden"
	      }],
	      class: [_vm.prefixCls + '-wrap']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-title']
	    }, [_vm._v(_vm._s(_vm.label))]), _vm._v(" "), _c('ul', [_c('li', {
	      ref: "options",
	      class: [_vm.prefixCls]
	    }, [_vm._t("default")], 2)])]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 284 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [!_vm.range && _vm.showInput ? _c('Input-number', {
	      attrs: {
	        "min": _vm.min,
	        "max": _vm.max,
	        "step": _vm.step,
	        "value": _vm.currentValue,
	        "disabled": _vm.disabled
	      },
	      on: {
	        "on-change": _vm.handleInputChange
	      }
	    }) : _vm._e(), _vm._v(" "), _c('div', {
	      ref: "slider",
	      class: [_vm.prefixCls + '-wrap'],
	      on: {
	        "click": function click($event) {
	          if ($event.target !== $event.currentTarget) {
	            return null;
	          }
	          _vm.sliderClick($event);
	        }
	      }
	    }, [_vm.showStops ? _vm._l(_vm.stops, function (item) {
	      return _c('div', {
	        class: [_vm.prefixCls + '-stop'],
	        style: {
	          'left': item + '%'
	        },
	        on: {
	          "click": function click($event) {
	            if ($event.target !== $event.currentTarget) {
	              return null;
	            }
	            _vm.sliderClick($event);
	          }
	        }
	      });
	    }) : _vm._e(), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-bar'],
	      style: _vm.barStyle,
	      on: {
	        "click": function click($event) {
	          if ($event.target !== $event.currentTarget) {
	            return null;
	          }
	          _vm.sliderClick($event);
	        }
	      }
	    }), _vm._v(" "), _vm.range ? [_c('div', {
	      class: [_vm.prefixCls + '-button-wrap'],
	      style: {
	        left: _vm.firstPosition + '%'
	      },
	      on: {
	        "mousedown": _vm.onFirstButtonDown
	      }
	    }, [_c('Tooltip', {
	      ref: "tooltip",
	      attrs: {
	        "controlled": _vm.firstDragging,
	        "placement": "top",
	        "content": _vm.tipFormat(_vm.currentValue[0]),
	        "disabled": _vm.tipDisabled,
	        "always": _vm.showTip === 'always'
	      }
	    }, [_c('div', {
	      class: _vm.button1Classes
	    })])], 1), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-button-wrap'],
	      style: {
	        left: _vm.secondPosition + '%'
	      },
	      on: {
	        "mousedown": _vm.onSecondButtonDown
	      }
	    }, [_c('Tooltip', {
	      ref: "tooltip2",
	      attrs: {
	        "controlled": _vm.secondDragging,
	        "placement": "top",
	        "content": _vm.tipFormat(_vm.currentValue[1]),
	        "disabled": _vm.tipDisabled,
	        "always": _vm.showTip === 'always'
	      }
	    }, [_c('div', {
	      class: _vm.button2Classes
	    })])], 1)] : [_c('div', {
	      class: [_vm.prefixCls + '-button-wrap'],
	      style: {
	        left: _vm.singlePosition + '%'
	      },
	      on: {
	        "mousedown": _vm.onSingleButtonDown
	      }
	    }, [_c('Tooltip', {
	      ref: "tooltip",
	      attrs: {
	        "controlled": _vm.dragging,
	        "placement": "top",
	        "content": _vm.tipFormat(_vm.currentValue),
	        "disabled": _vm.tipDisabled,
	        "always": _vm.showTip === 'always'
	      }
	    }, [_c('div', {
	      class: _vm.buttonClasses
	    })])], 1)]], 2)], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 285 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 286 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_vm.shortcuts.length ? _c('div', {
	      class: [_vm.prefixCls + '-sidebar']
	    }, _vm._l(_vm.shortcuts, function (shortcut) {
	      return _c('div', {
	        class: [_vm.prefixCls + '-shortcut'],
	        on: {
	          "click": function click($event) {
	            _vm.handleShortcutClick(shortcut);
	          }
	        }
	      }, [_vm._v(_vm._s(shortcut.text))]);
	    })) : _vm._e(), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-body']
	    }, [_c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.currentView !== 'time',
	        expression: "currentView !== 'time'"
	      }],
	      class: [_vm.datePrefixCls + '-header']
	    }, [_c('span', {
	      class: _vm.iconBtnCls('prev', '-double'),
	      on: {
	        "click": _vm.prevYear
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "ios-arrow-left"
	      }
	    })], 1), _vm._v(" "), _c('span', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.currentView === 'date',
	        expression: "currentView === 'date'"
	      }],
	      class: _vm.iconBtnCls('prev'),
	      on: {
	        "click": _vm.prevMonth
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "ios-arrow-left"
	      }
	    })], 1), _vm._v(" "), _c('span', {
	      class: [_vm.datePrefixCls + '-header-label'],
	      on: {
	        "click": _vm.showYearPicker
	      }
	    }, [_vm._v(_vm._s(_vm.yearLabel))]), _vm._v(" "), _c('span', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.currentView === 'date',
	        expression: "currentView === 'date'"
	      }],
	      class: [_vm.datePrefixCls + '-header-label'],
	      on: {
	        "click": _vm.showMonthPicker
	      }
	    }, [_vm._v(_vm._s(_vm.monthLabel))]), _vm._v(" "), _c('span', {
	      class: _vm.iconBtnCls('next', '-double'),
	      on: {
	        "click": _vm.nextYear
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "ios-arrow-right"
	      }
	    })], 1), _vm._v(" "), _c('span', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.currentView === 'date',
	        expression: "currentView === 'date'"
	      }],
	      class: _vm.iconBtnCls('next'),
	      on: {
	        "click": _vm.nextMonth
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "ios-arrow-right"
	      }
	    })], 1)]), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-content']
	    }, [_c('date-table', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.currentView === 'date',
	        expression: "currentView === 'date'"
	      }],
	      attrs: {
	        "year": _vm.year,
	        "month": _vm.month,
	        "date": _vm.date,
	        "value": _vm.value,
	        "selection-mode": _vm.selectionMode,
	        "disabled-date": _vm.disabledDate
	      },
	      on: {
	        "on-pick": _vm.handleDatePick,
	        "on-pick-click": _vm.handlePickClick
	      }
	    }), _vm._v(" "), _c('year-table', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.currentView === 'year',
	        expression: "currentView === 'year'"
	      }],
	      ref: "yearTable",
	      attrs: {
	        "year": _vm.year,
	        "date": _vm.date,
	        "selection-mode": _vm.selectionMode,
	        "disabled-date": _vm.disabledDate
	      },
	      on: {
	        "on-pick": _vm.handleYearPick,
	        "on-pick-click": _vm.handlePickClick
	      }
	    }), _vm._v(" "), _c('month-table', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.currentView === 'month',
	        expression: "currentView === 'month'"
	      }],
	      ref: "monthTable",
	      attrs: {
	        "month": _vm.month,
	        "date": _vm.date,
	        "selection-mode": _vm.selectionMode,
	        "disabled-date": _vm.disabledDate
	      },
	      on: {
	        "on-pick": _vm.handleMonthPick,
	        "on-pick-click": _vm.handlePickClick
	      }
	    }), _vm._v(" "), _c('time-picker', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.currentView === 'time',
	        expression: "currentView === 'time'"
	      }],
	      ref: "timePicker",
	      attrs: {
	        "show-date": ""
	      },
	      on: {
	        "on-pick": _vm.handleTimePick,
	        "on-pick-click": _vm.handlePickClick
	      }
	    })], 1), _vm._v(" "), _vm.confirm ? _c('Confirm', {
	      attrs: {
	        "show-time": _vm.showTime,
	        "is-time": _vm.isTime
	      },
	      on: {
	        "on-pick-toggle-time": _vm.handleToggleTime,
	        "on-pick-clear": _vm.handlePickClear,
	        "on-pick-success": _vm.handlePickSuccess
	      }
	    }) : _vm._e()], 1)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 287 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes,
	      on: {
	        "click": _vm.handleClick,
	        "mousemove": _vm.handleMouseMove
	      }
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-header']
	    }, [_c('span', [_vm._v(_vm._s(_vm.t('i.datepicker.weeks.sun')))]), _c('span', [_vm._v(_vm._s(_vm.t('i.datepicker.weeks.mon')))]), _c('span', [_vm._v(_vm._s(_vm.t('i.datepicker.weeks.tue')))]), _c('span', [_vm._v(_vm._s(_vm.t('i.datepicker.weeks.wed')))]), _c('span', [_vm._v(_vm._s(_vm.t('i.datepicker.weeks.thu')))]), _c('span', [_vm._v(_vm._s(_vm.t('i.datepicker.weeks.fri')))]), _c('span', [_vm._v(_vm._s(_vm.t('i.datepicker.weeks.sat')))])]), _vm._v(" "), _vm._l(_vm.readCells, function (cell, index) {
	      return _c('span', {
	        class: _vm.getCellCls(cell)
	      }, [_c('em', {
	        attrs: {
	          "index": index
	        }
	      }, [_vm._v(_vm._s(cell.text))])]);
	    })], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 288 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 289 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('span', [_vm.data && _vm.data.length ? _c('ul', {
	      class: [_vm.prefixCls + '-menu']
	    }, _vm._l(_vm.data, function (item) {
	      return _c('Casitem', {
	        key: _vm.getKey(),
	        attrs: {
	          "prefix-cls": _vm.prefixCls,
	          "data": item,
	          "tmp-item": _vm.tmpItem
	        },
	        nativeOn: {
	          "click": function click($event) {
	            $event.stopPropagation();
	            _vm.handleClickItem(item);
	          },
	          "mouseenter": function mouseenter($event) {
	            $event.stopPropagation();
	            _vm.handleHoverItem(item);
	          }
	        }
	      });
	    })) : _vm._e(), _vm.sublist && _vm.sublist.length ? _c('Caspanel', {
	      attrs: {
	        "prefix-cls": _vm.prefixCls,
	        "data": _vm.sublist,
	        "disabled": _vm.disabled,
	        "trigger": _vm.trigger,
	        "change-on-select": _vm.changeOnSelect
	      }
	    }) : _vm._e()], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 290 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      directives: [{
	        name: "clickoutside",
	        rawName: "v-clickoutside",
	        value: _vm.handleClose,
	        expression: "handleClose"
	      }],
	      class: _vm.classes,
	      on: {
	        "mouseenter": _vm.handleMouseenter,
	        "mouseleave": _vm.handleMouseleave
	      }
	    }, [_c('div', {
	      ref: "reference",
	      class: [_vm.prefixCls + '-rel'],
	      on: {
	        "click": _vm.handleClick,
	        "mousedown": function mousedown($event) {
	          _vm.handleFocus(false);
	        },
	        "mouseup": function mouseup($event) {
	          _vm.handleBlur(false);
	        }
	      }
	    }, [_vm._t("default")], 2), _vm._v(" "), _c('transition', {
	      attrs: {
	        "name": "fade"
	      }
	    }, [_c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.visible,
	        expression: "visible"
	      }],
	      ref: "popper",
	      class: [_vm.prefixCls + '-popper'],
	      style: _vm.styles
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-content']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-arrow']
	    }), _vm._v(" "), _vm.confirm ? _c('div', {
	      class: [_vm.prefixCls + '-inner']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-body']
	    }, [_c('i', {
	      staticClass: "ivu-icon ivu-icon-help-circled"
	    }), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-body-message']
	    }, [_vm._t("title", [_vm._v(_vm._s(_vm.title))])], 2)]), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-footer']
	    }, [_c('i-button', {
	      attrs: {
	        "type": "text",
	        "size": "small"
	      },
	      nativeOn: {
	        "click": function click($event) {
	          _vm.cancel($event);
	        }
	      }
	    }, [_vm._v(_vm._s(_vm.localeCancelText))]), _vm._v(" "), _c('i-button', {
	      attrs: {
	        "type": "primary",
	        "size": "small"
	      },
	      nativeOn: {
	        "click": function click($event) {
	          _vm.ok($event);
	        }
	      }
	    }, [_vm._v(_vm._s(_vm.localeOkText))])], 1)]) : _vm._e(), _vm._v(" "), !_vm.confirm ? _c('div', {
	      class: [_vm.prefixCls + '-inner']
	    }, [_vm.showTitle ? _c('div', {
	      ref: "title",
	      class: [_vm.prefixCls + '-title']
	    }, [_vm._t("title", [_c('div', {
	      class: [_vm.prefixCls + '-title-inner']
	    }, [_vm._v(_vm._s(_vm.title))])])], 2) : _vm._e(), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-body']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-body-content']
	    }, [_vm._t("content", [_c('div', {
	      class: [_vm.prefixCls + '-body-content-inner']
	    }, [_vm._v(_vm._s(_vm.content))])])], 2)])]) : _vm._e()])])])], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 291 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('tr', {
	      class: _vm.rowClasses(_vm.row._index)
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 292 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-bar']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-nav-container']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-nav-wrap']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-nav-scroll']
	    }, [_c('div', {
	      ref: "nav",
	      class: [_vm.prefixCls + '-nav']
	    }, [_c('div', {
	      class: _vm.barClasses,
	      style: _vm.barStyle
	    }), _vm._v(" "), _vm._l(_vm.navList, function (item, index) {
	      return _c('div', {
	        class: _vm.tabCls(item),
	        on: {
	          "click": function click($event) {
	            _vm.handleChange(index);
	          }
	        }
	      }, [item.icon !== '' ? _c('Icon', {
	        attrs: {
	          "type": item.icon
	        }
	      }) : _vm._e(), _vm._v(" "), item.labelType === 'function' ? _c('Render', {
	        attrs: {
	          "render": item.label
	        }
	      }) : [_vm._v(_vm._s(item.label))], _vm._v(" "), _vm.showClose(item) ? _c('Icon', {
	        attrs: {
	          "type": "ios-close-empty"
	        },
	        nativeOn: {
	          "click": function click($event) {
	            $event.stopPropagation();
	            _vm.handleRemove(index);
	          }
	        }
	      }) : _vm._e()], 2);
	    })], 2), _vm._v(" "), _vm.showSlot ? _c('div', {
	      class: [_vm.prefixCls + '-nav-right']
	    }, [_vm._t("extra")], 2) : _vm._e()])])])]), _vm._v(" "), _c('div', {
	      class: _vm.contentClasses,
	      style: _vm.contentStyle
	    }, [_vm._t("default")], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 293 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes,
	      on: {
	        "mouseleave": _vm.handleMouseleave
	      }
	    }, [_vm._l(_vm.count, function (item) {
	      return _c('div', {
	        class: _vm.starCls(item),
	        on: {
	          "mousemove": function mousemove($event) {
	            _vm.handleMousemove(item, $event);
	          },
	          "click": function click($event) {
	            _vm.handleClick(item);
	          }
	        }
	      }, [_c('span', {
	        class: [_vm.prefixCls + '-star-content'],
	        attrs: {
	          "type": "half"
	        }
	      })]);
	    }), _vm._v(" "), _vm.showText ? _c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.currentValue > 0,
	        expression: "currentValue > 0"
	      }],
	      class: [_vm.prefixCls + '-text']
	    }, [_vm._t("default", [_c('span', [_vm._v(_vm._s(_vm.currentValue))]), _vm._v(" "), _vm.currentValue <= 1 ? _c('span', [_vm._v(_vm._s(_vm.t('i.rate.star')))]) : _c('span', [_vm._v(_vm._s(_vm.t('i.rate.stars')))])])], 2) : _vm._e()], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 294 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('ul', {
	      class: _vm.classes,
	      style: _vm.styles
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 295 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 296 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('transition', {
	      attrs: {
	        "name": "fade"
	      }
	    }, [_c('div', {
	      class: _vm.classes
	    }, [_c('div', {
	      class: _vm.mainClasses
	    }, [_c('span', {
	      class: _vm.dotClasses
	    }), _vm._v(" "), _c('div', {
	      class: _vm.textClasses
	    }, [_vm._t("default")], 2)])])]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 297 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes,
	      style: _vm.styles
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 298 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('label', {
	      class: _vm.wrapClasses
	    }, [_c('span', {
	      class: _vm.radioClasses
	    }, [_c('span', {
	      class: _vm.innerClasses
	    }), _vm._v(" "), _c('input', {
	      class: _vm.inputClasses,
	      attrs: {
	        "type": "radio",
	        "disabled": _vm.disabled
	      },
	      domProps: {
	        "checked": _vm.currentValue
	      },
	      on: {
	        "change": _vm.change
	      }
	    })]), _vm._t("default", [_vm._v(_vm._s(_vm.label))])], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 299 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: [_vm.prefixCls],
	      on: {
	        "mouseenter": _vm.handleShowPopper,
	        "mouseleave": _vm.handleClosePopper
	      }
	    }, [_c('div', {
	      ref: "reference",
	      class: [_vm.prefixCls + '-rel']
	    }, [_vm._t("default")], 2), _vm._v(" "), _c('transition', {
	      attrs: {
	        "name": "fade"
	      }
	    }, [_c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: !_vm.disabled && (_vm.visible || _vm.always),
	        expression: "!disabled && (visible || always)"
	      }],
	      ref: "popper",
	      class: [_vm.prefixCls + '-popper']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-content']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-arrow']
	    }), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-inner']
	    }, [_vm._t("content", [_vm._v(_vm._s(_vm.content))])], 2)])])])], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 300 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('li', {
	      class: _vm.classes,
	      on: {
	        "mouseenter": _vm.handleMouseenter,
	        "mouseleave": _vm.handleMouseleave
	      }
	    }, [_c('div', {
	      ref: "reference",
	      class: [_vm.prefixCls + '-submenu-title'],
	      on: {
	        "click": _vm.handleClick
	      }
	    }, [_vm._t("title"), _vm._v(" "), _c('Icon', {
	      class: [_vm.prefixCls + '-submenu-title-icon'],
	      attrs: {
	        "type": "ios-arrow-down"
	      }
	    })], 2), _vm._v(" "), _vm.mode === 'vertical' ? _c('collapse-transition', [_c('ul', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.opened,
	        expression: "opened"
	      }],
	      class: [_vm.prefixCls]
	    }, [_vm._t("default")], 2)]) : _c('transition', {
	      attrs: {
	        "name": "slide-up"
	      }
	    }, [_c('Drop', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.opened,
	        expression: "opened"
	      }],
	      ref: "drop",
	      style: _vm.dropStyle,
	      attrs: {
	        "placement": "bottom"
	      }
	    }, [_c('ul', {
	      class: [_vm.prefixCls + '-drop-list']
	    }, [_vm._t("default")], 2)])], 1)], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 301 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      staticClass: "ivu-select-dropdown",
	      style: _vm.styles
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 302 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('transition', {
	      attrs: {
	        "name": _vm.transitionName
	      }
	    }, [_c('div', {
	      class: _vm.classes,
	      style: _vm.styles
	    }, [_vm.type === 'notice' ? [_c('div', {
	      ref: "content",
	      class: [_vm.baseClass + '-content'],
	      domProps: {
	        "innerHTML": _vm._s(_vm.content)
	      }
	    }), _vm._v(" "), _vm.closable ? _c('a', {
	      class: [_vm.baseClass + '-close'],
	      on: {
	        "click": _vm.close
	      }
	    }, [_c('i', {
	      staticClass: "ivu-icon ivu-icon-ios-close-empty"
	    })]) : _vm._e()] : _vm._e(), _vm._v(" "), _vm.type === 'message' ? [_c('div', {
	      ref: "content",
	      class: [_vm.baseClass + '-content']
	    }, [_c('div', {
	      class: [_vm.baseClass + '-content-text'],
	      domProps: {
	        "innerHTML": _vm._s(_vm.content)
	      }
	    }), _vm._v(" "), _vm.closable ? _c('a', {
	      class: [_vm.baseClass + '-close'],
	      on: {
	        "click": _vm.close
	      }
	    }, [_c('i', {
	      staticClass: "ivu-icon ivu-icon-ios-close-empty"
	    })]) : _vm._e()])] : _vm._e()], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 303 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-body']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-content', _vm.prefixCls + '-content-left']
	    }, [_c('div', {
	      class: [_vm.timePrefixCls + '-header']
	    }, [_vm.showDate ? [_vm._v(_vm._s(_vm.visibleDate))] : [_vm._v(_vm._s(_vm.t('i.datepicker.startTime')))]], 2), _vm._v(" "), _c('time-spinner', {
	      ref: "timeSpinner",
	      attrs: {
	        "show-seconds": _vm.showSeconds,
	        "hours": _vm.hours,
	        "minutes": _vm.minutes,
	        "seconds": _vm.seconds,
	        "disabled-hours": _vm.disabledHours,
	        "disabled-minutes": _vm.disabledMinutes,
	        "disabled-seconds": _vm.disabledSeconds,
	        "hide-disabled-options": _vm.hideDisabledOptions
	      },
	      on: {
	        "on-change": _vm.handleStartChange,
	        "on-pick-click": _vm.handlePickClick
	      }
	    })], 1), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-content', _vm.prefixCls + '-content-right']
	    }, [_c('div', {
	      class: [_vm.timePrefixCls + '-header']
	    }, [_vm.showDate ? [_vm._v(_vm._s(_vm.visibleDateEnd))] : [_vm._v(_vm._s(_vm.t('i.datepicker.endTime')))]], 2), _vm._v(" "), _c('time-spinner', {
	      ref: "timeSpinnerEnd",
	      attrs: {
	        "show-seconds": _vm.showSeconds,
	        "hours": _vm.hoursEnd,
	        "minutes": _vm.minutesEnd,
	        "seconds": _vm.secondsEnd,
	        "disabled-hours": _vm.disabledHours,
	        "disabled-minutes": _vm.disabledMinutes,
	        "disabled-seconds": _vm.disabledSeconds,
	        "hide-disabled-options": _vm.hideDisabledOptions
	      },
	      on: {
	        "on-change": _vm.handleEndChange,
	        "on-pick-click": _vm.handlePickClick
	      }
	    })], 1), _vm._v(" "), _vm.confirm ? _c('Confirm', {
	      on: {
	        "on-pick-clear": _vm.handlePickClear,
	        "on-pick-success": _vm.handlePickSuccess
	      }
	    }) : _vm._e()], 1)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 304 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.prefixCls
	    }, [_c('i-input', {
	      attrs: {
	        "size": "small",
	        "icon": _vm.icon,
	        "placeholder": _vm.placeholder
	      },
	      on: {
	        "on-click": _vm.handleClick
	      },
	      model: {
	        value: _vm.currentQuery,
	        callback: function callback($$v) {
	          _vm.currentQuery = $$v;
	        },
	        expression: "currentQuery"
	      }
	    })], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 305 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('button', {
	      class: _vm.classes,
	      attrs: {
	        "type": _vm.htmlType,
	        "disabled": _vm.disabled
	      },
	      on: {
	        "click": _vm.handleClick
	      }
	    }, [_vm.loading ? _c('Icon', {
	      staticClass: "ivu-load-loop",
	      attrs: {
	        "type": "load-c"
	      }
	    }) : _vm._e(), _vm._v(" "), _vm.icon && !_vm.loading ? _c('Icon', {
	      attrs: {
	        "type": _vm.icon
	      }
	    }) : _vm._e(), _vm._v(" "), _vm.showSlot ? _c('span', {
	      ref: "slot"
	    }, [_vm._t("default")], 2) : _vm._e()], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 306 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: [_vm.prefixCls + '-body-wrapper']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-body']
	    }, [_vm.showDate ? _c('div', {
	      class: [_vm.timePrefixCls + '-header']
	    }, [_vm._v(_vm._s(_vm.visibleDate))]) : _vm._e(), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-content']
	    }, [_c('time-spinner', {
	      ref: "timeSpinner",
	      attrs: {
	        "show-seconds": _vm.showSeconds,
	        "hours": _vm.hours,
	        "minutes": _vm.minutes,
	        "seconds": _vm.seconds,
	        "disabled-hours": _vm.disabledHours,
	        "disabled-minutes": _vm.disabledMinutes,
	        "disabled-seconds": _vm.disabledSeconds,
	        "hide-disabled-options": _vm.hideDisabledOptions
	      },
	      on: {
	        "on-change": _vm.handleChange,
	        "on-pick-click": _vm.handlePickClick
	      }
	    })], 1), _vm._v(" "), _vm.confirm ? _c('Confirm', {
	      on: {
	        "on-pick-clear": _vm.handlePickClear,
	        "on-pick-success": _vm.handlePickSuccess
	      }
	    }) : _vm._e()], 1)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 307 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('span', [_vm.href ? _c('a', {
	      class: _vm.linkClasses,
	      on: {
	        "click": _vm.handleClick
	      }
	    }, [_vm._t("default")], 2) : _c('span', {
	      class: _vm.linkClasses
	    }, [_vm._t("default")], 2), _vm._v(" "), !_vm.showSeparator ? _c('span', {
	      class: _vm.separatorClasses,
	      domProps: {
	        "innerHTML": _vm._s(_vm.separator)
	      }
	    }) : _c('span', {
	      class: _vm.separatorClasses
	    }, [_vm._t("separator")], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 308 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.wrapClasses
	    }, [_c('div', {
	      class: _vm.handlerClasses
	    }, [_c('a', {
	      class: _vm.upClasses,
	      on: {
	        "click": _vm.up,
	        "mouse": function mouse($event) {
	          if (!('button' in $event) && _vm._k($event.keyCode, "down", 40)) {
	            return null;
	          }
	          _vm.preventDefault($event);
	        }
	      }
	    }, [_c('span', {
	      class: _vm.innerUpClasses,
	      on: {
	        "click": _vm.preventDefault
	      }
	    })]), _vm._v(" "), _c('a', {
	      class: _vm.downClasses,
	      on: {
	        "click": _vm.down,
	        "mouse": function mouse($event) {
	          if (!('button' in $event) && _vm._k($event.keyCode, "down", 40)) {
	            return null;
	          }
	          _vm.preventDefault($event);
	        }
	      }
	    }, [_c('span', {
	      class: _vm.innerDownClasses,
	      on: {
	        "click": _vm.preventDefault
	      }
	    })])]), _vm._v(" "), _c('div', {
	      class: _vm.inputWrapClasses
	    }, [_c('input', {
	      class: _vm.inputClasses,
	      attrs: {
	        "disabled": _vm.disabled,
	        "autocomplete": "off",
	        "autofocus": _vm.autofocus,
	        "name": _vm.name
	      },
	      domProps: {
	        "value": _vm.value
	      },
	      on: {
	        "focus": _vm.focus,
	        "blur": _vm.blur,
	        "keydown": function keydown($event) {
	          $event.stopPropagation();
	          _vm.keyDown($event);
	        },
	        "change": _vm.change
	      }
	    })])]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 309 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('label', {
	      class: _vm.wrapClasses
	    }, [_c('span', {
	      class: _vm.checkboxClasses
	    }, [_c('span', {
	      class: _vm.innerClasses
	    }), _vm._v(" "), _vm.group ? _c('input', {
	      directives: [{
	        name: "model",
	        rawName: "v-model",
	        value: _vm.model,
	        expression: "model"
	      }],
	      class: _vm.inputClasses,
	      attrs: {
	        "type": "checkbox",
	        "disabled": _vm.disabled
	      },
	      domProps: {
	        "value": _vm.label,
	        "checked": Array.isArray(_vm.model) ? _vm._i(_vm.model, _vm.label) > -1 : _vm.model
	      },
	      on: {
	        "change": _vm.change,
	        "__c": function __c($event) {
	          var $$a = _vm.model,
	              $$el = $event.target,
	              $$c = $$el.checked ? true : false;
	          if (Array.isArray($$a)) {
	            var $$v = _vm.label,
	                $$i = _vm._i($$a, $$v);
	            if ($$c) {
	              $$i < 0 && (_vm.model = $$a.concat($$v));
	            } else {
	              $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
	            }
	          } else {
	            _vm.model = $$c;
	          }
	        }
	      }
	    }) : _vm._e(), _vm._v(" "), !_vm.group ? _c('input', {
	      class: _vm.inputClasses,
	      attrs: {
	        "type": "checkbox",
	        "disabled": _vm.disabled
	      },
	      domProps: {
	        "checked": _vm.currentValue
	      },
	      on: {
	        "change": _vm.change
	      }
	    }) : _vm._e()]), _vm._v(" "), _vm._t("default", [_vm.showSlot ? _c('span', [_vm._v(_vm._s(_vm.label))]) : _vm._e()])], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 310 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('i', {
	      class: _vm.classes,
	      style: _vm.styles
	    });
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 311 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('table', {
	      style: _vm.styles,
	      attrs: {
	        "cellspacing": "0",
	        "cellpadding": "0",
	        "border": "0"
	      }
	    }, [_c('colgroup', _vm._l(_vm.columns, function (column, index) {
	      return _c('col', {
	        attrs: {
	          "width": _vm.setCellWidth(column, index, true)
	        }
	      });
	    })), _vm._v(" "), _c('thead', [_c('tr', _vm._l(_vm.columns, function (column, index) {
	      return _c('th', {
	        class: _vm.alignCls(column)
	      }, [_c('div', {
	        class: _vm.cellClasses(column)
	      }, [column.type === 'expand' ? void 0 : column.type === 'selection' ? [_c('Checkbox', {
	        attrs: {
	          "value": _vm.isSelectAll
	        },
	        on: {
	          "on-change": _vm.selectAll
	        }
	      })] : [_c('span', {
	        domProps: {
	          "innerHTML": _vm._s(_vm.renderHeader(column, index))
	        }
	      }), _vm._v(" "), column.sortable ? _c('span', {
	        class: [_vm.prefixCls + '-sort']
	      }, [_c('i', {
	        staticClass: "ivu-icon ivu-icon-arrow-up-b",
	        class: {
	          on: column._sortType === 'asc'
	        },
	        on: {
	          "click": function click($event) {
	            _vm.handleSort(index, 'asc');
	          }
	        }
	      }), _vm._v(" "), _c('i', {
	        staticClass: "ivu-icon ivu-icon-arrow-down-b",
	        class: {
	          on: column._sortType === 'desc'
	        },
	        on: {
	          "click": function click($event) {
	            _vm.handleSort(index, 'desc');
	          }
	        }
	      })]) : _vm._e(), _vm._v(" "), _vm.isPopperShow(column) ? _c('Poptip', {
	        attrs: {
	          "placement": "bottom"
	        },
	        on: {
	          "on-popper-hide": function onPopperHide($event) {
	            _vm.handleFilterHide(index);
	          }
	        },
	        model: {
	          value: column._filterVisible,
	          callback: function callback($$v) {
	            column._filterVisible = $$v;
	          },
	          expression: "column._filterVisible"
	        }
	      }, [_c('span', {
	        class: [_vm.prefixCls + '-filter']
	      }, [_c('i', {
	        staticClass: "ivu-icon ivu-icon-funnel",
	        class: {
	          on: column._isFiltered
	        }
	      })]), _vm._v(" "), column._filterMultiple ? _c('div', {
	        class: [_vm.prefixCls + '-filter-list'],
	        slot: "content"
	      }, [_c('div', {
	        class: [_vm.prefixCls + '-filter-list-item']
	      }, [_c('checkbox-group', {
	        model: {
	          value: column._filterChecked,
	          callback: function callback($$v) {
	            column._filterChecked = $$v;
	          },
	          expression: "column._filterChecked"
	        }
	      }, _vm._l(column.filters, function (item) {
	        return _c('checkbox', {
	          key: column._columnKey,
	          attrs: {
	            "label": item.value
	          }
	        }, [_vm._v(_vm._s(item.label))]);
	      }))], 1), _vm._v(" "), _c('div', {
	        class: [_vm.prefixCls + '-filter-footer']
	      }, [_c('i-button', {
	        attrs: {
	          "type": "text",
	          "size": "small",
	          "disabled": !column._filterChecked.length
	        },
	        nativeOn: {
	          "click": function click($event) {
	            _vm.handleFilter(index);
	          }
	        }
	      }, [_vm._v(_vm._s(_vm.t('i.table.confirmFilter')))]), _vm._v(" "), _c('i-button', {
	        attrs: {
	          "type": "text",
	          "size": "small"
	        },
	        nativeOn: {
	          "click": function click($event) {
	            _vm.handleReset(index);
	          }
	        }
	      }, [_vm._v(_vm._s(_vm.t('i.table.resetFilter')))])], 1)]) : _c('div', {
	        class: [_vm.prefixCls + '-filter-list'],
	        slot: "content"
	      }, [_c('ul', {
	        class: [_vm.prefixCls + '-filter-list-single']
	      }, [_c('li', {
	        class: _vm.itemAllClasses(column),
	        on: {
	          "click": function click($event) {
	            _vm.handleReset(index);
	          }
	        }
	      }, [_vm._v(_vm._s(_vm.t('i.table.clearFilter')))]), _vm._v(" "), _vm._l(column.filters, function (item) {
	        return _c('li', {
	          class: _vm.itemClasses(column, item),
	          on: {
	            "click": function click($event) {
	              _vm.handleSelect(index, item.value);
	            }
	          }
	        }, [_vm._v(_vm._s(item.label))]);
	      })], 2)])]) : _vm._e()]], 2)]);
	    }))])]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 312 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('li', {
	      class: _vm.classes
	    }, [_vm._v("\n    " + _vm._s(_vm.data.label) + "\n    "), _vm.showArrow ? _c('i', {
	      staticClass: "ivu-icon ivu-icon-ios-arrow-right"
	    }) : _vm._e(), _vm._v(" "), _vm.showLoading ? _c('i', {
	      staticClass: "ivu-icon ivu-icon-load-c ivu-load-loop"
	    }) : _vm._e()]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 313 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      directives: [{
	        name: "clickoutside",
	        rawName: "v-clickoutside",
	        value: _vm.handleClose,
	        expression: "handleClose"
	      }],
	      class: _vm.classes
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-rel'],
	      on: {
	        "click": _vm.toggleOpen
	      }
	    }, [_vm._t("default", [_c('i-input', {
	      ref: "input",
	      attrs: {
	        "readonly": !_vm.filterable,
	        "disabled": _vm.disabled,
	        "value": _vm.displayInputRender,
	        "size": _vm.size,
	        "placeholder": _vm.inputPlaceholder
	      },
	      on: {
	        "on-change": _vm.handleInput
	      }
	    }), _vm._v(" "), _c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.filterable && _vm.query === '',
	        expression: "filterable && query === ''"
	      }],
	      class: [_vm.prefixCls + '-label'],
	      on: {
	        "click": _vm.handleFocus
	      }
	    }, [_vm._v(_vm._s(_vm.displayRender))]), _vm._v(" "), _c('Icon', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.showCloseIcon,
	        expression: "showCloseIcon"
	      }],
	      class: [_vm.prefixCls + '-arrow'],
	      attrs: {
	        "type": "ios-close"
	      },
	      nativeOn: {
	        "click": function click($event) {
	          $event.stopPropagation();
	          _vm.clearSelect($event);
	        }
	      }
	    }), _vm._v(" "), _c('Icon', {
	      class: [_vm.prefixCls + '-arrow'],
	      attrs: {
	        "type": "arrow-down-b"
	      }
	    })])], 2), _vm._v(" "), _c('transition', {
	      attrs: {
	        "name": "slide-up"
	      }
	    }, [_c('Drop', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.visible,
	        expression: "visible"
	      }]
	    }, [_c('div', [_c('Caspanel', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: !_vm.filterable || _vm.filterable && _vm.query === '',
	        expression: "!filterable || (filterable && query === '')"
	      }],
	      ref: "caspanel",
	      attrs: {
	        "prefix-cls": _vm.prefixCls,
	        "data": _vm.data,
	        "disabled": _vm.disabled,
	        "change-on-select": _vm.changeOnSelect,
	        "trigger": _vm.trigger
	      }
	    }), _vm._v(" "), _c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.filterable && _vm.query !== '' && _vm.querySelections.length,
	        expression: "filterable && query !== '' && querySelections.length"
	      }],
	      class: [_vm.prefixCls + '-dropdown']
	    }, [_c('ul', {
	      class: [_vm.selectPrefixCls + '-dropdown-list']
	    }, _vm._l(_vm.querySelections, function (item, index) {
	      return _c('li', {
	        class: [_vm.selectPrefixCls + '-item', (_obj = {}, _obj[_vm.selectPrefixCls + '-item-disabled'] = item.disabled, _obj)],
	        domProps: {
	          "innerHTML": _vm._s(item.display)
	        },
	        on: {
	          "click": function click($event) {
	            _vm.handleSelectItem(index);
	          }
	        }
	      });
	      var _obj;
	    }))]), _vm._v(" "), _c('ul', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.filterable && _vm.query !== '' && !_vm.querySelections.length,
	        expression: "filterable && query !== '' && !querySelections.length"
	      }],
	      class: [_vm.prefixCls + '-not-found-tip']
	    }, [_c('li', [_vm._v(_vm._s(_vm.localeNotFoundText))])])], 1)])], 1)], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 314 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _vm.showSizer || _vm.showElevator ? _c('div', {
	      class: _vm.optsClasses
	    }, [_vm.showSizer ? _c('div', {
	      class: _vm.sizerClasses
	    }, [_c('i-select', {
	      attrs: {
	        "size": _vm.size,
	        "placement": _vm.placement
	      },
	      on: {
	        "on-change": _vm.changeSize
	      },
	      model: {
	        value: _vm.currentPageSize,
	        callback: function callback($$v) {
	          _vm.currentPageSize = $$v;
	        },
	        expression: "currentPageSize"
	      }
	    }, _vm._l(_vm.pageSizeOpts, function (item) {
	      return _c('i-option', {
	        key: item,
	        staticStyle: {
	          "text-align": "center"
	        },
	        attrs: {
	          "value": item
	        }
	      }, [_vm._v(_vm._s(item) + " " + _vm._s(_vm.t('i.page.page')))]);
	    }))], 1) : _vm._e(), _vm._v(" "), _vm.showElevator ? _c('div', {
	      class: _vm.ElevatorClasses
	    }, [_vm._v("\n        " + _vm._s(_vm.t('i.page.goto')) + "\n        "), _c('input', {
	      attrs: {
	        "type": "text"
	      },
	      domProps: {
	        "value": _vm._current
	      },
	      on: {
	        "keyup": function keyup($event) {
	          if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) {
	            return null;
	          }
	          _vm.changePage($event);
	        }
	      }
	    }), _vm._v("\n        " + _vm._s(_vm.t('i.page.p')) + "\n    ")]) : _vm._e()]) : _vm._e();
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 315 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: [_vm.prefixCls + '-confirm']
	    }, [_vm.showTime ? _c('span', {
	      class: _vm.timeClasses,
	      on: {
	        "click": _vm.handleToggleTime
	      }
	    }, [_vm.isTime ? [_vm._v(_vm._s(_vm.t('i.datepicker.selectDate')))] : [_vm._v(_vm._s(_vm.t('i.datepicker.selectTime')))]], 2) : _vm._e(), _vm._v(" "), _c('i-button', {
	      attrs: {
	        "size": "small",
	        "type": "text"
	      },
	      nativeOn: {
	        "click": function click($event) {
	          _vm.handleClear($event);
	        }
	      }
	    }, [_vm._v(_vm._s(_vm.t('i.datepicker.clear')))]), _vm._v(" "), _c('i-button', {
	      attrs: {
	        "size": "small",
	        "type": "primary"
	      },
	      nativeOn: {
	        "click": function click($event) {
	          _vm.handleSuccess($event);
	        }
	      }
	    }, [_vm._v(_vm._s(_vm.t('i.datepicker.ok')))])], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 316 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('li', {
	      class: _vm.itemClasses
	    }, [_c('div', {
	      class: _vm.tailClasses
	    }), _vm._v(" "), _c('div', {
	      ref: "dot",
	      class: _vm.headClasses,
	      style: _vm.customColor
	    }, [_vm._t("dot")], 2), _vm._v(" "), _c('div', {
	      class: _vm.contentClasses
	    }, [_vm._t("default")], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 317 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('li', {
	      class: _vm.classes,
	      on: {
	        "click": _vm.handleClick
	      }
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 318 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      directives: [{
	        name: "clickoutside",
	        rawName: "v-clickoutside",
	        value: _vm.handleClose,
	        expression: "handleClose"
	      }],
	      class: [_vm.prefixCls]
	    }, [_c('div', {
	      ref: "reference",
	      class: [_vm.prefixCls + '-rel']
	    }, [_vm._t("default", [_c('i-input', {
	      class: [_vm.prefixCls + '-editor'],
	      attrs: {
	        "readonly": !_vm.editable || _vm.readonly,
	        "disabled": _vm.disabled,
	        "size": _vm.size,
	        "placeholder": _vm.placeholder,
	        "value": _vm.visualValue,
	        "icon": _vm.iconType
	      },
	      on: {
	        "on-input-change": _vm.handleInputChange,
	        "on-focus": _vm.handleFocus,
	        "on-click": _vm.handleIconClick
	      },
	      nativeOn: {
	        "mouseenter": function mouseenter($event) {
	          _vm.handleInputMouseenter($event);
	        },
	        "mouseleave": function mouseleave($event) {
	          _vm.handleInputMouseleave($event);
	        }
	      }
	    })])], 2), _vm._v(" "), _c('transition', {
	      attrs: {
	        "name": _vm.transition
	      }
	    }, [_c('Drop', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.opened,
	        expression: "opened"
	      }],
	      ref: "drop",
	      attrs: {
	        "placement": _vm.placement
	      }
	    }, [_c('div', {
	      ref: "picker"
	    })])], 1)], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 319 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.wrapClasses,
	      style: _vm.styles
	    }, [_c('div', {
	      class: _vm.classes
	    }, [_vm.showSlotHeader ? _c('div', {
	      ref: "title",
	      class: [_vm.prefixCls + '-title']
	    }, [_vm._t("header")], 2) : _vm._e(), _vm._v(" "), _vm.showHeader ? _c('div', {
	      ref: "header",
	      class: [_vm.prefixCls + '-header'],
	      on: {
	        "mousewheel": _vm.handleMouseWheel
	      }
	    }, [_c('table-head', {
	      attrs: {
	        "prefix-cls": _vm.prefixCls,
	        "styleObject": _vm.tableStyle,
	        "columns": _vm.cloneColumns,
	        "obj-data": _vm.objData,
	        "columns-width": _vm.columnsWidth,
	        "data": _vm.rebuildData
	      }
	    })], 1) : _vm._e(), _vm._v(" "), _c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: !(!!_vm.localeNoDataText && (!_vm.data || _vm.data.length === 0) || !!_vm.localeNoFilteredDataText && (!_vm.rebuildData || _vm.rebuildData.length === 0)),
	        expression: "!((!!localeNoDataText && (!data || data.length === 0)) || (!!localeNoFilteredDataText && (!rebuildData || rebuildData.length === 0)))"
	      }],
	      ref: "body",
	      class: [_vm.prefixCls + '-body'],
	      style: _vm.bodyStyle,
	      on: {
	        "scroll": _vm.handleBodyScroll
	      }
	    }, [_c('table-body', {
	      ref: "tbody",
	      attrs: {
	        "prefix-cls": _vm.prefixCls,
	        "styleObject": _vm.tableStyle,
	        "columns": _vm.cloneColumns,
	        "data": _vm.rebuildData,
	        "columns-width": _vm.columnsWidth,
	        "obj-data": _vm.objData
	      }
	    })], 1), _vm._v(" "), _c('div', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: !!_vm.localeNoDataText && (!_vm.data || _vm.data.length === 0) || !!_vm.localeNoFilteredDataText && (!_vm.rebuildData || _vm.rebuildData.length === 0),
	        expression: "((!!localeNoDataText && (!data || data.length === 0)) || (!!localeNoFilteredDataText && (!rebuildData || rebuildData.length === 0)))"
	      }],
	      class: [_vm.prefixCls + '-tip']
	    }, [_c('table', {
	      attrs: {
	        "cellspacing": "0",
	        "cellpadding": "0",
	        "border": "0"
	      }
	    }, [_c('tbody', [_c('tr', [_c('td', {
	      style: {
	        'height': _vm.bodyStyle.height
	      }
	    }, [!_vm.data || _vm.data.length === 0 ? _c('span', {
	      domProps: {
	        "innerHTML": _vm._s(_vm.localeNoDataText)
	      }
	    }) : _c('span', {
	      domProps: {
	        "innerHTML": _vm._s(_vm.localeNoFilteredDataText)
	      }
	    })])])])])]), _vm._v(" "), _vm.isLeftFixed ? _c('div', {
	      class: [_vm.prefixCls + '-fixed'],
	      style: _vm.fixedTableStyle
	    }, [_vm.showHeader ? _c('div', {
	      class: [_vm.prefixCls + '-fixed-header']
	    }, [_c('table-head', {
	      attrs: {
	        "fixed": "left",
	        "prefix-cls": _vm.prefixCls,
	        "styleObject": _vm.fixedTableStyle,
	        "columns": _vm.leftFixedColumns,
	        "obj-data": _vm.objData,
	        "columns-width": _vm.columnsWidth,
	        "data": _vm.rebuildData
	      }
	    })], 1) : _vm._e(), _vm._v(" "), _c('div', {
	      ref: "fixedBody",
	      class: [_vm.prefixCls + '-fixed-body'],
	      style: _vm.fixedBodyStyle
	    }, [_c('table-body', {
	      attrs: {
	        "fixed": "left",
	        "prefix-cls": _vm.prefixCls,
	        "styleObject": _vm.fixedTableStyle,
	        "columns": _vm.leftFixedColumns,
	        "data": _vm.rebuildData,
	        "columns-width": _vm.columnsWidth,
	        "obj-data": _vm.objData
	      }
	    })], 1)]) : _vm._e(), _vm._v(" "), _vm.isRightFixed ? _c('div', {
	      class: [_vm.prefixCls + '-fixed-right'],
	      style: _vm.fixedRightTableStyle
	    }, [_vm.showHeader ? _c('div', {
	      class: [_vm.prefixCls + '-fixed-header']
	    }, [_c('table-head', {
	      attrs: {
	        "fixed": "right",
	        "prefix-cls": _vm.prefixCls,
	        "styleObject": _vm.fixedRightTableStyle,
	        "columns": _vm.rightFixedColumns,
	        "obj-data": _vm.objData,
	        "columns-width": _vm.columnsWidth,
	        "data": _vm.rebuildData
	      }
	    })], 1) : _vm._e(), _vm._v(" "), _c('div', {
	      ref: "fixedRightBody",
	      class: [_vm.prefixCls + '-fixed-body'],
	      style: _vm.fixedBodyStyle
	    }, [_c('table-body', {
	      attrs: {
	        "fixed": "right",
	        "prefix-cls": _vm.prefixCls,
	        "styleObject": _vm.fixedRightTableStyle,
	        "columns": _vm.rightFixedColumns,
	        "data": _vm.rebuildData,
	        "columns-width": _vm.columnsWidth,
	        "obj-data": _vm.objData
	      }
	    })], 1)]) : _vm._e(), _vm._v(" "), _vm.showSlotFooter ? _c('div', {
	      ref: "footer",
	      class: [_vm.prefixCls + '-footer']
	    }, [_vm._t("footer")], 2) : _vm._e()])]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 320 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.wrapClasses,
	      style: _vm.styles
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-tail']
	    }, [_c('i')]), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-head']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-head-inner']
	    }, [!_vm.icon && _vm.currentStatus != 'finish' && _vm.currentStatus != 'error' ? _c('span', [_vm._v(_vm._s(_vm.stepNumber))]) : _c('span', {
	      class: _vm.iconClasses
	    })])]), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-main']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-title']
	    }, [_vm._v(_vm._s(_vm.title))]), _vm._v(" "), _vm._t("default", [_vm.content ? _c('div', {
	      class: [_vm.prefixCls + '-content']
	    }, [_vm._v(_vm._s(_vm.content))]) : _vm._e()])], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 321 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.wrapClasses
	    }, [_c('div', {
	      class: _vm.outerClasses
	    }, [_c('div', {
	      class: _vm.innerClasses
	    }, [_c('div', {
	      class: _vm.bgClasses,
	      style: _vm.bgStyle
	    })])]), _vm._v(" "), !_vm.hideInfo ? _c('span', {
	      class: _vm.textClasses
	    }, [_vm._t("default", [_vm.isStatus ? _c('span', {
	      class: _vm.textInnerClasses
	    }, [_c('Icon', {
	      attrs: {
	        "type": _vm.statusIcon
	      }
	    })], 1) : _c('span', {
	      class: _vm.textInnerClasses
	    }, [_vm._v("\n                " + _vm._s(_vm.percent) + "%\n            ")])])], 2) : _vm._e()]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 322 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes,
	      style: _vm.listStyle
	    }, [_c('div', {
	      class: _vm.prefixCls + '-header'
	    }, [_c('Checkbox', {
	      attrs: {
	        "value": _vm.checkedAll,
	        "disabled": _vm.checkedAllDisabled
	      },
	      on: {
	        "on-change": _vm.toggleSelectAll
	      }
	    }), _vm._v(" "), _c('span', {
	      class: _vm.prefixCls + '-header-title',
	      on: {
	        "click": function click($event) {
	          _vm.toggleSelectAll(!_vm.checkedAll);
	        }
	      }
	    }, [_vm._v(_vm._s(_vm.title))]), _vm._v(" "), _c('span', {
	      class: _vm.prefixCls + '-header-count'
	    }, [_vm._v(_vm._s(_vm.count))])], 1), _vm._v(" "), _c('div', {
	      class: _vm.bodyClasses
	    }, [_vm.filterable ? _c('div', {
	      class: _vm.prefixCls + '-body-search-wrapper'
	    }, [_c('Search', {
	      attrs: {
	        "prefix-cls": _vm.prefixCls + '-search',
	        "query": _vm.query,
	        "placeholder": _vm.filterPlaceholder
	      },
	      on: {
	        "on-query-clear": _vm.handleQueryClear,
	        "on-query-change": _vm.handleQueryChange
	      }
	    })], 1) : _vm._e(), _vm._v(" "), _c('ul', {
	      class: _vm.prefixCls + '-content'
	    }, [_vm._l(_vm.filterData, function (item) {
	      return _c('li', {
	        class: _vm.itemClasses(item),
	        on: {
	          "click": function click($event) {
	            $event.preventDefault();
	            _vm.select(item);
	          }
	        }
	      }, [_c('Checkbox', {
	        attrs: {
	          "value": _vm.isCheck(item),
	          "disabled": item.disabled
	        }
	      }), _vm._v(" "), _c('span', {
	        domProps: {
	          "innerHTML": _vm._s(_vm.showLabel(item))
	        }
	      })], 1);
	    }), _vm._v(" "), _c('li', {
	      class: _vm.prefixCls + '-content-not-found'
	    }, [_vm._v(_vm._s(_vm.notFoundText))])], 2)]), _vm._v(" "), _vm.showFooter ? _c('div', {
	      class: _vm.prefixCls + '-footer'
	    }, [_vm._t("default")], 2) : _vm._e()]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 323 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      directives: [{
	        name: "clickoutside",
	        rawName: "v-clickoutside",
	        value: _vm.handleClose,
	        expression: "handleClose"
	      }],
	      class: [_vm.prefixCls],
	      on: {
	        "mouseenter": _vm.handleMouseenter,
	        "mouseleave": _vm.handleMouseleave
	      }
	    }, [_c('div', {
	      ref: "reference",
	      class: [_vm.prefixCls + '-rel'],
	      on: {
	        "click": _vm.handleClick
	      }
	    }, [_vm._t("default")], 2), _vm._v(" "), _c('transition', {
	      attrs: {
	        "name": _vm.transition
	      }
	    }, [_c('Drop', {
	      directives: [{
	        name: "show",
	        rawName: "v-show",
	        value: _vm.currentVisible,
	        expression: "currentVisible"
	      }],
	      ref: "drop",
	      attrs: {
	        "placement": _vm.placement
	      }
	    }, [_vm._t("list")], 2)], 1)], 1);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 324 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_c('button', {
	      staticClass: "left",
	      class: _vm.arrowClasses,
	      on: {
	        "click": function click($event) {
	          _vm.arrowEvent(-1);
	        }
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "chevron-left"
	      }
	    })], 1), _vm._v(" "), _c('div', {
	      class: [_vm.prefixCls + '-list']
	    }, [_c('div', {
	      class: [_vm.prefixCls + '-track'],
	      style: _vm.trackStyles
	    }, [_vm._t("default")], 2)]), _vm._v(" "), _c('button', {
	      staticClass: "right",
	      class: _vm.arrowClasses,
	      on: {
	        "click": function click($event) {
	          _vm.arrowEvent(1);
	        }
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "chevron-right"
	      }
	    })], 1), _vm._v(" "), _c('ul', {
	      class: _vm.dotsClasses
	    }, [_vm._l(_vm.slides.length, function (n) {
	      return [_c('li', {
	        class: [n - 1 === _vm.currentIndex ? _vm.prefixCls + '-active' : ''],
	        on: {
	          "click": function click($event) {
	            _vm.dotsEvent('click', n - 1);
	          },
	          "mouseover": function mouseover($event) {
	            _vm.dotsEvent('hover', n - 1);
	          }
	        }
	      }, [_c('button')])];
	    })], 2)]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 325 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('ul', {
	      class: [_vm.prefixCls + '-list']
	    }, _vm._l(_vm.files, function (file) {
	      return _c('li', {
	        class: _vm.fileCls(file),
	        on: {
	          "click": function click($event) {
	            _vm.handleClick(file);
	          }
	        }
	      }, [_c('span', {
	        on: {
	          "click": function click($event) {
	            _vm.handlePreview(file);
	          }
	        }
	      }, [_c('Icon', {
	        attrs: {
	          "type": _vm.format(file)
	        }
	      }), _vm._v(" " + _vm._s(file.name) + "\n        ")], 1), _vm._v(" "), _c('Icon', {
	        directives: [{
	          name: "show",
	          rawName: "v-show",
	          value: file.status === 'finished',
	          expression: "file.status === 'finished'"
	        }],
	        class: [_vm.prefixCls + '-list-remove'],
	        attrs: {
	          "type": "ios-close-empty"
	        },
	        nativeOn: {
	          "click": function click($event) {
	            _vm.handleRemove(file);
	          }
	        }
	      }), _vm._v(" "), _c('transition', {
	        attrs: {
	          "name": "fade"
	        }
	      }, [file.showProgress ? _c('i-progress', {
	        attrs: {
	          "stroke-width": 2,
	          "percent": _vm.parsePercentage(file.percentage),
	          "status": file.status === 'finished' && file.showProgress ? 'success' : 'normal'
	        }
	      }) : _vm._e()], 1)], 1);
	    }));
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 326 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('transition', {
	      attrs: {
	        "name": "fade"
	      }
	    }, [!_vm.closed ? _c('div', {
	      class: _vm.wrapClasses
	    }, [_vm.showIcon ? _c('span', {
	      class: _vm.iconClasses
	    }, [_vm._t("icon", [_c('Icon', {
	      attrs: {
	        "type": _vm.iconType
	      }
	    })])], 2) : _vm._e(), _vm._v(" "), _c('span', {
	      class: _vm.messageClasses
	    }, [_vm._t("default")], 2), _vm._v(" "), _c('span', {
	      class: _vm.descClasses
	    }, [_vm._t("desc")], 2), _vm._v(" "), _vm.closable ? _c('a', {
	      class: _vm.closeClasses,
	      on: {
	        "click": _vm.close
	      }
	    }, [_vm._t("close", [_c('Icon', {
	      attrs: {
	        "type": "ios-close-empty"
	      }
	    })])], 2) : _vm._e()]) : _vm._e()]);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 327 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes
	    }, [_vm._t("default")], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 328 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes,
	      style: _vm.styles
	    }, _vm._l(_vm.notices, function (notice) {
	      return _c('Notice', {
	        key: notice.name,
	        attrs: {
	          "prefix-cls": _vm.prefixCls,
	          "styles": notice.styles,
	          "type": notice.type,
	          "content": notice.content,
	          "duration": notice.duration,
	          "closable": notice.closable,
	          "name": notice.name,
	          "transition-name": notice.transitionName,
	          "on-close": notice.onClose
	        }
	      });
	    }));
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 329 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      class: _vm.classes,
	      on: {
	        "click": _vm.handleClick
	      }
	    }, _vm._l(_vm.cells, function (cell, index) {
	      return _c('span', {
	        class: _vm.getCellCls(cell)
	      }, [_c('em', {
	        attrs: {
	          "index": index
	        }
	      }, [_vm._v(_vm._s(_vm.tCell(cell.text)))])]);
	    }));
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 330 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	module.exports = { render: function render() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;
	    return _c('div', {
	      ref: "cell",
	      class: _vm.classes
	    }, [_vm.renderType === 'index' ? [_vm._v(_vm._s(_vm.naturalIndex + 1))] : _vm._e(), _vm._v(" "), _vm.renderType === 'selection' ? [_c('Checkbox', {
	      attrs: {
	        "value": _vm.checked,
	        "disabled": _vm.disabled
	      },
	      on: {
	        "on-change": _vm.toggleSelect
	      }
	    })] : _vm._e(), _vm._v(" "), _vm.renderType === 'normal' ? [_c('span', {
	      domProps: {
	        "innerHTML": _vm._s(_vm.row[_vm.column.key])
	      }
	    })] : _vm._e(), _vm._v(" "), _vm.renderType === 'expand' && !_vm.row._disableExpand ? [_c('div', {
	      class: _vm.expandCls,
	      on: {
	        "click": _vm.toggleExpand
	      }
	    }, [_c('Icon', {
	      attrs: {
	        "type": "ios-arrow-right"
	      }
	    })], 1)] : _vm._e(), _vm._v(" "), _vm.renderType === 'render' ? _c('Cell', {
	      attrs: {
	        "row": _vm.row,
	        "column": _vm.column,
	        "index": _vm.index,
	        "render": _vm.column.render
	      }
	    }) : _vm._e()], 2);
	  }, staticRenderFns: [] };
	
	/***/ }),
	/* 331 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    name: 'RenderCell',
	    functional: true,
	    props: {
	        render: Function
	    },
	    render: function render(h, ctx) {
	        return ctx.props.render(h);
	    }
	};
	
	/***/ }),
	/* 332 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _picker = __webpack_require__(96);
	
	var _picker2 = _interopRequireDefault(_picker);
	
	var _date = __webpack_require__(437);
	
	var _date2 = _interopRequireDefault(_date);
	
	var _dateRange = __webpack_require__(436);
	
	var _dateRange2 = _interopRequireDefault(_dateRange);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var getPanel = function getPanel(type) {
	    if (type === 'daterange' || type === 'datetimerange') {
	        return _dateRange2.default;
	    }
	    return _date2.default;
	};
	
	exports.default = {
	    mixins: [_picker2.default],
	    props: {
	        type: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['year', 'month', 'date', 'daterange', 'datetime', 'datetimerange']);
	            },
	
	            default: 'date'
	        },
	        value: {}
	    },
	    created: function created() {
	        if (!this.currentValue) {
	            if (this.type === 'daterange' || this.type === 'datetimerange') {
	                this.currentValue = ['', ''];
	            } else {
	                this.currentValue = '';
	            }
	        }
	
	        this.panel = getPanel(this.type);
	    }
	};
	
	/***/ }),
	/* 333 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _picker = __webpack_require__(96);
	
	var _picker2 = _interopRequireDefault(_picker);
	
	var _time = __webpack_require__(95);
	
	var _time2 = _interopRequireDefault(_time);
	
	var _timeRange = __webpack_require__(94);
	
	var _timeRange2 = _interopRequireDefault(_timeRange);
	
	var _timeMixins = __webpack_require__(64);
	
	var _timeMixins2 = _interopRequireDefault(_timeMixins);
	
	var _assist = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var getPanel = function getPanel(type) {
	    if (type === 'timerange') {
	        return _timeRange2.default;
	    }
	    return _time2.default;
	};
	
	exports.default = {
	    mixins: [_picker2.default, _timeMixins2.default],
	    props: {
	        type: {
	            validator: function validator(value) {
	                return (0, _assist.oneOf)(value, ['time', 'timerange']);
	            },
	
	            default: 'time'
	        },
	        value: {}
	    },
	    created: function created() {
	        if (!this.currentValue) {
	            if (this.type === 'timerange') {
	                this.currentValue = ['', ''];
	            } else {
	                this.currentValue = '';
	            }
	        }
	        this.panel = getPanel(this.type);
	    }
	};
	
	/***/ }),
	/* 334 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _loadingBar = __webpack_require__(445);
	
	var _loadingBar2 = _interopRequireDefault(_loadingBar);
	
	var _vue = __webpack_require__(12);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_loadingBar2.default.newInstance = function (properties) {
	    var _props = properties || {};
	
	    var Instance = new _vue2.default({
	        data: _props,
	        render: function render(h) {
	            return h(_loadingBar2.default, {
	                props: _props
	            });
	        }
	    });
	
	    var component = Instance.$mount();
	    document.body.appendChild(component.$el);
	    var loading_bar = Instance.$children[0];
	
	    return {
	        update: function update(options) {
	            if ('percent' in options) {
	                loading_bar.percent = options.percent;
	            }
	            if (options.status) {
	                loading_bar.status = options.status;
	            }
	            if ('show' in options) {
	                loading_bar.show = options.show;
	            }
	        },
	
	        component: loading_bar,
	        destroy: function destroy() {
	            document.body.removeChild(document.getElementsByClassName('ivu-loading-bar')[0]);
	        }
	    };
	};
	
	exports.default = _loadingBar2.default;
	
	/***/ }),
	/* 335 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _assign = __webpack_require__(10);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _vue = __webpack_require__(12);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _modal = __webpack_require__(450);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	var _button = __webpack_require__(20);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _locale = __webpack_require__(5);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var prefixCls = 'ivu-modal-confirm';
	
	_modal2.default.newInstance = function (properties) {
	    var _props = properties || {};
	
	    var Instance = new _vue2.default({
	        mixins: [_locale2.default],
	        data: (0, _assign2.default)({}, _props, {
	            visible: false,
	            width: 416,
	            title: '',
	            body: '',
	            iconType: '',
	            iconName: '',
	            okText: undefined,
	            cancelText: undefined,
	            showCancel: false,
	            loading: false,
	            buttonLoading: false,
	            scrollable: false
	        }),
	        render: function render(h) {
	            var _this = this;
	
	            var footerVNodes = [];
	            if (this.showCancel) {
	                footerVNodes.push(h(_button2.default, {
	                    props: {
	                        type: 'text',
	                        size: 'large'
	                    },
	                    on: {
	                        click: this.cancel
	                    }
	                }, this.localeCancelText));
	            }
	            footerVNodes.push(h(_button2.default, {
	                props: {
	                    type: 'primary',
	                    size: 'large',
	                    loading: this.buttonLoading
	                },
	                on: {
	                    click: this.ok
	                }
	            }, this.localeOkText));
	
	            var body_render = void 0;
	            if (this.render) {
	                body_render = h('div', {
	                    attrs: {
	                        class: prefixCls + '-body ' + prefixCls + '-body-render'
	                    }
	                }, [this.render(h)]);
	            } else {
	                body_render = h('div', {
	                    attrs: {
	                        class: prefixCls + '-body'
	                    }
	                }, [h('div', {
	                    class: this.iconTypeCls
	                }, [h('i', {
	                    class: this.iconNameCls
	                })]), h('div', {
	                    domProps: {
	                        innerHTML: this.body
	                    }
	                })]);
	            }
	
	            return h(_modal2.default, {
	                props: (0, _assign2.default)({}, _props, {
	                    width: this.width,
	                    scrollable: this.scrollable
	                }),
	                domProps: {
	                    value: this.visible
	                },
	                on: {
	                    input: function input(status) {
	                        _this.visible = status;
	                    }
	                }
	            }, [h('div', {
	                attrs: {
	                    class: prefixCls
	                }
	            }, [h('div', {
	                attrs: {
	                    class: prefixCls + '-head'
	                }
	            }, [h('div', {
	                attrs: {
	                    class: prefixCls + '-head-title'
	                },
	                domProps: {
	                    innerHTML: this.title
	                }
	            })]), body_render, h('div', {
	                attrs: {
	                    class: prefixCls + '-footer'
	                }
	            }, footerVNodes)])]);
	        },
	
	        computed: {
	            iconTypeCls: function iconTypeCls() {
	                return [prefixCls + '-body-icon', prefixCls + '-body-icon-' + this.iconType];
	            },
	            iconNameCls: function iconNameCls() {
	                return ['ivu-icon', 'ivu-icon-' + this.iconName];
	            },
	            localeOkText: function localeOkText() {
	                if (this.okText) {
	                    return this.okText;
	                } else {
	                    return this.t('i.modal.okText');
	                }
	            },
	            localeCancelText: function localeCancelText() {
	                if (this.cancelText) {
	                    return this.cancelText;
	                } else {
	                    return this.t('i.modal.cancelText');
	                }
	            }
	        },
	        methods: {
	            cancel: function cancel() {
	                this.$children[0].visible = false;
	                this.buttonLoading = false;
	                this.onCancel();
	                this.remove();
	            },
	            ok: function ok() {
	                if (this.loading) {
	                    this.buttonLoading = true;
	                } else {
	                    this.$children[0].visible = false;
	                    this.remove();
	                }
	                this.onOk();
	            },
	            remove: function remove() {
	                var _this2 = this;
	
	                setTimeout(function () {
	                    _this2.destroy();
	                }, 300);
	            },
	            destroy: function destroy() {
	                this.$destroy();
	                document.body.removeChild(this.$el);
	                this.onRemove();
	            },
	            onOk: function onOk() {},
	            onCancel: function onCancel() {},
	            onRemove: function onRemove() {}
	        }
	    });
	
	    var component = Instance.$mount();
	    document.body.appendChild(component.$el);
	    var modal = Instance.$children[0];
	
	    return {
	        show: function show(props) {
	            modal.$parent.showCancel = props.showCancel;
	            modal.$parent.iconType = props.icon;
	
	            switch (props.icon) {
	                case 'info':
	                    modal.$parent.iconName = 'information-circled';
	                    break;
	                case 'success':
	                    modal.$parent.iconName = 'checkmark-circled';
	                    break;
	                case 'warning':
	                    modal.$parent.iconName = 'android-alert';
	                    break;
	                case 'error':
	                    modal.$parent.iconName = 'close-circled';
	                    break;
	                case 'confirm':
	                    modal.$parent.iconName = 'help-circled';
	                    break;
	            }
	
	            if ('width' in props) {
	                modal.$parent.width = props.width;
	            }
	
	            if ('title' in props) {
	                modal.$parent.title = props.title;
	            }
	
	            if ('content' in props) {
	                modal.$parent.body = props.content;
	            }
	
	            if ('okText' in props) {
	                modal.$parent.okText = props.okText;
	            }
	
	            if ('cancelText' in props) {
	                modal.$parent.cancelText = props.cancelText;
	            }
	
	            if ('onCancel' in props) {
	                modal.$parent.onCancel = props.onCancel;
	            }
	
	            if ('onOk' in props) {
	                modal.$parent.onOk = props.onOk;
	            }
	
	            if ('loading' in props) {
	                modal.$parent.loading = props.loading;
	            }
	
	            if ('scrollable' in props) {
	                modal.$parent.scrollable = props.scrollable;
	            }
	
	            modal.$parent.onRemove = props.onRemove;
	
	            modal.visible = true;
	        },
	        remove: function remove() {
	            modal.visible = false;
	            modal.$parent.buttonLoading = false;
	            modal.$parent.remove();
	        },
	
	        component: modal
	    };
	};
	
	exports.default = _modal2.default;
	
	/***/ }),
	/* 336 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function has(browser) {
	    var ua = navigator.userAgent;
	    if (browser === 'ie') {
	        var isIE = ua.indexOf('compatible') > -1 && ua.indexOf('MSIE') > -1;
	        if (isIE) {
	            var reIE = new RegExp('MSIE (\\d+\\.\\d+);');
	            reIE.test(ua);
	            return parseFloat(RegExp['$1']);
	        } else {
	            return false;
	        }
	    } else {
	        return ua.indexOf(browser) > -1;
	    }
	}
	
	var csv = {
	    _isIE11: function _isIE11() {
	        var iev = 0;
	        var ieold = /MSIE (\d+\.\d+);/.test(navigator.userAgent);
	        var trident = !!navigator.userAgent.match(/Trident\/7.0/);
	        var rv = navigator.userAgent.indexOf('rv:11.0');
	
	        if (ieold) {
	            iev = Number(RegExp.$1);
	        }
	        if (navigator.appVersion.indexOf('MSIE 10') !== -1) {
	            iev = 10;
	        }
	        if (trident && rv !== -1) {
	            iev = 11;
	        }
	
	        return iev === 11;
	    },
	    _isEdge: function _isEdge() {
	        return (/Edge/.test(navigator.userAgent)
	        );
	    },
	    _getDownloadUrl: function _getDownloadUrl(text) {
	        var BOM = '\uFEFF';
	
	        if (window.Blob && window.URL && window.URL.createObjectURL && !has('Safari')) {
	            var csvData = new Blob([BOM + text], { type: 'text/csv' });
	            return URL.createObjectURL(csvData);
	        } else {
	            return 'data:attachment/csv;charset=utf-8,' + BOM + encodeURIComponent(text);
	        }
	    },
	    download: function download(filename, text) {
	        if (has('ie') && has('ie') < 10) {
	            var oWin = window.top.open('about:blank', '_blank');
	            oWin.document.charset = 'utf-8';
	            oWin.document.write(text);
	            oWin.document.close();
	            oWin.document.execCommand('SaveAs', filename);
	            oWin.close();
	        } else if (has('ie') === 10 || this._isIE11() || this._isEdge()) {
	            var BOM = '\uFEFF';
	            var csvData = new Blob([BOM + text], { type: 'text/csv' });
	            navigator.msSaveBlob(csvData, filename);
	        } else {
	            var link = document.createElement('a');
	            link.download = filename;
	            link.href = this._getDownloadUrl(text);
	            link.target = '_blank';
	            document.body.appendChild(link);
	            link.click();
	            document.body.removeChild(link);
	        }
	    }
	};
	
	exports.default = csv;
	
	/***/ }),
	/* 337 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _keys = __webpack_require__(34);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	exports.default = upload;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function getError(action, option, xhr) {
	    var msg = 'fail to post ' + action + ' ' + xhr.status + '\'';
	    var err = new Error(msg);
	    err.status = xhr.status;
	    err.method = 'post';
	    err.url = action;
	    return err;
	}
	
	function getBody(xhr) {
	    var text = xhr.responseText || xhr.response;
	    if (!text) {
	        return text;
	    }
	
	    try {
	        return JSON.parse(text);
	    } catch (e) {
	        return text;
	    }
	}
	
	function upload(option) {
	    if (typeof XMLHttpRequest === 'undefined') {
	        return;
	    }
	
	    var xhr = new XMLHttpRequest();
	    var action = option.action;
	
	    if (xhr.upload) {
	        xhr.upload.onprogress = function progress(e) {
	            if (e.total > 0) {
	                e.percent = e.loaded / e.total * 100;
	            }
	            option.onProgress(e);
	        };
	    }
	
	    var formData = new FormData();
	
	    if (option.data) {
	        (0, _keys2.default)(option.data).map(function (key) {
	            formData.append(key, option.data[key]);
	        });
	    }
	
	    formData.append(option.filename, option.file);
	
	    xhr.onerror = function error(e) {
	        option.onError(e);
	    };
	
	    xhr.onload = function onload() {
	        if (xhr.status < 200 || xhr.status >= 300) {
	            return option.onError(getError(action, option, xhr), getBody(xhr));
	        }
	
	        option.onSuccess(getBody(xhr));
	    };
	
	    xhr.open('post', action, true);
	
	    if (option.withCredentials && 'withCredentials' in xhr) {
	        xhr.withCredentials = true;
	    }
	
	    var headers = option.headers || {};
	
	    for (var item in headers) {
	        if (headers.hasOwnProperty(item) && headers[item] !== null) {
	            xhr.setRequestHeader(item, headers[item]);
	        }
	    }
	    xhr.send(formData);
	}
	
	/***/ }),
	/* 338 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _assign = __webpack_require__(10);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function getTarget(node) {
	    if (node === void 0) {
	        node = document.body;
	    }
	    if (node === true) {
	        return document.body;
	    }
	    return node instanceof window.Node ? node : document.querySelector(node);
	}
	
	var directive = {
	    inserted: function inserted(el, _ref, vnode) {
	        var value = _ref.value;
	
	        el.className = el.className ? el.className + ' v-transfer-dom' : 'v-transfer-dom';
	        var parentNode = el.parentNode;
	        if (!parentNode) return;
	        var home = document.createComment('');
	        var hasMovedOut = false;
	
	        if (value !== false) {
	            parentNode.replaceChild(home, el);
	            getTarget(value).appendChild(el);
	            hasMovedOut = true;
	        }
	        if (!el.__transferDomData) {
	            el.__transferDomData = {
	                parentNode: parentNode,
	                home: home,
	                target: getTarget(value),
	                hasMovedOut: hasMovedOut
	            };
	        }
	    },
	    componentUpdated: function componentUpdated(el, _ref2) {
	        var value = _ref2.value;
	
	        var ref$1 = el.__transferDomData;
	        if (!ref$1) return;
	
	        var parentNode = ref$1.parentNode;
	        var home = ref$1.home;
	        var hasMovedOut = ref$1.hasMovedOut;
	
	        if (!hasMovedOut && value) {
	            parentNode.replaceChild(home, el);
	
	            getTarget(value).appendChild(el);
	            el.__transferDomData = (0, _assign2.default)({}, el.__transferDomData, { hasMovedOut: true, target: getTarget(value) });
	        } else if (hasMovedOut && value === false) {
	            parentNode.replaceChild(el, home);
	            el.__transferDomData = (0, _assign2.default)({}, el.__transferDomData, { hasMovedOut: false, target: getTarget(value) });
	        } else if (value) {
	            getTarget(value).appendChild(el);
	        }
	    },
	
	    unbind: function unbind(el, binding) {
	        el.className = el.className.replace('v-transfer-dom', '');
	        var ref$1 = el.__transferDomData;
	        if (!ref$1) return;
	        if (el.__transferDomData.hasMovedOut === true) {
	            el.__transferDomData.parentNode && el.__transferDomData.parentNode.appendChild(el);
	        }
	        el.__transferDomData = null;
	    }
	};
	
	exports.default = directive;
	
	/***/ }),
	/* 339 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var _assign = __webpack_require__(10);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _keys = __webpack_require__(34);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	__webpack_require__(145);
	
	var _affix = __webpack_require__(103);
	
	var _affix2 = _interopRequireDefault(_affix);
	
	var _alert = __webpack_require__(104);
	
	var _alert2 = _interopRequireDefault(_alert);
	
	var _backTop = __webpack_require__(105);
	
	var _backTop2 = _interopRequireDefault(_backTop);
	
	var _badge = __webpack_require__(106);
	
	var _badge2 = _interopRequireDefault(_badge);
	
	var _breadcrumb = __webpack_require__(107);
	
	var _breadcrumb2 = _interopRequireDefault(_breadcrumb);
	
	var _button = __webpack_require__(108);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _card = __webpack_require__(109);
	
	var _card2 = _interopRequireDefault(_card);
	
	var _carousel = __webpack_require__(110);
	
	var _carousel2 = _interopRequireDefault(_carousel);
	
	var _cascader = __webpack_require__(111);
	
	var _cascader2 = _interopRequireDefault(_cascader);
	
	var _checkbox = __webpack_require__(112);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	var _circle = __webpack_require__(113);
	
	var _circle2 = _interopRequireDefault(_circle);
	
	var _collapse = __webpack_require__(114);
	
	var _collapse2 = _interopRequireDefault(_collapse);
	
	var _datePicker = __webpack_require__(115);
	
	var _datePicker2 = _interopRequireDefault(_datePicker);
	
	var _dropdown = __webpack_require__(116);
	
	var _dropdown2 = _interopRequireDefault(_dropdown);
	
	var _form = __webpack_require__(117);
	
	var _form2 = _interopRequireDefault(_form);
	
	var _icon = __webpack_require__(15);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _input = __webpack_require__(120);
	
	var _input2 = _interopRequireDefault(_input);
	
	var _inputNumber = __webpack_require__(119);
	
	var _inputNumber2 = _interopRequireDefault(_inputNumber);
	
	var _loadingBar = __webpack_require__(121);
	
	var _loadingBar2 = _interopRequireDefault(_loadingBar);
	
	var _menu = __webpack_require__(122);
	
	var _menu2 = _interopRequireDefault(_menu);
	
	var _message = __webpack_require__(123);
	
	var _message2 = _interopRequireDefault(_message);
	
	var _modal = __webpack_require__(124);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	var _notice = __webpack_require__(125);
	
	var _notice2 = _interopRequireDefault(_notice);
	
	var _page = __webpack_require__(126);
	
	var _page2 = _interopRequireDefault(_page);
	
	var _poptip = __webpack_require__(127);
	
	var _poptip2 = _interopRequireDefault(_poptip);
	
	var _progress = __webpack_require__(128);
	
	var _progress2 = _interopRequireDefault(_progress);
	
	var _radio = __webpack_require__(129);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	var _rate = __webpack_require__(130);
	
	var _rate2 = _interopRequireDefault(_rate);
	
	var _slider = __webpack_require__(132);
	
	var _slider2 = _interopRequireDefault(_slider);
	
	var _spin = __webpack_require__(133);
	
	var _spin2 = _interopRequireDefault(_spin);
	
	var _steps = __webpack_require__(134);
	
	var _steps2 = _interopRequireDefault(_steps);
	
	var _switch = __webpack_require__(135);
	
	var _switch2 = _interopRequireDefault(_switch);
	
	var _table = __webpack_require__(136);
	
	var _table2 = _interopRequireDefault(_table);
	
	var _tabs = __webpack_require__(137);
	
	var _tabs2 = _interopRequireDefault(_tabs);
	
	var _tag = __webpack_require__(138);
	
	var _tag2 = _interopRequireDefault(_tag);
	
	var _timeline = __webpack_require__(140);
	
	var _timeline2 = _interopRequireDefault(_timeline);
	
	var _timePicker = __webpack_require__(139);
	
	var _timePicker2 = _interopRequireDefault(_timePicker);
	
	var _tooltip = __webpack_require__(141);
	
	var _tooltip2 = _interopRequireDefault(_tooltip);
	
	var _transfer = __webpack_require__(142);
	
	var _transfer2 = _interopRequireDefault(_transfer);
	
	var _tree = __webpack_require__(143);
	
	var _tree2 = _interopRequireDefault(_tree);
	
	var _upload = __webpack_require__(144);
	
	var _upload2 = _interopRequireDefault(_upload);
	
	var _grid = __webpack_require__(118);
	
	var _select = __webpack_require__(131);
	
	var _locale = __webpack_require__(60);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var iview = {
	    Affix: _affix2.default,
	    Alert: _alert2.default,
	    BackTop: _backTop2.default,
	    Badge: _badge2.default,
	    Breadcrumb: _breadcrumb2.default,
	    BreadcrumbItem: _breadcrumb2.default.Item,
	    iButton: _button2.default,
	    Button: _button2.default,
	    ButtonGroup: _button2.default.Group,
	    Card: _card2.default,
	    Carousel: _carousel2.default,
	    CarouselItem: _carousel2.default.Item,
	    Cascader: _cascader2.default,
	    Checkbox: _checkbox2.default,
	    CheckboxGroup: _checkbox2.default.Group,
	    iCircle: _circle2.default,
	    DatePicker: _datePicker2.default,
	    Dropdown: _dropdown2.default,
	    DropdownItem: _dropdown2.default.Item,
	    DropdownMenu: _dropdown2.default.Menu,
	    Form: _form2.default,
	    iForm: _form2.default,
	    FormItem: _form2.default.Item,
	    Col: _grid.Col,
	    iCol: _grid.Col,
	    Collapse: _collapse2.default,
	    Icon: _icon2.default,
	    Input: _input2.default,
	    iInput: _input2.default,
	    InputNumber: _inputNumber2.default,
	    LoadingBar: _loadingBar2.default,
	    Menu: _menu2.default,
	    iMenu: _menu2.default,
	    MenuGroup: _menu2.default.Group,
	    MenuItem: _menu2.default.Item,
	    Submenu: _menu2.default.Sub,
	    Message: _message2.default,
	    Modal: _modal2.default,
	    Notice: _notice2.default,
	    Option: _select.Option,
	    iOption: _select.Option,
	    OptionGroup: _select.OptionGroup,
	    Page: _page2.default,
	    Panel: _collapse2.default.Panel,
	    Poptip: _poptip2.default,
	    Progress: _progress2.default,
	    iProgress: _progress2.default,
	    Radio: _radio2.default,
	    RadioGroup: _radio2.default.Group,
	    Rate: _rate2.default,
	    Row: _grid.Row,
	    Select: _select.Select,
	    iSelect: _select.Select,
	    Slider: _slider2.default,
	    Spin: _spin2.default,
	    Step: _steps2.default.Step,
	    Steps: _steps2.default,
	
	    iSwitch: _switch2.default,
	    iTable: _table2.default,
	    Table: _table2.default,
	    Tabs: _tabs2.default,
	    TabPane: _tabs2.default.Pane,
	    Tag: _tag2.default,
	    Timeline: _timeline2.default,
	    TimelineItem: _timeline2.default.Item,
	    TimePicker: _timePicker2.default,
	    Tooltip: _tooltip2.default,
	    Transfer: _transfer2.default,
	    Tree: _tree2.default,
	    Upload: _upload2.default
	};
	
	var install = function install(Vue) {
	    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	    _locale2.default.use(opts.locale);
	    _locale2.default.i18n(opts.i18n);
	
	    (0, _keys2.default)(iview).forEach(function (key) {
	        Vue.component(key, iview[key]);
	    });
	
	    Vue.prototype.$Loading = _loadingBar2.default;
	    Vue.prototype.$Message = _message2.default;
	    Vue.prototype.$Modal = _modal2.default;
	    Vue.prototype.$Notice = _notice2.default;
	};
	
	if (typeof window !== 'undefined' && window.Vue) {
	    install(window.Vue);
	}
	
	module.exports = (0, _assign2.default)(iview, { install: install });
	
	/***/ }),
	/* 340 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof2 = __webpack_require__(11);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	exports.default = function () {
	    function hasOwn(obj, key) {
	        return Object.prototype.hasOwnProperty.call(obj, key);
	    }
	
	    function template(string) {
	        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	            args[_key - 1] = arguments[_key];
	        }
	
	        if (args.length === 1 && (0, _typeof3.default)(args[0]) === 'object') {
	            args = args[0];
	        }
	
	        if (!args || !args.hasOwnProperty) {
	            args = {};
	        }
	
	        return string.replace(RE_NARGS, function (match, prefix, i, index) {
	            var result = void 0;
	
	            if (string[index - 1] === '{' && string[index + match.length] === '}') {
	                return i;
	            } else {
	                result = hasOwn(args, i) ? args[i] : null;
	                if (result === null || result === undefined) {
	                    return '';
	                }
	
	                return result;
	            }
	        });
	    }
	
	    return template;
	};
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var RE_NARGS = /(%|)\{([0-9a-zA-Z_]+)\}/g;
	
	/***/ }),
	/* 341 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    i: {
	        select: {
	            placeholder: '请选择',
	            noMatch: '无匹配数据',
	            loading: '加载中'
	        },
	        table: {
	            noDataText: '暂无数据',
	            noFilteredDataText: '暂无筛选结果',
	            confirmFilter: '筛选',
	            resetFilter: '重置',
	            clearFilter: '全部'
	        },
	        datepicker: {
	            selectDate: '选择日期',
	            selectTime: '选择时间',
	            startTime: '开始时间',
	            endTime: '结束时间',
	            clear: '清空',
	            ok: '确定',
	            month: '月',
	            month1: '1 月',
	            month2: '2 月',
	            month3: '3 月',
	            month4: '4 月',
	            month5: '5 月',
	            month6: '6 月',
	            month7: '7 月',
	            month8: '8 月',
	            month9: '9 月',
	            month10: '10 月',
	            month11: '11 月',
	            month12: '12 月',
	            year: '年',
	            weeks: {
	                sun: '日',
	                mon: '一',
	                tue: '二',
	                wed: '三',
	                thu: '四',
	                fri: '五',
	                sat: '六'
	            },
	            months: {
	                m1: '1月',
	                m2: '2月',
	                m3: '3月',
	                m4: '4月',
	                m5: '5月',
	                m6: '6月',
	                m7: '7月',
	                m8: '8月',
	                m9: '9月',
	                m10: '10月',
	                m11: '11月',
	                m12: '12月'
	            }
	        },
	        transfer: {
	            titles: {
	                source: '源列表',
	                target: '目的列表'
	            },
	            filterPlaceholder: '请输入搜索内容',
	            notFoundText: '列表为空'
	        },
	        modal: {
	            okText: '确定',
	            cancelText: '取消'
	        },
	        poptip: {
	            okText: '确定',
	            cancelText: '取消'
	        },
	        page: {
	            prev: '上一页',
	            next: '下一页',
	            total: '共',
	            item: '条',
	            items: '条',
	            prev5: '向前 5 页',
	            next5: '向后 5 页',
	            page: '条/页',
	            goto: '跳至',
	            p: '页'
	        },
	        rate: {
	            star: '星',
	            stars: '星'
	        },
	        tree: {
	            emptyText: '暂无数据'
	        }
	    }
	};
	
	/***/ }),
	/* 342 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = calcTextareaHeight;
	
	
	var hiddenTextarea = void 0;
	
	var HIDDEN_STYLE = '\n    height:0 !important;\n    min-height:0 !important;\n    max-height:none !important;\n    visibility:hidden !important;\n    overflow:hidden !important;\n    position:absolute !important;\n    z-index:-1000 !important;\n    top:0 !important;\n    right:0 !important\n';
	
	var CONTEXT_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];
	
	function calculateNodeStyling(node) {
	    var style = window.getComputedStyle(node);
	
	    var boxSizing = style.getPropertyValue('box-sizing');
	
	    var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));
	
	    var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));
	
	    var contextStyle = CONTEXT_STYLE.map(function (name) {
	        return name + ':' + style.getPropertyValue(name);
	    }).join(';');
	
	    return { contextStyle: contextStyle, paddingSize: paddingSize, borderSize: borderSize, boxSizing: boxSizing };
	}
	
	function calcTextareaHeight(targetNode) {
	    var minRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	    var maxRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	
	    if (!hiddenTextarea) {
	        hiddenTextarea = document.createElement('textarea');
	        document.body.appendChild(hiddenTextarea);
	    }
	
	    var _calculateNodeStyling = calculateNodeStyling(targetNode),
	        paddingSize = _calculateNodeStyling.paddingSize,
	        borderSize = _calculateNodeStyling.borderSize,
	        boxSizing = _calculateNodeStyling.boxSizing,
	        contextStyle = _calculateNodeStyling.contextStyle;
	
	    hiddenTextarea.setAttribute('style', contextStyle + ';' + HIDDEN_STYLE);
	    hiddenTextarea.value = targetNode.value || targetNode.placeholder || '';
	
	    var height = hiddenTextarea.scrollHeight;
	    var minHeight = -Infinity;
	    var maxHeight = Infinity;
	
	    if (boxSizing === 'border-box') {
	        height = height + borderSize;
	    } else if (boxSizing === 'content-box') {
	        height = height - paddingSize;
	    }
	
	    hiddenTextarea.value = '';
	    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
	
	    if (minRows !== null) {
	        minHeight = singleRowHeight * minRows;
	        if (boxSizing === 'border-box') {
	            minHeight = minHeight + paddingSize + borderSize;
	        }
	        height = Math.max(minHeight, height);
	    }
	    if (maxRows !== null) {
	        maxHeight = singleRowHeight * maxRows;
	        if (boxSizing === 'border-box') {
	            maxHeight = maxHeight + paddingSize + borderSize;
	        }
	        height = Math.min(maxHeight, height);
	    }
	
	    return {
	        height: height + 'px',
	        minHeight: minHeight + 'px',
	        maxHeight: maxHeight + 'px'
	    };
	}
	
	/***/ }),
	/* 343 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _keys = __webpack_require__(34);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	exports.default = csv;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var newLine = '\r\n';
	
	function csv(columns, datas) {
	    var separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';
	    var noHeader = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	
	    var columnOrder = void 0;
	    var content = [];
	    var column = [];
	
	    if (columns) {
	        columnOrder = columns.map(function (v) {
	            if (typeof v === 'string') {
	                return v;
	            }
	            if (!noHeader) {
	                column.push(typeof v.title !== 'undefined' ? v.title : v.key);
	            }
	            return v.key;
	        });
	        if (column.length > 0) {
	            content.push(column.join(separator));
	        }
	    } else {
	        columnOrder = [];
	        datas.forEach(function (v) {
	            if (!Array.isArray(v)) {
	                columnOrder = columnOrder.concat((0, _keys2.default)(v));
	            }
	        });
	        if (columnOrder.length > 0) {
	            columnOrder = columnOrder.filter(function (value, index, self) {
	                return self.indexOf(value) === index;
	            });
	
	            if (!noHeader) {
	                content.push(columnOrder.join(separator));
	            }
	        }
	    }
	
	    if (Array.isArray(datas)) {
	        datas.map(function (v) {
	            if (Array.isArray(v)) {
	                return v;
	            }
	            return columnOrder.map(function (k) {
	                if (typeof v[k] !== 'undefined') {
	                    return v[k];
	                }
	                return '';
	            });
	        }).forEach(function (v) {
	            content.push(v.join(separator));
	        });
	    }
	    return content.join(newLine);
	}
	
	/***/ }),
	/* 344 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	var __WEBPACK_AMD_DEFINE_RESULT__;
	
	(function (main) {
	    'use strict';
	
	    var fecha = {};
	    var token = /d{1,4}|M{1,4}|yy(?:yy)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
	    var twoDigits = /\d\d?/;
	    var threeDigits = /\d{3}/;
	    var fourDigits = /\d{4}/;
	    var word = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
	    var noop = function noop() {};
	
	    function shorten(arr, sLen) {
	        var newArr = [];
	        for (var i = 0, len = arr.length; i < len; i++) {
	            newArr.push(arr[i].substr(0, sLen));
	        }
	        return newArr;
	    }
	
	    function monthUpdate(arrName) {
	        return function (d, v, i18n) {
	            var index = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());
	            if (~index) {
	                d.month = index;
	            }
	        };
	    }
	
	    function pad(val, len) {
	        val = String(val);
	        len = len || 2;
	        while (val.length < len) {
	            val = '0' + val;
	        }
	        return val;
	    }
	
	    var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
	    var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
	    var monthNamesShort = shorten(monthNames, 3);
	    var dayNamesShort = shorten(dayNames, 3);
	    fecha.i18n = {
	        dayNamesShort: dayNamesShort,
	        dayNames: dayNames,
	        monthNamesShort: monthNamesShort,
	        monthNames: monthNames,
	        amPm: ['am', 'pm'],
	        DoFn: function DoFn(D) {
	            return D + ['th', 'st', 'nd', 'rd'][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];
	        }
	    };
	
	    var formatFlags = {
	        D: function D(dateObj) {
	            return dateObj.getDay();
	        },
	        DD: function DD(dateObj) {
	            return pad(dateObj.getDay());
	        },
	        Do: function Do(dateObj, i18n) {
	            return i18n.DoFn(dateObj.getDate());
	        },
	        d: function d(dateObj) {
	            return dateObj.getDate();
	        },
	        dd: function dd(dateObj) {
	            return pad(dateObj.getDate());
	        },
	        ddd: function ddd(dateObj, i18n) {
	            return i18n.dayNamesShort[dateObj.getDay()];
	        },
	        dddd: function dddd(dateObj, i18n) {
	            return i18n.dayNames[dateObj.getDay()];
	        },
	        M: function M(dateObj) {
	            return dateObj.getMonth() + 1;
	        },
	        MM: function MM(dateObj) {
	            return pad(dateObj.getMonth() + 1);
	        },
	        MMM: function MMM(dateObj, i18n) {
	            return i18n.monthNamesShort[dateObj.getMonth()];
	        },
	        MMMM: function MMMM(dateObj, i18n) {
	            return i18n.monthNames[dateObj.getMonth()];
	        },
	        yy: function yy(dateObj) {
	            return String(dateObj.getFullYear()).substr(2);
	        },
	        yyyy: function yyyy(dateObj) {
	            return dateObj.getFullYear();
	        },
	        h: function h(dateObj) {
	            return dateObj.getHours() % 12 || 12;
	        },
	        hh: function hh(dateObj) {
	            return pad(dateObj.getHours() % 12 || 12);
	        },
	        H: function H(dateObj) {
	            return dateObj.getHours();
	        },
	        HH: function HH(dateObj) {
	            return pad(dateObj.getHours());
	        },
	        m: function m(dateObj) {
	            return dateObj.getMinutes();
	        },
	        mm: function mm(dateObj) {
	            return pad(dateObj.getMinutes());
	        },
	        s: function s(dateObj) {
	            return dateObj.getSeconds();
	        },
	        ss: function ss(dateObj) {
	            return pad(dateObj.getSeconds());
	        },
	        S: function S(dateObj) {
	            return Math.round(dateObj.getMilliseconds() / 100);
	        },
	        SS: function SS(dateObj) {
	            return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
	        },
	        SSS: function SSS(dateObj) {
	            return pad(dateObj.getMilliseconds(), 3);
	        },
	        a: function a(dateObj, i18n) {
	            return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
	        },
	        A: function A(dateObj, i18n) {
	            return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
	        },
	        ZZ: function ZZ(dateObj) {
	            var o = dateObj.getTimezoneOffset();
	            return (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);
	        }
	    };
	
	    var parseFlags = {
	        d: [twoDigits, function (d, v) {
	            d.day = v;
	        }],
	        M: [twoDigits, function (d, v) {
	            d.month = v - 1;
	        }],
	        yy: [twoDigits, function (d, v) {
	            var da = new Date(),
	                cent = +('' + da.getFullYear()).substr(0, 2);
	            d.year = '' + (v > 68 ? cent - 1 : cent) + v;
	        }],
	        h: [twoDigits, function (d, v) {
	            d.hour = v;
	        }],
	        m: [twoDigits, function (d, v) {
	            d.minute = v;
	        }],
	        s: [twoDigits, function (d, v) {
	            d.second = v;
	        }],
	        yyyy: [fourDigits, function (d, v) {
	            d.year = v;
	        }],
	        S: [/\d/, function (d, v) {
	            d.millisecond = v * 100;
	        }],
	        SS: [/\d{2}/, function (d, v) {
	            d.millisecond = v * 10;
	        }],
	        SSS: [threeDigits, function (d, v) {
	            d.millisecond = v;
	        }],
	        D: [twoDigits, noop],
	        ddd: [word, noop],
	        MMM: [word, monthUpdate('monthNamesShort')],
	        MMMM: [word, monthUpdate('monthNames')],
	        a: [word, function (d, v, i18n) {
	            var val = v.toLowerCase();
	            if (val === i18n.amPm[0]) {
	                d.isPm = false;
	            } else if (val === i18n.amPm[1]) {
	                d.isPm = true;
	            }
	        }],
	        ZZ: [/[\+\-]\d\d:?\d\d/, function (d, v) {
	            var parts = (v + '').match(/([\+\-]|\d\d)/gi),
	                minutes;
	
	            if (parts) {
	                minutes = +(parts[1] * 60) + parseInt(parts[2], 10);
	                d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;
	            }
	        }]
	    };
	    parseFlags.DD = parseFlags.DD;
	    parseFlags.dddd = parseFlags.ddd;
	    parseFlags.Do = parseFlags.dd = parseFlags.d;
	    parseFlags.mm = parseFlags.m;
	    parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;
	    parseFlags.MM = parseFlags.M;
	    parseFlags.ss = parseFlags.s;
	    parseFlags.A = parseFlags.a;
	
	    fecha.masks = {
	        'default': 'ddd MMM dd yyyy HH:mm:ss',
	        shortDate: 'M/D/yy',
	        mediumDate: 'MMM d, yyyy',
	        longDate: 'MMMM d, yyyy',
	        fullDate: 'dddd, MMMM d, yyyy',
	        shortTime: 'HH:mm',
	        mediumTime: 'HH:mm:ss',
	        longTime: 'HH:mm:ss.SSS'
	    };
	
	    fecha.format = function (dateObj, mask, i18nSettings) {
	        var i18n = i18nSettings || fecha.i18n;
	
	        if (typeof dateObj === 'number') {
	            dateObj = new Date(dateObj);
	        }
	
	        if (Object.prototype.toString.call(dateObj) !== '[object Date]' || isNaN(dateObj.getTime())) {
	            throw new Error('Invalid Date in fecha.format');
	        }
	
	        mask = fecha.masks[mask] || mask || fecha.masks['default'];
	
	        return mask.replace(token, function ($0) {
	            return $0 in formatFlags ? formatFlags[$0](dateObj, i18n) : $0.slice(1, $0.length - 1);
	        });
	    };
	
	    fecha.parse = function (dateStr, format, i18nSettings) {
	        var i18n = i18nSettings || fecha.i18n;
	
	        if (typeof format !== 'string') {
	            throw new Error('Invalid format in fecha.parse');
	        }
	
	        format = fecha.masks[format] || format;
	
	        if (dateStr.length > 1000) {
	            return false;
	        }
	
	        var isValid = true;
	        var dateInfo = {};
	        format.replace(token, function ($0) {
	            if (parseFlags[$0]) {
	                var info = parseFlags[$0];
	                var index = dateStr.search(info[0]);
	                if (!~index) {
	                    isValid = false;
	                } else {
	                    dateStr.replace(info[0], function (result) {
	                        info[1](dateInfo, result, i18n);
	                        dateStr = dateStr.substr(index + result.length);
	                        return result;
	                    });
	                }
	            }
	
	            return parseFlags[$0] ? '' : $0.slice(1, $0.length - 1);
	        });
	
	        if (!isValid) {
	            return false;
	        }
	
	        var today = new Date();
	        if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {
	            dateInfo.hour = +dateInfo.hour + 12;
	        } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {
	            dateInfo.hour = 0;
	        }
	
	        var date;
	        if (dateInfo.timezoneOffset != null) {
	            dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;
	            date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));
	        } else {
	            date = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);
	        }
	        return date;
	    };
	
	    if (typeof module !== 'undefined' && module.exports) {
	        module.exports = fecha;
	    } else if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return fecha;
	        }.call(exports, __webpack_require__, exports, module),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else {
	        main.fecha = fecha;
	    }
	})(undefined);
	
	/***/ }),
	/* 345 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(352), __esModule: true };
	
	/***/ }),
	/* 346 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(353), __esModule: true };
	
	/***/ }),
	/* 347 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(355), __esModule: true };
	
	/***/ }),
	/* 348 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(357), __esModule: true };
	
	/***/ }),
	/* 349 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(358), __esModule: true };
	
	/***/ }),
	/* 350 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(360), __esModule: true };
	
	/***/ }),
	/* 351 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(361), __esModule: true };
	
	/***/ }),
	/* 352 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(56);
	__webpack_require__(384);
	module.exports = __webpack_require__(7).Array.from;
	
	/***/ }),
	/* 353 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(82);
	__webpack_require__(56);
	module.exports = __webpack_require__(383);
	
	/***/ }),
	/* 354 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var core  = __webpack_require__(7)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};
	
	/***/ }),
	/* 355 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(386);
	module.exports = __webpack_require__(7).Number.isNaN;
	
	/***/ }),
	/* 356 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(387);
	module.exports = __webpack_require__(7).Object.assign;
	
	/***/ }),
	/* 357 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(388);
	var $Object = __webpack_require__(7).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};
	
	/***/ }),
	/* 358 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(389);
	module.exports = __webpack_require__(7).Object.getPrototypeOf;
	
	/***/ }),
	/* 359 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(390);
	module.exports = __webpack_require__(7).Object.keys;
	
	/***/ }),
	/* 360 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(392);
	__webpack_require__(391);
	__webpack_require__(393);
	__webpack_require__(394);
	module.exports = __webpack_require__(7).Symbol;
	
	/***/ }),
	/* 361 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(56);
	__webpack_require__(82);
	module.exports = __webpack_require__(55).f('iterator');
	
	/***/ }),
	/* 362 */
	/***/ (function(module, exports) {
	
	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};
	
	/***/ }),
	/* 363 */
	/***/ (function(module, exports) {
	
	module.exports = function(){ /* empty */ };
	
	/***/ }),
	/* 364 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(19)
	  , toLength  = __webpack_require__(80)
	  , toIndex   = __webpack_require__(382);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};
	
	/***/ }),
	/* 365 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(44)
	  , TAG = __webpack_require__(9)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};
	
	/***/ }),
	/* 366 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var $defineProperty = __webpack_require__(14)
	  , createDesc      = __webpack_require__(29);
	
	module.exports = function(object, index, value){
	  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};
	
	/***/ }),
	/* 367 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(25)
	  , gOPS    = __webpack_require__(48)
	  , pIE     = __webpack_require__(37);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};
	
	/***/ }),
	/* 368 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = __webpack_require__(13).document && document.documentElement;
	
	/***/ }),
	/* 369 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// check on default Array iterator
	var Iterators  = __webpack_require__(28)
	  , ITERATOR   = __webpack_require__(9)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};
	
	/***/ }),
	/* 370 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(44);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};
	
	/***/ }),
	/* 371 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(22);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};
	
	/***/ }),
	/* 372 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var create         = __webpack_require__(74)
	  , descriptor     = __webpack_require__(29)
	  , setToStringTag = __webpack_require__(49)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(24)(IteratorPrototype, __webpack_require__(9)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};
	
	/***/ }),
	/* 373 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ITERATOR     = __webpack_require__(9)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};
	
	/***/ }),
	/* 374 */
	/***/ (function(module, exports) {
	
	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};
	
	/***/ }),
	/* 375 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var getKeys   = __webpack_require__(25)
	  , toIObject = __webpack_require__(19);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};
	
	/***/ }),
	/* 376 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var META     = __webpack_require__(38)('meta')
	  , isObject = __webpack_require__(36)
	  , has      = __webpack_require__(18)
	  , setDesc  = __webpack_require__(14).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(23)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};
	
	/***/ }),
	/* 377 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(25)
	  , gOPS     = __webpack_require__(48)
	  , pIE      = __webpack_require__(37)
	  , toObject = __webpack_require__(30)
	  , IObject  = __webpack_require__(72)
	  , $assign  = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(23)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;
	
	/***/ }),
	/* 378 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var dP       = __webpack_require__(14)
	  , anObject = __webpack_require__(22)
	  , getKeys  = __webpack_require__(25);
	
	module.exports = __webpack_require__(16) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};
	
	/***/ }),
	/* 379 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var pIE            = __webpack_require__(37)
	  , createDesc     = __webpack_require__(29)
	  , toIObject      = __webpack_require__(19)
	  , toPrimitive    = __webpack_require__(53)
	  , has            = __webpack_require__(18)
	  , IE8_DOM_DEFINE = __webpack_require__(71)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(16) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};
	
	/***/ }),
	/* 380 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(19)
	  , gOPN      = __webpack_require__(75).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};
	
	
	/***/ }),
	/* 381 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var toInteger = __webpack_require__(52)
	  , defined   = __webpack_require__(45);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};
	
	/***/ }),
	/* 382 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var toInteger = __webpack_require__(52)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};
	
	/***/ }),
	/* 383 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var anObject = __webpack_require__(22)
	  , get      = __webpack_require__(81);
	module.exports = __webpack_require__(7).getIterator = function(it){
	  var iterFn = get(it);
	  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};
	
	/***/ }),
	/* 384 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var ctx            = __webpack_require__(69)
	  , $export        = __webpack_require__(17)
	  , toObject       = __webpack_require__(30)
	  , call           = __webpack_require__(371)
	  , isArrayIter    = __webpack_require__(369)
	  , toLength       = __webpack_require__(80)
	  , createProperty = __webpack_require__(366)
	  , getIterFn      = __webpack_require__(81);
	
	$export($export.S + $export.F * !__webpack_require__(373)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});
	
	
	/***/ }),
	/* 385 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var addToUnscopables = __webpack_require__(363)
	  , step             = __webpack_require__(374)
	  , Iterators        = __webpack_require__(28)
	  , toIObject        = __webpack_require__(19);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(73)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');
	
	/***/ }),
	/* 386 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(17);
	
	$export($export.S, 'Number', {
	  isNaN: function isNaN(number){
	    return number != number;
	  }
	});
	
	/***/ }),
	/* 387 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(17);
	
	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(377)});
	
	/***/ }),
	/* 388 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var $export = __webpack_require__(17);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(16), 'Object', {defineProperty: __webpack_require__(14).f});
	
	/***/ }),
	/* 389 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(30)
	  , $getPrototypeOf = __webpack_require__(76);
	
	__webpack_require__(78)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});
	
	/***/ }),
	/* 390 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(30)
	  , $keys    = __webpack_require__(25);
	
	__webpack_require__(78)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});
	
	/***/ }),
	/* 391 */
	/***/ (function(module, exports) {
	
	
	
	/***/ }),
	/* 392 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(13)
	  , has            = __webpack_require__(18)
	  , DESCRIPTORS    = __webpack_require__(16)
	  , $export        = __webpack_require__(17)
	  , redefine       = __webpack_require__(79)
	  , META           = __webpack_require__(376).KEY
	  , $fails         = __webpack_require__(23)
	  , shared         = __webpack_require__(51)
	  , setToStringTag = __webpack_require__(49)
	  , uid            = __webpack_require__(38)
	  , wks            = __webpack_require__(9)
	  , wksExt         = __webpack_require__(55)
	  , wksDefine      = __webpack_require__(54)
	  , keyOf          = __webpack_require__(375)
	  , enumKeys       = __webpack_require__(367)
	  , isArray        = __webpack_require__(370)
	  , anObject       = __webpack_require__(22)
	  , toIObject      = __webpack_require__(19)
	  , toPrimitive    = __webpack_require__(53)
	  , createDesc     = __webpack_require__(29)
	  , _create        = __webpack_require__(74)
	  , gOPNExt        = __webpack_require__(380)
	  , $GOPD          = __webpack_require__(379)
	  , $DP            = __webpack_require__(14)
	  , $keys          = __webpack_require__(25)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(75).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(37).f  = $propertyIsEnumerable;
	  __webpack_require__(48).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(47)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(24)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);
	
	/***/ }),
	/* 393 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(54)('asyncIterator');
	
	/***/ }),
	/* 394 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(54)('observable');
	
	/***/ }),
	/* 395 */
	/***/ (function(module, exports) {
	
	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};
	
	/***/ }),
	/* 396 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(87)('unscopables')
	  , ArrayProto  = Array.prototype;
	if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(59)(ArrayProto, UNSCOPABLES, {});
	module.exports = function(key){
	  ArrayProto[UNSCOPABLES][key] = true;
	};
	
	/***/ }),
	/* 397 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(39);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};
	
	/***/ }),
	/* 398 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(84)
	  , IObject  = __webpack_require__(406)
	  , toObject = __webpack_require__(414)
	  , toLength = __webpack_require__(413)
	  , asc      = __webpack_require__(400);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};
	
	/***/ }),
	/* 399 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(39)
	  , isArray  = __webpack_require__(407)
	  , SPECIES  = __webpack_require__(87)('species');
	
	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};
	
	/***/ }),
	/* 400 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(399);
	
	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};
	
	/***/ }),
	/* 401 */
	/***/ (function(module, exports) {
	
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};
	
	/***/ }),
	/* 402 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(39)
	  , document = __webpack_require__(31).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};
	
	/***/ }),
	/* 403 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global    = __webpack_require__(31)
	  , core      = __webpack_require__(57)
	  , hide      = __webpack_require__(59)
	  , redefine  = __webpack_require__(410)
	  , ctx       = __webpack_require__(84)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
	    , key, own, out, exp;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if(target)redefine(target, key, out, type & $export.U);
	    // export
	    if(exports[key] != out)hide(exports, key, exp);
	    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;
	
	/***/ }),
	/* 404 */
	/***/ (function(module, exports) {
	
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};
	
	/***/ }),
	/* 405 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = !__webpack_require__(58) && !__webpack_require__(85)(function(){
	  return Object.defineProperty(__webpack_require__(402)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});
	
	/***/ }),
	/* 406 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(83);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};
	
	/***/ }),
	/* 407 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(83);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};
	
	/***/ }),
	/* 408 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var anObject       = __webpack_require__(397)
	  , IE8_DOM_DEFINE = __webpack_require__(405)
	  , toPrimitive    = __webpack_require__(415)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(58) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};
	
	/***/ }),
	/* 409 */
	/***/ (function(module, exports) {
	
	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};
	
	/***/ }),
	/* 410 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global    = __webpack_require__(31)
	  , hide      = __webpack_require__(59)
	  , has       = __webpack_require__(404)
	  , SRC       = __webpack_require__(86)('src')
	  , TO_STRING = 'toString'
	  , $toString = Function[TO_STRING]
	  , TPL       = ('' + $toString).split(TO_STRING);
	
	__webpack_require__(57).inspectSource = function(it){
	  return $toString.call(it);
	};
	
	(module.exports = function(O, key, val, safe){
	  var isFunction = typeof val == 'function';
	  if(isFunction)has(val, 'name') || hide(val, 'name', key);
	  if(O[key] === val)return;
	  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if(O === global){
	    O[key] = val;
	  } else {
	    if(!safe){
	      delete O[key];
	      hide(O, key, val);
	    } else {
	      if(O[key])O[key] = val;
	      else hide(O, key, val);
	    }
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString(){
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});
	
	/***/ }),
	/* 411 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global = __webpack_require__(31)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};
	
	/***/ }),
	/* 412 */
	/***/ (function(module, exports) {
	
	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};
	
	/***/ }),
	/* 413 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.15 ToLength
	var toInteger = __webpack_require__(412)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};
	
	/***/ }),
	/* 414 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(401);
	module.exports = function(it){
	  return Object(defined(it));
	};
	
	/***/ }),
	/* 415 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(39);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};
	
	/***/ }),
	/* 416 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var $export = __webpack_require__(403)
	  , $find   = __webpack_require__(398)(6)
	  , KEY     = 'findIndex'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(396)(KEY);
	
	/***/ }),
	/* 417 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var index$2 = function isMergeableObject(value) {
		return isNonNullObject(value) && isNotSpecial(value)
	};
	
	function isNonNullObject(value) {
		return !!value && typeof value === 'object'
	}
	
	function isNotSpecial(value) {
		var stringValue = Object.prototype.toString.call(value);
	
		return stringValue !== '[object RegExp]'
			&& stringValue !== '[object Date]'
	}
	
	function emptyTarget(val) {
	    return Array.isArray(val) ? [] : {}
	}
	
	function cloneIfNecessary(value, optionsArgument) {
	    var clone = optionsArgument && optionsArgument.clone === true;
	    return (clone && index$2(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
	}
	
	function defaultArrayMerge(target, source, optionsArgument) {
	    var destination = target.slice();
	    source.forEach(function(e, i) {
	        if (typeof destination[i] === 'undefined') {
	            destination[i] = cloneIfNecessary(e, optionsArgument);
	        } else if (index$2(e)) {
	            destination[i] = deepmerge(target[i], e, optionsArgument);
	        } else if (target.indexOf(e) === -1) {
	            destination.push(cloneIfNecessary(e, optionsArgument));
	        }
	    });
	    return destination
	}
	
	function mergeObject(target, source, optionsArgument) {
	    var destination = {};
	    if (index$2(target)) {
	        Object.keys(target).forEach(function(key) {
	            destination[key] = cloneIfNecessary(target[key], optionsArgument);
	        });
	    }
	    Object.keys(source).forEach(function(key) {
	        if (!index$2(source[key]) || !target[key]) {
	            destination[key] = cloneIfNecessary(source[key], optionsArgument);
	        } else {
	            destination[key] = deepmerge(target[key], source[key], optionsArgument);
	        }
	    });
	    return destination
	}
	
	function deepmerge(target, source, optionsArgument) {
	    var sourceIsArray = Array.isArray(source);
	    var targetIsArray = Array.isArray(target);
	    var options = optionsArgument || { arrayMerge: defaultArrayMerge };
	    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
	
	    if (!sourceAndTargetTypesMatch) {
	        return cloneIfNecessary(source, optionsArgument)
	    } else if (sourceIsArray) {
	        var arrayMerge = options.arrayMerge || defaultArrayMerge;
	        return arrayMerge(target, source, optionsArgument)
	    } else {
	        return mergeObject(target, source, optionsArgument)
	    }
	}
	
	deepmerge.all = function deepmergeAll(array, optionsArgument) {
	    if (!Array.isArray(array) || array.length < 2) {
	        throw new Error('first argument should be an array with at least two elements')
	    }
	
	    // we are sure there are at least 2 values, so it is safe to have no initial value
	    return array.reduce(function(prev, next) {
	        return deepmerge(prev, next, optionsArgument)
	    })
	};
	
	var index = deepmerge;
	
	module.exports = index;
	
	
	/***/ }),
	/* 418 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(168),
	  /* template */
	  __webpack_require__(260),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 419 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(169),
	  /* template */
	  __webpack_require__(326),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 420 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(170),
	  /* template */
	  __webpack_require__(253),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 421 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(171),
	  /* template */
	  __webpack_require__(251),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 422 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(172),
	  /* template */
	  __webpack_require__(302),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 423 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(173),
	  /* template */
	  __webpack_require__(328),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 424 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(174),
	  /* template */
	  __webpack_require__(307),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 425 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(175),
	  /* template */
	  __webpack_require__(327),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 426 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(176),
	  /* template */
	  __webpack_require__(288),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 427 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(178),
	  /* template */
	  __webpack_require__(268),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 428 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(179),
	  /* template */
	  __webpack_require__(277),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 429 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(180),
	  /* template */
	  __webpack_require__(324),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 430 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(181),
	  /* template */
	  __webpack_require__(313),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 431 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(182),
	  /* template */
	  __webpack_require__(312),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 432 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(183),
	  /* template */
	  __webpack_require__(289),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 433 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(186),
	  /* template */
	  __webpack_require__(254),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 434 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(187),
	  /* template */
	  __webpack_require__(257),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 435 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(188),
	  /* template */
	  __webpack_require__(271),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 436 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(194),
	  /* template */
	  __webpack_require__(255),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 437 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(195),
	  /* template */
	  __webpack_require__(286),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 438 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(199),
	  /* template */
	  __webpack_require__(317),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 439 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(200),
	  /* template */
	  __webpack_require__(279),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 440 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(201),
	  /* template */
	  __webpack_require__(323),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 441 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(202),
	  /* template */
	  __webpack_require__(250),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 442 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(203),
	  /* template */
	  __webpack_require__(259),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 443 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(204),
	  /* template */
	  __webpack_require__(281),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 444 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(205),
	  /* template */
	  __webpack_require__(297),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 445 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(209),
	  /* template */
	  __webpack_require__(273),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 446 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(210),
	  /* template */
	  __webpack_require__(261),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 447 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(211),
	  /* template */
	  __webpack_require__(252),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 448 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(212),
	  /* template */
	  __webpack_require__(294),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 449 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(213),
	  /* template */
	  __webpack_require__(300),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 450 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(214),
	  /* template */
	  __webpack_require__(265),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 451 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(215),
	  /* template */
	  __webpack_require__(314),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 452 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(216),
	  /* template */
	  __webpack_require__(256),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 453 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(219),
	  /* template */
	  __webpack_require__(295),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 454 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(220),
	  /* template */
	  __webpack_require__(298),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 455 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(221),
	  /* template */
	  __webpack_require__(293),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 456 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(223),
	  /* template */
	  __webpack_require__(283),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 457 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(226),
	  /* template */
	  __webpack_require__(284),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 458 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(227),
	  /* template */
	  __webpack_require__(296),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 459 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(228),
	  /* template */
	  __webpack_require__(320),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 460 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(229),
	  /* template */
	  __webpack_require__(264),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 461 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(230),
	  /* template */
	  __webpack_require__(266),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 462 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(231),
	  /* template */
	  __webpack_require__(330),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 463 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(232),
	  /* template */
	  __webpack_require__(263),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 464 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(233),
	  /* template */
	  __webpack_require__(311),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 465 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(234),
	  /* template */
	  __webpack_require__(291),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 466 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(235),
	  /* template */
	  __webpack_require__(319),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 467 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(236),
	  /* template */
	  __webpack_require__(278),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 468 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(237),
	  /* template */
	  __webpack_require__(292),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 469 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(238),
	  /* template */
	  __webpack_require__(272),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 470 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(239),
	  /* template */
	  __webpack_require__(316),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 471 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(240),
	  /* template */
	  __webpack_require__(274),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 472 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(242),
	  /* template */
	  __webpack_require__(322),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 473 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(243),
	  /* template */
	  __webpack_require__(280),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 474 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(244),
	  /* template */
	  __webpack_require__(304),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 475 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(245),
	  /* template */
	  null,
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 476 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(246),
	  /* template */
	  __webpack_require__(270),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 477 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(247),
	  /* template */
	  __webpack_require__(275),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 478 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(248),
	  /* template */
	  __webpack_require__(325),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ }),
	/* 479 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(249),
	  /* template */
	  __webpack_require__(282),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)
	
	module.exports = Component.exports
	
	
	/***/ })
	/******/ ]);
	});

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {/*!
	 * Vue.js v2.3.4
	 * (c) 2014-2017 Evan You
	 * Released under the MIT License.
	 */
	'use strict';
	
	/*  */
	
	// these helpers produces better vm code in JS engines due to their
	// explicitness and function inlining
	function isUndef (v) {
	  return v === undefined || v === null
	}
	
	function isDef (v) {
	  return v !== undefined && v !== null
	}
	
	function isTrue (v) {
	  return v === true
	}
	
	function isFalse (v) {
	  return v === false
	}
	/**
	 * Check if value is primitive
	 */
	function isPrimitive (value) {
	  return typeof value === 'string' || typeof value === 'number'
	}
	
	/**
	 * Quick object check - this is primarily used to tell
	 * Objects from primitive values when we know the value
	 * is a JSON-compliant type.
	 */
	function isObject (obj) {
	  return obj !== null && typeof obj === 'object'
	}
	
	var _toString = Object.prototype.toString;
	
	/**
	 * Strict object type check. Only returns true
	 * for plain JavaScript objects.
	 */
	function isPlainObject (obj) {
	  return _toString.call(obj) === '[object Object]'
	}
	
	function isRegExp (v) {
	  return _toString.call(v) === '[object RegExp]'
	}
	
	/**
	 * Convert a value to a string that is actually rendered.
	 */
	function toString (val) {
	  return val == null
	    ? ''
	    : typeof val === 'object'
	      ? JSON.stringify(val, null, 2)
	      : String(val)
	}
	
	/**
	 * Convert a input value to a number for persistence.
	 * If the conversion fails, return original string.
	 */
	function toNumber (val) {
	  var n = parseFloat(val);
	  return isNaN(n) ? val : n
	}
	
	/**
	 * Make a map and return a function for checking if a key
	 * is in that map.
	 */
	function makeMap (
	  str,
	  expectsLowerCase
	) {
	  var map = Object.create(null);
	  var list = str.split(',');
	  for (var i = 0; i < list.length; i++) {
	    map[list[i]] = true;
	  }
	  return expectsLowerCase
	    ? function (val) { return map[val.toLowerCase()]; }
	    : function (val) { return map[val]; }
	}
	
	/**
	 * Check if a tag is a built-in tag.
	 */
	var isBuiltInTag = makeMap('slot,component', true);
	
	/**
	 * Remove an item from an array
	 */
	function remove (arr, item) {
	  if (arr.length) {
	    var index = arr.indexOf(item);
	    if (index > -1) {
	      return arr.splice(index, 1)
	    }
	  }
	}
	
	/**
	 * Check whether the object has the property.
	 */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	function hasOwn (obj, key) {
	  return hasOwnProperty.call(obj, key)
	}
	
	/**
	 * Create a cached version of a pure function.
	 */
	function cached (fn) {
	  var cache = Object.create(null);
	  return (function cachedFn (str) {
	    var hit = cache[str];
	    return hit || (cache[str] = fn(str))
	  })
	}
	
	/**
	 * Camelize a hyphen-delimited string.
	 */
	var camelizeRE = /-(\w)/g;
	var camelize = cached(function (str) {
	  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
	});
	
	/**
	 * Capitalize a string.
	 */
	var capitalize = cached(function (str) {
	  return str.charAt(0).toUpperCase() + str.slice(1)
	});
	
	/**
	 * Hyphenate a camelCase string.
	 */
	var hyphenateRE = /([^-])([A-Z])/g;
	var hyphenate = cached(function (str) {
	  return str
	    .replace(hyphenateRE, '$1-$2')
	    .replace(hyphenateRE, '$1-$2')
	    .toLowerCase()
	});
	
	/**
	 * Simple bind, faster than native
	 */
	function bind (fn, ctx) {
	  function boundFn (a) {
	    var l = arguments.length;
	    return l
	      ? l > 1
	        ? fn.apply(ctx, arguments)
	        : fn.call(ctx, a)
	      : fn.call(ctx)
	  }
	  // record original fn length
	  boundFn._length = fn.length;
	  return boundFn
	}
	
	/**
	 * Convert an Array-like object to a real Array.
	 */
	function toArray (list, start) {
	  start = start || 0;
	  var i = list.length - start;
	  var ret = new Array(i);
	  while (i--) {
	    ret[i] = list[i + start];
	  }
	  return ret
	}
	
	/**
	 * Mix properties into target object.
	 */
	function extend (to, _from) {
	  for (var key in _from) {
	    to[key] = _from[key];
	  }
	  return to
	}
	
	/**
	 * Merge an Array of Objects into a single Object.
	 */
	function toObject (arr) {
	  var res = {};
	  for (var i = 0; i < arr.length; i++) {
	    if (arr[i]) {
	      extend(res, arr[i]);
	    }
	  }
	  return res
	}
	
	/**
	 * Perform no operation.
	 */
	function noop () {}
	
	/**
	 * Always return false.
	 */
	var no = function () { return false; };
	
	/**
	 * Return same value
	 */
	var identity = function (_) { return _; };
	
	/**
	 * Generate a static keys string from compiler modules.
	 */
	
	
	/**
	 * Check if two values are loosely equal - that is,
	 * if they are plain objects, do they have the same shape?
	 */
	function looseEqual (a, b) {
	  var isObjectA = isObject(a);
	  var isObjectB = isObject(b);
	  if (isObjectA && isObjectB) {
	    try {
	      return JSON.stringify(a) === JSON.stringify(b)
	    } catch (e) {
	      // possible circular reference
	      return a === b
	    }
	  } else if (!isObjectA && !isObjectB) {
	    return String(a) === String(b)
	  } else {
	    return false
	  }
	}
	
	function looseIndexOf (arr, val) {
	  for (var i = 0; i < arr.length; i++) {
	    if (looseEqual(arr[i], val)) { return i }
	  }
	  return -1
	}
	
	/**
	 * Ensure a function is called only once.
	 */
	function once (fn) {
	  var called = false;
	  return function () {
	    if (!called) {
	      called = true;
	      fn.apply(this, arguments);
	    }
	  }
	}
	
	var SSR_ATTR = 'data-server-rendered';
	
	var ASSET_TYPES = [
	  'component',
	  'directive',
	  'filter'
	];
	
	var LIFECYCLE_HOOKS = [
	  'beforeCreate',
	  'created',
	  'beforeMount',
	  'mounted',
	  'beforeUpdate',
	  'updated',
	  'beforeDestroy',
	  'destroyed',
	  'activated',
	  'deactivated'
	];
	
	/*  */
	
	var config = ({
	  /**
	   * Option merge strategies (used in core/util/options)
	   */
	  optionMergeStrategies: Object.create(null),
	
	  /**
	   * Whether to suppress warnings.
	   */
	  silent: false,
	
	  /**
	   * Show production mode tip message on boot?
	   */
	  productionTip: process.env.NODE_ENV !== 'production',
	
	  /**
	   * Whether to enable devtools
	   */
	  devtools: process.env.NODE_ENV !== 'production',
	
	  /**
	   * Whether to record perf
	   */
	  performance: false,
	
	  /**
	   * Error handler for watcher errors
	   */
	  errorHandler: null,
	
	  /**
	   * Ignore certain custom elements
	   */
	  ignoredElements: [],
	
	  /**
	   * Custom user key aliases for v-on
	   */
	  keyCodes: Object.create(null),
	
	  /**
	   * Check if a tag is reserved so that it cannot be registered as a
	   * component. This is platform-dependent and may be overwritten.
	   */
	  isReservedTag: no,
	
	  /**
	   * Check if an attribute is reserved so that it cannot be used as a component
	   * prop. This is platform-dependent and may be overwritten.
	   */
	  isReservedAttr: no,
	
	  /**
	   * Check if a tag is an unknown element.
	   * Platform-dependent.
	   */
	  isUnknownElement: no,
	
	  /**
	   * Get the namespace of an element
	   */
	  getTagNamespace: noop,
	
	  /**
	   * Parse the real tag name for the specific platform.
	   */
	  parsePlatformTagName: identity,
	
	  /**
	   * Check if an attribute must be bound using property, e.g. value
	   * Platform-dependent.
	   */
	  mustUseProp: no,
	
	  /**
	   * Exposed for legacy reasons
	   */
	  _lifecycleHooks: LIFECYCLE_HOOKS
	});
	
	/*  */
	
	var emptyObject = Object.freeze({});
	
	/**
	 * Check if a string starts with $ or _
	 */
	function isReserved (str) {
	  var c = (str + '').charCodeAt(0);
	  return c === 0x24 || c === 0x5F
	}
	
	/**
	 * Define a property.
	 */
	function def (obj, key, val, enumerable) {
	  Object.defineProperty(obj, key, {
	    value: val,
	    enumerable: !!enumerable,
	    writable: true,
	    configurable: true
	  });
	}
	
	/**
	 * Parse simple path.
	 */
	var bailRE = /[^\w.$]/;
	function parsePath (path) {
	  if (bailRE.test(path)) {
	    return
	  }
	  var segments = path.split('.');
	  return function (obj) {
	    for (var i = 0; i < segments.length; i++) {
	      if (!obj) { return }
	      obj = obj[segments[i]];
	    }
	    return obj
	  }
	}
	
	/*  */
	
	var warn = noop;
	var tip = noop;
	var formatComponentName = (null); // work around flow check
	
	if (process.env.NODE_ENV !== 'production') {
	  var hasConsole = typeof console !== 'undefined';
	  var classifyRE = /(?:^|[-_])(\w)/g;
	  var classify = function (str) { return str
	    .replace(classifyRE, function (c) { return c.toUpperCase(); })
	    .replace(/[-_]/g, ''); };
	
	  warn = function (msg, vm) {
	    if (hasConsole && (!config.silent)) {
	      console.error("[Vue warn]: " + msg + (
	        vm ? generateComponentTrace(vm) : ''
	      ));
	    }
	  };
	
	  tip = function (msg, vm) {
	    if (hasConsole && (!config.silent)) {
	      console.warn("[Vue tip]: " + msg + (
	        vm ? generateComponentTrace(vm) : ''
	      ));
	    }
	  };
	
	  formatComponentName = function (vm, includeFile) {
	    if (vm.$root === vm) {
	      return '<Root>'
	    }
	    var name = typeof vm === 'string'
	      ? vm
	      : typeof vm === 'function' && vm.options
	        ? vm.options.name
	        : vm._isVue
	          ? vm.$options.name || vm.$options._componentTag
	          : vm.name;
	
	    var file = vm._isVue && vm.$options.__file;
	    if (!name && file) {
	      var match = file.match(/([^/\\]+)\.vue$/);
	      name = match && match[1];
	    }
	
	    return (
	      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
	      (file && includeFile !== false ? (" at " + file) : '')
	    )
	  };
	
	  var repeat = function (str, n) {
	    var res = '';
	    while (n) {
	      if (n % 2 === 1) { res += str; }
	      if (n > 1) { str += str; }
	      n >>= 1;
	    }
	    return res
	  };
	
	  var generateComponentTrace = function (vm) {
	    if (vm._isVue && vm.$parent) {
	      var tree = [];
	      var currentRecursiveSequence = 0;
	      while (vm) {
	        if (tree.length > 0) {
	          var last = tree[tree.length - 1];
	          if (last.constructor === vm.constructor) {
	            currentRecursiveSequence++;
	            vm = vm.$parent;
	            continue
	          } else if (currentRecursiveSequence > 0) {
	            tree[tree.length - 1] = [last, currentRecursiveSequence];
	            currentRecursiveSequence = 0;
	          }
	        }
	        tree.push(vm);
	        vm = vm.$parent;
	      }
	      return '\n\nfound in\n\n' + tree
	        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
	            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
	            : formatComponentName(vm))); })
	        .join('\n')
	    } else {
	      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
	    }
	  };
	}
	
	/*  */
	
	function handleError (err, vm, info) {
	  if (config.errorHandler) {
	    config.errorHandler.call(null, err, vm, info);
	  } else {
	    if (process.env.NODE_ENV !== 'production') {
	      warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
	    }
	    /* istanbul ignore else */
	    if (inBrowser && typeof console !== 'undefined') {
	      console.error(err);
	    } else {
	      throw err
	    }
	  }
	}
	
	/*  */
	/* globals MutationObserver */
	
	// can we use __proto__?
	var hasProto = '__proto__' in {};
	
	// Browser environment sniffing
	var inBrowser = typeof window !== 'undefined';
	var UA = inBrowser && window.navigator.userAgent.toLowerCase();
	var isIE = UA && /msie|trident/.test(UA);
	var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
	var isEdge = UA && UA.indexOf('edge/') > 0;
	var isAndroid = UA && UA.indexOf('android') > 0;
	var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
	var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
	
	var supportsPassive = false;
	if (inBrowser) {
	  try {
	    var opts = {};
	    Object.defineProperty(opts, 'passive', ({
	      get: function get () {
	        /* istanbul ignore next */
	        supportsPassive = true;
	      }
	    } )); // https://github.com/facebook/flow/issues/285
	    window.addEventListener('test-passive', null, opts);
	  } catch (e) {}
	}
	
	// this needs to be lazy-evaled because vue may be required before
	// vue-server-renderer can set VUE_ENV
	var _isServer;
	var isServerRendering = function () {
	  if (_isServer === undefined) {
	    /* istanbul ignore if */
	    if (!inBrowser && typeof global !== 'undefined') {
	      // detect presence of vue-server-renderer and avoid
	      // Webpack shimming the process
	      _isServer = global['process'].env.VUE_ENV === 'server';
	    } else {
	      _isServer = false;
	    }
	  }
	  return _isServer
	};
	
	// detect devtools
	var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
	
	/* istanbul ignore next */
	function isNative (Ctor) {
	  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
	}
	
	var hasSymbol =
	  typeof Symbol !== 'undefined' && isNative(Symbol) &&
	  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);
	
	/**
	 * Defer a task to execute it asynchronously.
	 */
	var nextTick = (function () {
	  var callbacks = [];
	  var pending = false;
	  var timerFunc;
	
	  function nextTickHandler () {
	    pending = false;
	    var copies = callbacks.slice(0);
	    callbacks.length = 0;
	    for (var i = 0; i < copies.length; i++) {
	      copies[i]();
	    }
	  }
	
	  // the nextTick behavior leverages the microtask queue, which can be accessed
	  // via either native Promise.then or MutationObserver.
	  // MutationObserver has wider support, however it is seriously bugged in
	  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
	  // completely stops working after triggering a few times... so, if native
	  // Promise is available, we will use it:
	  /* istanbul ignore if */
	  if (typeof Promise !== 'undefined' && isNative(Promise)) {
	    var p = Promise.resolve();
	    var logError = function (err) { console.error(err); };
	    timerFunc = function () {
	      p.then(nextTickHandler).catch(logError);
	      // in problematic UIWebViews, Promise.then doesn't completely break, but
	      // it can get stuck in a weird state where callbacks are pushed into the
	      // microtask queue but the queue isn't being flushed, until the browser
	      // needs to do some other work, e.g. handle a timer. Therefore we can
	      // "force" the microtask queue to be flushed by adding an empty timer.
	      if (isIOS) { setTimeout(noop); }
	    };
	  } else if (typeof MutationObserver !== 'undefined' && (
	    isNative(MutationObserver) ||
	    // PhantomJS and iOS 7.x
	    MutationObserver.toString() === '[object MutationObserverConstructor]'
	  )) {
	    // use MutationObserver where native Promise is not available,
	    // e.g. PhantomJS IE11, iOS7, Android 4.4
	    var counter = 1;
	    var observer = new MutationObserver(nextTickHandler);
	    var textNode = document.createTextNode(String(counter));
	    observer.observe(textNode, {
	      characterData: true
	    });
	    timerFunc = function () {
	      counter = (counter + 1) % 2;
	      textNode.data = String(counter);
	    };
	  } else {
	    // fallback to setTimeout
	    /* istanbul ignore next */
	    timerFunc = function () {
	      setTimeout(nextTickHandler, 0);
	    };
	  }
	
	  return function queueNextTick (cb, ctx) {
	    var _resolve;
	    callbacks.push(function () {
	      if (cb) {
	        try {
	          cb.call(ctx);
	        } catch (e) {
	          handleError(e, ctx, 'nextTick');
	        }
	      } else if (_resolve) {
	        _resolve(ctx);
	      }
	    });
	    if (!pending) {
	      pending = true;
	      timerFunc();
	    }
	    if (!cb && typeof Promise !== 'undefined') {
	      return new Promise(function (resolve, reject) {
	        _resolve = resolve;
	      })
	    }
	  }
	})();
	
	var _Set;
	/* istanbul ignore if */
	if (typeof Set !== 'undefined' && isNative(Set)) {
	  // use native Set when available.
	  _Set = Set;
	} else {
	  // a non-standard Set polyfill that only works with primitive keys.
	  _Set = (function () {
	    function Set () {
	      this.set = Object.create(null);
	    }
	    Set.prototype.has = function has (key) {
	      return this.set[key] === true
	    };
	    Set.prototype.add = function add (key) {
	      this.set[key] = true;
	    };
	    Set.prototype.clear = function clear () {
	      this.set = Object.create(null);
	    };
	
	    return Set;
	  }());
	}
	
	/*  */
	
	
	var uid$1 = 0;
	
	/**
	 * A dep is an observable that can have multiple
	 * directives subscribing to it.
	 */
	var Dep = function Dep () {
	  this.id = uid$1++;
	  this.subs = [];
	};
	
	Dep.prototype.addSub = function addSub (sub) {
	  this.subs.push(sub);
	};
	
	Dep.prototype.removeSub = function removeSub (sub) {
	  remove(this.subs, sub);
	};
	
	Dep.prototype.depend = function depend () {
	  if (Dep.target) {
	    Dep.target.addDep(this);
	  }
	};
	
	Dep.prototype.notify = function notify () {
	  // stabilize the subscriber list first
	  var subs = this.subs.slice();
	  for (var i = 0, l = subs.length; i < l; i++) {
	    subs[i].update();
	  }
	};
	
	// the current target watcher being evaluated.
	// this is globally unique because there could be only one
	// watcher being evaluated at any time.
	Dep.target = null;
	var targetStack = [];
	
	function pushTarget (_target) {
	  if (Dep.target) { targetStack.push(Dep.target); }
	  Dep.target = _target;
	}
	
	function popTarget () {
	  Dep.target = targetStack.pop();
	}
	
	/*
	 * not type checking this file because flow doesn't play well with
	 * dynamically accessing methods on Array prototype
	 */
	
	var arrayProto = Array.prototype;
	var arrayMethods = Object.create(arrayProto);[
	  'push',
	  'pop',
	  'shift',
	  'unshift',
	  'splice',
	  'sort',
	  'reverse'
	]
	.forEach(function (method) {
	  // cache original method
	  var original = arrayProto[method];
	  def(arrayMethods, method, function mutator () {
	    var arguments$1 = arguments;
	
	    // avoid leaking arguments:
	    // http://jsperf.com/closure-with-arguments
	    var i = arguments.length;
	    var args = new Array(i);
	    while (i--) {
	      args[i] = arguments$1[i];
	    }
	    var result = original.apply(this, args);
	    var ob = this.__ob__;
	    var inserted;
	    switch (method) {
	      case 'push':
	        inserted = args;
	        break
	      case 'unshift':
	        inserted = args;
	        break
	      case 'splice':
	        inserted = args.slice(2);
	        break
	    }
	    if (inserted) { ob.observeArray(inserted); }
	    // notify change
	    ob.dep.notify();
	    return result
	  });
	});
	
	/*  */
	
	var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
	
	/**
	 * By default, when a reactive property is set, the new value is
	 * also converted to become reactive. However when passing down props,
	 * we don't want to force conversion because the value may be a nested value
	 * under a frozen data structure. Converting it would defeat the optimization.
	 */
	var observerState = {
	  shouldConvert: true,
	  isSettingProps: false
	};
	
	/**
	 * Observer class that are attached to each observed
	 * object. Once attached, the observer converts target
	 * object's property keys into getter/setters that
	 * collect dependencies and dispatches updates.
	 */
	var Observer = function Observer (value) {
	  this.value = value;
	  this.dep = new Dep();
	  this.vmCount = 0;
	  def(value, '__ob__', this);
	  if (Array.isArray(value)) {
	    var augment = hasProto
	      ? protoAugment
	      : copyAugment;
	    augment(value, arrayMethods, arrayKeys);
	    this.observeArray(value);
	  } else {
	    this.walk(value);
	  }
	};
	
	/**
	 * Walk through each property and convert them into
	 * getter/setters. This method should only be called when
	 * value type is Object.
	 */
	Observer.prototype.walk = function walk (obj) {
	  var keys = Object.keys(obj);
	  for (var i = 0; i < keys.length; i++) {
	    defineReactive$$1(obj, keys[i], obj[keys[i]]);
	  }
	};
	
	/**
	 * Observe a list of Array items.
	 */
	Observer.prototype.observeArray = function observeArray (items) {
	  for (var i = 0, l = items.length; i < l; i++) {
	    observe(items[i]);
	  }
	};
	
	// helpers
	
	/**
	 * Augment an target Object or Array by intercepting
	 * the prototype chain using __proto__
	 */
	function protoAugment (target, src) {
	  /* eslint-disable no-proto */
	  target.__proto__ = src;
	  /* eslint-enable no-proto */
	}
	
	/**
	 * Augment an target Object or Array by defining
	 * hidden properties.
	 */
	/* istanbul ignore next */
	function copyAugment (target, src, keys) {
	  for (var i = 0, l = keys.length; i < l; i++) {
	    var key = keys[i];
	    def(target, key, src[key]);
	  }
	}
	
	/**
	 * Attempt to create an observer instance for a value,
	 * returns the new observer if successfully observed,
	 * or the existing observer if the value already has one.
	 */
	function observe (value, asRootData) {
	  if (!isObject(value)) {
	    return
	  }
	  var ob;
	  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
	    ob = value.__ob__;
	  } else if (
	    observerState.shouldConvert &&
	    !isServerRendering() &&
	    (Array.isArray(value) || isPlainObject(value)) &&
	    Object.isExtensible(value) &&
	    !value._isVue
	  ) {
	    ob = new Observer(value);
	  }
	  if (asRootData && ob) {
	    ob.vmCount++;
	  }
	  return ob
	}
	
	/**
	 * Define a reactive property on an Object.
	 */
	function defineReactive$$1 (
	  obj,
	  key,
	  val,
	  customSetter
	) {
	  var dep = new Dep();
	
	  var property = Object.getOwnPropertyDescriptor(obj, key);
	  if (property && property.configurable === false) {
	    return
	  }
	
	  // cater for pre-defined getter/setters
	  var getter = property && property.get;
	  var setter = property && property.set;
	
	  var childOb = observe(val);
	  Object.defineProperty(obj, key, {
	    enumerable: true,
	    configurable: true,
	    get: function reactiveGetter () {
	      var value = getter ? getter.call(obj) : val;
	      if (Dep.target) {
	        dep.depend();
	        if (childOb) {
	          childOb.dep.depend();
	        }
	        if (Array.isArray(value)) {
	          dependArray(value);
	        }
	      }
	      return value
	    },
	    set: function reactiveSetter (newVal) {
	      var value = getter ? getter.call(obj) : val;
	      /* eslint-disable no-self-compare */
	      if (newVal === value || (newVal !== newVal && value !== value)) {
	        return
	      }
	      /* eslint-enable no-self-compare */
	      if (process.env.NODE_ENV !== 'production' && customSetter) {
	        customSetter();
	      }
	      if (setter) {
	        setter.call(obj, newVal);
	      } else {
	        val = newVal;
	      }
	      childOb = observe(newVal);
	      dep.notify();
	    }
	  });
	}
	
	/**
	 * Set a property on an object. Adds the new property and
	 * triggers change notification if the property doesn't
	 * already exist.
	 */
	function set (target, key, val) {
	  if (Array.isArray(target) && typeof key === 'number') {
	    target.length = Math.max(target.length, key);
	    target.splice(key, 1, val);
	    return val
	  }
	  if (hasOwn(target, key)) {
	    target[key] = val;
	    return val
	  }
	  var ob = (target ).__ob__;
	  if (target._isVue || (ob && ob.vmCount)) {
	    process.env.NODE_ENV !== 'production' && warn(
	      'Avoid adding reactive properties to a Vue instance or its root $data ' +
	      'at runtime - declare it upfront in the data option.'
	    );
	    return val
	  }
	  if (!ob) {
	    target[key] = val;
	    return val
	  }
	  defineReactive$$1(ob.value, key, val);
	  ob.dep.notify();
	  return val
	}
	
	/**
	 * Delete a property and trigger change if necessary.
	 */
	function del (target, key) {
	  if (Array.isArray(target) && typeof key === 'number') {
	    target.splice(key, 1);
	    return
	  }
	  var ob = (target ).__ob__;
	  if (target._isVue || (ob && ob.vmCount)) {
	    process.env.NODE_ENV !== 'production' && warn(
	      'Avoid deleting properties on a Vue instance or its root $data ' +
	      '- just set it to null.'
	    );
	    return
	  }
	  if (!hasOwn(target, key)) {
	    return
	  }
	  delete target[key];
	  if (!ob) {
	    return
	  }
	  ob.dep.notify();
	}
	
	/**
	 * Collect dependencies on array elements when the array is touched, since
	 * we cannot intercept array element access like property getters.
	 */
	function dependArray (value) {
	  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
	    e = value[i];
	    e && e.__ob__ && e.__ob__.dep.depend();
	    if (Array.isArray(e)) {
	      dependArray(e);
	    }
	  }
	}
	
	/*  */
	
	/**
	 * Option overwriting strategies are functions that handle
	 * how to merge a parent option value and a child option
	 * value into the final value.
	 */
	var strats = config.optionMergeStrategies;
	
	/**
	 * Options with restrictions
	 */
	if (process.env.NODE_ENV !== 'production') {
	  strats.el = strats.propsData = function (parent, child, vm, key) {
	    if (!vm) {
	      warn(
	        "option \"" + key + "\" can only be used during instance " +
	        'creation with the `new` keyword.'
	      );
	    }
	    return defaultStrat(parent, child)
	  };
	}
	
	/**
	 * Helper that recursively merges two data objects together.
	 */
	function mergeData (to, from) {
	  if (!from) { return to }
	  var key, toVal, fromVal;
	  var keys = Object.keys(from);
	  for (var i = 0; i < keys.length; i++) {
	    key = keys[i];
	    toVal = to[key];
	    fromVal = from[key];
	    if (!hasOwn(to, key)) {
	      set(to, key, fromVal);
	    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
	      mergeData(toVal, fromVal);
	    }
	  }
	  return to
	}
	
	/**
	 * Data
	 */
	strats.data = function (
	  parentVal,
	  childVal,
	  vm
	) {
	  if (!vm) {
	    // in a Vue.extend merge, both should be functions
	    if (!childVal) {
	      return parentVal
	    }
	    if (typeof childVal !== 'function') {
	      process.env.NODE_ENV !== 'production' && warn(
	        'The "data" option should be a function ' +
	        'that returns a per-instance value in component ' +
	        'definitions.',
	        vm
	      );
	      return parentVal
	    }
	    if (!parentVal) {
	      return childVal
	    }
	    // when parentVal & childVal are both present,
	    // we need to return a function that returns the
	    // merged result of both functions... no need to
	    // check if parentVal is a function here because
	    // it has to be a function to pass previous merges.
	    return function mergedDataFn () {
	      return mergeData(
	        childVal.call(this),
	        parentVal.call(this)
	      )
	    }
	  } else if (parentVal || childVal) {
	    return function mergedInstanceDataFn () {
	      // instance merge
	      var instanceData = typeof childVal === 'function'
	        ? childVal.call(vm)
	        : childVal;
	      var defaultData = typeof parentVal === 'function'
	        ? parentVal.call(vm)
	        : undefined;
	      if (instanceData) {
	        return mergeData(instanceData, defaultData)
	      } else {
	        return defaultData
	      }
	    }
	  }
	};
	
	/**
	 * Hooks and props are merged as arrays.
	 */
	function mergeHook (
	  parentVal,
	  childVal
	) {
	  return childVal
	    ? parentVal
	      ? parentVal.concat(childVal)
	      : Array.isArray(childVal)
	        ? childVal
	        : [childVal]
	    : parentVal
	}
	
	LIFECYCLE_HOOKS.forEach(function (hook) {
	  strats[hook] = mergeHook;
	});
	
	/**
	 * Assets
	 *
	 * When a vm is present (instance creation), we need to do
	 * a three-way merge between constructor options, instance
	 * options and parent options.
	 */
	function mergeAssets (parentVal, childVal) {
	  var res = Object.create(parentVal || null);
	  return childVal
	    ? extend(res, childVal)
	    : res
	}
	
	ASSET_TYPES.forEach(function (type) {
	  strats[type + 's'] = mergeAssets;
	});
	
	/**
	 * Watchers.
	 *
	 * Watchers hashes should not overwrite one
	 * another, so we merge them as arrays.
	 */
	strats.watch = function (parentVal, childVal) {
	  /* istanbul ignore if */
	  if (!childVal) { return Object.create(parentVal || null) }
	  if (!parentVal) { return childVal }
	  var ret = {};
	  extend(ret, parentVal);
	  for (var key in childVal) {
	    var parent = ret[key];
	    var child = childVal[key];
	    if (parent && !Array.isArray(parent)) {
	      parent = [parent];
	    }
	    ret[key] = parent
	      ? parent.concat(child)
	      : [child];
	  }
	  return ret
	};
	
	/**
	 * Other object hashes.
	 */
	strats.props =
	strats.methods =
	strats.computed = function (parentVal, childVal) {
	  if (!childVal) { return Object.create(parentVal || null) }
	  if (!parentVal) { return childVal }
	  var ret = Object.create(null);
	  extend(ret, parentVal);
	  extend(ret, childVal);
	  return ret
	};
	
	/**
	 * Default strategy.
	 */
	var defaultStrat = function (parentVal, childVal) {
	  return childVal === undefined
	    ? parentVal
	    : childVal
	};
	
	/**
	 * Validate component names
	 */
	function checkComponents (options) {
	  for (var key in options.components) {
	    var lower = key.toLowerCase();
	    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
	      warn(
	        'Do not use built-in or reserved HTML elements as component ' +
	        'id: ' + key
	      );
	    }
	  }
	}
	
	/**
	 * Ensure all props option syntax are normalized into the
	 * Object-based format.
	 */
	function normalizeProps (options) {
	  var props = options.props;
	  if (!props) { return }
	  var res = {};
	  var i, val, name;
	  if (Array.isArray(props)) {
	    i = props.length;
	    while (i--) {
	      val = props[i];
	      if (typeof val === 'string') {
	        name = camelize(val);
	        res[name] = { type: null };
	      } else if (process.env.NODE_ENV !== 'production') {
	        warn('props must be strings when using array syntax.');
	      }
	    }
	  } else if (isPlainObject(props)) {
	    for (var key in props) {
	      val = props[key];
	      name = camelize(key);
	      res[name] = isPlainObject(val)
	        ? val
	        : { type: val };
	    }
	  }
	  options.props = res;
	}
	
	/**
	 * Normalize raw function directives into object format.
	 */
	function normalizeDirectives (options) {
	  var dirs = options.directives;
	  if (dirs) {
	    for (var key in dirs) {
	      var def = dirs[key];
	      if (typeof def === 'function') {
	        dirs[key] = { bind: def, update: def };
	      }
	    }
	  }
	}
	
	/**
	 * Merge two option objects into a new one.
	 * Core utility used in both instantiation and inheritance.
	 */
	function mergeOptions (
	  parent,
	  child,
	  vm
	) {
	  if (process.env.NODE_ENV !== 'production') {
	    checkComponents(child);
	  }
	
	  if (typeof child === 'function') {
	    child = child.options;
	  }
	
	  normalizeProps(child);
	  normalizeDirectives(child);
	  var extendsFrom = child.extends;
	  if (extendsFrom) {
	    parent = mergeOptions(parent, extendsFrom, vm);
	  }
	  if (child.mixins) {
	    for (var i = 0, l = child.mixins.length; i < l; i++) {
	      parent = mergeOptions(parent, child.mixins[i], vm);
	    }
	  }
	  var options = {};
	  var key;
	  for (key in parent) {
	    mergeField(key);
	  }
	  for (key in child) {
	    if (!hasOwn(parent, key)) {
	      mergeField(key);
	    }
	  }
	  function mergeField (key) {
	    var strat = strats[key] || defaultStrat;
	    options[key] = strat(parent[key], child[key], vm, key);
	  }
	  return options
	}
	
	/**
	 * Resolve an asset.
	 * This function is used because child instances need access
	 * to assets defined in its ancestor chain.
	 */
	function resolveAsset (
	  options,
	  type,
	  id,
	  warnMissing
	) {
	  /* istanbul ignore if */
	  if (typeof id !== 'string') {
	    return
	  }
	  var assets = options[type];
	  // check local registration variations first
	  if (hasOwn(assets, id)) { return assets[id] }
	  var camelizedId = camelize(id);
	  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
	  var PascalCaseId = capitalize(camelizedId);
	  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
	  // fallback to prototype chain
	  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
	  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
	    warn(
	      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
	      options
	    );
	  }
	  return res
	}
	
	/*  */
	
	function validateProp (
	  key,
	  propOptions,
	  propsData,
	  vm
	) {
	  var prop = propOptions[key];
	  var absent = !hasOwn(propsData, key);
	  var value = propsData[key];
	  // handle boolean props
	  if (isType(Boolean, prop.type)) {
	    if (absent && !hasOwn(prop, 'default')) {
	      value = false;
	    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
	      value = true;
	    }
	  }
	  // check default value
	  if (value === undefined) {
	    value = getPropDefaultValue(vm, prop, key);
	    // since the default value is a fresh copy,
	    // make sure to observe it.
	    var prevShouldConvert = observerState.shouldConvert;
	    observerState.shouldConvert = true;
	    observe(value);
	    observerState.shouldConvert = prevShouldConvert;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    assertProp(prop, key, value, vm, absent);
	  }
	  return value
	}
	
	/**
	 * Get the default value of a prop.
	 */
	function getPropDefaultValue (vm, prop, key) {
	  // no default, return undefined
	  if (!hasOwn(prop, 'default')) {
	    return undefined
	  }
	  var def = prop.default;
	  // warn against non-factory defaults for Object & Array
	  if (process.env.NODE_ENV !== 'production' && isObject(def)) {
	    warn(
	      'Invalid default value for prop "' + key + '": ' +
	      'Props with type Object/Array must use a factory function ' +
	      'to return the default value.',
	      vm
	    );
	  }
	  // the raw prop value was also undefined from previous render,
	  // return previous default value to avoid unnecessary watcher trigger
	  if (vm && vm.$options.propsData &&
	    vm.$options.propsData[key] === undefined &&
	    vm._props[key] !== undefined
	  ) {
	    return vm._props[key]
	  }
	  // call factory function for non-Function types
	  // a value is Function if its prototype is function even across different execution context
	  return typeof def === 'function' && getType(prop.type) !== 'Function'
	    ? def.call(vm)
	    : def
	}
	
	/**
	 * Assert whether a prop is valid.
	 */
	function assertProp (
	  prop,
	  name,
	  value,
	  vm,
	  absent
	) {
	  if (prop.required && absent) {
	    warn(
	      'Missing required prop: "' + name + '"',
	      vm
	    );
	    return
	  }
	  if (value == null && !prop.required) {
	    return
	  }
	  var type = prop.type;
	  var valid = !type || type === true;
	  var expectedTypes = [];
	  if (type) {
	    if (!Array.isArray(type)) {
	      type = [type];
	    }
	    for (var i = 0; i < type.length && !valid; i++) {
	      var assertedType = assertType(value, type[i]);
	      expectedTypes.push(assertedType.expectedType || '');
	      valid = assertedType.valid;
	    }
	  }
	  if (!valid) {
	    warn(
	      'Invalid prop: type check failed for prop "' + name + '".' +
	      ' Expected ' + expectedTypes.map(capitalize).join(', ') +
	      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',
	      vm
	    );
	    return
	  }
	  var validator = prop.validator;
	  if (validator) {
	    if (!validator(value)) {
	      warn(
	        'Invalid prop: custom validator check failed for prop "' + name + '".',
	        vm
	      );
	    }
	  }
	}
	
	var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;
	
	function assertType (value, type) {
	  var valid;
	  var expectedType = getType(type);
	  if (simpleCheckRE.test(expectedType)) {
	    valid = typeof value === expectedType.toLowerCase();
	  } else if (expectedType === 'Object') {
	    valid = isPlainObject(value);
	  } else if (expectedType === 'Array') {
	    valid = Array.isArray(value);
	  } else {
	    valid = value instanceof type;
	  }
	  return {
	    valid: valid,
	    expectedType: expectedType
	  }
	}
	
	/**
	 * Use function string name to check built-in types,
	 * because a simple equality check will fail when running
	 * across different vms / iframes.
	 */
	function getType (fn) {
	  var match = fn && fn.toString().match(/^\s*function (\w+)/);
	  return match ? match[1] : ''
	}
	
	function isType (type, fn) {
	  if (!Array.isArray(fn)) {
	    return getType(fn) === getType(type)
	  }
	  for (var i = 0, len = fn.length; i < len; i++) {
	    if (getType(fn[i]) === getType(type)) {
	      return true
	    }
	  }
	  /* istanbul ignore next */
	  return false
	}
	
	/*  */
	
	/* not type checking this file because flow doesn't play well with Proxy */
	
	var initProxy;
	
	if (process.env.NODE_ENV !== 'production') {
	  var allowedGlobals = makeMap(
	    'Infinity,undefined,NaN,isFinite,isNaN,' +
	    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
	    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
	    'require' // for Webpack/Browserify
	  );
	
	  var warnNonPresent = function (target, key) {
	    warn(
	      "Property or method \"" + key + "\" is not defined on the instance but " +
	      "referenced during render. Make sure to declare reactive data " +
	      "properties in the data option.",
	      target
	    );
	  };
	
	  var hasProxy =
	    typeof Proxy !== 'undefined' &&
	    Proxy.toString().match(/native code/);
	
	  if (hasProxy) {
	    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');
	    config.keyCodes = new Proxy(config.keyCodes, {
	      set: function set (target, key, value) {
	        if (isBuiltInModifier(key)) {
	          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
	          return false
	        } else {
	          target[key] = value;
	          return true
	        }
	      }
	    });
	  }
	
	  var hasHandler = {
	    has: function has (target, key) {
	      var has = key in target;
	      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
	      if (!has && !isAllowed) {
	        warnNonPresent(target, key);
	      }
	      return has || !isAllowed
	    }
	  };
	
	  var getHandler = {
	    get: function get (target, key) {
	      if (typeof key === 'string' && !(key in target)) {
	        warnNonPresent(target, key);
	      }
	      return target[key]
	    }
	  };
	
	  initProxy = function initProxy (vm) {
	    if (hasProxy) {
	      // determine which proxy handler to use
	      var options = vm.$options;
	      var handlers = options.render && options.render._withStripped
	        ? getHandler
	        : hasHandler;
	      vm._renderProxy = new Proxy(vm, handlers);
	    } else {
	      vm._renderProxy = vm;
	    }
	  };
	}
	
	var mark;
	var measure;
	
	if (process.env.NODE_ENV !== 'production') {
	  var perf = inBrowser && window.performance;
	  /* istanbul ignore if */
	  if (
	    perf &&
	    perf.mark &&
	    perf.measure &&
	    perf.clearMarks &&
	    perf.clearMeasures
	  ) {
	    mark = function (tag) { return perf.mark(tag); };
	    measure = function (name, startTag, endTag) {
	      perf.measure(name, startTag, endTag);
	      perf.clearMarks(startTag);
	      perf.clearMarks(endTag);
	      perf.clearMeasures(name);
	    };
	  }
	}
	
	/*  */
	
	var VNode = function VNode (
	  tag,
	  data,
	  children,
	  text,
	  elm,
	  context,
	  componentOptions
	) {
	  this.tag = tag;
	  this.data = data;
	  this.children = children;
	  this.text = text;
	  this.elm = elm;
	  this.ns = undefined;
	  this.context = context;
	  this.functionalContext = undefined;
	  this.key = data && data.key;
	  this.componentOptions = componentOptions;
	  this.componentInstance = undefined;
	  this.parent = undefined;
	  this.raw = false;
	  this.isStatic = false;
	  this.isRootInsert = true;
	  this.isComment = false;
	  this.isCloned = false;
	  this.isOnce = false;
	};
	
	var prototypeAccessors = { child: {} };
	
	// DEPRECATED: alias for componentInstance for backwards compat.
	/* istanbul ignore next */
	prototypeAccessors.child.get = function () {
	  return this.componentInstance
	};
	
	Object.defineProperties( VNode.prototype, prototypeAccessors );
	
	var createEmptyVNode = function () {
	  var node = new VNode();
	  node.text = '';
	  node.isComment = true;
	  return node
	};
	
	function createTextVNode (val) {
	  return new VNode(undefined, undefined, undefined, String(val))
	}
	
	// optimized shallow clone
	// used for static nodes and slot nodes because they may be reused across
	// multiple renders, cloning them avoids errors when DOM manipulations rely
	// on their elm reference.
	function cloneVNode (vnode) {
	  var cloned = new VNode(
	    vnode.tag,
	    vnode.data,
	    vnode.children,
	    vnode.text,
	    vnode.elm,
	    vnode.context,
	    vnode.componentOptions
	  );
	  cloned.ns = vnode.ns;
	  cloned.isStatic = vnode.isStatic;
	  cloned.key = vnode.key;
	  cloned.isComment = vnode.isComment;
	  cloned.isCloned = true;
	  return cloned
	}
	
	function cloneVNodes (vnodes) {
	  var len = vnodes.length;
	  var res = new Array(len);
	  for (var i = 0; i < len; i++) {
	    res[i] = cloneVNode(vnodes[i]);
	  }
	  return res
	}
	
	/*  */
	
	var normalizeEvent = cached(function (name) {
	  var passive = name.charAt(0) === '&';
	  name = passive ? name.slice(1) : name;
	  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
	  name = once$$1 ? name.slice(1) : name;
	  var capture = name.charAt(0) === '!';
	  name = capture ? name.slice(1) : name;
	  return {
	    name: name,
	    once: once$$1,
	    capture: capture,
	    passive: passive
	  }
	});
	
	function createFnInvoker (fns) {
	  function invoker () {
	    var arguments$1 = arguments;
	
	    var fns = invoker.fns;
	    if (Array.isArray(fns)) {
	      for (var i = 0; i < fns.length; i++) {
	        fns[i].apply(null, arguments$1);
	      }
	    } else {
	      // return handler return value for single handlers
	      return fns.apply(null, arguments)
	    }
	  }
	  invoker.fns = fns;
	  return invoker
	}
	
	function updateListeners (
	  on,
	  oldOn,
	  add,
	  remove$$1,
	  vm
	) {
	  var name, cur, old, event;
	  for (name in on) {
	    cur = on[name];
	    old = oldOn[name];
	    event = normalizeEvent(name);
	    if (isUndef(cur)) {
	      process.env.NODE_ENV !== 'production' && warn(
	        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
	        vm
	      );
	    } else if (isUndef(old)) {
	      if (isUndef(cur.fns)) {
	        cur = on[name] = createFnInvoker(cur);
	      }
	      add(event.name, cur, event.once, event.capture, event.passive);
	    } else if (cur !== old) {
	      old.fns = cur;
	      on[name] = old;
	    }
	  }
	  for (name in oldOn) {
	    if (isUndef(on[name])) {
	      event = normalizeEvent(name);
	      remove$$1(event.name, oldOn[name], event.capture);
	    }
	  }
	}
	
	/*  */
	
	function mergeVNodeHook (def, hookKey, hook) {
	  var invoker;
	  var oldHook = def[hookKey];
	
	  function wrappedHook () {
	    hook.apply(this, arguments);
	    // important: remove merged hook to ensure it's called only once
	    // and prevent memory leak
	    remove(invoker.fns, wrappedHook);
	  }
	
	  if (isUndef(oldHook)) {
	    // no existing hook
	    invoker = createFnInvoker([wrappedHook]);
	  } else {
	    /* istanbul ignore if */
	    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
	      // already a merged invoker
	      invoker = oldHook;
	      invoker.fns.push(wrappedHook);
	    } else {
	      // existing plain hook
	      invoker = createFnInvoker([oldHook, wrappedHook]);
	    }
	  }
	
	  invoker.merged = true;
	  def[hookKey] = invoker;
	}
	
	/*  */
	
	function extractPropsFromVNodeData (
	  data,
	  Ctor,
	  tag
	) {
	  // we are only extracting raw values here.
	  // validation and default values are handled in the child
	  // component itself.
	  var propOptions = Ctor.options.props;
	  if (isUndef(propOptions)) {
	    return
	  }
	  var res = {};
	  var attrs = data.attrs;
	  var props = data.props;
	  if (isDef(attrs) || isDef(props)) {
	    for (var key in propOptions) {
	      var altKey = hyphenate(key);
	      if (process.env.NODE_ENV !== 'production') {
	        var keyInLowerCase = key.toLowerCase();
	        if (
	          key !== keyInLowerCase &&
	          attrs && hasOwn(attrs, keyInLowerCase)
	        ) {
	          tip(
	            "Prop \"" + keyInLowerCase + "\" is passed to component " +
	            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
	            " \"" + key + "\". " +
	            "Note that HTML attributes are case-insensitive and camelCased " +
	            "props need to use their kebab-case equivalents when using in-DOM " +
	            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
	          );
	        }
	      }
	      checkProp(res, props, key, altKey, true) ||
	      checkProp(res, attrs, key, altKey, false);
	    }
	  }
	  return res
	}
	
	function checkProp (
	  res,
	  hash,
	  key,
	  altKey,
	  preserve
	) {
	  if (isDef(hash)) {
	    if (hasOwn(hash, key)) {
	      res[key] = hash[key];
	      if (!preserve) {
	        delete hash[key];
	      }
	      return true
	    } else if (hasOwn(hash, altKey)) {
	      res[key] = hash[altKey];
	      if (!preserve) {
	        delete hash[altKey];
	      }
	      return true
	    }
	  }
	  return false
	}
	
	/*  */
	
	// The template compiler attempts to minimize the need for normalization by
	// statically analyzing the template at compile time.
	//
	// For plain HTML markup, normalization can be completely skipped because the
	// generated render function is guaranteed to return Array<VNode>. There are
	// two cases where extra normalization is needed:
	
	// 1. When the children contains components - because a functional component
	// may return an Array instead of a single root. In this case, just a simple
	// normalization is needed - if any child is an Array, we flatten the whole
	// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
	// because functional components already normalize their own children.
	function simpleNormalizeChildren (children) {
	  for (var i = 0; i < children.length; i++) {
	    if (Array.isArray(children[i])) {
	      return Array.prototype.concat.apply([], children)
	    }
	  }
	  return children
	}
	
	// 2. When the children contains constructs that always generated nested Arrays,
	// e.g. <template>, <slot>, v-for, or when the children is provided by user
	// with hand-written render functions / JSX. In such cases a full normalization
	// is needed to cater to all possible types of children values.
	function normalizeChildren (children) {
	  return isPrimitive(children)
	    ? [createTextVNode(children)]
	    : Array.isArray(children)
	      ? normalizeArrayChildren(children)
	      : undefined
	}
	
	function isTextNode (node) {
	  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
	}
	
	function normalizeArrayChildren (children, nestedIndex) {
	  var res = [];
	  var i, c, last;
	  for (i = 0; i < children.length; i++) {
	    c = children[i];
	    if (isUndef(c) || typeof c === 'boolean') { continue }
	    last = res[res.length - 1];
	    //  nested
	    if (Array.isArray(c)) {
	      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i)));
	    } else if (isPrimitive(c)) {
	      if (isTextNode(last)) {
	        // merge adjacent text nodes
	        // this is necessary for SSR hydration because text nodes are
	        // essentially merged when rendered to HTML strings
	        (last).text += String(c);
	      } else if (c !== '') {
	        // convert primitive to vnode
	        res.push(createTextVNode(c));
	      }
	    } else {
	      if (isTextNode(c) && isTextNode(last)) {
	        // merge adjacent text nodes
	        res[res.length - 1] = createTextVNode(last.text + c.text);
	      } else {
	        // default key for nested array children (likely generated by v-for)
	        if (isTrue(children._isVList) &&
	          isDef(c.tag) &&
	          isUndef(c.key) &&
	          isDef(nestedIndex)) {
	          c.key = "__vlist" + nestedIndex + "_" + i + "__";
	        }
	        res.push(c);
	      }
	    }
	  }
	  return res
	}
	
	/*  */
	
	function ensureCtor (comp, base) {
	  return isObject(comp)
	    ? base.extend(comp)
	    : comp
	}
	
	function resolveAsyncComponent (
	  factory,
	  baseCtor,
	  context
	) {
	  if (isTrue(factory.error) && isDef(factory.errorComp)) {
	    return factory.errorComp
	  }
	
	  if (isDef(factory.resolved)) {
	    return factory.resolved
	  }
	
	  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
	    return factory.loadingComp
	  }
	
	  if (isDef(factory.contexts)) {
	    // already pending
	    factory.contexts.push(context);
	  } else {
	    var contexts = factory.contexts = [context];
	    var sync = true;
	
	    var forceRender = function () {
	      for (var i = 0, l = contexts.length; i < l; i++) {
	        contexts[i].$forceUpdate();
	      }
	    };
	
	    var resolve = once(function (res) {
	      // cache resolved
	      factory.resolved = ensureCtor(res, baseCtor);
	      // invoke callbacks only if this is not a synchronous resolve
	      // (async resolves are shimmed as synchronous during SSR)
	      if (!sync) {
	        forceRender();
	      }
	    });
	
	    var reject = once(function (reason) {
	      process.env.NODE_ENV !== 'production' && warn(
	        "Failed to resolve async component: " + (String(factory)) +
	        (reason ? ("\nReason: " + reason) : '')
	      );
	      if (isDef(factory.errorComp)) {
	        factory.error = true;
	        forceRender();
	      }
	    });
	
	    var res = factory(resolve, reject);
	
	    if (isObject(res)) {
	      if (typeof res.then === 'function') {
	        // () => Promise
	        if (isUndef(factory.resolved)) {
	          res.then(resolve, reject);
	        }
	      } else if (isDef(res.component) && typeof res.component.then === 'function') {
	        res.component.then(resolve, reject);
	
	        if (isDef(res.error)) {
	          factory.errorComp = ensureCtor(res.error, baseCtor);
	        }
	
	        if (isDef(res.loading)) {
	          factory.loadingComp = ensureCtor(res.loading, baseCtor);
	          if (res.delay === 0) {
	            factory.loading = true;
	          } else {
	            setTimeout(function () {
	              if (isUndef(factory.resolved) && isUndef(factory.error)) {
	                factory.loading = true;
	                forceRender();
	              }
	            }, res.delay || 200);
	          }
	        }
	
	        if (isDef(res.timeout)) {
	          setTimeout(function () {
	            if (isUndef(factory.resolved)) {
	              reject(
	                process.env.NODE_ENV !== 'production'
	                  ? ("timeout (" + (res.timeout) + "ms)")
	                  : null
	              );
	            }
	          }, res.timeout);
	        }
	      }
	    }
	
	    sync = false;
	    // return in case resolved synchronously
	    return factory.loading
	      ? factory.loadingComp
	      : factory.resolved
	  }
	}
	
	/*  */
	
	function getFirstComponentChild (children) {
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      var c = children[i];
	      if (isDef(c) && isDef(c.componentOptions)) {
	        return c
	      }
	    }
	  }
	}
	
	/*  */
	
	/*  */
	
	function initEvents (vm) {
	  vm._events = Object.create(null);
	  vm._hasHookEvent = false;
	  // init parent attached events
	  var listeners = vm.$options._parentListeners;
	  if (listeners) {
	    updateComponentListeners(vm, listeners);
	  }
	}
	
	var target;
	
	function add (event, fn, once$$1) {
	  if (once$$1) {
	    target.$once(event, fn);
	  } else {
	    target.$on(event, fn);
	  }
	}
	
	function remove$1 (event, fn) {
	  target.$off(event, fn);
	}
	
	function updateComponentListeners (
	  vm,
	  listeners,
	  oldListeners
	) {
	  target = vm;
	  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
	}
	
	function eventsMixin (Vue) {
	  var hookRE = /^hook:/;
	  Vue.prototype.$on = function (event, fn) {
	    var this$1 = this;
	
	    var vm = this;
	    if (Array.isArray(event)) {
	      for (var i = 0, l = event.length; i < l; i++) {
	        this$1.$on(event[i], fn);
	      }
	    } else {
	      (vm._events[event] || (vm._events[event] = [])).push(fn);
	      // optimize hook:event cost by using a boolean flag marked at registration
	      // instead of a hash lookup
	      if (hookRE.test(event)) {
	        vm._hasHookEvent = true;
	      }
	    }
	    return vm
	  };
	
	  Vue.prototype.$once = function (event, fn) {
	    var vm = this;
	    function on () {
	      vm.$off(event, on);
	      fn.apply(vm, arguments);
	    }
	    on.fn = fn;
	    vm.$on(event, on);
	    return vm
	  };
	
	  Vue.prototype.$off = function (event, fn) {
	    var this$1 = this;
	
	    var vm = this;
	    // all
	    if (!arguments.length) {
	      vm._events = Object.create(null);
	      return vm
	    }
	    // array of events
	    if (Array.isArray(event)) {
	      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
	        this$1.$off(event[i$1], fn);
	      }
	      return vm
	    }
	    // specific event
	    var cbs = vm._events[event];
	    if (!cbs) {
	      return vm
	    }
	    if (arguments.length === 1) {
	      vm._events[event] = null;
	      return vm
	    }
	    // specific handler
	    var cb;
	    var i = cbs.length;
	    while (i--) {
	      cb = cbs[i];
	      if (cb === fn || cb.fn === fn) {
	        cbs.splice(i, 1);
	        break
	      }
	    }
	    return vm
	  };
	
	  Vue.prototype.$emit = function (event) {
	    var vm = this;
	    if (process.env.NODE_ENV !== 'production') {
	      var lowerCaseEvent = event.toLowerCase();
	      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
	        tip(
	          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
	          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
	          "Note that HTML attributes are case-insensitive and you cannot use " +
	          "v-on to listen to camelCase events when using in-DOM templates. " +
	          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
	        );
	      }
	    }
	    var cbs = vm._events[event];
	    if (cbs) {
	      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
	      var args = toArray(arguments, 1);
	      for (var i = 0, l = cbs.length; i < l; i++) {
	        cbs[i].apply(vm, args);
	      }
	    }
	    return vm
	  };
	}
	
	/*  */
	
	/**
	 * Runtime helper for resolving raw children VNodes into a slot object.
	 */
	function resolveSlots (
	  children,
	  context
	) {
	  var slots = {};
	  if (!children) {
	    return slots
	  }
	  var defaultSlot = [];
	  for (var i = 0, l = children.length; i < l; i++) {
	    var child = children[i];
	    // named slots should only be respected if the vnode was rendered in the
	    // same context.
	    if ((child.context === context || child.functionalContext === context) &&
	      child.data && child.data.slot != null
	    ) {
	      var name = child.data.slot;
	      var slot = (slots[name] || (slots[name] = []));
	      if (child.tag === 'template') {
	        slot.push.apply(slot, child.children);
	      } else {
	        slot.push(child);
	      }
	    } else {
	      defaultSlot.push(child);
	    }
	  }
	  // ignore whitespace
	  if (!defaultSlot.every(isWhitespace)) {
	    slots.default = defaultSlot;
	  }
	  return slots
	}
	
	function isWhitespace (node) {
	  return node.isComment || node.text === ' '
	}
	
	function resolveScopedSlots (
	  fns, // see flow/vnode
	  res
	) {
	  res = res || {};
	  for (var i = 0; i < fns.length; i++) {
	    if (Array.isArray(fns[i])) {
	      resolveScopedSlots(fns[i], res);
	    } else {
	      res[fns[i].key] = fns[i].fn;
	    }
	  }
	  return res
	}
	
	/*  */
	
	var activeInstance = null;
	
	function initLifecycle (vm) {
	  var options = vm.$options;
	
	  // locate first non-abstract parent
	  var parent = options.parent;
	  if (parent && !options.abstract) {
	    while (parent.$options.abstract && parent.$parent) {
	      parent = parent.$parent;
	    }
	    parent.$children.push(vm);
	  }
	
	  vm.$parent = parent;
	  vm.$root = parent ? parent.$root : vm;
	
	  vm.$children = [];
	  vm.$refs = {};
	
	  vm._watcher = null;
	  vm._inactive = null;
	  vm._directInactive = false;
	  vm._isMounted = false;
	  vm._isDestroyed = false;
	  vm._isBeingDestroyed = false;
	}
	
	function lifecycleMixin (Vue) {
	  Vue.prototype._update = function (vnode, hydrating) {
	    var vm = this;
	    if (vm._isMounted) {
	      callHook(vm, 'beforeUpdate');
	    }
	    var prevEl = vm.$el;
	    var prevVnode = vm._vnode;
	    var prevActiveInstance = activeInstance;
	    activeInstance = vm;
	    vm._vnode = vnode;
	    // Vue.prototype.__patch__ is injected in entry points
	    // based on the rendering backend used.
	    if (!prevVnode) {
	      // initial render
	      vm.$el = vm.__patch__(
	        vm.$el, vnode, hydrating, false /* removeOnly */,
	        vm.$options._parentElm,
	        vm.$options._refElm
	      );
	    } else {
	      // updates
	      vm.$el = vm.__patch__(prevVnode, vnode);
	    }
	    activeInstance = prevActiveInstance;
	    // update __vue__ reference
	    if (prevEl) {
	      prevEl.__vue__ = null;
	    }
	    if (vm.$el) {
	      vm.$el.__vue__ = vm;
	    }
	    // if parent is an HOC, update its $el as well
	    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
	      vm.$parent.$el = vm.$el;
	    }
	    // updated hook is called by the scheduler to ensure that children are
	    // updated in a parent's updated hook.
	  };
	
	  Vue.prototype.$forceUpdate = function () {
	    var vm = this;
	    if (vm._watcher) {
	      vm._watcher.update();
	    }
	  };
	
	  Vue.prototype.$destroy = function () {
	    var vm = this;
	    if (vm._isBeingDestroyed) {
	      return
	    }
	    callHook(vm, 'beforeDestroy');
	    vm._isBeingDestroyed = true;
	    // remove self from parent
	    var parent = vm.$parent;
	    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
	      remove(parent.$children, vm);
	    }
	    // teardown watchers
	    if (vm._watcher) {
	      vm._watcher.teardown();
	    }
	    var i = vm._watchers.length;
	    while (i--) {
	      vm._watchers[i].teardown();
	    }
	    // remove reference from data ob
	    // frozen object may not have observer.
	    if (vm._data.__ob__) {
	      vm._data.__ob__.vmCount--;
	    }
	    // call the last hook...
	    vm._isDestroyed = true;
	    // invoke destroy hooks on current rendered tree
	    vm.__patch__(vm._vnode, null);
	    // fire destroyed hook
	    callHook(vm, 'destroyed');
	    // turn off all instance listeners.
	    vm.$off();
	    // remove __vue__ reference
	    if (vm.$el) {
	      vm.$el.__vue__ = null;
	    }
	    // remove reference to DOM nodes (prevents leak)
	    vm.$options._parentElm = vm.$options._refElm = null;
	  };
	}
	
	function mountComponent (
	  vm,
	  el,
	  hydrating
	) {
	  vm.$el = el;
	  if (!vm.$options.render) {
	    vm.$options.render = createEmptyVNode;
	    if (process.env.NODE_ENV !== 'production') {
	      /* istanbul ignore if */
	      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
	        vm.$options.el || el) {
	        warn(
	          'You are using the runtime-only build of Vue where the template ' +
	          'compiler is not available. Either pre-compile the templates into ' +
	          'render functions, or use the compiler-included build.',
	          vm
	        );
	      } else {
	        warn(
	          'Failed to mount component: template or render function not defined.',
	          vm
	        );
	      }
	    }
	  }
	  callHook(vm, 'beforeMount');
	
	  var updateComponent;
	  /* istanbul ignore if */
	  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
	    updateComponent = function () {
	      var name = vm._name;
	      var id = vm._uid;
	      var startTag = "vue-perf-start:" + id;
	      var endTag = "vue-perf-end:" + id;
	
	      mark(startTag);
	      var vnode = vm._render();
	      mark(endTag);
	      measure((name + " render"), startTag, endTag);
	
	      mark(startTag);
	      vm._update(vnode, hydrating);
	      mark(endTag);
	      measure((name + " patch"), startTag, endTag);
	    };
	  } else {
	    updateComponent = function () {
	      vm._update(vm._render(), hydrating);
	    };
	  }
	
	  vm._watcher = new Watcher(vm, updateComponent, noop);
	  hydrating = false;
	
	  // manually mounted instance, call mounted on self
	  // mounted is called for render-created child components in its inserted hook
	  if (vm.$vnode == null) {
	    vm._isMounted = true;
	    callHook(vm, 'mounted');
	  }
	  return vm
	}
	
	function updateChildComponent (
	  vm,
	  propsData,
	  listeners,
	  parentVnode,
	  renderChildren
	) {
	  // determine whether component has slot children
	  // we need to do this before overwriting $options._renderChildren
	  var hasChildren = !!(
	    renderChildren ||               // has new static slots
	    vm.$options._renderChildren ||  // has old static slots
	    parentVnode.data.scopedSlots || // has new scoped slots
	    vm.$scopedSlots !== emptyObject // has old scoped slots
	  );
	
	  vm.$options._parentVnode = parentVnode;
	  vm.$vnode = parentVnode; // update vm's placeholder node without re-render
	  if (vm._vnode) { // update child tree's parent
	    vm._vnode.parent = parentVnode;
	  }
	  vm.$options._renderChildren = renderChildren;
	
	  // update props
	  if (propsData && vm.$options.props) {
	    observerState.shouldConvert = false;
	    if (process.env.NODE_ENV !== 'production') {
	      observerState.isSettingProps = true;
	    }
	    var props = vm._props;
	    var propKeys = vm.$options._propKeys || [];
	    for (var i = 0; i < propKeys.length; i++) {
	      var key = propKeys[i];
	      props[key] = validateProp(key, vm.$options.props, propsData, vm);
	    }
	    observerState.shouldConvert = true;
	    if (process.env.NODE_ENV !== 'production') {
	      observerState.isSettingProps = false;
	    }
	    // keep a copy of raw propsData
	    vm.$options.propsData = propsData;
	  }
	  // update listeners
	  if (listeners) {
	    var oldListeners = vm.$options._parentListeners;
	    vm.$options._parentListeners = listeners;
	    updateComponentListeners(vm, listeners, oldListeners);
	  }
	  // resolve slots + force update if has children
	  if (hasChildren) {
	    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
	    vm.$forceUpdate();
	  }
	}
	
	function isInInactiveTree (vm) {
	  while (vm && (vm = vm.$parent)) {
	    if (vm._inactive) { return true }
	  }
	  return false
	}
	
	function activateChildComponent (vm, direct) {
	  if (direct) {
	    vm._directInactive = false;
	    if (isInInactiveTree(vm)) {
	      return
	    }
	  } else if (vm._directInactive) {
	    return
	  }
	  if (vm._inactive || vm._inactive === null) {
	    vm._inactive = false;
	    for (var i = 0; i < vm.$children.length; i++) {
	      activateChildComponent(vm.$children[i]);
	    }
	    callHook(vm, 'activated');
	  }
	}
	
	function deactivateChildComponent (vm, direct) {
	  if (direct) {
	    vm._directInactive = true;
	    if (isInInactiveTree(vm)) {
	      return
	    }
	  }
	  if (!vm._inactive) {
	    vm._inactive = true;
	    for (var i = 0; i < vm.$children.length; i++) {
	      deactivateChildComponent(vm.$children[i]);
	    }
	    callHook(vm, 'deactivated');
	  }
	}
	
	function callHook (vm, hook) {
	  var handlers = vm.$options[hook];
	  if (handlers) {
	    for (var i = 0, j = handlers.length; i < j; i++) {
	      try {
	        handlers[i].call(vm);
	      } catch (e) {
	        handleError(e, vm, (hook + " hook"));
	      }
	    }
	  }
	  if (vm._hasHookEvent) {
	    vm.$emit('hook:' + hook);
	  }
	}
	
	/*  */
	
	
	var MAX_UPDATE_COUNT = 100;
	
	var queue = [];
	var activatedChildren = [];
	var has = {};
	var circular = {};
	var waiting = false;
	var flushing = false;
	var index = 0;
	
	/**
	 * Reset the scheduler's state.
	 */
	function resetSchedulerState () {
	  index = queue.length = activatedChildren.length = 0;
	  has = {};
	  if (process.env.NODE_ENV !== 'production') {
	    circular = {};
	  }
	  waiting = flushing = false;
	}
	
	/**
	 * Flush both queues and run the watchers.
	 */
	function flushSchedulerQueue () {
	  flushing = true;
	  var watcher, id;
	
	  // Sort queue before flush.
	  // This ensures that:
	  // 1. Components are updated from parent to child. (because parent is always
	  //    created before the child)
	  // 2. A component's user watchers are run before its render watcher (because
	  //    user watchers are created before the render watcher)
	  // 3. If a component is destroyed during a parent component's watcher run,
	  //    its watchers can be skipped.
	  queue.sort(function (a, b) { return a.id - b.id; });
	
	  // do not cache length because more watchers might be pushed
	  // as we run existing watchers
	  for (index = 0; index < queue.length; index++) {
	    watcher = queue[index];
	    id = watcher.id;
	    has[id] = null;
	    watcher.run();
	    // in dev build, check and stop circular updates.
	    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
	      circular[id] = (circular[id] || 0) + 1;
	      if (circular[id] > MAX_UPDATE_COUNT) {
	        warn(
	          'You may have an infinite update loop ' + (
	            watcher.user
	              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
	              : "in a component render function."
	          ),
	          watcher.vm
	        );
	        break
	      }
	    }
	  }
	
	  // keep copies of post queues before resetting state
	  var activatedQueue = activatedChildren.slice();
	  var updatedQueue = queue.slice();
	
	  resetSchedulerState();
	
	  // call component updated and activated hooks
	  callActivatedHooks(activatedQueue);
	  callUpdateHooks(updatedQueue);
	
	  // devtool hook
	  /* istanbul ignore if */
	  if (devtools && config.devtools) {
	    devtools.emit('flush');
	  }
	}
	
	function callUpdateHooks (queue) {
	  var i = queue.length;
	  while (i--) {
	    var watcher = queue[i];
	    var vm = watcher.vm;
	    if (vm._watcher === watcher && vm._isMounted) {
	      callHook(vm, 'updated');
	    }
	  }
	}
	
	/**
	 * Queue a kept-alive component that was activated during patch.
	 * The queue will be processed after the entire tree has been patched.
	 */
	function queueActivatedComponent (vm) {
	  // setting _inactive to false here so that a render function can
	  // rely on checking whether it's in an inactive tree (e.g. router-view)
	  vm._inactive = false;
	  activatedChildren.push(vm);
	}
	
	function callActivatedHooks (queue) {
	  for (var i = 0; i < queue.length; i++) {
	    queue[i]._inactive = true;
	    activateChildComponent(queue[i], true /* true */);
	  }
	}
	
	/**
	 * Push a watcher into the watcher queue.
	 * Jobs with duplicate IDs will be skipped unless it's
	 * pushed when the queue is being flushed.
	 */
	function queueWatcher (watcher) {
	  var id = watcher.id;
	  if (has[id] == null) {
	    has[id] = true;
	    if (!flushing) {
	      queue.push(watcher);
	    } else {
	      // if already flushing, splice the watcher based on its id
	      // if already past its id, it will be run next immediately.
	      var i = queue.length - 1;
	      while (i > index && queue[i].id > watcher.id) {
	        i--;
	      }
	      queue.splice(i + 1, 0, watcher);
	    }
	    // queue the flush
	    if (!waiting) {
	      waiting = true;
	      nextTick(flushSchedulerQueue);
	    }
	  }
	}
	
	/*  */
	
	var uid$2 = 0;
	
	/**
	 * A watcher parses an expression, collects dependencies,
	 * and fires callback when the expression value changes.
	 * This is used for both the $watch() api and directives.
	 */
	var Watcher = function Watcher (
	  vm,
	  expOrFn,
	  cb,
	  options
	) {
	  this.vm = vm;
	  vm._watchers.push(this);
	  // options
	  if (options) {
	    this.deep = !!options.deep;
	    this.user = !!options.user;
	    this.lazy = !!options.lazy;
	    this.sync = !!options.sync;
	  } else {
	    this.deep = this.user = this.lazy = this.sync = false;
	  }
	  this.cb = cb;
	  this.id = ++uid$2; // uid for batching
	  this.active = true;
	  this.dirty = this.lazy; // for lazy watchers
	  this.deps = [];
	  this.newDeps = [];
	  this.depIds = new _Set();
	  this.newDepIds = new _Set();
	  this.expression = process.env.NODE_ENV !== 'production'
	    ? expOrFn.toString()
	    : '';
	  // parse expression for getter
	  if (typeof expOrFn === 'function') {
	    this.getter = expOrFn;
	  } else {
	    this.getter = parsePath(expOrFn);
	    if (!this.getter) {
	      this.getter = function () {};
	      process.env.NODE_ENV !== 'production' && warn(
	        "Failed watching path: \"" + expOrFn + "\" " +
	        'Watcher only accepts simple dot-delimited paths. ' +
	        'For full control, use a function instead.',
	        vm
	      );
	    }
	  }
	  this.value = this.lazy
	    ? undefined
	    : this.get();
	};
	
	/**
	 * Evaluate the getter, and re-collect dependencies.
	 */
	Watcher.prototype.get = function get () {
	  pushTarget(this);
	  var value;
	  var vm = this.vm;
	  if (this.user) {
	    try {
	      value = this.getter.call(vm, vm);
	    } catch (e) {
	      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
	    }
	  } else {
	    value = this.getter.call(vm, vm);
	  }
	  // "touch" every property so they are all tracked as
	  // dependencies for deep watching
	  if (this.deep) {
	    traverse(value);
	  }
	  popTarget();
	  this.cleanupDeps();
	  return value
	};
	
	/**
	 * Add a dependency to this directive.
	 */
	Watcher.prototype.addDep = function addDep (dep) {
	  var id = dep.id;
	  if (!this.newDepIds.has(id)) {
	    this.newDepIds.add(id);
	    this.newDeps.push(dep);
	    if (!this.depIds.has(id)) {
	      dep.addSub(this);
	    }
	  }
	};
	
	/**
	 * Clean up for dependency collection.
	 */
	Watcher.prototype.cleanupDeps = function cleanupDeps () {
	    var this$1 = this;
	
	  var i = this.deps.length;
	  while (i--) {
	    var dep = this$1.deps[i];
	    if (!this$1.newDepIds.has(dep.id)) {
	      dep.removeSub(this$1);
	    }
	  }
	  var tmp = this.depIds;
	  this.depIds = this.newDepIds;
	  this.newDepIds = tmp;
	  this.newDepIds.clear();
	  tmp = this.deps;
	  this.deps = this.newDeps;
	  this.newDeps = tmp;
	  this.newDeps.length = 0;
	};
	
	/**
	 * Subscriber interface.
	 * Will be called when a dependency changes.
	 */
	Watcher.prototype.update = function update () {
	  /* istanbul ignore else */
	  if (this.lazy) {
	    this.dirty = true;
	  } else if (this.sync) {
	    this.run();
	  } else {
	    queueWatcher(this);
	  }
	};
	
	/**
	 * Scheduler job interface.
	 * Will be called by the scheduler.
	 */
	Watcher.prototype.run = function run () {
	  if (this.active) {
	    var value = this.get();
	    if (
	      value !== this.value ||
	      // Deep watchers and watchers on Object/Arrays should fire even
	      // when the value is the same, because the value may
	      // have mutated.
	      isObject(value) ||
	      this.deep
	    ) {
	      // set new value
	      var oldValue = this.value;
	      this.value = value;
	      if (this.user) {
	        try {
	          this.cb.call(this.vm, value, oldValue);
	        } catch (e) {
	          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
	        }
	      } else {
	        this.cb.call(this.vm, value, oldValue);
	      }
	    }
	  }
	};
	
	/**
	 * Evaluate the value of the watcher.
	 * This only gets called for lazy watchers.
	 */
	Watcher.prototype.evaluate = function evaluate () {
	  this.value = this.get();
	  this.dirty = false;
	};
	
	/**
	 * Depend on all deps collected by this watcher.
	 */
	Watcher.prototype.depend = function depend () {
	    var this$1 = this;
	
	  var i = this.deps.length;
	  while (i--) {
	    this$1.deps[i].depend();
	  }
	};
	
	/**
	 * Remove self from all dependencies' subscriber list.
	 */
	Watcher.prototype.teardown = function teardown () {
	    var this$1 = this;
	
	  if (this.active) {
	    // remove self from vm's watcher list
	    // this is a somewhat expensive operation so we skip it
	    // if the vm is being destroyed.
	    if (!this.vm._isBeingDestroyed) {
	      remove(this.vm._watchers, this);
	    }
	    var i = this.deps.length;
	    while (i--) {
	      this$1.deps[i].removeSub(this$1);
	    }
	    this.active = false;
	  }
	};
	
	/**
	 * Recursively traverse an object to evoke all converted
	 * getters, so that every nested property inside the object
	 * is collected as a "deep" dependency.
	 */
	var seenObjects = new _Set();
	function traverse (val) {
	  seenObjects.clear();
	  _traverse(val, seenObjects);
	}
	
	function _traverse (val, seen) {
	  var i, keys;
	  var isA = Array.isArray(val);
	  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {
	    return
	  }
	  if (val.__ob__) {
	    var depId = val.__ob__.dep.id;
	    if (seen.has(depId)) {
	      return
	    }
	    seen.add(depId);
	  }
	  if (isA) {
	    i = val.length;
	    while (i--) { _traverse(val[i], seen); }
	  } else {
	    keys = Object.keys(val);
	    i = keys.length;
	    while (i--) { _traverse(val[keys[i]], seen); }
	  }
	}
	
	/*  */
	
	var sharedPropertyDefinition = {
	  enumerable: true,
	  configurable: true,
	  get: noop,
	  set: noop
	};
	
	function proxy (target, sourceKey, key) {
	  sharedPropertyDefinition.get = function proxyGetter () {
	    return this[sourceKey][key]
	  };
	  sharedPropertyDefinition.set = function proxySetter (val) {
	    this[sourceKey][key] = val;
	  };
	  Object.defineProperty(target, key, sharedPropertyDefinition);
	}
	
	function initState (vm) {
	  vm._watchers = [];
	  var opts = vm.$options;
	  if (opts.props) { initProps(vm, opts.props); }
	  if (opts.methods) { initMethods(vm, opts.methods); }
	  if (opts.data) {
	    initData(vm);
	  } else {
	    observe(vm._data = {}, true /* asRootData */);
	  }
	  if (opts.computed) { initComputed(vm, opts.computed); }
	  if (opts.watch) { initWatch(vm, opts.watch); }
	}
	
	var isReservedProp = {
	  key: 1,
	  ref: 1,
	  slot: 1
	};
	
	function initProps (vm, propsOptions) {
	  var propsData = vm.$options.propsData || {};
	  var props = vm._props = {};
	  // cache prop keys so that future props updates can iterate using Array
	  // instead of dynamic object key enumeration.
	  var keys = vm.$options._propKeys = [];
	  var isRoot = !vm.$parent;
	  // root instance props should be converted
	  observerState.shouldConvert = isRoot;
	  var loop = function ( key ) {
	    keys.push(key);
	    var value = validateProp(key, propsOptions, propsData, vm);
	    /* istanbul ignore else */
	    if (process.env.NODE_ENV !== 'production') {
	      if (isReservedProp[key] || config.isReservedAttr(key)) {
	        warn(
	          ("\"" + key + "\" is a reserved attribute and cannot be used as component prop."),
	          vm
	        );
	      }
	      defineReactive$$1(props, key, value, function () {
	        if (vm.$parent && !observerState.isSettingProps) {
	          warn(
	            "Avoid mutating a prop directly since the value will be " +
	            "overwritten whenever the parent component re-renders. " +
	            "Instead, use a data or computed property based on the prop's " +
	            "value. Prop being mutated: \"" + key + "\"",
	            vm
	          );
	        }
	      });
	    } else {
	      defineReactive$$1(props, key, value);
	    }
	    // static props are already proxied on the component's prototype
	    // during Vue.extend(). We only need to proxy props defined at
	    // instantiation here.
	    if (!(key in vm)) {
	      proxy(vm, "_props", key);
	    }
	  };
	
	  for (var key in propsOptions) loop( key );
	  observerState.shouldConvert = true;
	}
	
	function initData (vm) {
	  var data = vm.$options.data;
	  data = vm._data = typeof data === 'function'
	    ? getData(data, vm)
	    : data || {};
	  if (!isPlainObject(data)) {
	    data = {};
	    process.env.NODE_ENV !== 'production' && warn(
	      'data functions should return an object:\n' +
	      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
	      vm
	    );
	  }
	  // proxy data on instance
	  var keys = Object.keys(data);
	  var props = vm.$options.props;
	  var i = keys.length;
	  while (i--) {
	    if (props && hasOwn(props, keys[i])) {
	      process.env.NODE_ENV !== 'production' && warn(
	        "The data property \"" + (keys[i]) + "\" is already declared as a prop. " +
	        "Use prop default value instead.",
	        vm
	      );
	    } else if (!isReserved(keys[i])) {
	      proxy(vm, "_data", keys[i]);
	    }
	  }
	  // observe data
	  observe(data, true /* asRootData */);
	}
	
	function getData (data, vm) {
	  try {
	    return data.call(vm)
	  } catch (e) {
	    handleError(e, vm, "data()");
	    return {}
	  }
	}
	
	var computedWatcherOptions = { lazy: true };
	
	function initComputed (vm, computed) {
	  var watchers = vm._computedWatchers = Object.create(null);
	
	  for (var key in computed) {
	    var userDef = computed[key];
	    var getter = typeof userDef === 'function' ? userDef : userDef.get;
	    if (process.env.NODE_ENV !== 'production') {
	      if (getter === undefined) {
	        warn(
	          ("No getter function has been defined for computed property \"" + key + "\"."),
	          vm
	        );
	        getter = noop;
	      }
	    }
	    // create internal watcher for the computed property.
	    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);
	
	    // component-defined computed properties are already defined on the
	    // component prototype. We only need to define computed properties defined
	    // at instantiation here.
	    if (!(key in vm)) {
	      defineComputed(vm, key, userDef);
	    } else if (process.env.NODE_ENV !== 'production') {
	      if (key in vm.$data) {
	        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
	      } else if (vm.$options.props && key in vm.$options.props) {
	        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
	      }
	    }
	  }
	}
	
	function defineComputed (target, key, userDef) {
	  if (typeof userDef === 'function') {
	    sharedPropertyDefinition.get = createComputedGetter(key);
	    sharedPropertyDefinition.set = noop;
	  } else {
	    sharedPropertyDefinition.get = userDef.get
	      ? userDef.cache !== false
	        ? createComputedGetter(key)
	        : userDef.get
	      : noop;
	    sharedPropertyDefinition.set = userDef.set
	      ? userDef.set
	      : noop;
	  }
	  Object.defineProperty(target, key, sharedPropertyDefinition);
	}
	
	function createComputedGetter (key) {
	  return function computedGetter () {
	    var watcher = this._computedWatchers && this._computedWatchers[key];
	    if (watcher) {
	      if (watcher.dirty) {
	        watcher.evaluate();
	      }
	      if (Dep.target) {
	        watcher.depend();
	      }
	      return watcher.value
	    }
	  }
	}
	
	function initMethods (vm, methods) {
	  var props = vm.$options.props;
	  for (var key in methods) {
	    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
	    if (process.env.NODE_ENV !== 'production') {
	      if (methods[key] == null) {
	        warn(
	          "method \"" + key + "\" has an undefined value in the component definition. " +
	          "Did you reference the function correctly?",
	          vm
	        );
	      }
	      if (props && hasOwn(props, key)) {
	        warn(
	          ("method \"" + key + "\" has already been defined as a prop."),
	          vm
	        );
	      }
	    }
	  }
	}
	
	function initWatch (vm, watch) {
	  for (var key in watch) {
	    var handler = watch[key];
	    if (Array.isArray(handler)) {
	      for (var i = 0; i < handler.length; i++) {
	        createWatcher(vm, key, handler[i]);
	      }
	    } else {
	      createWatcher(vm, key, handler);
	    }
	  }
	}
	
	function createWatcher (vm, key, handler) {
	  var options;
	  if (isPlainObject(handler)) {
	    options = handler;
	    handler = handler.handler;
	  }
	  if (typeof handler === 'string') {
	    handler = vm[handler];
	  }
	  vm.$watch(key, handler, options);
	}
	
	function stateMixin (Vue) {
	  // flow somehow has problems with directly declared definition object
	  // when using Object.defineProperty, so we have to procedurally build up
	  // the object here.
	  var dataDef = {};
	  dataDef.get = function () { return this._data };
	  var propsDef = {};
	  propsDef.get = function () { return this._props };
	  if (process.env.NODE_ENV !== 'production') {
	    dataDef.set = function (newData) {
	      warn(
	        'Avoid replacing instance root $data. ' +
	        'Use nested data properties instead.',
	        this
	      );
	    };
	    propsDef.set = function () {
	      warn("$props is readonly.", this);
	    };
	  }
	  Object.defineProperty(Vue.prototype, '$data', dataDef);
	  Object.defineProperty(Vue.prototype, '$props', propsDef);
	
	  Vue.prototype.$set = set;
	  Vue.prototype.$delete = del;
	
	  Vue.prototype.$watch = function (
	    expOrFn,
	    cb,
	    options
	  ) {
	    var vm = this;
	    options = options || {};
	    options.user = true;
	    var watcher = new Watcher(vm, expOrFn, cb, options);
	    if (options.immediate) {
	      cb.call(vm, watcher.value);
	    }
	    return function unwatchFn () {
	      watcher.teardown();
	    }
	  };
	}
	
	/*  */
	
	function initProvide (vm) {
	  var provide = vm.$options.provide;
	  if (provide) {
	    vm._provided = typeof provide === 'function'
	      ? provide.call(vm)
	      : provide;
	  }
	}
	
	function initInjections (vm) {
	  var result = resolveInject(vm.$options.inject, vm);
	  if (result) {
	    Object.keys(result).forEach(function (key) {
	      /* istanbul ignore else */
	      if (process.env.NODE_ENV !== 'production') {
	        defineReactive$$1(vm, key, result[key], function () {
	          warn(
	            "Avoid mutating an injected value directly since the changes will be " +
	            "overwritten whenever the provided component re-renders. " +
	            "injection being mutated: \"" + key + "\"",
	            vm
	          );
	        });
	      } else {
	        defineReactive$$1(vm, key, result[key]);
	      }
	    });
	  }
	}
	
	function resolveInject (inject, vm) {
	  if (inject) {
	    // inject is :any because flow is not smart enough to figure out cached
	    // isArray here
	    var isArray = Array.isArray(inject);
	    var result = Object.create(null);
	    var keys = isArray
	      ? inject
	      : hasSymbol
	        ? Reflect.ownKeys(inject)
	        : Object.keys(inject);
	
	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];
	      var provideKey = isArray ? key : inject[key];
	      var source = vm;
	      while (source) {
	        if (source._provided && provideKey in source._provided) {
	          result[key] = source._provided[provideKey];
	          break
	        }
	        source = source.$parent;
	      }
	    }
	    return result
	  }
	}
	
	/*  */
	
	function createFunctionalComponent (
	  Ctor,
	  propsData,
	  data,
	  context,
	  children
	) {
	  var props = {};
	  var propOptions = Ctor.options.props;
	  if (isDef(propOptions)) {
	    for (var key in propOptions) {
	      props[key] = validateProp(key, propOptions, propsData || {});
	    }
	  } else {
	    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
	    if (isDef(data.props)) { mergeProps(props, data.props); }
	  }
	  // ensure the createElement function in functional components
	  // gets a unique context - this is necessary for correct named slot check
	  var _context = Object.create(context);
	  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };
	  var vnode = Ctor.options.render.call(null, h, {
	    data: data,
	    props: props,
	    children: children,
	    parent: context,
	    listeners: data.on || {},
	    injections: resolveInject(Ctor.options.inject, context),
	    slots: function () { return resolveSlots(children, context); }
	  });
	  if (vnode instanceof VNode) {
	    vnode.functionalContext = context;
	    vnode.functionalOptions = Ctor.options;
	    if (data.slot) {
	      (vnode.data || (vnode.data = {})).slot = data.slot;
	    }
	  }
	  return vnode
	}
	
	function mergeProps (to, from) {
	  for (var key in from) {
	    to[camelize(key)] = from[key];
	  }
	}
	
	/*  */
	
	// hooks to be invoked on component VNodes during patch
	var componentVNodeHooks = {
	  init: function init (
	    vnode,
	    hydrating,
	    parentElm,
	    refElm
	  ) {
	    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
	      var child = vnode.componentInstance = createComponentInstanceForVnode(
	        vnode,
	        activeInstance,
	        parentElm,
	        refElm
	      );
	      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
	    } else if (vnode.data.keepAlive) {
	      // kept-alive components, treat as a patch
	      var mountedNode = vnode; // work around flow
	      componentVNodeHooks.prepatch(mountedNode, mountedNode);
	    }
	  },
	
	  prepatch: function prepatch (oldVnode, vnode) {
	    var options = vnode.componentOptions;
	    var child = vnode.componentInstance = oldVnode.componentInstance;
	    updateChildComponent(
	      child,
	      options.propsData, // updated props
	      options.listeners, // updated listeners
	      vnode, // new parent vnode
	      options.children // new children
	    );
	  },
	
	  insert: function insert (vnode) {
	    var context = vnode.context;
	    var componentInstance = vnode.componentInstance;
	    if (!componentInstance._isMounted) {
	      componentInstance._isMounted = true;
	      callHook(componentInstance, 'mounted');
	    }
	    if (vnode.data.keepAlive) {
	      if (context._isMounted) {
	        // vue-router#1212
	        // During updates, a kept-alive component's child components may
	        // change, so directly walking the tree here may call activated hooks
	        // on incorrect children. Instead we push them into a queue which will
	        // be processed after the whole patch process ended.
	        queueActivatedComponent(componentInstance);
	      } else {
	        activateChildComponent(componentInstance, true /* direct */);
	      }
	    }
	  },
	
	  destroy: function destroy (vnode) {
	    var componentInstance = vnode.componentInstance;
	    if (!componentInstance._isDestroyed) {
	      if (!vnode.data.keepAlive) {
	        componentInstance.$destroy();
	      } else {
	        deactivateChildComponent(componentInstance, true /* direct */);
	      }
	    }
	  }
	};
	
	var hooksToMerge = Object.keys(componentVNodeHooks);
	
	function createComponent (
	  Ctor,
	  data,
	  context,
	  children,
	  tag
	) {
	  if (isUndef(Ctor)) {
	    return
	  }
	
	  var baseCtor = context.$options._base;
	
	  // plain options object: turn it into a constructor
	  if (isObject(Ctor)) {
	    Ctor = baseCtor.extend(Ctor);
	  }
	
	  // if at this stage it's not a constructor or an async component factory,
	  // reject.
	  if (typeof Ctor !== 'function') {
	    if (process.env.NODE_ENV !== 'production') {
	      warn(("Invalid Component definition: " + (String(Ctor))), context);
	    }
	    return
	  }
	
	  // async component
	  if (isUndef(Ctor.cid)) {
	    Ctor = resolveAsyncComponent(Ctor, baseCtor, context);
	    if (Ctor === undefined) {
	      // return nothing if this is indeed an async component
	      // wait for the callback to trigger parent update.
	      return
	    }
	  }
	
	  // resolve constructor options in case global mixins are applied after
	  // component constructor creation
	  resolveConstructorOptions(Ctor);
	
	  data = data || {};
	
	  // transform component v-model data into props & events
	  if (isDef(data.model)) {
	    transformModel(Ctor.options, data);
	  }
	
	  // extract props
	  var propsData = extractPropsFromVNodeData(data, Ctor, tag);
	
	  // functional component
	  if (isTrue(Ctor.options.functional)) {
	    return createFunctionalComponent(Ctor, propsData, data, context, children)
	  }
	
	  // extract listeners, since these needs to be treated as
	  // child component listeners instead of DOM listeners
	  var listeners = data.on;
	  // replace with listeners with .native modifier
	  data.on = data.nativeOn;
	
	  if (isTrue(Ctor.options.abstract)) {
	    // abstract components do not keep anything
	    // other than props & listeners
	    data = {};
	  }
	
	  // merge component management hooks onto the placeholder node
	  mergeHooks(data);
	
	  // return a placeholder vnode
	  var name = Ctor.options.name || tag;
	  var vnode = new VNode(
	    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
	    data, undefined, undefined, undefined, context,
	    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }
	  );
	  return vnode
	}
	
	function createComponentInstanceForVnode (
	  vnode, // we know it's MountedComponentVNode but flow doesn't
	  parent, // activeInstance in lifecycle state
	  parentElm,
	  refElm
	) {
	  var vnodeComponentOptions = vnode.componentOptions;
	  var options = {
	    _isComponent: true,
	    parent: parent,
	    propsData: vnodeComponentOptions.propsData,
	    _componentTag: vnodeComponentOptions.tag,
	    _parentVnode: vnode,
	    _parentListeners: vnodeComponentOptions.listeners,
	    _renderChildren: vnodeComponentOptions.children,
	    _parentElm: parentElm || null,
	    _refElm: refElm || null
	  };
	  // check inline-template render functions
	  var inlineTemplate = vnode.data.inlineTemplate;
	  if (isDef(inlineTemplate)) {
	    options.render = inlineTemplate.render;
	    options.staticRenderFns = inlineTemplate.staticRenderFns;
	  }
	  return new vnodeComponentOptions.Ctor(options)
	}
	
	function mergeHooks (data) {
	  if (!data.hook) {
	    data.hook = {};
	  }
	  for (var i = 0; i < hooksToMerge.length; i++) {
	    var key = hooksToMerge[i];
	    var fromParent = data.hook[key];
	    var ours = componentVNodeHooks[key];
	    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
	  }
	}
	
	function mergeHook$1 (one, two) {
	  return function (a, b, c, d) {
	    one(a, b, c, d);
	    two(a, b, c, d);
	  }
	}
	
	// transform component v-model info (value and callback) into
	// prop and event handler respectively.
	function transformModel (options, data) {
	  var prop = (options.model && options.model.prop) || 'value';
	  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
	  var on = data.on || (data.on = {});
	  if (isDef(on[event])) {
	    on[event] = [data.model.callback].concat(on[event]);
	  } else {
	    on[event] = data.model.callback;
	  }
	}
	
	/*  */
	
	var SIMPLE_NORMALIZE = 1;
	var ALWAYS_NORMALIZE = 2;
	
	// wrapper function for providing a more flexible interface
	// without getting yelled at by flow
	function createElement (
	  context,
	  tag,
	  data,
	  children,
	  normalizationType,
	  alwaysNormalize
	) {
	  if (Array.isArray(data) || isPrimitive(data)) {
	    normalizationType = children;
	    children = data;
	    data = undefined;
	  }
	  if (isTrue(alwaysNormalize)) {
	    normalizationType = ALWAYS_NORMALIZE;
	  }
	  return _createElement(context, tag, data, children, normalizationType)
	}
	
	function _createElement (
	  context,
	  tag,
	  data,
	  children,
	  normalizationType
	) {
	  if (isDef(data) && isDef((data).__ob__)) {
	    process.env.NODE_ENV !== 'production' && warn(
	      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
	      'Always create fresh vnode data objects in each render!',
	      context
	    );
	    return createEmptyVNode()
	  }
	  if (!tag) {
	    // in case of component :is set to falsy value
	    return createEmptyVNode()
	  }
	  // support single function children as default scoped slot
	  if (Array.isArray(children) &&
	    typeof children[0] === 'function'
	  ) {
	    data = data || {};
	    data.scopedSlots = { default: children[0] };
	    children.length = 0;
	  }
	  if (normalizationType === ALWAYS_NORMALIZE) {
	    children = normalizeChildren(children);
	  } else if (normalizationType === SIMPLE_NORMALIZE) {
	    children = simpleNormalizeChildren(children);
	  }
	  var vnode, ns;
	  if (typeof tag === 'string') {
	    var Ctor;
	    ns = config.getTagNamespace(tag);
	    if (config.isReservedTag(tag)) {
	      // platform built-in elements
	      vnode = new VNode(
	        config.parsePlatformTagName(tag), data, children,
	        undefined, undefined, context
	      );
	    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
	      // component
	      vnode = createComponent(Ctor, data, context, children, tag);
	    } else {
	      // unknown or unlisted namespaced elements
	      // check at runtime because it may get assigned a namespace when its
	      // parent normalizes children
	      vnode = new VNode(
	        tag, data, children,
	        undefined, undefined, context
	      );
	    }
	  } else {
	    // direct component options / constructor
	    vnode = createComponent(tag, data, context, children);
	  }
	  if (isDef(vnode)) {
	    if (ns) { applyNS(vnode, ns); }
	    return vnode
	  } else {
	    return createEmptyVNode()
	  }
	}
	
	function applyNS (vnode, ns) {
	  vnode.ns = ns;
	  if (vnode.tag === 'foreignObject') {
	    // use default namespace inside foreignObject
	    return
	  }
	  if (isDef(vnode.children)) {
	    for (var i = 0, l = vnode.children.length; i < l; i++) {
	      var child = vnode.children[i];
	      if (isDef(child.tag) && isUndef(child.ns)) {
	        applyNS(child, ns);
	      }
	    }
	  }
	}
	
	/*  */
	
	/**
	 * Runtime helper for rendering v-for lists.
	 */
	function renderList (
	  val,
	  render
	) {
	  var ret, i, l, keys, key;
	  if (Array.isArray(val) || typeof val === 'string') {
	    ret = new Array(val.length);
	    for (i = 0, l = val.length; i < l; i++) {
	      ret[i] = render(val[i], i);
	    }
	  } else if (typeof val === 'number') {
	    ret = new Array(val);
	    for (i = 0; i < val; i++) {
	      ret[i] = render(i + 1, i);
	    }
	  } else if (isObject(val)) {
	    keys = Object.keys(val);
	    ret = new Array(keys.length);
	    for (i = 0, l = keys.length; i < l; i++) {
	      key = keys[i];
	      ret[i] = render(val[key], key, i);
	    }
	  }
	  if (isDef(ret)) {
	    (ret)._isVList = true;
	  }
	  return ret
	}
	
	/*  */
	
	/**
	 * Runtime helper for rendering <slot>
	 */
	function renderSlot (
	  name,
	  fallback,
	  props,
	  bindObject
	) {
	  var scopedSlotFn = this.$scopedSlots[name];
	  if (scopedSlotFn) { // scoped slot
	    props = props || {};
	    if (bindObject) {
	      extend(props, bindObject);
	    }
	    return scopedSlotFn(props) || fallback
	  } else {
	    var slotNodes = this.$slots[name];
	    // warn duplicate slot usage
	    if (slotNodes && process.env.NODE_ENV !== 'production') {
	      slotNodes._rendered && warn(
	        "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
	        "- this will likely cause render errors.",
	        this
	      );
	      slotNodes._rendered = true;
	    }
	    return slotNodes || fallback
	  }
	}
	
	/*  */
	
	/**
	 * Runtime helper for resolving filters
	 */
	function resolveFilter (id) {
	  return resolveAsset(this.$options, 'filters', id, true) || identity
	}
	
	/*  */
	
	/**
	 * Runtime helper for checking keyCodes from config.
	 */
	function checkKeyCodes (
	  eventKeyCode,
	  key,
	  builtInAlias
	) {
	  var keyCodes = config.keyCodes[key] || builtInAlias;
	  if (Array.isArray(keyCodes)) {
	    return keyCodes.indexOf(eventKeyCode) === -1
	  } else {
	    return keyCodes !== eventKeyCode
	  }
	}
	
	/*  */
	
	/**
	 * Runtime helper for merging v-bind="object" into a VNode's data.
	 */
	function bindObjectProps (
	  data,
	  tag,
	  value,
	  asProp
	) {
	  if (value) {
	    if (!isObject(value)) {
	      process.env.NODE_ENV !== 'production' && warn(
	        'v-bind without argument expects an Object or Array value',
	        this
	      );
	    } else {
	      if (Array.isArray(value)) {
	        value = toObject(value);
	      }
	      var hash;
	      for (var key in value) {
	        if (key === 'class' || key === 'style') {
	          hash = data;
	        } else {
	          var type = data.attrs && data.attrs.type;
	          hash = asProp || config.mustUseProp(tag, type, key)
	            ? data.domProps || (data.domProps = {})
	            : data.attrs || (data.attrs = {});
	        }
	        if (!(key in hash)) {
	          hash[key] = value[key];
	        }
	      }
	    }
	  }
	  return data
	}
	
	/*  */
	
	/**
	 * Runtime helper for rendering static trees.
	 */
	function renderStatic (
	  index,
	  isInFor
	) {
	  var tree = this._staticTrees[index];
	  // if has already-rendered static tree and not inside v-for,
	  // we can reuse the same tree by doing a shallow clone.
	  if (tree && !isInFor) {
	    return Array.isArray(tree)
	      ? cloneVNodes(tree)
	      : cloneVNode(tree)
	  }
	  // otherwise, render a fresh tree.
	  tree = this._staticTrees[index] =
	    this.$options.staticRenderFns[index].call(this._renderProxy);
	  markStatic(tree, ("__static__" + index), false);
	  return tree
	}
	
	/**
	 * Runtime helper for v-once.
	 * Effectively it means marking the node as static with a unique key.
	 */
	function markOnce (
	  tree,
	  index,
	  key
	) {
	  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
	  return tree
	}
	
	function markStatic (
	  tree,
	  key,
	  isOnce
	) {
	  if (Array.isArray(tree)) {
	    for (var i = 0; i < tree.length; i++) {
	      if (tree[i] && typeof tree[i] !== 'string') {
	        markStaticNode(tree[i], (key + "_" + i), isOnce);
	      }
	    }
	  } else {
	    markStaticNode(tree, key, isOnce);
	  }
	}
	
	function markStaticNode (node, key, isOnce) {
	  node.isStatic = true;
	  node.key = key;
	  node.isOnce = isOnce;
	}
	
	/*  */
	
	function initRender (vm) {
	  vm._vnode = null; // the root of the child tree
	  vm._staticTrees = null;
	  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree
	  var renderContext = parentVnode && parentVnode.context;
	  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);
	  vm.$scopedSlots = emptyObject;
	  // bind the createElement fn to this instance
	  // so that we get proper render context inside it.
	  // args order: tag, data, children, normalizationType, alwaysNormalize
	  // internal version is used by render functions compiled from templates
	  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
	  // normalization is always applied for the public version, used in
	  // user-written render functions.
	  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };
	}
	
	function renderMixin (Vue) {
	  Vue.prototype.$nextTick = function (fn) {
	    return nextTick(fn, this)
	  };
	
	  Vue.prototype._render = function () {
	    var vm = this;
	    var ref = vm.$options;
	    var render = ref.render;
	    var staticRenderFns = ref.staticRenderFns;
	    var _parentVnode = ref._parentVnode;
	
	    if (vm._isMounted) {
	      // clone slot nodes on re-renders
	      for (var key in vm.$slots) {
	        vm.$slots[key] = cloneVNodes(vm.$slots[key]);
	      }
	    }
	
	    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;
	
	    if (staticRenderFns && !vm._staticTrees) {
	      vm._staticTrees = [];
	    }
	    // set parent vnode. this allows render functions to have access
	    // to the data on the placeholder node.
	    vm.$vnode = _parentVnode;
	    // render self
	    var vnode;
	    try {
	      vnode = render.call(vm._renderProxy, vm.$createElement);
	    } catch (e) {
	      handleError(e, vm, "render function");
	      // return error render result,
	      // or previous vnode to prevent render error causing blank component
	      /* istanbul ignore else */
	      if (process.env.NODE_ENV !== 'production') {
	        vnode = vm.$options.renderError
	          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)
	          : vm._vnode;
	      } else {
	        vnode = vm._vnode;
	      }
	    }
	    // return empty vnode in case the render function errored out
	    if (!(vnode instanceof VNode)) {
	      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
	        warn(
	          'Multiple root nodes returned from render function. Render function ' +
	          'should return a single root node.',
	          vm
	        );
	      }
	      vnode = createEmptyVNode();
	    }
	    // set parent
	    vnode.parent = _parentVnode;
	    return vnode
	  };
	
	  // internal render helpers.
	  // these are exposed on the instance prototype to reduce generated render
	  // code size.
	  Vue.prototype._o = markOnce;
	  Vue.prototype._n = toNumber;
	  Vue.prototype._s = toString;
	  Vue.prototype._l = renderList;
	  Vue.prototype._t = renderSlot;
	  Vue.prototype._q = looseEqual;
	  Vue.prototype._i = looseIndexOf;
	  Vue.prototype._m = renderStatic;
	  Vue.prototype._f = resolveFilter;
	  Vue.prototype._k = checkKeyCodes;
	  Vue.prototype._b = bindObjectProps;
	  Vue.prototype._v = createTextVNode;
	  Vue.prototype._e = createEmptyVNode;
	  Vue.prototype._u = resolveScopedSlots;
	}
	
	/*  */
	
	var uid = 0;
	
	function initMixin (Vue) {
	  Vue.prototype._init = function (options) {
	    var vm = this;
	    // a uid
	    vm._uid = uid++;
	
	    var startTag, endTag;
	    /* istanbul ignore if */
	    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
	      startTag = "vue-perf-init:" + (vm._uid);
	      endTag = "vue-perf-end:" + (vm._uid);
	      mark(startTag);
	    }
	
	    // a flag to avoid this being observed
	    vm._isVue = true;
	    // merge options
	    if (options && options._isComponent) {
	      // optimize internal component instantiation
	      // since dynamic options merging is pretty slow, and none of the
	      // internal component options needs special treatment.
	      initInternalComponent(vm, options);
	    } else {
	      vm.$options = mergeOptions(
	        resolveConstructorOptions(vm.constructor),
	        options || {},
	        vm
	      );
	    }
	    /* istanbul ignore else */
	    if (process.env.NODE_ENV !== 'production') {
	      initProxy(vm);
	    } else {
	      vm._renderProxy = vm;
	    }
	    // expose real self
	    vm._self = vm;
	    initLifecycle(vm);
	    initEvents(vm);
	    initRender(vm);
	    callHook(vm, 'beforeCreate');
	    initInjections(vm); // resolve injections before data/props
	    initState(vm);
	    initProvide(vm); // resolve provide after data/props
	    callHook(vm, 'created');
	
	    /* istanbul ignore if */
	    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
	      vm._name = formatComponentName(vm, false);
	      mark(endTag);
	      measure(((vm._name) + " init"), startTag, endTag);
	    }
	
	    if (vm.$options.el) {
	      vm.$mount(vm.$options.el);
	    }
	  };
	}
	
	function initInternalComponent (vm, options) {
	  var opts = vm.$options = Object.create(vm.constructor.options);
	  // doing this because it's faster than dynamic enumeration.
	  opts.parent = options.parent;
	  opts.propsData = options.propsData;
	  opts._parentVnode = options._parentVnode;
	  opts._parentListeners = options._parentListeners;
	  opts._renderChildren = options._renderChildren;
	  opts._componentTag = options._componentTag;
	  opts._parentElm = options._parentElm;
	  opts._refElm = options._refElm;
	  if (options.render) {
	    opts.render = options.render;
	    opts.staticRenderFns = options.staticRenderFns;
	  }
	}
	
	function resolveConstructorOptions (Ctor) {
	  var options = Ctor.options;
	  if (Ctor.super) {
	    var superOptions = resolveConstructorOptions(Ctor.super);
	    var cachedSuperOptions = Ctor.superOptions;
	    if (superOptions !== cachedSuperOptions) {
	      // super option changed,
	      // need to resolve new options.
	      Ctor.superOptions = superOptions;
	      // check if there are any late-modified/attached options (#4976)
	      var modifiedOptions = resolveModifiedOptions(Ctor);
	      // update base extend options
	      if (modifiedOptions) {
	        extend(Ctor.extendOptions, modifiedOptions);
	      }
	      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
	      if (options.name) {
	        options.components[options.name] = Ctor;
	      }
	    }
	  }
	  return options
	}
	
	function resolveModifiedOptions (Ctor) {
	  var modified;
	  var latest = Ctor.options;
	  var extended = Ctor.extendOptions;
	  var sealed = Ctor.sealedOptions;
	  for (var key in latest) {
	    if (latest[key] !== sealed[key]) {
	      if (!modified) { modified = {}; }
	      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
	    }
	  }
	  return modified
	}
	
	function dedupe (latest, extended, sealed) {
	  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
	  // between merges
	  if (Array.isArray(latest)) {
	    var res = [];
	    sealed = Array.isArray(sealed) ? sealed : [sealed];
	    extended = Array.isArray(extended) ? extended : [extended];
	    for (var i = 0; i < latest.length; i++) {
	      // push original options and not sealed options to exclude duplicated options
	      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
	        res.push(latest[i]);
	      }
	    }
	    return res
	  } else {
	    return latest
	  }
	}
	
	function Vue$3 (options) {
	  if (process.env.NODE_ENV !== 'production' &&
	    !(this instanceof Vue$3)
	  ) {
	    warn('Vue is a constructor and should be called with the `new` keyword');
	  }
	  this._init(options);
	}
	
	initMixin(Vue$3);
	stateMixin(Vue$3);
	eventsMixin(Vue$3);
	lifecycleMixin(Vue$3);
	renderMixin(Vue$3);
	
	/*  */
	
	function initUse (Vue) {
	  Vue.use = function (plugin) {
	    /* istanbul ignore if */
	    if (plugin.installed) {
	      return this
	    }
	    // additional parameters
	    var args = toArray(arguments, 1);
	    args.unshift(this);
	    if (typeof plugin.install === 'function') {
	      plugin.install.apply(plugin, args);
	    } else if (typeof plugin === 'function') {
	      plugin.apply(null, args);
	    }
	    plugin.installed = true;
	    return this
	  };
	}
	
	/*  */
	
	function initMixin$1 (Vue) {
	  Vue.mixin = function (mixin) {
	    this.options = mergeOptions(this.options, mixin);
	    return this
	  };
	}
	
	/*  */
	
	function initExtend (Vue) {
	  /**
	   * Each instance constructor, including Vue, has a unique
	   * cid. This enables us to create wrapped "child
	   * constructors" for prototypal inheritance and cache them.
	   */
	  Vue.cid = 0;
	  var cid = 1;
	
	  /**
	   * Class inheritance
	   */
	  Vue.extend = function (extendOptions) {
	    extendOptions = extendOptions || {};
	    var Super = this;
	    var SuperId = Super.cid;
	    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
	    if (cachedCtors[SuperId]) {
	      return cachedCtors[SuperId]
	    }
	
	    var name = extendOptions.name || Super.options.name;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
	        warn(
	          'Invalid component name: "' + name + '". Component names ' +
	          'can only contain alphanumeric characters and the hyphen, ' +
	          'and must start with a letter.'
	        );
	      }
	    }
	
	    var Sub = function VueComponent (options) {
	      this._init(options);
	    };
	    Sub.prototype = Object.create(Super.prototype);
	    Sub.prototype.constructor = Sub;
	    Sub.cid = cid++;
	    Sub.options = mergeOptions(
	      Super.options,
	      extendOptions
	    );
	    Sub['super'] = Super;
	
	    // For props and computed properties, we define the proxy getters on
	    // the Vue instances at extension time, on the extended prototype. This
	    // avoids Object.defineProperty calls for each instance created.
	    if (Sub.options.props) {
	      initProps$1(Sub);
	    }
	    if (Sub.options.computed) {
	      initComputed$1(Sub);
	    }
	
	    // allow further extension/mixin/plugin usage
	    Sub.extend = Super.extend;
	    Sub.mixin = Super.mixin;
	    Sub.use = Super.use;
	
	    // create asset registers, so extended classes
	    // can have their private assets too.
	    ASSET_TYPES.forEach(function (type) {
	      Sub[type] = Super[type];
	    });
	    // enable recursive self-lookup
	    if (name) {
	      Sub.options.components[name] = Sub;
	    }
	
	    // keep a reference to the super options at extension time.
	    // later at instantiation we can check if Super's options have
	    // been updated.
	    Sub.superOptions = Super.options;
	    Sub.extendOptions = extendOptions;
	    Sub.sealedOptions = extend({}, Sub.options);
	
	    // cache constructor
	    cachedCtors[SuperId] = Sub;
	    return Sub
	  };
	}
	
	function initProps$1 (Comp) {
	  var props = Comp.options.props;
	  for (var key in props) {
	    proxy(Comp.prototype, "_props", key);
	  }
	}
	
	function initComputed$1 (Comp) {
	  var computed = Comp.options.computed;
	  for (var key in computed) {
	    defineComputed(Comp.prototype, key, computed[key]);
	  }
	}
	
	/*  */
	
	function initAssetRegisters (Vue) {
	  /**
	   * Create asset registration methods.
	   */
	  ASSET_TYPES.forEach(function (type) {
	    Vue[type] = function (
	      id,
	      definition
	    ) {
	      if (!definition) {
	        return this.options[type + 's'][id]
	      } else {
	        /* istanbul ignore if */
	        if (process.env.NODE_ENV !== 'production') {
	          if (type === 'component' && config.isReservedTag(id)) {
	            warn(
	              'Do not use built-in or reserved HTML elements as component ' +
	              'id: ' + id
	            );
	          }
	        }
	        if (type === 'component' && isPlainObject(definition)) {
	          definition.name = definition.name || id;
	          definition = this.options._base.extend(definition);
	        }
	        if (type === 'directive' && typeof definition === 'function') {
	          definition = { bind: definition, update: definition };
	        }
	        this.options[type + 's'][id] = definition;
	        return definition
	      }
	    };
	  });
	}
	
	/*  */
	
	var patternTypes = [String, RegExp];
	
	function getComponentName (opts) {
	  return opts && (opts.Ctor.options.name || opts.tag)
	}
	
	function matches (pattern, name) {
	  if (typeof pattern === 'string') {
	    return pattern.split(',').indexOf(name) > -1
	  } else if (isRegExp(pattern)) {
	    return pattern.test(name)
	  }
	  /* istanbul ignore next */
	  return false
	}
	
	function pruneCache (cache, current, filter) {
	  for (var key in cache) {
	    var cachedNode = cache[key];
	    if (cachedNode) {
	      var name = getComponentName(cachedNode.componentOptions);
	      if (name && !filter(name)) {
	        if (cachedNode !== current) {
	          pruneCacheEntry(cachedNode);
	        }
	        cache[key] = null;
	      }
	    }
	  }
	}
	
	function pruneCacheEntry (vnode) {
	  if (vnode) {
	    vnode.componentInstance.$destroy();
	  }
	}
	
	var KeepAlive = {
	  name: 'keep-alive',
	  abstract: true,
	
	  props: {
	    include: patternTypes,
	    exclude: patternTypes
	  },
	
	  created: function created () {
	    this.cache = Object.create(null);
	  },
	
	  destroyed: function destroyed () {
	    var this$1 = this;
	
	    for (var key in this$1.cache) {
	      pruneCacheEntry(this$1.cache[key]);
	    }
	  },
	
	  watch: {
	    include: function include (val) {
	      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });
	    },
	    exclude: function exclude (val) {
	      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });
	    }
	  },
	
	  render: function render () {
	    var vnode = getFirstComponentChild(this.$slots.default);
	    var componentOptions = vnode && vnode.componentOptions;
	    if (componentOptions) {
	      // check pattern
	      var name = getComponentName(componentOptions);
	      if (name && (
	        (this.include && !matches(this.include, name)) ||
	        (this.exclude && matches(this.exclude, name))
	      )) {
	        return vnode
	      }
	      var key = vnode.key == null
	        // same constructor may get registered as different local components
	        // so cid alone is not enough (#3269)
	        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
	        : vnode.key;
	      if (this.cache[key]) {
	        vnode.componentInstance = this.cache[key].componentInstance;
	      } else {
	        this.cache[key] = vnode;
	      }
	      vnode.data.keepAlive = true;
	    }
	    return vnode
	  }
	};
	
	var builtInComponents = {
	  KeepAlive: KeepAlive
	};
	
	/*  */
	
	function initGlobalAPI (Vue) {
	  // config
	  var configDef = {};
	  configDef.get = function () { return config; };
	  if (process.env.NODE_ENV !== 'production') {
	    configDef.set = function () {
	      warn(
	        'Do not replace the Vue.config object, set individual fields instead.'
	      );
	    };
	  }
	  Object.defineProperty(Vue, 'config', configDef);
	
	  // exposed util methods.
	  // NOTE: these are not considered part of the public API - avoid relying on
	  // them unless you are aware of the risk.
	  Vue.util = {
	    warn: warn,
	    extend: extend,
	    mergeOptions: mergeOptions,
	    defineReactive: defineReactive$$1
	  };
	
	  Vue.set = set;
	  Vue.delete = del;
	  Vue.nextTick = nextTick;
	
	  Vue.options = Object.create(null);
	  ASSET_TYPES.forEach(function (type) {
	    Vue.options[type + 's'] = Object.create(null);
	  });
	
	  // this is used to identify the "base" constructor to extend all plain-object
	  // components with in Weex's multi-instance scenarios.
	  Vue.options._base = Vue;
	
	  extend(Vue.options.components, builtInComponents);
	
	  initUse(Vue);
	  initMixin$1(Vue);
	  initExtend(Vue);
	  initAssetRegisters(Vue);
	}
	
	initGlobalAPI(Vue$3);
	
	Object.defineProperty(Vue$3.prototype, '$isServer', {
	  get: isServerRendering
	});
	
	Object.defineProperty(Vue$3.prototype, '$ssrContext', {
	  get: function get () {
	    /* istanbul ignore next */
	    return this.$vnode.ssrContext
	  }
	});
	
	Vue$3.version = '2.3.4';
	
	/*  */
	
	// these are reserved for web because they are directly compiled away
	// during template compilation
	var isReservedAttr = makeMap('style,class');
	
	// attributes that should be using props for binding
	var acceptValue = makeMap('input,textarea,option,select');
	var mustUseProp = function (tag, type, attr) {
	  return (
	    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
	    (attr === 'selected' && tag === 'option') ||
	    (attr === 'checked' && tag === 'input') ||
	    (attr === 'muted' && tag === 'video')
	  )
	};
	
	var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
	
	var isBooleanAttr = makeMap(
	  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
	  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
	  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
	  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
	  'required,reversed,scoped,seamless,selected,sortable,translate,' +
	  'truespeed,typemustmatch,visible'
	);
	
	var xlinkNS = 'http://www.w3.org/1999/xlink';
	
	var isXlink = function (name) {
	  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
	};
	
	var getXlinkProp = function (name) {
	  return isXlink(name) ? name.slice(6, name.length) : ''
	};
	
	var isFalsyAttrValue = function (val) {
	  return val == null || val === false
	};
	
	/*  */
	
	function genClassForVnode (vnode) {
	  var data = vnode.data;
	  var parentNode = vnode;
	  var childNode = vnode;
	  while (isDef(childNode.componentInstance)) {
	    childNode = childNode.componentInstance._vnode;
	    if (childNode.data) {
	      data = mergeClassData(childNode.data, data);
	    }
	  }
	  while (isDef(parentNode = parentNode.parent)) {
	    if (parentNode.data) {
	      data = mergeClassData(data, parentNode.data);
	    }
	  }
	  return genClassFromData(data)
	}
	
	function mergeClassData (child, parent) {
	  return {
	    staticClass: concat(child.staticClass, parent.staticClass),
	    class: isDef(child.class)
	      ? [child.class, parent.class]
	      : parent.class
	  }
	}
	
	function genClassFromData (data) {
	  var dynamicClass = data.class;
	  var staticClass = data.staticClass;
	  if (isDef(staticClass) || isDef(dynamicClass)) {
	    return concat(staticClass, stringifyClass(dynamicClass))
	  }
	  /* istanbul ignore next */
	  return ''
	}
	
	function concat (a, b) {
	  return a ? b ? (a + ' ' + b) : a : (b || '')
	}
	
	function stringifyClass (value) {
	  if (isUndef(value)) {
	    return ''
	  }
	  if (typeof value === 'string') {
	    return value
	  }
	  var res = '';
	  if (Array.isArray(value)) {
	    var stringified;
	    for (var i = 0, l = value.length; i < l; i++) {
	      if (isDef(value[i])) {
	        if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
	          res += stringified + ' ';
	        }
	      }
	    }
	    return res.slice(0, -1)
	  }
	  if (isObject(value)) {
	    for (var key in value) {
	      if (value[key]) { res += key + ' '; }
	    }
	    return res.slice(0, -1)
	  }
	  /* istanbul ignore next */
	  return res
	}
	
	/*  */
	
	var namespaceMap = {
	  svg: 'http://www.w3.org/2000/svg',
	  math: 'http://www.w3.org/1998/Math/MathML'
	};
	
	var isHTMLTag = makeMap(
	  'html,body,base,head,link,meta,style,title,' +
	  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
	  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +
	  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
	  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
	  'embed,object,param,source,canvas,script,noscript,del,ins,' +
	  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
	  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
	  'output,progress,select,textarea,' +
	  'details,dialog,menu,menuitem,summary,' +
	  'content,element,shadow,template'
	);
	
	// this map is intentionally selective, only covering SVG elements that may
	// contain child elements.
	var isSVG = makeMap(
	  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
	  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
	  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
	  true
	);
	
	
	
	var isReservedTag = function (tag) {
	  return isHTMLTag(tag) || isSVG(tag)
	};
	
	function getTagNamespace (tag) {
	  if (isSVG(tag)) {
	    return 'svg'
	  }
	  // basic support for MathML
	  // note it doesn't support other MathML elements being component roots
	  if (tag === 'math') {
	    return 'math'
	  }
	}
	
	var unknownElementCache = Object.create(null);
	function isUnknownElement (tag) {
	  /* istanbul ignore if */
	  if (!inBrowser) {
	    return true
	  }
	  if (isReservedTag(tag)) {
	    return false
	  }
	  tag = tag.toLowerCase();
	  /* istanbul ignore if */
	  if (unknownElementCache[tag] != null) {
	    return unknownElementCache[tag]
	  }
	  var el = document.createElement(tag);
	  if (tag.indexOf('-') > -1) {
	    // http://stackoverflow.com/a/28210364/1070244
	    return (unknownElementCache[tag] = (
	      el.constructor === window.HTMLUnknownElement ||
	      el.constructor === window.HTMLElement
	    ))
	  } else {
	    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
	  }
	}
	
	/*  */
	
	/**
	 * Query an element selector if it's not an element already.
	 */
	function query (el) {
	  if (typeof el === 'string') {
	    var selected = document.querySelector(el);
	    if (!selected) {
	      process.env.NODE_ENV !== 'production' && warn(
	        'Cannot find element: ' + el
	      );
	      return document.createElement('div')
	    }
	    return selected
	  } else {
	    return el
	  }
	}
	
	/*  */
	
	function createElement$1 (tagName, vnode) {
	  var elm = document.createElement(tagName);
	  if (tagName !== 'select') {
	    return elm
	  }
	  // false or null will remove the attribute but undefined will not
	  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
	    elm.setAttribute('multiple', 'multiple');
	  }
	  return elm
	}
	
	function createElementNS (namespace, tagName) {
	  return document.createElementNS(namespaceMap[namespace], tagName)
	}
	
	function createTextNode (text) {
	  return document.createTextNode(text)
	}
	
	function createComment (text) {
	  return document.createComment(text)
	}
	
	function insertBefore (parentNode, newNode, referenceNode) {
	  parentNode.insertBefore(newNode, referenceNode);
	}
	
	function removeChild (node, child) {
	  node.removeChild(child);
	}
	
	function appendChild (node, child) {
	  node.appendChild(child);
	}
	
	function parentNode (node) {
	  return node.parentNode
	}
	
	function nextSibling (node) {
	  return node.nextSibling
	}
	
	function tagName (node) {
	  return node.tagName
	}
	
	function setTextContent (node, text) {
	  node.textContent = text;
	}
	
	function setAttribute (node, key, val) {
	  node.setAttribute(key, val);
	}
	
	
	var nodeOps = Object.freeze({
		createElement: createElement$1,
		createElementNS: createElementNS,
		createTextNode: createTextNode,
		createComment: createComment,
		insertBefore: insertBefore,
		removeChild: removeChild,
		appendChild: appendChild,
		parentNode: parentNode,
		nextSibling: nextSibling,
		tagName: tagName,
		setTextContent: setTextContent,
		setAttribute: setAttribute
	});
	
	/*  */
	
	var ref = {
	  create: function create (_, vnode) {
	    registerRef(vnode);
	  },
	  update: function update (oldVnode, vnode) {
	    if (oldVnode.data.ref !== vnode.data.ref) {
	      registerRef(oldVnode, true);
	      registerRef(vnode);
	    }
	  },
	  destroy: function destroy (vnode) {
	    registerRef(vnode, true);
	  }
	};
	
	function registerRef (vnode, isRemoval) {
	  var key = vnode.data.ref;
	  if (!key) { return }
	
	  var vm = vnode.context;
	  var ref = vnode.componentInstance || vnode.elm;
	  var refs = vm.$refs;
	  if (isRemoval) {
	    if (Array.isArray(refs[key])) {
	      remove(refs[key], ref);
	    } else if (refs[key] === ref) {
	      refs[key] = undefined;
	    }
	  } else {
	    if (vnode.data.refInFor) {
	      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {
	        refs[key].push(ref);
	      } else {
	        refs[key] = [ref];
	      }
	    } else {
	      refs[key] = ref;
	    }
	  }
	}
	
	/**
	 * Virtual DOM patching algorithm based on Snabbdom by
	 * Simon Friis Vindum (@paldepind)
	 * Licensed under the MIT License
	 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
	 *
	 * modified by Evan You (@yyx990803)
	 *
	
	/*
	 * Not type-checking this because this file is perf-critical and the cost
	 * of making flow understand it is not worth it.
	 */
	
	var emptyNode = new VNode('', {}, []);
	
	var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];
	
	function sameVnode (a, b) {
	  return (
	    a.key === b.key &&
	    a.tag === b.tag &&
	    a.isComment === b.isComment &&
	    isDef(a.data) === isDef(b.data) &&
	    sameInputType(a, b)
	  )
	}
	
	// Some browsers do not support dynamically changing type for <input>
	// so they need to be treated as different nodes
	function sameInputType (a, b) {
	  if (a.tag !== 'input') { return true }
	  var i;
	  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
	  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
	  return typeA === typeB
	}
	
	function createKeyToOldIdx (children, beginIdx, endIdx) {
	  var i, key;
	  var map = {};
	  for (i = beginIdx; i <= endIdx; ++i) {
	    key = children[i].key;
	    if (isDef(key)) { map[key] = i; }
	  }
	  return map
	}
	
	function createPatchFunction (backend) {
	  var i, j;
	  var cbs = {};
	
	  var modules = backend.modules;
	  var nodeOps = backend.nodeOps;
	
	  for (i = 0; i < hooks.length; ++i) {
	    cbs[hooks[i]] = [];
	    for (j = 0; j < modules.length; ++j) {
	      if (isDef(modules[j][hooks[i]])) {
	        cbs[hooks[i]].push(modules[j][hooks[i]]);
	      }
	    }
	  }
	
	  function emptyNodeAt (elm) {
	    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
	  }
	
	  function createRmCb (childElm, listeners) {
	    function remove$$1 () {
	      if (--remove$$1.listeners === 0) {
	        removeNode(childElm);
	      }
	    }
	    remove$$1.listeners = listeners;
	    return remove$$1
	  }
	
	  function removeNode (el) {
	    var parent = nodeOps.parentNode(el);
	    // element may have already been removed due to v-html / v-text
	    if (isDef(parent)) {
	      nodeOps.removeChild(parent, el);
	    }
	  }
	
	  var inPre = 0;
	  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {
	    vnode.isRootInsert = !nested; // for transition enter check
	    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
	      return
	    }
	
	    var data = vnode.data;
	    var children = vnode.children;
	    var tag = vnode.tag;
	    if (isDef(tag)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (data && data.pre) {
	          inPre++;
	        }
	        if (
	          !inPre &&
	          !vnode.ns &&
	          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&
	          config.isUnknownElement(tag)
	        ) {
	          warn(
	            'Unknown custom element: <' + tag + '> - did you ' +
	            'register the component correctly? For recursive components, ' +
	            'make sure to provide the "name" option.',
	            vnode.context
	          );
	        }
	      }
	      vnode.elm = vnode.ns
	        ? nodeOps.createElementNS(vnode.ns, tag)
	        : nodeOps.createElement(tag, vnode);
	      setScope(vnode);
	
	      /* istanbul ignore if */
	      {
	        createChildren(vnode, children, insertedVnodeQueue);
	        if (isDef(data)) {
	          invokeCreateHooks(vnode, insertedVnodeQueue);
	        }
	        insert(parentElm, vnode.elm, refElm);
	      }
	
	      if (process.env.NODE_ENV !== 'production' && data && data.pre) {
	        inPre--;
	      }
	    } else if (isTrue(vnode.isComment)) {
	      vnode.elm = nodeOps.createComment(vnode.text);
	      insert(parentElm, vnode.elm, refElm);
	    } else {
	      vnode.elm = nodeOps.createTextNode(vnode.text);
	      insert(parentElm, vnode.elm, refElm);
	    }
	  }
	
	  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
	    var i = vnode.data;
	    if (isDef(i)) {
	      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
	      if (isDef(i = i.hook) && isDef(i = i.init)) {
	        i(vnode, false /* hydrating */, parentElm, refElm);
	      }
	      // after calling the init hook, if the vnode is a child component
	      // it should've created a child instance and mounted it. the child
	      // component also has set the placeholder vnode's elm.
	      // in that case we can just return the element and be done.
	      if (isDef(vnode.componentInstance)) {
	        initComponent(vnode, insertedVnodeQueue);
	        if (isTrue(isReactivated)) {
	          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
	        }
	        return true
	      }
	    }
	  }
	
	  function initComponent (vnode, insertedVnodeQueue) {
	    if (isDef(vnode.data.pendingInsert)) {
	      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
	      vnode.data.pendingInsert = null;
	    }
	    vnode.elm = vnode.componentInstance.$el;
	    if (isPatchable(vnode)) {
	      invokeCreateHooks(vnode, insertedVnodeQueue);
	      setScope(vnode);
	    } else {
	      // empty component root.
	      // skip all element-related modules except for ref (#3455)
	      registerRef(vnode);
	      // make sure to invoke the insert hook
	      insertedVnodeQueue.push(vnode);
	    }
	  }
	
	  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
	    var i;
	    // hack for #4339: a reactivated component with inner transition
	    // does not trigger because the inner node's created hooks are not called
	    // again. It's not ideal to involve module-specific logic in here but
	    // there doesn't seem to be a better way to do it.
	    var innerNode = vnode;
	    while (innerNode.componentInstance) {
	      innerNode = innerNode.componentInstance._vnode;
	      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
	        for (i = 0; i < cbs.activate.length; ++i) {
	          cbs.activate[i](emptyNode, innerNode);
	        }
	        insertedVnodeQueue.push(innerNode);
	        break
	      }
	    }
	    // unlike a newly created component,
	    // a reactivated keep-alive component doesn't insert itself
	    insert(parentElm, vnode.elm, refElm);
	  }
	
	  function insert (parent, elm, ref) {
	    if (isDef(parent)) {
	      if (isDef(ref)) {
	        if (ref.parentNode === parent) {
	          nodeOps.insertBefore(parent, elm, ref);
	        }
	      } else {
	        nodeOps.appendChild(parent, elm);
	      }
	    }
	  }
	
	  function createChildren (vnode, children, insertedVnodeQueue) {
	    if (Array.isArray(children)) {
	      for (var i = 0; i < children.length; ++i) {
	        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
	      }
	    } else if (isPrimitive(vnode.text)) {
	      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
	    }
	  }
	
	  function isPatchable (vnode) {
	    while (vnode.componentInstance) {
	      vnode = vnode.componentInstance._vnode;
	    }
	    return isDef(vnode.tag)
	  }
	
	  function invokeCreateHooks (vnode, insertedVnodeQueue) {
	    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
	      cbs.create[i$1](emptyNode, vnode);
	    }
	    i = vnode.data.hook; // Reuse variable
	    if (isDef(i)) {
	      if (isDef(i.create)) { i.create(emptyNode, vnode); }
	      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
	    }
	  }
	
	  // set scope id attribute for scoped CSS.
	  // this is implemented as a special case to avoid the overhead
	  // of going through the normal attribute patching process.
	  function setScope (vnode) {
	    var i;
	    var ancestor = vnode;
	    while (ancestor) {
	      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
	        nodeOps.setAttribute(vnode.elm, i, '');
	      }
	      ancestor = ancestor.parent;
	    }
	    // for slot content they should also get the scopeId from the host instance.
	    if (isDef(i = activeInstance) &&
	      i !== vnode.context &&
	      isDef(i = i.$options._scopeId)
	    ) {
	      nodeOps.setAttribute(vnode.elm, i, '');
	    }
	  }
	
	  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
	    for (; startIdx <= endIdx; ++startIdx) {
	      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
	    }
	  }
	
	  function invokeDestroyHook (vnode) {
	    var i, j;
	    var data = vnode.data;
	    if (isDef(data)) {
	      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
	      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
	    }
	    if (isDef(i = vnode.children)) {
	      for (j = 0; j < vnode.children.length; ++j) {
	        invokeDestroyHook(vnode.children[j]);
	      }
	    }
	  }
	
	  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
	    for (; startIdx <= endIdx; ++startIdx) {
	      var ch = vnodes[startIdx];
	      if (isDef(ch)) {
	        if (isDef(ch.tag)) {
	          removeAndInvokeRemoveHook(ch);
	          invokeDestroyHook(ch);
	        } else { // Text node
	          removeNode(ch.elm);
	        }
	      }
	    }
	  }
	
	  function removeAndInvokeRemoveHook (vnode, rm) {
	    if (isDef(rm) || isDef(vnode.data)) {
	      var i;
	      var listeners = cbs.remove.length + 1;
	      if (isDef(rm)) {
	        // we have a recursively passed down rm callback
	        // increase the listeners count
	        rm.listeners += listeners;
	      } else {
	        // directly removing
	        rm = createRmCb(vnode.elm, listeners);
	      }
	      // recursively invoke hooks on child component root node
	      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
	        removeAndInvokeRemoveHook(i, rm);
	      }
	      for (i = 0; i < cbs.remove.length; ++i) {
	        cbs.remove[i](vnode, rm);
	      }
	      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
	        i(vnode, rm);
	      } else {
	        rm();
	      }
	    } else {
	      removeNode(vnode.elm);
	    }
	  }
	
	  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
	    var oldStartIdx = 0;
	    var newStartIdx = 0;
	    var oldEndIdx = oldCh.length - 1;
	    var oldStartVnode = oldCh[0];
	    var oldEndVnode = oldCh[oldEndIdx];
	    var newEndIdx = newCh.length - 1;
	    var newStartVnode = newCh[0];
	    var newEndVnode = newCh[newEndIdx];
	    var oldKeyToIdx, idxInOld, elmToMove, refElm;
	
	    // removeOnly is a special flag used only by <transition-group>
	    // to ensure removed elements stay in correct relative positions
	    // during leaving transitions
	    var canMove = !removeOnly;
	
	    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
	      if (isUndef(oldStartVnode)) {
	        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
	      } else if (isUndef(oldEndVnode)) {
	        oldEndVnode = oldCh[--oldEndIdx];
	      } else if (sameVnode(oldStartVnode, newStartVnode)) {
	        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
	        oldStartVnode = oldCh[++oldStartIdx];
	        newStartVnode = newCh[++newStartIdx];
	      } else if (sameVnode(oldEndVnode, newEndVnode)) {
	        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
	        oldEndVnode = oldCh[--oldEndIdx];
	        newEndVnode = newCh[--newEndIdx];
	      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
	        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
	        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
	        oldStartVnode = oldCh[++oldStartIdx];
	        newEndVnode = newCh[--newEndIdx];
	      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
	        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
	        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
	        oldEndVnode = oldCh[--oldEndIdx];
	        newStartVnode = newCh[++newStartIdx];
	      } else {
	        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
	        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;
	        if (isUndef(idxInOld)) { // New element
	          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
	          newStartVnode = newCh[++newStartIdx];
	        } else {
	          elmToMove = oldCh[idxInOld];
	          /* istanbul ignore if */
	          if (process.env.NODE_ENV !== 'production' && !elmToMove) {
	            warn(
	              'It seems there are duplicate keys that is causing an update error. ' +
	              'Make sure each v-for item has a unique key.'
	            );
	          }
	          if (sameVnode(elmToMove, newStartVnode)) {
	            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
	            oldCh[idxInOld] = undefined;
	            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);
	            newStartVnode = newCh[++newStartIdx];
	          } else {
	            // same key but different element. treat as new element
	            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
	            newStartVnode = newCh[++newStartIdx];
	          }
	        }
	      }
	    }
	    if (oldStartIdx > oldEndIdx) {
	      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
	      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
	    } else if (newStartIdx > newEndIdx) {
	      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
	    }
	  }
	
	  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {
	    if (oldVnode === vnode) {
	      return
	    }
	    // reuse element for static trees.
	    // note we only do this if the vnode is cloned -
	    // if the new node is not cloned it means the render functions have been
	    // reset by the hot-reload-api and we need to do a proper re-render.
	    if (isTrue(vnode.isStatic) &&
	      isTrue(oldVnode.isStatic) &&
	      vnode.key === oldVnode.key &&
	      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
	    ) {
	      vnode.elm = oldVnode.elm;
	      vnode.componentInstance = oldVnode.componentInstance;
	      return
	    }
	    var i;
	    var data = vnode.data;
	    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
	      i(oldVnode, vnode);
	    }
	    var elm = vnode.elm = oldVnode.elm;
	    var oldCh = oldVnode.children;
	    var ch = vnode.children;
	    if (isDef(data) && isPatchable(vnode)) {
	      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
	      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
	    }
	    if (isUndef(vnode.text)) {
	      if (isDef(oldCh) && isDef(ch)) {
	        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
	      } else if (isDef(ch)) {
	        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
	        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
	      } else if (isDef(oldCh)) {
	        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
	      } else if (isDef(oldVnode.text)) {
	        nodeOps.setTextContent(elm, '');
	      }
	    } else if (oldVnode.text !== vnode.text) {
	      nodeOps.setTextContent(elm, vnode.text);
	    }
	    if (isDef(data)) {
	      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
	    }
	  }
	
	  function invokeInsertHook (vnode, queue, initial) {
	    // delay insert hooks for component root nodes, invoke them after the
	    // element is really inserted
	    if (isTrue(initial) && isDef(vnode.parent)) {
	      vnode.parent.data.pendingInsert = queue;
	    } else {
	      for (var i = 0; i < queue.length; ++i) {
	        queue[i].data.hook.insert(queue[i]);
	      }
	    }
	  }
	
	  var bailed = false;
	  // list of modules that can skip create hook during hydration because they
	  // are already rendered on the client or has no need for initialization
	  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');
	
	  // Note: this is a browser-only function so we can assume elms are DOM nodes.
	  function hydrate (elm, vnode, insertedVnodeQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (!assertNodeMatch(elm, vnode)) {
	        return false
	      }
	    }
	    vnode.elm = elm;
	    var tag = vnode.tag;
	    var data = vnode.data;
	    var children = vnode.children;
	    if (isDef(data)) {
	      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
	      if (isDef(i = vnode.componentInstance)) {
	        // child component. it should have hydrated its own tree.
	        initComponent(vnode, insertedVnodeQueue);
	        return true
	      }
	    }
	    if (isDef(tag)) {
	      if (isDef(children)) {
	        // empty element, allow client to pick up and populate children
	        if (!elm.hasChildNodes()) {
	          createChildren(vnode, children, insertedVnodeQueue);
	        } else {
	          var childrenMatch = true;
	          var childNode = elm.firstChild;
	          for (var i$1 = 0; i$1 < children.length; i$1++) {
	            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
	              childrenMatch = false;
	              break
	            }
	            childNode = childNode.nextSibling;
	          }
	          // if childNode is not null, it means the actual childNodes list is
	          // longer than the virtual children list.
	          if (!childrenMatch || childNode) {
	            if (process.env.NODE_ENV !== 'production' &&
	              typeof console !== 'undefined' &&
	              !bailed
	            ) {
	              bailed = true;
	              console.warn('Parent: ', elm);
	              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
	            }
	            return false
	          }
	        }
	      }
	      if (isDef(data)) {
	        for (var key in data) {
	          if (!isRenderedModule(key)) {
	            invokeCreateHooks(vnode, insertedVnodeQueue);
	            break
	          }
	        }
	      }
	    } else if (elm.data !== vnode.text) {
	      elm.data = vnode.text;
	    }
	    return true
	  }
	
	  function assertNodeMatch (node, vnode) {
	    if (isDef(vnode.tag)) {
	      return (
	        vnode.tag.indexOf('vue-component') === 0 ||
	        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
	      )
	    } else {
	      return node.nodeType === (vnode.isComment ? 8 : 3)
	    }
	  }
	
	  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
	    if (isUndef(vnode)) {
	      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
	      return
	    }
	
	    var isInitialPatch = false;
	    var insertedVnodeQueue = [];
	
	    if (isUndef(oldVnode)) {
	      // empty mount (likely as component), create new root element
	      isInitialPatch = true;
	      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
	    } else {
	      var isRealElement = isDef(oldVnode.nodeType);
	      if (!isRealElement && sameVnode(oldVnode, vnode)) {
	        // patch existing root node
	        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
	      } else {
	        if (isRealElement) {
	          // mounting to a real element
	          // check if this is server-rendered content and if we can perform
	          // a successful hydration.
	          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
	            oldVnode.removeAttribute(SSR_ATTR);
	            hydrating = true;
	          }
	          if (isTrue(hydrating)) {
	            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
	              invokeInsertHook(vnode, insertedVnodeQueue, true);
	              return oldVnode
	            } else if (process.env.NODE_ENV !== 'production') {
	              warn(
	                'The client-side rendered virtual DOM tree is not matching ' +
	                'server-rendered content. This is likely caused by incorrect ' +
	                'HTML markup, for example nesting block-level elements inside ' +
	                '<p>, or missing <tbody>. Bailing hydration and performing ' +
	                'full client-side render.'
	              );
	            }
	          }
	          // either not server-rendered, or hydration failed.
	          // create an empty node and replace it
	          oldVnode = emptyNodeAt(oldVnode);
	        }
	        // replacing existing element
	        var oldElm = oldVnode.elm;
	        var parentElm$1 = nodeOps.parentNode(oldElm);
	        createElm(
	          vnode,
	          insertedVnodeQueue,
	          // extremely rare edge case: do not insert if old element is in a
	          // leaving transition. Only happens when combining transition +
	          // keep-alive + HOCs. (#4590)
	          oldElm._leaveCb ? null : parentElm$1,
	          nodeOps.nextSibling(oldElm)
	        );
	
	        if (isDef(vnode.parent)) {
	          // component root element replaced.
	          // update parent placeholder node element, recursively
	          var ancestor = vnode.parent;
	          while (ancestor) {
	            ancestor.elm = vnode.elm;
	            ancestor = ancestor.parent;
	          }
	          if (isPatchable(vnode)) {
	            for (var i = 0; i < cbs.create.length; ++i) {
	              cbs.create[i](emptyNode, vnode.parent);
	            }
	          }
	        }
	
	        if (isDef(parentElm$1)) {
	          removeVnodes(parentElm$1, [oldVnode], 0, 0);
	        } else if (isDef(oldVnode.tag)) {
	          invokeDestroyHook(oldVnode);
	        }
	      }
	    }
	
	    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
	    return vnode.elm
	  }
	}
	
	/*  */
	
	var directives = {
	  create: updateDirectives,
	  update: updateDirectives,
	  destroy: function unbindDirectives (vnode) {
	    updateDirectives(vnode, emptyNode);
	  }
	};
	
	function updateDirectives (oldVnode, vnode) {
	  if (oldVnode.data.directives || vnode.data.directives) {
	    _update(oldVnode, vnode);
	  }
	}
	
	function _update (oldVnode, vnode) {
	  var isCreate = oldVnode === emptyNode;
	  var isDestroy = vnode === emptyNode;
	  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
	  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
	
	  var dirsWithInsert = [];
	  var dirsWithPostpatch = [];
	
	  var key, oldDir, dir;
	  for (key in newDirs) {
	    oldDir = oldDirs[key];
	    dir = newDirs[key];
	    if (!oldDir) {
	      // new directive, bind
	      callHook$1(dir, 'bind', vnode, oldVnode);
	      if (dir.def && dir.def.inserted) {
	        dirsWithInsert.push(dir);
	      }
	    } else {
	      // existing directive, update
	      dir.oldValue = oldDir.value;
	      callHook$1(dir, 'update', vnode, oldVnode);
	      if (dir.def && dir.def.componentUpdated) {
	        dirsWithPostpatch.push(dir);
	      }
	    }
	  }
	
	  if (dirsWithInsert.length) {
	    var callInsert = function () {
	      for (var i = 0; i < dirsWithInsert.length; i++) {
	        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
	      }
	    };
	    if (isCreate) {
	      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);
	    } else {
	      callInsert();
	    }
	  }
	
	  if (dirsWithPostpatch.length) {
	    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
	      for (var i = 0; i < dirsWithPostpatch.length; i++) {
	        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
	      }
	    });
	  }
	
	  if (!isCreate) {
	    for (key in oldDirs) {
	      if (!newDirs[key]) {
	        // no longer present, unbind
	        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
	      }
	    }
	  }
	}
	
	var emptyModifiers = Object.create(null);
	
	function normalizeDirectives$1 (
	  dirs,
	  vm
	) {
	  var res = Object.create(null);
	  if (!dirs) {
	    return res
	  }
	  var i, dir;
	  for (i = 0; i < dirs.length; i++) {
	    dir = dirs[i];
	    if (!dir.modifiers) {
	      dir.modifiers = emptyModifiers;
	    }
	    res[getRawDirName(dir)] = dir;
	    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
	  }
	  return res
	}
	
	function getRawDirName (dir) {
	  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
	}
	
	function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
	  var fn = dir.def && dir.def[hook];
	  if (fn) {
	    try {
	      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
	    } catch (e) {
	      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
	    }
	  }
	}
	
	var baseModules = [
	  ref,
	  directives
	];
	
	/*  */
	
	function updateAttrs (oldVnode, vnode) {
	  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
	    return
	  }
	  var key, cur, old;
	  var elm = vnode.elm;
	  var oldAttrs = oldVnode.data.attrs || {};
	  var attrs = vnode.data.attrs || {};
	  // clone observed objects, as the user probably wants to mutate it
	  if (isDef(attrs.__ob__)) {
	    attrs = vnode.data.attrs = extend({}, attrs);
	  }
	
	  for (key in attrs) {
	    cur = attrs[key];
	    old = oldAttrs[key];
	    if (old !== cur) {
	      setAttr(elm, key, cur);
	    }
	  }
	  // #4391: in IE9, setting type can reset value for input[type=radio]
	  /* istanbul ignore if */
	  if (isIE9 && attrs.value !== oldAttrs.value) {
	    setAttr(elm, 'value', attrs.value);
	  }
	  for (key in oldAttrs) {
	    if (isUndef(attrs[key])) {
	      if (isXlink(key)) {
	        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
	      } else if (!isEnumeratedAttr(key)) {
	        elm.removeAttribute(key);
	      }
	    }
	  }
	}
	
	function setAttr (el, key, value) {
	  if (isBooleanAttr(key)) {
	    // set attribute for blank value
	    // e.g. <option disabled>Select one</option>
	    if (isFalsyAttrValue(value)) {
	      el.removeAttribute(key);
	    } else {
	      el.setAttribute(key, key);
	    }
	  } else if (isEnumeratedAttr(key)) {
	    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
	  } else if (isXlink(key)) {
	    if (isFalsyAttrValue(value)) {
	      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
	    } else {
	      el.setAttributeNS(xlinkNS, key, value);
	    }
	  } else {
	    if (isFalsyAttrValue(value)) {
	      el.removeAttribute(key);
	    } else {
	      el.setAttribute(key, value);
	    }
	  }
	}
	
	var attrs = {
	  create: updateAttrs,
	  update: updateAttrs
	};
	
	/*  */
	
	function updateClass (oldVnode, vnode) {
	  var el = vnode.elm;
	  var data = vnode.data;
	  var oldData = oldVnode.data;
	  if (
	    isUndef(data.staticClass) &&
	    isUndef(data.class) && (
	      isUndef(oldData) || (
	        isUndef(oldData.staticClass) &&
	        isUndef(oldData.class)
	      )
	    )
	  ) {
	    return
	  }
	
	  var cls = genClassForVnode(vnode);
	
	  // handle transition classes
	  var transitionClass = el._transitionClasses;
	  if (isDef(transitionClass)) {
	    cls = concat(cls, stringifyClass(transitionClass));
	  }
	
	  // set the class
	  if (cls !== el._prevClass) {
	    el.setAttribute('class', cls);
	    el._prevClass = cls;
	  }
	}
	
	var klass = {
	  create: updateClass,
	  update: updateClass
	};
	
	/*  */
	
	var validDivisionCharRE = /[\w).+\-_$\]]/;
	
	
	
	function wrapFilter (exp, filter) {
	  var i = filter.indexOf('(');
	  if (i < 0) {
	    // _f: resolveFilter
	    return ("_f(\"" + filter + "\")(" + exp + ")")
	  } else {
	    var name = filter.slice(0, i);
	    var args = filter.slice(i + 1);
	    return ("_f(\"" + name + "\")(" + exp + "," + args)
	  }
	}
	
	/*  */
	
	/*  */
	
	/**
	 * Cross-platform code generation for component v-model
	 */
	
	
	/**
	 * Cross-platform codegen helper for generating v-model value assignment code.
	 */
	
	
	/**
	 * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)
	 *
	 * for loop possible cases:
	 *
	 * - test
	 * - test[idx]
	 * - test[test1[idx]]
	 * - test["a"][idx]
	 * - xxx.test[a[a].test1[idx]]
	 * - test.xxx.a["asa"][test1[idx]]
	 *
	 */
	
	var str;
	var index$1;
	
	/*  */
	
	// in some cases, the event used has to be determined at runtime
	// so we used some reserved tokens during compile.
	var RANGE_TOKEN = '__r';
	var CHECKBOX_RADIO_TOKEN = '__c';
	
	/*  */
	
	// normalize v-model event tokens that can only be determined at runtime.
	// it's important to place the event as the first in the array because
	// the whole point is ensuring the v-model callback gets called before
	// user-attached handlers.
	function normalizeEvents (on) {
	  var event;
	  /* istanbul ignore if */
	  if (isDef(on[RANGE_TOKEN])) {
	    // IE input[type=range] only supports `change` event
	    event = isIE ? 'change' : 'input';
	    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
	    delete on[RANGE_TOKEN];
	  }
	  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
	    // Chrome fires microtasks in between click/change, leads to #4521
	    event = isChrome ? 'click' : 'change';
	    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);
	    delete on[CHECKBOX_RADIO_TOKEN];
	  }
	}
	
	var target$1;
	
	function add$1 (
	  event,
	  handler,
	  once$$1,
	  capture,
	  passive
	) {
	  if (once$$1) {
	    var oldHandler = handler;
	    var _target = target$1; // save current target element in closure
	    handler = function (ev) {
	      var res = arguments.length === 1
	        ? oldHandler(ev)
	        : oldHandler.apply(null, arguments);
	      if (res !== null) {
	        remove$2(event, handler, capture, _target);
	      }
	    };
	  }
	  target$1.addEventListener(
	    event,
	    handler,
	    supportsPassive
	      ? { capture: capture, passive: passive }
	      : capture
	  );
	}
	
	function remove$2 (
	  event,
	  handler,
	  capture,
	  _target
	) {
	  (_target || target$1).removeEventListener(event, handler, capture);
	}
	
	function updateDOMListeners (oldVnode, vnode) {
	  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
	    return
	  }
	  var on = vnode.data.on || {};
	  var oldOn = oldVnode.data.on || {};
	  target$1 = vnode.elm;
	  normalizeEvents(on);
	  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
	}
	
	var events = {
	  create: updateDOMListeners,
	  update: updateDOMListeners
	};
	
	/*  */
	
	function updateDOMProps (oldVnode, vnode) {
	  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
	    return
	  }
	  var key, cur;
	  var elm = vnode.elm;
	  var oldProps = oldVnode.data.domProps || {};
	  var props = vnode.data.domProps || {};
	  // clone observed objects, as the user probably wants to mutate it
	  if (isDef(props.__ob__)) {
	    props = vnode.data.domProps = extend({}, props);
	  }
	
	  for (key in oldProps) {
	    if (isUndef(props[key])) {
	      elm[key] = '';
	    }
	  }
	  for (key in props) {
	    cur = props[key];
	    // ignore children if the node has textContent or innerHTML,
	    // as these will throw away existing DOM nodes and cause removal errors
	    // on subsequent patches (#3360)
	    if (key === 'textContent' || key === 'innerHTML') {
	      if (vnode.children) { vnode.children.length = 0; }
	      if (cur === oldProps[key]) { continue }
	    }
	
	    if (key === 'value') {
	      // store value as _value as well since
	      // non-string values will be stringified
	      elm._value = cur;
	      // avoid resetting cursor position when value is the same
	      var strCur = isUndef(cur) ? '' : String(cur);
	      if (shouldUpdateValue(elm, vnode, strCur)) {
	        elm.value = strCur;
	      }
	    } else {
	      elm[key] = cur;
	    }
	  }
	}
	
	// check platforms/web/util/attrs.js acceptValue
	
	
	function shouldUpdateValue (
	  elm,
	  vnode,
	  checkVal
	) {
	  return (!elm.composing && (
	    vnode.tag === 'option' ||
	    isDirty(elm, checkVal) ||
	    isInputChanged(elm, checkVal)
	  ))
	}
	
	function isDirty (elm, checkVal) {
	  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value
	  return document.activeElement !== elm && elm.value !== checkVal
	}
	
	function isInputChanged (elm, newVal) {
	  var value = elm.value;
	  var modifiers = elm._vModifiers; // injected by v-model runtime
	  if ((isDef(modifiers) && modifiers.number) || elm.type === 'number') {
	    return toNumber(value) !== toNumber(newVal)
	  }
	  if (isDef(modifiers) && modifiers.trim) {
	    return value.trim() !== newVal.trim()
	  }
	  return value !== newVal
	}
	
	var domProps = {
	  create: updateDOMProps,
	  update: updateDOMProps
	};
	
	/*  */
	
	var parseStyleText = cached(function (cssText) {
	  var res = {};
	  var listDelimiter = /;(?![^(]*\))/g;
	  var propertyDelimiter = /:(.+)/;
	  cssText.split(listDelimiter).forEach(function (item) {
	    if (item) {
	      var tmp = item.split(propertyDelimiter);
	      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
	    }
	  });
	  return res
	});
	
	// merge static and dynamic style data on the same vnode
	function normalizeStyleData (data) {
	  var style = normalizeStyleBinding(data.style);
	  // static style is pre-processed into an object during compilation
	  // and is always a fresh object, so it's safe to merge into it
	  return data.staticStyle
	    ? extend(data.staticStyle, style)
	    : style
	}
	
	// normalize possible array / string values into Object
	function normalizeStyleBinding (bindingStyle) {
	  if (Array.isArray(bindingStyle)) {
	    return toObject(bindingStyle)
	  }
	  if (typeof bindingStyle === 'string') {
	    return parseStyleText(bindingStyle)
	  }
	  return bindingStyle
	}
	
	/**
	 * parent component style should be after child's
	 * so that parent component's style could override it
	 */
	function getStyle (vnode, checkChild) {
	  var res = {};
	  var styleData;
	
	  if (checkChild) {
	    var childNode = vnode;
	    while (childNode.componentInstance) {
	      childNode = childNode.componentInstance._vnode;
	      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
	        extend(res, styleData);
	      }
	    }
	  }
	
	  if ((styleData = normalizeStyleData(vnode.data))) {
	    extend(res, styleData);
	  }
	
	  var parentNode = vnode;
	  while ((parentNode = parentNode.parent)) {
	    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
	      extend(res, styleData);
	    }
	  }
	  return res
	}
	
	/*  */
	
	var cssVarRE = /^--/;
	var importantRE = /\s*!important$/;
	var setProp = function (el, name, val) {
	  /* istanbul ignore if */
	  if (cssVarRE.test(name)) {
	    el.style.setProperty(name, val);
	  } else if (importantRE.test(val)) {
	    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
	  } else {
	    var normalizedName = normalize(name);
	    if (Array.isArray(val)) {
	      // Support values array created by autoprefixer, e.g.
	      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
	      // Set them one by one, and the browser will only set those it can recognize
	      for (var i = 0, len = val.length; i < len; i++) {
	        el.style[normalizedName] = val[i];
	      }
	    } else {
	      el.style[normalizedName] = val;
	    }
	  }
	};
	
	var prefixes = ['Webkit', 'Moz', 'ms'];
	
	var testEl;
	var normalize = cached(function (prop) {
	  testEl = testEl || document.createElement('div');
	  prop = camelize(prop);
	  if (prop !== 'filter' && (prop in testEl.style)) {
	    return prop
	  }
	  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);
	  for (var i = 0; i < prefixes.length; i++) {
	    var prefixed = prefixes[i] + upper;
	    if (prefixed in testEl.style) {
	      return prefixed
	    }
	  }
	});
	
	function updateStyle (oldVnode, vnode) {
	  var data = vnode.data;
	  var oldData = oldVnode.data;
	
	  if (isUndef(data.staticStyle) && isUndef(data.style) &&
	    isUndef(oldData.staticStyle) && isUndef(oldData.style)
	  ) {
	    return
	  }
	
	  var cur, name;
	  var el = vnode.elm;
	  var oldStaticStyle = oldData.staticStyle;
	  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};
	
	  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
	  var oldStyle = oldStaticStyle || oldStyleBinding;
	
	  var style = normalizeStyleBinding(vnode.data.style) || {};
	
	  // store normalized style under a different key for next diff
	  // make sure to clone it if it's reactive, since the user likley wants
	  // to mutate it.
	  vnode.data.normalizedStyle = isDef(style.__ob__)
	    ? extend({}, style)
	    : style;
	
	  var newStyle = getStyle(vnode, true);
	
	  for (name in oldStyle) {
	    if (isUndef(newStyle[name])) {
	      setProp(el, name, '');
	    }
	  }
	  for (name in newStyle) {
	    cur = newStyle[name];
	    if (cur !== oldStyle[name]) {
	      // ie9 setting to null has no effect, must use empty string
	      setProp(el, name, cur == null ? '' : cur);
	    }
	  }
	}
	
	var style = {
	  create: updateStyle,
	  update: updateStyle
	};
	
	/*  */
	
	/**
	 * Add class with compatibility for SVG since classList is not supported on
	 * SVG elements in IE
	 */
	function addClass (el, cls) {
	  /* istanbul ignore if */
	  if (!cls || !(cls = cls.trim())) {
	    return
	  }
	
	  /* istanbul ignore else */
	  if (el.classList) {
	    if (cls.indexOf(' ') > -1) {
	      cls.split(/\s+/).forEach(function (c) { return el.classList.add(c); });
	    } else {
	      el.classList.add(cls);
	    }
	  } else {
	    var cur = " " + (el.getAttribute('class') || '') + " ";
	    if (cur.indexOf(' ' + cls + ' ') < 0) {
	      el.setAttribute('class', (cur + cls).trim());
	    }
	  }
	}
	
	/**
	 * Remove class with compatibility for SVG since classList is not supported on
	 * SVG elements in IE
	 */
	function removeClass (el, cls) {
	  /* istanbul ignore if */
	  if (!cls || !(cls = cls.trim())) {
	    return
	  }
	
	  /* istanbul ignore else */
	  if (el.classList) {
	    if (cls.indexOf(' ') > -1) {
	      cls.split(/\s+/).forEach(function (c) { return el.classList.remove(c); });
	    } else {
	      el.classList.remove(cls);
	    }
	  } else {
	    var cur = " " + (el.getAttribute('class') || '') + " ";
	    var tar = ' ' + cls + ' ';
	    while (cur.indexOf(tar) >= 0) {
	      cur = cur.replace(tar, ' ');
	    }
	    el.setAttribute('class', cur.trim());
	  }
	}
	
	/*  */
	
	function resolveTransition (def$$1) {
	  if (!def$$1) {
	    return
	  }
	  /* istanbul ignore else */
	  if (typeof def$$1 === 'object') {
	    var res = {};
	    if (def$$1.css !== false) {
	      extend(res, autoCssTransition(def$$1.name || 'v'));
	    }
	    extend(res, def$$1);
	    return res
	  } else if (typeof def$$1 === 'string') {
	    return autoCssTransition(def$$1)
	  }
	}
	
	var autoCssTransition = cached(function (name) {
	  return {
	    enterClass: (name + "-enter"),
	    enterToClass: (name + "-enter-to"),
	    enterActiveClass: (name + "-enter-active"),
	    leaveClass: (name + "-leave"),
	    leaveToClass: (name + "-leave-to"),
	    leaveActiveClass: (name + "-leave-active")
	  }
	});
	
	var hasTransition = inBrowser && !isIE9;
	var TRANSITION = 'transition';
	var ANIMATION = 'animation';
	
	// Transition property/event sniffing
	var transitionProp = 'transition';
	var transitionEndEvent = 'transitionend';
	var animationProp = 'animation';
	var animationEndEvent = 'animationend';
	if (hasTransition) {
	  /* istanbul ignore if */
	  if (window.ontransitionend === undefined &&
	    window.onwebkittransitionend !== undefined
	  ) {
	    transitionProp = 'WebkitTransition';
	    transitionEndEvent = 'webkitTransitionEnd';
	  }
	  if (window.onanimationend === undefined &&
	    window.onwebkitanimationend !== undefined
	  ) {
	    animationProp = 'WebkitAnimation';
	    animationEndEvent = 'webkitAnimationEnd';
	  }
	}
	
	// binding to window is necessary to make hot reload work in IE in strict mode
	var raf = inBrowser && window.requestAnimationFrame
	  ? window.requestAnimationFrame.bind(window)
	  : setTimeout;
	
	function nextFrame (fn) {
	  raf(function () {
	    raf(fn);
	  });
	}
	
	function addTransitionClass (el, cls) {
	  (el._transitionClasses || (el._transitionClasses = [])).push(cls);
	  addClass(el, cls);
	}
	
	function removeTransitionClass (el, cls) {
	  if (el._transitionClasses) {
	    remove(el._transitionClasses, cls);
	  }
	  removeClass(el, cls);
	}
	
	function whenTransitionEnds (
	  el,
	  expectedType,
	  cb
	) {
	  var ref = getTransitionInfo(el, expectedType);
	  var type = ref.type;
	  var timeout = ref.timeout;
	  var propCount = ref.propCount;
	  if (!type) { return cb() }
	  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
	  var ended = 0;
	  var end = function () {
	    el.removeEventListener(event, onEnd);
	    cb();
	  };
	  var onEnd = function (e) {
	    if (e.target === el) {
	      if (++ended >= propCount) {
	        end();
	      }
	    }
	  };
	  setTimeout(function () {
	    if (ended < propCount) {
	      end();
	    }
	  }, timeout + 1);
	  el.addEventListener(event, onEnd);
	}
	
	var transformRE = /\b(transform|all)(,|$)/;
	
	function getTransitionInfo (el, expectedType) {
	  var styles = window.getComputedStyle(el);
	  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
	  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
	  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
	  var animationDelays = styles[animationProp + 'Delay'].split(', ');
	  var animationDurations = styles[animationProp + 'Duration'].split(', ');
	  var animationTimeout = getTimeout(animationDelays, animationDurations);
	
	  var type;
	  var timeout = 0;
	  var propCount = 0;
	  /* istanbul ignore if */
	  if (expectedType === TRANSITION) {
	    if (transitionTimeout > 0) {
	      type = TRANSITION;
	      timeout = transitionTimeout;
	      propCount = transitionDurations.length;
	    }
	  } else if (expectedType === ANIMATION) {
	    if (animationTimeout > 0) {
	      type = ANIMATION;
	      timeout = animationTimeout;
	      propCount = animationDurations.length;
	    }
	  } else {
	    timeout = Math.max(transitionTimeout, animationTimeout);
	    type = timeout > 0
	      ? transitionTimeout > animationTimeout
	        ? TRANSITION
	        : ANIMATION
	      : null;
	    propCount = type
	      ? type === TRANSITION
	        ? transitionDurations.length
	        : animationDurations.length
	      : 0;
	  }
	  var hasTransform =
	    type === TRANSITION &&
	    transformRE.test(styles[transitionProp + 'Property']);
	  return {
	    type: type,
	    timeout: timeout,
	    propCount: propCount,
	    hasTransform: hasTransform
	  }
	}
	
	function getTimeout (delays, durations) {
	  /* istanbul ignore next */
	  while (delays.length < durations.length) {
	    delays = delays.concat(delays);
	  }
	
	  return Math.max.apply(null, durations.map(function (d, i) {
	    return toMs(d) + toMs(delays[i])
	  }))
	}
	
	function toMs (s) {
	  return Number(s.slice(0, -1)) * 1000
	}
	
	/*  */
	
	function enter (vnode, toggleDisplay) {
	  var el = vnode.elm;
	
	  // call leave callback now
	  if (isDef(el._leaveCb)) {
	    el._leaveCb.cancelled = true;
	    el._leaveCb();
	  }
	
	  var data = resolveTransition(vnode.data.transition);
	  if (isUndef(data)) {
	    return
	  }
	
	  /* istanbul ignore if */
	  if (isDef(el._enterCb) || el.nodeType !== 1) {
	    return
	  }
	
	  var css = data.css;
	  var type = data.type;
	  var enterClass = data.enterClass;
	  var enterToClass = data.enterToClass;
	  var enterActiveClass = data.enterActiveClass;
	  var appearClass = data.appearClass;
	  var appearToClass = data.appearToClass;
	  var appearActiveClass = data.appearActiveClass;
	  var beforeEnter = data.beforeEnter;
	  var enter = data.enter;
	  var afterEnter = data.afterEnter;
	  var enterCancelled = data.enterCancelled;
	  var beforeAppear = data.beforeAppear;
	  var appear = data.appear;
	  var afterAppear = data.afterAppear;
	  var appearCancelled = data.appearCancelled;
	  var duration = data.duration;
	
	  // activeInstance will always be the <transition> component managing this
	  // transition. One edge case to check is when the <transition> is placed
	  // as the root node of a child component. In that case we need to check
	  // <transition>'s parent for appear check.
	  var context = activeInstance;
	  var transitionNode = activeInstance.$vnode;
	  while (transitionNode && transitionNode.parent) {
	    transitionNode = transitionNode.parent;
	    context = transitionNode.context;
	  }
	
	  var isAppear = !context._isMounted || !vnode.isRootInsert;
	
	  if (isAppear && !appear && appear !== '') {
	    return
	  }
	
	  var startClass = isAppear && appearClass
	    ? appearClass
	    : enterClass;
	  var activeClass = isAppear && appearActiveClass
	    ? appearActiveClass
	    : enterActiveClass;
	  var toClass = isAppear && appearToClass
	    ? appearToClass
	    : enterToClass;
	
	  var beforeEnterHook = isAppear
	    ? (beforeAppear || beforeEnter)
	    : beforeEnter;
	  var enterHook = isAppear
	    ? (typeof appear === 'function' ? appear : enter)
	    : enter;
	  var afterEnterHook = isAppear
	    ? (afterAppear || afterEnter)
	    : afterEnter;
	  var enterCancelledHook = isAppear
	    ? (appearCancelled || enterCancelled)
	    : enterCancelled;
	
	  var explicitEnterDuration = toNumber(
	    isObject(duration)
	      ? duration.enter
	      : duration
	  );
	
	  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {
	    checkDuration(explicitEnterDuration, 'enter', vnode);
	  }
	
	  var expectsCSS = css !== false && !isIE9;
	  var userWantsControl = getHookArgumentsLength(enterHook);
	
	  var cb = el._enterCb = once(function () {
	    if (expectsCSS) {
	      removeTransitionClass(el, toClass);
	      removeTransitionClass(el, activeClass);
	    }
	    if (cb.cancelled) {
	      if (expectsCSS) {
	        removeTransitionClass(el, startClass);
	      }
	      enterCancelledHook && enterCancelledHook(el);
	    } else {
	      afterEnterHook && afterEnterHook(el);
	    }
	    el._enterCb = null;
	  });
	
	  if (!vnode.data.show) {
	    // remove pending leave element on enter by injecting an insert hook
	    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
	      var parent = el.parentNode;
	      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
	      if (pendingNode &&
	        pendingNode.tag === vnode.tag &&
	        pendingNode.elm._leaveCb
	      ) {
	        pendingNode.elm._leaveCb();
	      }
	      enterHook && enterHook(el, cb);
	    });
	  }
	
	  // start enter transition
	  beforeEnterHook && beforeEnterHook(el);
	  if (expectsCSS) {
	    addTransitionClass(el, startClass);
	    addTransitionClass(el, activeClass);
	    nextFrame(function () {
	      addTransitionClass(el, toClass);
	      removeTransitionClass(el, startClass);
	      if (!cb.cancelled && !userWantsControl) {
	        if (isValidDuration(explicitEnterDuration)) {
	          setTimeout(cb, explicitEnterDuration);
	        } else {
	          whenTransitionEnds(el, type, cb);
	        }
	      }
	    });
	  }
	
	  if (vnode.data.show) {
	    toggleDisplay && toggleDisplay();
	    enterHook && enterHook(el, cb);
	  }
	
	  if (!expectsCSS && !userWantsControl) {
	    cb();
	  }
	}
	
	function leave (vnode, rm) {
	  var el = vnode.elm;
	
	  // call enter callback now
	  if (isDef(el._enterCb)) {
	    el._enterCb.cancelled = true;
	    el._enterCb();
	  }
	
	  var data = resolveTransition(vnode.data.transition);
	  if (isUndef(data)) {
	    return rm()
	  }
	
	  /* istanbul ignore if */
	  if (isDef(el._leaveCb) || el.nodeType !== 1) {
	    return
	  }
	
	  var css = data.css;
	  var type = data.type;
	  var leaveClass = data.leaveClass;
	  var leaveToClass = data.leaveToClass;
	  var leaveActiveClass = data.leaveActiveClass;
	  var beforeLeave = data.beforeLeave;
	  var leave = data.leave;
	  var afterLeave = data.afterLeave;
	  var leaveCancelled = data.leaveCancelled;
	  var delayLeave = data.delayLeave;
	  var duration = data.duration;
	
	  var expectsCSS = css !== false && !isIE9;
	  var userWantsControl = getHookArgumentsLength(leave);
	
	  var explicitLeaveDuration = toNumber(
	    isObject(duration)
	      ? duration.leave
	      : duration
	  );
	
	  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {
	    checkDuration(explicitLeaveDuration, 'leave', vnode);
	  }
	
	  var cb = el._leaveCb = once(function () {
	    if (el.parentNode && el.parentNode._pending) {
	      el.parentNode._pending[vnode.key] = null;
	    }
	    if (expectsCSS) {
	      removeTransitionClass(el, leaveToClass);
	      removeTransitionClass(el, leaveActiveClass);
	    }
	    if (cb.cancelled) {
	      if (expectsCSS) {
	        removeTransitionClass(el, leaveClass);
	      }
	      leaveCancelled && leaveCancelled(el);
	    } else {
	      rm();
	      afterLeave && afterLeave(el);
	    }
	    el._leaveCb = null;
	  });
	
	  if (delayLeave) {
	    delayLeave(performLeave);
	  } else {
	    performLeave();
	  }
	
	  function performLeave () {
	    // the delayed leave may have already been cancelled
	    if (cb.cancelled) {
	      return
	    }
	    // record leaving element
	    if (!vnode.data.show) {
	      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
	    }
	    beforeLeave && beforeLeave(el);
	    if (expectsCSS) {
	      addTransitionClass(el, leaveClass);
	      addTransitionClass(el, leaveActiveClass);
	      nextFrame(function () {
	        addTransitionClass(el, leaveToClass);
	        removeTransitionClass(el, leaveClass);
	        if (!cb.cancelled && !userWantsControl) {
	          if (isValidDuration(explicitLeaveDuration)) {
	            setTimeout(cb, explicitLeaveDuration);
	          } else {
	            whenTransitionEnds(el, type, cb);
	          }
	        }
	      });
	    }
	    leave && leave(el, cb);
	    if (!expectsCSS && !userWantsControl) {
	      cb();
	    }
	  }
	}
	
	// only used in dev mode
	function checkDuration (val, name, vnode) {
	  if (typeof val !== 'number') {
	    warn(
	      "<transition> explicit " + name + " duration is not a valid number - " +
	      "got " + (JSON.stringify(val)) + ".",
	      vnode.context
	    );
	  } else if (isNaN(val)) {
	    warn(
	      "<transition> explicit " + name + " duration is NaN - " +
	      'the duration expression might be incorrect.',
	      vnode.context
	    );
	  }
	}
	
	function isValidDuration (val) {
	  return typeof val === 'number' && !isNaN(val)
	}
	
	/**
	 * Normalize a transition hook's argument length. The hook may be:
	 * - a merged hook (invoker) with the original in .fns
	 * - a wrapped component method (check ._length)
	 * - a plain function (.length)
	 */
	function getHookArgumentsLength (fn) {
	  if (isUndef(fn)) {
	    return false
	  }
	  var invokerFns = fn.fns;
	  if (isDef(invokerFns)) {
	    // invoker
	    return getHookArgumentsLength(
	      Array.isArray(invokerFns)
	        ? invokerFns[0]
	        : invokerFns
	    )
	  } else {
	    return (fn._length || fn.length) > 1
	  }
	}
	
	function _enter (_, vnode) {
	  if (vnode.data.show !== true) {
	    enter(vnode);
	  }
	}
	
	var transition = inBrowser ? {
	  create: _enter,
	  activate: _enter,
	  remove: function remove$$1 (vnode, rm) {
	    /* istanbul ignore else */
	    if (vnode.data.show !== true) {
	      leave(vnode, rm);
	    } else {
	      rm();
	    }
	  }
	} : {};
	
	var platformModules = [
	  attrs,
	  klass,
	  events,
	  domProps,
	  style,
	  transition
	];
	
	/*  */
	
	// the directive module should be applied last, after all
	// built-in modules have been applied.
	var modules = platformModules.concat(baseModules);
	
	var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });
	
	/**
	 * Not type checking this file because flow doesn't like attaching
	 * properties to Elements.
	 */
	
	/* istanbul ignore if */
	if (isIE9) {
	  // http://www.matts411.com/post/internet-explorer-9-oninput/
	  document.addEventListener('selectionchange', function () {
	    var el = document.activeElement;
	    if (el && el.vmodel) {
	      trigger(el, 'input');
	    }
	  });
	}
	
	var model$1 = {
	  inserted: function inserted (el, binding, vnode) {
	    if (vnode.tag === 'select') {
	      var cb = function () {
	        setSelected(el, binding, vnode.context);
	      };
	      cb();
	      /* istanbul ignore if */
	      if (isIE || isEdge) {
	        setTimeout(cb, 0);
	      }
	    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {
	      el._vModifiers = binding.modifiers;
	      if (!binding.modifiers.lazy) {
	        // Safari < 10.2 & UIWebView doesn't fire compositionend when
	        // switching focus before confirming composition choice
	        // this also fixes the issue where some browsers e.g. iOS Chrome
	        // fires "change" instead of "input" on autocomplete.
	        el.addEventListener('change', onCompositionEnd);
	        if (!isAndroid) {
	          el.addEventListener('compositionstart', onCompositionStart);
	          el.addEventListener('compositionend', onCompositionEnd);
	        }
	        /* istanbul ignore if */
	        if (isIE9) {
	          el.vmodel = true;
	        }
	      }
	    }
	  },
	  componentUpdated: function componentUpdated (el, binding, vnode) {
	    if (vnode.tag === 'select') {
	      setSelected(el, binding, vnode.context);
	      // in case the options rendered by v-for have changed,
	      // it's possible that the value is out-of-sync with the rendered options.
	      // detect such cases and filter out values that no longer has a matching
	      // option in the DOM.
	      var needReset = el.multiple
	        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })
	        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);
	      if (needReset) {
	        trigger(el, 'change');
	      }
	    }
	  }
	};
	
	function setSelected (el, binding, vm) {
	  var value = binding.value;
	  var isMultiple = el.multiple;
	  if (isMultiple && !Array.isArray(value)) {
	    process.env.NODE_ENV !== 'production' && warn(
	      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
	      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
	      vm
	    );
	    return
	  }
	  var selected, option;
	  for (var i = 0, l = el.options.length; i < l; i++) {
	    option = el.options[i];
	    if (isMultiple) {
	      selected = looseIndexOf(value, getValue(option)) > -1;
	      if (option.selected !== selected) {
	        option.selected = selected;
	      }
	    } else {
	      if (looseEqual(getValue(option), value)) {
	        if (el.selectedIndex !== i) {
	          el.selectedIndex = i;
	        }
	        return
	      }
	    }
	  }
	  if (!isMultiple) {
	    el.selectedIndex = -1;
	  }
	}
	
	function hasNoMatchingOption (value, options) {
	  for (var i = 0, l = options.length; i < l; i++) {
	    if (looseEqual(getValue(options[i]), value)) {
	      return false
	    }
	  }
	  return true
	}
	
	function getValue (option) {
	  return '_value' in option
	    ? option._value
	    : option.value
	}
	
	function onCompositionStart (e) {
	  e.target.composing = true;
	}
	
	function onCompositionEnd (e) {
	  // prevent triggering an input event for no reason
	  if (!e.target.composing) { return }
	  e.target.composing = false;
	  trigger(e.target, 'input');
	}
	
	function trigger (el, type) {
	  var e = document.createEvent('HTMLEvents');
	  e.initEvent(type, true, true);
	  el.dispatchEvent(e);
	}
	
	/*  */
	
	// recursively search for possible transition defined inside the component root
	function locateNode (vnode) {
	  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
	    ? locateNode(vnode.componentInstance._vnode)
	    : vnode
	}
	
	var show = {
	  bind: function bind (el, ref, vnode) {
	    var value = ref.value;
	
	    vnode = locateNode(vnode);
	    var transition = vnode.data && vnode.data.transition;
	    var originalDisplay = el.__vOriginalDisplay =
	      el.style.display === 'none' ? '' : el.style.display;
	    if (value && transition && !isIE9) {
	      vnode.data.show = true;
	      enter(vnode, function () {
	        el.style.display = originalDisplay;
	      });
	    } else {
	      el.style.display = value ? originalDisplay : 'none';
	    }
	  },
	
	  update: function update (el, ref, vnode) {
	    var value = ref.value;
	    var oldValue = ref.oldValue;
	
	    /* istanbul ignore if */
	    if (value === oldValue) { return }
	    vnode = locateNode(vnode);
	    var transition = vnode.data && vnode.data.transition;
	    if (transition && !isIE9) {
	      vnode.data.show = true;
	      if (value) {
	        enter(vnode, function () {
	          el.style.display = el.__vOriginalDisplay;
	        });
	      } else {
	        leave(vnode, function () {
	          el.style.display = 'none';
	        });
	      }
	    } else {
	      el.style.display = value ? el.__vOriginalDisplay : 'none';
	    }
	  },
	
	  unbind: function unbind (
	    el,
	    binding,
	    vnode,
	    oldVnode,
	    isDestroy
	  ) {
	    if (!isDestroy) {
	      el.style.display = el.__vOriginalDisplay;
	    }
	  }
	};
	
	var platformDirectives = {
	  model: model$1,
	  show: show
	};
	
	/*  */
	
	// Provides transition support for a single element/component.
	// supports transition mode (out-in / in-out)
	
	var transitionProps = {
	  name: String,
	  appear: Boolean,
	  css: Boolean,
	  mode: String,
	  type: String,
	  enterClass: String,
	  leaveClass: String,
	  enterToClass: String,
	  leaveToClass: String,
	  enterActiveClass: String,
	  leaveActiveClass: String,
	  appearClass: String,
	  appearActiveClass: String,
	  appearToClass: String,
	  duration: [Number, String, Object]
	};
	
	// in case the child is also an abstract component, e.g. <keep-alive>
	// we want to recursively retrieve the real component to be rendered
	function getRealChild (vnode) {
	  var compOptions = vnode && vnode.componentOptions;
	  if (compOptions && compOptions.Ctor.options.abstract) {
	    return getRealChild(getFirstComponentChild(compOptions.children))
	  } else {
	    return vnode
	  }
	}
	
	function extractTransitionData (comp) {
	  var data = {};
	  var options = comp.$options;
	  // props
	  for (var key in options.propsData) {
	    data[key] = comp[key];
	  }
	  // events.
	  // extract listeners and pass them directly to the transition methods
	  var listeners = options._parentListeners;
	  for (var key$1 in listeners) {
	    data[camelize(key$1)] = listeners[key$1];
	  }
	  return data
	}
	
	function placeholder (h, rawChild) {
	  if (/\d-keep-alive$/.test(rawChild.tag)) {
	    return h('keep-alive', {
	      props: rawChild.componentOptions.propsData
	    })
	  }
	}
	
	function hasParentTransition (vnode) {
	  while ((vnode = vnode.parent)) {
	    if (vnode.data.transition) {
	      return true
	    }
	  }
	}
	
	function isSameChild (child, oldChild) {
	  return oldChild.key === child.key && oldChild.tag === child.tag
	}
	
	var Transition = {
	  name: 'transition',
	  props: transitionProps,
	  abstract: true,
	
	  render: function render (h) {
	    var this$1 = this;
	
	    var children = this.$slots.default;
	    if (!children) {
	      return
	    }
	
	    // filter out text nodes (possible whitespaces)
	    children = children.filter(function (c) { return c.tag; });
	    /* istanbul ignore if */
	    if (!children.length) {
	      return
	    }
	
	    // warn multiple elements
	    if (process.env.NODE_ENV !== 'production' && children.length > 1) {
	      warn(
	        '<transition> can only be used on a single element. Use ' +
	        '<transition-group> for lists.',
	        this.$parent
	      );
	    }
	
	    var mode = this.mode;
	
	    // warn invalid mode
	    if (process.env.NODE_ENV !== 'production' &&
	      mode && mode !== 'in-out' && mode !== 'out-in'
	    ) {
	      warn(
	        'invalid <transition> mode: ' + mode,
	        this.$parent
	      );
	    }
	
	    var rawChild = children[0];
	
	    // if this is a component root node and the component's
	    // parent container node also has transition, skip.
	    if (hasParentTransition(this.$vnode)) {
	      return rawChild
	    }
	
	    // apply transition data to child
	    // use getRealChild() to ignore abstract components e.g. keep-alive
	    var child = getRealChild(rawChild);
	    /* istanbul ignore if */
	    if (!child) {
	      return rawChild
	    }
	
	    if (this._leaving) {
	      return placeholder(h, rawChild)
	    }
	
	    // ensure a key that is unique to the vnode type and to this transition
	    // component instance. This key will be used to remove pending leaving nodes
	    // during entering.
	    var id = "__transition-" + (this._uid) + "-";
	    child.key = child.key == null
	      ? id + child.tag
	      : isPrimitive(child.key)
	        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
	        : child.key;
	
	    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
	    var oldRawChild = this._vnode;
	    var oldChild = getRealChild(oldRawChild);
	
	    // mark v-show
	    // so that the transition module can hand over the control to the directive
	    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {
	      child.data.show = true;
	    }
	
	    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {
	      // replace old child transition data with fresh one
	      // important for dynamic transitions!
	      var oldData = oldChild && (oldChild.data.transition = extend({}, data));
	      // handle transition mode
	      if (mode === 'out-in') {
	        // return placeholder node and queue update when leave finishes
	        this._leaving = true;
	        mergeVNodeHook(oldData, 'afterLeave', function () {
	          this$1._leaving = false;
	          this$1.$forceUpdate();
	        });
	        return placeholder(h, rawChild)
	      } else if (mode === 'in-out') {
	        var delayedLeave;
	        var performLeave = function () { delayedLeave(); };
	        mergeVNodeHook(data, 'afterEnter', performLeave);
	        mergeVNodeHook(data, 'enterCancelled', performLeave);
	        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
	      }
	    }
	
	    return rawChild
	  }
	};
	
	/*  */
	
	// Provides transition support for list items.
	// supports move transitions using the FLIP technique.
	
	// Because the vdom's children update algorithm is "unstable" - i.e.
	// it doesn't guarantee the relative positioning of removed elements,
	// we force transition-group to update its children into two passes:
	// in the first pass, we remove all nodes that need to be removed,
	// triggering their leaving transition; in the second pass, we insert/move
	// into the final desired state. This way in the second pass removed
	// nodes will remain where they should be.
	
	var props = extend({
	  tag: String,
	  moveClass: String
	}, transitionProps);
	
	delete props.mode;
	
	var TransitionGroup = {
	  props: props,
	
	  render: function render (h) {
	    var tag = this.tag || this.$vnode.data.tag || 'span';
	    var map = Object.create(null);
	    var prevChildren = this.prevChildren = this.children;
	    var rawChildren = this.$slots.default || [];
	    var children = this.children = [];
	    var transitionData = extractTransitionData(this);
	
	    for (var i = 0; i < rawChildren.length; i++) {
	      var c = rawChildren[i];
	      if (c.tag) {
	        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
	          children.push(c);
	          map[c.key] = c
	          ;(c.data || (c.data = {})).transition = transitionData;
	        } else if (process.env.NODE_ENV !== 'production') {
	          var opts = c.componentOptions;
	          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
	          warn(("<transition-group> children must be keyed: <" + name + ">"));
	        }
	      }
	    }
	
	    if (prevChildren) {
	      var kept = [];
	      var removed = [];
	      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
	        var c$1 = prevChildren[i$1];
	        c$1.data.transition = transitionData;
	        c$1.data.pos = c$1.elm.getBoundingClientRect();
	        if (map[c$1.key]) {
	          kept.push(c$1);
	        } else {
	          removed.push(c$1);
	        }
	      }
	      this.kept = h(tag, null, kept);
	      this.removed = removed;
	    }
	
	    return h(tag, null, children)
	  },
	
	  beforeUpdate: function beforeUpdate () {
	    // force removing pass
	    this.__patch__(
	      this._vnode,
	      this.kept,
	      false, // hydrating
	      true // removeOnly (!important, avoids unnecessary moves)
	    );
	    this._vnode = this.kept;
	  },
	
	  updated: function updated () {
	    var children = this.prevChildren;
	    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
	    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
	      return
	    }
	
	    // we divide the work into three loops to avoid mixing DOM reads and writes
	    // in each iteration - which helps prevent layout thrashing.
	    children.forEach(callPendingCbs);
	    children.forEach(recordPosition);
	    children.forEach(applyTranslation);
	
	    // force reflow to put everything in position
	    var body = document.body;
	    var f = body.offsetHeight; // eslint-disable-line
	
	    children.forEach(function (c) {
	      if (c.data.moved) {
	        var el = c.elm;
	        var s = el.style;
	        addTransitionClass(el, moveClass);
	        s.transform = s.WebkitTransform = s.transitionDuration = '';
	        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
	          if (!e || /transform$/.test(e.propertyName)) {
	            el.removeEventListener(transitionEndEvent, cb);
	            el._moveCb = null;
	            removeTransitionClass(el, moveClass);
	          }
	        });
	      }
	    });
	  },
	
	  methods: {
	    hasMove: function hasMove (el, moveClass) {
	      /* istanbul ignore if */
	      if (!hasTransition) {
	        return false
	      }
	      if (this._hasMove != null) {
	        return this._hasMove
	      }
	      // Detect whether an element with the move class applied has
	      // CSS transitions. Since the element may be inside an entering
	      // transition at this very moment, we make a clone of it and remove
	      // all other transition classes applied to ensure only the move class
	      // is applied.
	      var clone = el.cloneNode();
	      if (el._transitionClasses) {
	        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
	      }
	      addClass(clone, moveClass);
	      clone.style.display = 'none';
	      this.$el.appendChild(clone);
	      var info = getTransitionInfo(clone);
	      this.$el.removeChild(clone);
	      return (this._hasMove = info.hasTransform)
	    }
	  }
	};
	
	function callPendingCbs (c) {
	  /* istanbul ignore if */
	  if (c.elm._moveCb) {
	    c.elm._moveCb();
	  }
	  /* istanbul ignore if */
	  if (c.elm._enterCb) {
	    c.elm._enterCb();
	  }
	}
	
	function recordPosition (c) {
	  c.data.newPos = c.elm.getBoundingClientRect();
	}
	
	function applyTranslation (c) {
	  var oldPos = c.data.pos;
	  var newPos = c.data.newPos;
	  var dx = oldPos.left - newPos.left;
	  var dy = oldPos.top - newPos.top;
	  if (dx || dy) {
	    c.data.moved = true;
	    var s = c.elm.style;
	    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
	    s.transitionDuration = '0s';
	  }
	}
	
	var platformComponents = {
	  Transition: Transition,
	  TransitionGroup: TransitionGroup
	};
	
	/*  */
	
	// install platform specific utils
	Vue$3.config.mustUseProp = mustUseProp;
	Vue$3.config.isReservedTag = isReservedTag;
	Vue$3.config.isReservedAttr = isReservedAttr;
	Vue$3.config.getTagNamespace = getTagNamespace;
	Vue$3.config.isUnknownElement = isUnknownElement;
	
	// install platform runtime directives & components
	extend(Vue$3.options.directives, platformDirectives);
	extend(Vue$3.options.components, platformComponents);
	
	// install platform patch function
	Vue$3.prototype.__patch__ = inBrowser ? patch : noop;
	
	// public mount method
	Vue$3.prototype.$mount = function (
	  el,
	  hydrating
	) {
	  el = el && inBrowser ? query(el) : undefined;
	  return mountComponent(this, el, hydrating)
	};
	
	// devtools global hook
	/* istanbul ignore next */
	setTimeout(function () {
	  if (config.devtools) {
	    if (devtools) {
	      devtools.emit('init', Vue$3);
	    } else if (process.env.NODE_ENV !== 'production' && isChrome) {
	      console[console.info ? 'info' : 'log'](
	        'Download the Vue Devtools extension for a better development experience:\n' +
	        'https://github.com/vuejs/vue-devtools'
	      );
	    }
	  }
	  if (process.env.NODE_ENV !== 'production' &&
	    config.productionTip !== false &&
	    inBrowser && typeof console !== 'undefined'
	  ) {
	    console[console.info ? 'info' : 'log'](
	      "You are running Vue in development mode.\n" +
	      "Make sure to turn on production mode when deploying for production.\n" +
	      "See more tips at https://vuejs.org/guide/deployment.html"
	    );
	  }
	}, 0);
	
	/*  */
	
	module.exports = Vue$3;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27), (function() { return this; }())))

/***/ }),
/* 39 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = [{
		type: 'selection',
		width: 60,
		align: 'center',
		fixed: 'left',
		className: 'checkbox'
	}, {
		title: 'ID',
		key: 'id',
		width: 60,
		align: 'center',
		fixed: 'left'
	}, {
		title: 'Фото',
		key: 'photo',
		render: function render(h, params) {
			return h('div', [h('img', {
				attrs: {
					src: params.row.photos[1],
					class: 'models-table__photo'
				}
			})]);
		},
		width: 130,
		className: 'photo'
	}, {
		title: 'Имя',
		key: 'name',
		width: 100
	}, {
		title: 'Телефон',
		key: 'phone',
		width: 150
	}, {
		title: 'Возраст',
		key: 'age',
		width: 90
	}, {
		title: 'Грудь',
		key: 'boobs',
		width: 80
	}, {
		title: 'Рост',
		key: 'height',
		width: 80
	}, {
		title: 'Вес',
		key: 'weight',
		width: 80
	}, {
		title: 'О себе',
		key: 'description',
		ellipsis: false,
		className: 'description'
	}];

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function () {
		if (!document.getElementById('call-order')) return false;
	
		var app = new Vue({
			el: '#reviews-form',
			data: {
				isShowModal: false,
				formFields: {
					name: null,
					age: null,
					text: null
				}
			},
			methods: {
				showModal: function showModal() {
					this.isShowModal = true;
				},
				hideModal: function hideModal() {
					this.isShowModal = false;
				},
				submitForm: function submitForm(e) {
					var _this = this;
	
					var form = e.target;
					var data = new FormData(form);
					(0, _helpers.send)(form.action, data, function () {
						_this.switchContent('success');
					}, function () {
						_this.switchContent('error');
					});
				}
			},
			mounted: function mounted() {
				var _this2 = this;
	
				// Найти все кнопки активирующие попап на странице
				var btns = document.querySelectorAll('.reviews__btn');
				(0, _helpers.forEachDom)(btns, function (btn) {
					btn.addEventListener('click', function (e) {
						_this2.showModal();
					});
				});
			},
	
			watch: {
				isShowModal: function isShowModal(val) {
					console.log(val);
					document.body.style.overflow = val ? 'hidden' : '';
				}
			}
		});
	
		return app;
	};
	
	__webpack_require__(15);
	
	var _inputmask = __webpack_require__(1);
	
	var _inputmask2 = _interopRequireDefault(_inputmask);
	
	var _helpers = __webpack_require__(14);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,